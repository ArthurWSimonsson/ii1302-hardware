
Door Kommunication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abf0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b68  0800ad78  0800ad78  0001ad78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8e0  0800b8e0  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8e0  0800b8e0  0001b8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8e8  0800b8e8  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8e8  0800b8e8  0001b8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8ec  0800b8ec  0001b8ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800b8f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dfc  200000ac  0800b99c  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ea8  0800b99c  00020ea8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030e80  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005c74  00000000  00000000  00050f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001cc0  00000000  00000000  00056bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a08  00000000  00000000  00058890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f98f  00000000  00000000  0005a298  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021dd5  00000000  00000000  00089c27  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00104134  00000000  00000000  000ab9fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001afb30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007594  00000000  00000000  001afbac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000ac 	.word	0x200000ac
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ad60 	.word	0x0800ad60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b0 	.word	0x200000b0
 80001c4:	0800ad60 	.word	0x0800ad60

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <draw_QR>:
#include <stdint.h>
#include "ssd1306.h"

void draw_QR(uint8_t lines[29][29]) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08c      	sub	sp, #48	; 0x30
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t x = 60;
 80004d0:	233c      	movs	r3, #60	; 0x3c
 80004d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t y = 3;
 80004d6:	2303      	movs	r3, #3
 80004d8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t box[31] = { };
 80004dc:	f107 030c 	add.w	r3, r7, #12
 80004e0:	221f      	movs	r2, #31
 80004e2:	2100      	movs	r1, #0
 80004e4:	4618      	mov	r0, r3
 80004e6:	f00a fb79 	bl	800abdc <memset>
	draw_line(box, x, y-2);
 80004ea:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80004ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80004f2:	1e9a      	subs	r2, r3, #2
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 f86e 	bl	80005da <draw_line>
	draw_line(box, x, y+58);
 80004fe:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8000502:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000506:	f103 023a 	add.w	r2, r3, #58	; 0x3a
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	4618      	mov	r0, r3
 8000510:	f000 f863 	bl	80005da <draw_line>
	draw_line_down(box, x-2, y-2);
 8000514:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000518:	1e99      	subs	r1, r3, #2
 800051a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800051e:	1e9a      	subs	r2, r3, #2
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	4618      	mov	r0, r3
 8000526:	f000 f834 	bl	8000592 <draw_line_down>
	draw_line_down(box, x+58, y-2);
 800052a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800052e:	f103 013a 	add.w	r1, r3, #58	; 0x3a
 8000532:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000536:	1e9a      	subs	r2, r3, #2
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	4618      	mov	r0, r3
 800053e:	f000 f828 	bl	8000592 <draw_line_down>

	for (i = 0; i < 29; i++) {
 8000542:	2300      	movs	r3, #0
 8000544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000548:	e019      	b.n	800057e <draw_QR+0xb6>
		draw_line(lines[i], x, y);
 800054a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800054e:	4613      	mov	r3, r2
 8000550:	00db      	lsls	r3, r3, #3
 8000552:	1a9b      	subs	r3, r3, r2
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	4413      	add	r3, r2
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	4413      	add	r3, r2
 800055c:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8000560:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8000564:	4618      	mov	r0, r3
 8000566:	f000 f838 	bl	80005da <draw_line>
		y = y + 2;
 800056a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800056e:	3302      	adds	r3, #2
 8000570:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (i = 0; i < 29; i++) {
 8000574:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000578:	3301      	adds	r3, #1
 800057a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800057e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000582:	2b1c      	cmp	r3, #28
 8000584:	d9e1      	bls.n	800054a <draw_QR+0x82>
	}
	ssd1306_UpdateScreen();
 8000586:	f001 f959 	bl	800183c <ssd1306_UpdateScreen>
}
 800058a:	bf00      	nop
 800058c:	3730      	adds	r7, #48	; 0x30
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <draw_line_down>:
void draw_line_down(uint8_t line[29], uint8_t x, uint8_t y) {
 8000592:	b580      	push	{r7, lr}
 8000594:	b084      	sub	sp, #16
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	460b      	mov	r3, r1
 800059c:	70fb      	strb	r3, [r7, #3]
 800059e:	4613      	mov	r3, r2
 80005a0:	70bb      	strb	r3, [r7, #2]
	uint8_t i;
	for (i = 0; i < 31; i++) {
 80005a2:	2300      	movs	r3, #0
 80005a4:	73fb      	strb	r3, [r7, #15]
 80005a6:	e011      	b.n	80005cc <draw_line_down+0x3a>
		if (line[i] == 0) {
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d105      	bne.n	80005c0 <draw_line_down+0x2e>
			draw_square(x, y);
 80005b4:	78fb      	ldrb	r3, [r7, #3]
 80005b6:	78ba      	ldrb	r2, [r7, #2]
 80005b8:	4611      	mov	r1, r2
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f831 	bl	8000622 <draw_square>

		}
		y = y + 2;
 80005c0:	78bb      	ldrb	r3, [r7, #2]
 80005c2:	3302      	adds	r3, #2
 80005c4:	70bb      	strb	r3, [r7, #2]
	for (i = 0; i < 31; i++) {
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	3301      	adds	r3, #1
 80005ca:	73fb      	strb	r3, [r7, #15]
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	2b1e      	cmp	r3, #30
 80005d0:	d9ea      	bls.n	80005a8 <draw_line_down+0x16>
	}

}
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <draw_line>:
void draw_line(uint8_t line[29], uint8_t x, uint8_t y) {
 80005da:	b580      	push	{r7, lr}
 80005dc:	b084      	sub	sp, #16
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
 80005e2:	460b      	mov	r3, r1
 80005e4:	70fb      	strb	r3, [r7, #3]
 80005e6:	4613      	mov	r3, r2
 80005e8:	70bb      	strb	r3, [r7, #2]
	uint8_t i;
	for (i = 0; i < 29; i++) {
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]
 80005ee:	e011      	b.n	8000614 <draw_line+0x3a>
		if (line[i] == 0) {
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d105      	bne.n	8000608 <draw_line+0x2e>
			draw_square(x, y);
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	78ba      	ldrb	r2, [r7, #2]
 8000600:	4611      	mov	r1, r2
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f80d 	bl	8000622 <draw_square>

		}
		x = x + 2;
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	3302      	adds	r3, #2
 800060c:	70fb      	strb	r3, [r7, #3]
	for (i = 0; i < 29; i++) {
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	3301      	adds	r3, #1
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	2b1c      	cmp	r3, #28
 8000618:	d9ea      	bls.n	80005f0 <draw_line+0x16>
	}

}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <draw_square>:
void draw_square(uint8_t x, uint8_t y) {
 8000622:	b580      	push	{r7, lr}
 8000624:	b084      	sub	sp, #16
 8000626:	af00      	add	r7, sp, #0
 8000628:	4603      	mov	r3, r0
 800062a:	460a      	mov	r2, r1
 800062c:	71fb      	strb	r3, [r7, #7]
 800062e:	4613      	mov	r3, r2
 8000630:	71bb      	strb	r3, [r7, #6]
	uint8_t i = x;
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	73fb      	strb	r3, [r7, #15]
	uint8_t j = y;
 8000636:	79bb      	ldrb	r3, [r7, #6]
 8000638:	73bb      	strb	r3, [r7, #14]
	uint8_t size = 2;
 800063a:	2302      	movs	r3, #2
 800063c:	737b      	strb	r3, [r7, #13]
	while (i < (x + size)) {
 800063e:	e014      	b.n	800066a <draw_square+0x48>
		j = y;
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	73bb      	strb	r3, [r7, #14]
		while (j < (y + size)) {
 8000644:	e008      	b.n	8000658 <draw_square+0x36>
			ssd1306_DrawPixel(i, j, White);
 8000646:	7bb9      	ldrb	r1, [r7, #14]
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	2201      	movs	r2, #1
 800064c:	4618      	mov	r0, r3
 800064e:	f001 f91b 	bl	8001888 <ssd1306_DrawPixel>
			j++;
 8000652:	7bbb      	ldrb	r3, [r7, #14]
 8000654:	3301      	adds	r3, #1
 8000656:	73bb      	strb	r3, [r7, #14]
		while (j < (y + size)) {
 8000658:	7bba      	ldrb	r2, [r7, #14]
 800065a:	79b9      	ldrb	r1, [r7, #6]
 800065c:	7b7b      	ldrb	r3, [r7, #13]
 800065e:	440b      	add	r3, r1
 8000660:	429a      	cmp	r2, r3
 8000662:	dbf0      	blt.n	8000646 <draw_square+0x24>
		}
		i++;
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	3301      	adds	r3, #1
 8000668:	73fb      	strb	r3, [r7, #15]
	while (i < (x + size)) {
 800066a:	7bfa      	ldrb	r2, [r7, #15]
 800066c:	79f9      	ldrb	r1, [r7, #7]
 800066e:	7b7b      	ldrb	r3, [r7, #13]
 8000670:	440b      	add	r3, r1
 8000672:	429a      	cmp	r2, r3
 8000674:	dbe4      	blt.n	8000640 <draw_square+0x1e>
	}

}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <test_menu>:
	draw_QR(line_QR);
//uint8_t line[29] = { 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1 };
//draw_line(line);
//draw_square(5,5);
}
void test_menu(void) {
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0
	menu_state();
 8000682:	f000 f97d 	bl	8000980 <menu_state>
	cursor_init();
 8000686:	f000 f80b 	bl	80006a0 <cursor_init>
	while (1) {
		cursor();
 800068a:	f000 f821 	bl	80006d0 <cursor>
 800068e:	e7fc      	b.n	800068a <test_menu+0xc>

08000690 <test_disp>:
//HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
	HAL_Delay(10000);
	inb_disp_clear();
	inb_disp_write("end");
}
void test_disp(void) {
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8000694:	f001 f842 	bl	800171c <ssd1306_Init>
//
	test_menu();
 8000698:	f7ff fff1 	bl	800067e <test_menu>
//I2C_Scan();
//test_wifi_uart();
//test_joystick();
//test_QR();
//test_contrast();
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}

080006a0 <cursor_init>:

#define MAIN 		0
#define QR 			1
#define LOG 		2

void cursor_init(void) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	BSP_JOY_Init(JOY_MODE_GPIO);
 80006a4:	2000      	movs	r0, #0
 80006a6:	f001 fa15 	bl	8001ad4 <BSP_JOY_Init>
	ssd1306_SetCursor(32, 54);
 80006aa:	2136      	movs	r1, #54	; 0x36
 80006ac:	2020      	movs	r0, #32
 80006ae:	f001 f9f9 	bl	8001aa4 <ssd1306_SetCursor>
	ssd1306_WriteString("<", Font_M, White);
 80006b2:	4a05      	ldr	r2, [pc, #20]	; (80006c8 <cursor_init+0x28>)
 80006b4:	2301      	movs	r3, #1
 80006b6:	ca06      	ldmia	r2, {r1, r2}
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <cursor_init+0x2c>)
 80006ba:	f001 f9cd 	bl	8001a58 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80006be:	f001 f8bd 	bl	800183c <ssd1306_UpdateScreen>
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000000 	.word	0x20000000
 80006cc:	0800ad78 	.word	0x0800ad78

080006d0 <cursor>:
uint8_t cursor(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
	uint8_t rows[] = { 32, 100 };
 80006d6:	4b2d      	ldr	r3, [pc, #180]	; (800078c <cursor+0xbc>)
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	80bb      	strh	r3, [r7, #4]
	uint8_t *p;
	p = rows;
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	60bb      	str	r3, [r7, #8]
	uint8_t selection = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	73fb      	strb	r3, [r7, #15]
	while (1) {
		JOYState_TypeDef state = BSP_JOY_GetState();
 80006e4:	f001 faaa 	bl	8001c3c <BSP_JOY_GetState>
 80006e8:	4603      	mov	r3, r0
 80006ea:	71fb      	strb	r3, [r7, #7]
		if (state == JOY_UP || state == JOY_DOWN) {
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	d002      	beq.n	80006f8 <cursor+0x28>
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b03      	cmp	r3, #3
 80006f6:	d141      	bne.n	800077c <cursor+0xac>
			if (selection == 0) {
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d11b      	bne.n	8000736 <cursor+0x66>
				selection = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	73fb      	strb	r3, [r7, #15]
				ssd1306_SetCursor(32, 54);
 8000702:	2136      	movs	r1, #54	; 0x36
 8000704:	2020      	movs	r0, #32
 8000706:	f001 f9cd 	bl	8001aa4 <ssd1306_SetCursor>
				ssd1306_WriteString(" ", Font_M, White);
 800070a:	4a21      	ldr	r2, [pc, #132]	; (8000790 <cursor+0xc0>)
 800070c:	2301      	movs	r3, #1
 800070e:	ca06      	ldmia	r2, {r1, r2}
 8000710:	4820      	ldr	r0, [pc, #128]	; (8000794 <cursor+0xc4>)
 8000712:	f001 f9a1 	bl	8001a58 <ssd1306_WriteString>
				ssd1306_SetCursor(96, 54);
 8000716:	2136      	movs	r1, #54	; 0x36
 8000718:	2060      	movs	r0, #96	; 0x60
 800071a:	f001 f9c3 	bl	8001aa4 <ssd1306_SetCursor>
				ssd1306_WriteString("<", Font_M, White);
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <cursor+0xc0>)
 8000720:	2301      	movs	r3, #1
 8000722:	ca06      	ldmia	r2, {r1, r2}
 8000724:	481c      	ldr	r0, [pc, #112]	; (8000798 <cursor+0xc8>)
 8000726:	f001 f997 	bl	8001a58 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 800072a:	f001 f887 	bl	800183c <ssd1306_UpdateScreen>
				HAL_Delay(200);
 800072e:	20c8      	movs	r0, #200	; 0xc8
 8000730:	f001 fc7c 	bl	800202c <HAL_Delay>
 8000734:	e022      	b.n	800077c <cursor+0xac>

			} else {
				if (selection == 1) {
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d11b      	bne.n	8000774 <cursor+0xa4>
					selection = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	73fb      	strb	r3, [r7, #15]
					ssd1306_SetCursor(32, 54);
 8000740:	2136      	movs	r1, #54	; 0x36
 8000742:	2020      	movs	r0, #32
 8000744:	f001 f9ae 	bl	8001aa4 <ssd1306_SetCursor>
					ssd1306_WriteString("<", Font_M, White);
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <cursor+0xc0>)
 800074a:	2301      	movs	r3, #1
 800074c:	ca06      	ldmia	r2, {r1, r2}
 800074e:	4812      	ldr	r0, [pc, #72]	; (8000798 <cursor+0xc8>)
 8000750:	f001 f982 	bl	8001a58 <ssd1306_WriteString>
					ssd1306_SetCursor(96, 54);
 8000754:	2136      	movs	r1, #54	; 0x36
 8000756:	2060      	movs	r0, #96	; 0x60
 8000758:	f001 f9a4 	bl	8001aa4 <ssd1306_SetCursor>
					ssd1306_WriteString(" ", Font_M, White);
 800075c:	4a0c      	ldr	r2, [pc, #48]	; (8000790 <cursor+0xc0>)
 800075e:	2301      	movs	r3, #1
 8000760:	ca06      	ldmia	r2, {r1, r2}
 8000762:	480c      	ldr	r0, [pc, #48]	; (8000794 <cursor+0xc4>)
 8000764:	f001 f978 	bl	8001a58 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8000768:	f001 f868 	bl	800183c <ssd1306_UpdateScreen>
					HAL_Delay(200);
 800076c:	20c8      	movs	r0, #200	; 0xc8
 800076e:	f001 fc5d 	bl	800202c <HAL_Delay>
 8000772:	e003      	b.n	800077c <cursor+0xac>
				} else {
					selection = -1;
 8000774:	23ff      	movs	r3, #255	; 0xff
 8000776:	73fb      	strb	r3, [r7, #15]
					return selection;
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	e003      	b.n	8000784 <cursor+0xb4>
				}
			}
		}
		if (state == JOY_SEL) {
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1b0      	bne.n	80006e4 <cursor+0x14>
			return selection;
 8000782:	7bfb      	ldrb	r3, [r7, #15]
		}

	}
}
 8000784:	4618      	mov	r0, r3
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	0800ad80 	.word	0x0800ad80
 8000790:	20000000 	.word	0x20000000
 8000794:	0800ad7c 	.word	0x0800ad7c
 8000798:	0800ad78 	.word	0x0800ad78

0800079c <menu_log>:
uint8_t menu_log(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f001 f828 	bl	80017f8 <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 80007a8:	2100      	movs	r1, #0
 80007aa:	2002      	movs	r0, #2
 80007ac:	f001 f97a 	bl	8001aa4 <ssd1306_SetCursor>
	ssd1306_WriteString("MESSAGE 1", Font_M, White);
 80007b0:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <menu_log+0x88>)
 80007b2:	2301      	movs	r3, #1
 80007b4:	ca06      	ldmia	r2, {r1, r2}
 80007b6:	481c      	ldr	r0, [pc, #112]	; (8000828 <menu_log+0x8c>)
 80007b8:	f001 f94e 	bl	8001a58 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 10);
 80007bc:	210a      	movs	r1, #10
 80007be:	2002      	movs	r0, #2
 80007c0:	f001 f970 	bl	8001aa4 <ssd1306_SetCursor>
	ssd1306_WriteString("MESSAGE 2", Font_M, White);
 80007c4:	4a17      	ldr	r2, [pc, #92]	; (8000824 <menu_log+0x88>)
 80007c6:	2301      	movs	r3, #1
 80007c8:	ca06      	ldmia	r2, {r1, r2}
 80007ca:	4818      	ldr	r0, [pc, #96]	; (800082c <menu_log+0x90>)
 80007cc:	f001 f944 	bl	8001a58 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 10 + 10);
 80007d0:	2114      	movs	r1, #20
 80007d2:	2002      	movs	r0, #2
 80007d4:	f001 f966 	bl	8001aa4 <ssd1306_SetCursor>
	ssd1306_WriteString("MESSAGE 3", Font_M, White);
 80007d8:	4a12      	ldr	r2, [pc, #72]	; (8000824 <menu_log+0x88>)
 80007da:	2301      	movs	r3, #1
 80007dc:	ca06      	ldmia	r2, {r1, r2}
 80007de:	4814      	ldr	r0, [pc, #80]	; (8000830 <menu_log+0x94>)
 80007e0:	f001 f93a 	bl	8001a58 <ssd1306_WriteString>

	ssd1306_SetCursor(2, 54);
 80007e4:	2136      	movs	r1, #54	; 0x36
 80007e6:	2002      	movs	r0, #2
 80007e8:	f001 f95c 	bl	8001aa4 <ssd1306_SetCursor>
	ssd1306_WriteString("BACK", Font_M, White);
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <menu_log+0x88>)
 80007ee:	2301      	movs	r3, #1
 80007f0:	ca06      	ldmia	r2, {r1, r2}
 80007f2:	4810      	ldr	r0, [pc, #64]	; (8000834 <menu_log+0x98>)
 80007f4:	f001 f930 	bl	8001a58 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80007f8:	f001 f820 	bl	800183c <ssd1306_UpdateScreen>
	cursor_init();
 80007fc:	f7ff ff50 	bl	80006a0 <cursor_init>
	BSP_JOY_Init(JOY_MODE_GPIO);
 8000800:	2000      	movs	r0, #0
 8000802:	f001 f967 	bl	8001ad4 <BSP_JOY_Init>
	uint8_t selection = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	71fb      	strb	r3, [r7, #7]
	while (1) {
		JOYState_TypeDef state = BSP_JOY_GetState();
 800080a:	f001 fa17 	bl	8001c3c <BSP_JOY_GetState>
 800080e:	4603      	mov	r3, r0
 8000810:	71bb      	strb	r3, [r7, #6]
		if (state == JOY_SEL) {
 8000812:	79bb      	ldrb	r3, [r7, #6]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d1f8      	bne.n	800080a <menu_log+0x6e>
			return MAIN;
 8000818:	2300      	movs	r3, #0
		}
	}

	HAL_Delay(100);
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000000 	.word	0x20000000
 8000828:	0800ad84 	.word	0x0800ad84
 800082c:	0800ad90 	.word	0x0800ad90
 8000830:	0800ad9c 	.word	0x0800ad9c
 8000834:	0800ada8 	.word	0x0800ada8

08000838 <menu_QR>:

uint8_t menu_QR(void) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 800083e:	2000      	movs	r0, #0
 8000840:	f000 ffda 	bl	80017f8 <ssd1306_Fill>
	draw_QR(line_QR);
 8000844:	4821      	ldr	r0, [pc, #132]	; (80008cc <menu_QR+0x94>)
 8000846:	f7ff fe3f 	bl	80004c8 <draw_QR>
	ssd1306_SetCursor(2, 54);
 800084a:	2136      	movs	r1, #54	; 0x36
 800084c:	2002      	movs	r0, #2
 800084e:	f001 f929 	bl	8001aa4 <ssd1306_SetCursor>
	ssd1306_WriteString("BACK", Font_M, White);
 8000852:	4a1f      	ldr	r2, [pc, #124]	; (80008d0 <menu_QR+0x98>)
 8000854:	2301      	movs	r3, #1
 8000856:	ca06      	ldmia	r2, {r1, r2}
 8000858:	481e      	ldr	r0, [pc, #120]	; (80008d4 <menu_QR+0x9c>)
 800085a:	f001 f8fd 	bl	8001a58 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800085e:	f000 ffed 	bl	800183c <ssd1306_UpdateScreen>
	cursor_init();
 8000862:	f7ff ff1d 	bl	80006a0 <cursor_init>
	BSP_JOY_Init(JOY_MODE_GPIO);
 8000866:	2000      	movs	r0, #0
 8000868:	f001 f934 	bl	8001ad4 <BSP_JOY_Init>
	uint8_t selection = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	71bb      	strb	r3, [r7, #6]
	uint8_t value = 0xFF;
 8000870:	23ff      	movs	r3, #255	; 0xff
 8000872:	71fb      	strb	r3, [r7, #7]
	while (1) {
		JOYState_TypeDef state = BSP_JOY_GetState();
 8000874:	f001 f9e2 	bl	8001c3c <BSP_JOY_GetState>
 8000878:	4603      	mov	r3, r0
 800087a:	717b      	strb	r3, [r7, #5]
		if (state == JOY_SEL) {
 800087c:	797b      	ldrb	r3, [r7, #5]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d101      	bne.n	8000886 <menu_QR+0x4e>
			return MAIN;
 8000882:	2300      	movs	r3, #0
 8000884:	e01d      	b.n	80008c2 <menu_QR+0x8a>
		}
		if (state == JOY_RIGHT) {
 8000886:	797b      	ldrb	r3, [r7, #5]
 8000888:	2b02      	cmp	r3, #2
 800088a:	d109      	bne.n	80008a0 <menu_QR+0x68>
			value = value + 16;
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	3310      	adds	r3, #16
 8000890:	71fb      	strb	r3, [r7, #7]
			ssd1306_WriteCommand(0x81);
 8000892:	2081      	movs	r0, #129	; 0x81
 8000894:	f000 ff10 	bl	80016b8 <ssd1306_WriteCommand>
			ssd1306_WriteCommand(value);
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	4618      	mov	r0, r3
 800089c:	f000 ff0c 	bl	80016b8 <ssd1306_WriteCommand>
		}
		if (state == JOY_LEFT) {
 80008a0:	797b      	ldrb	r3, [r7, #5]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d109      	bne.n	80008ba <menu_QR+0x82>
			value = value - 16;
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	3b10      	subs	r3, #16
 80008aa:	71fb      	strb	r3, [r7, #7]
			ssd1306_WriteCommand(0x81);
 80008ac:	2081      	movs	r0, #129	; 0x81
 80008ae:	f000 ff03 	bl	80016b8 <ssd1306_WriteCommand>
			ssd1306_WriteCommand(value);
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 feff 	bl	80016b8 <ssd1306_WriteCommand>
		}
		HAL_Delay(100);
 80008ba:	2064      	movs	r0, #100	; 0x64
 80008bc:	f001 fbb6 	bl	800202c <HAL_Delay>
	while (1) {
 80008c0:	e7d8      	b.n	8000874 <menu_QR+0x3c>
	}
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	0800adcc 	.word	0x0800adcc
 80008d0:	20000000 	.word	0x20000000
 80008d4:	0800ada8 	.word	0x0800ada8

080008d8 <menu_main>:

uint8_t menu_main(void) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80008de:	2000      	movs	r0, #0
 80008e0:	f000 ff8a 	bl	80017f8 <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 80008e4:	2100      	movs	r1, #0
 80008e6:	2002      	movs	r0, #2
 80008e8:	f001 f8dc 	bl	8001aa4 <ssd1306_SetCursor>
	ssd1306_WriteString("MESSAGE HERE", Font_M, White);
 80008ec:	4a20      	ldr	r2, [pc, #128]	; (8000970 <menu_main+0x98>)
 80008ee:	2301      	movs	r3, #1
 80008f0:	ca06      	ldmia	r2, {r1, r2}
 80008f2:	4820      	ldr	r0, [pc, #128]	; (8000974 <menu_main+0x9c>)
 80008f4:	f001 f8b0 	bl	8001a58 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 54);
 80008f8:	2136      	movs	r1, #54	; 0x36
 80008fa:	2002      	movs	r0, #2
 80008fc:	f001 f8d2 	bl	8001aa4 <ssd1306_SetCursor>
	ssd1306_WriteString("QR", Font_M, White);
 8000900:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <menu_main+0x98>)
 8000902:	2301      	movs	r3, #1
 8000904:	ca06      	ldmia	r2, {r1, r2}
 8000906:	481c      	ldr	r0, [pc, #112]	; (8000978 <menu_main+0xa0>)
 8000908:	f001 f8a6 	bl	8001a58 <ssd1306_WriteString>
	ssd1306_SetCursor(64, 54);
 800090c:	2136      	movs	r1, #54	; 0x36
 800090e:	2040      	movs	r0, #64	; 0x40
 8000910:	f001 f8c8 	bl	8001aa4 <ssd1306_SetCursor>
	ssd1306_WriteString("LOG", Font_M, White);
 8000914:	4a16      	ldr	r2, [pc, #88]	; (8000970 <menu_main+0x98>)
 8000916:	2301      	movs	r3, #1
 8000918:	ca06      	ldmia	r2, {r1, r2}
 800091a:	4818      	ldr	r0, [pc, #96]	; (800097c <menu_main+0xa4>)
 800091c:	f001 f89c 	bl	8001a58 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000920:	f000 ff8c 	bl	800183c <ssd1306_UpdateScreen>
	cursor_init();
 8000924:	f7ff febc 	bl	80006a0 <cursor_init>
	uint8_t selection = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	71fb      	strb	r3, [r7, #7]
	while (1) {
		JOYState_TypeDef state = BSP_JOY_GetState();
 800092c:	f001 f986 	bl	8001c3c <BSP_JOY_GetState>
 8000930:	4603      	mov	r3, r0
 8000932:	71bb      	strb	r3, [r7, #6]
		if (state == JOY_DOWN) {
 8000934:	79bb      	ldrb	r3, [r7, #6]
 8000936:	2b03      	cmp	r3, #3
 8000938:	d103      	bne.n	8000942 <menu_main+0x6a>
			selection = cursor();
 800093a:	f7ff fec9 	bl	80006d0 <cursor>
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
		}
		if (state == JOY_UP) {
 8000942:	79bb      	ldrb	r3, [r7, #6]
 8000944:	2b04      	cmp	r3, #4
 8000946:	d103      	bne.n	8000950 <menu_main+0x78>
			selection = cursor();
 8000948:	f7ff fec2 	bl	80006d0 <cursor>
 800094c:	4603      	mov	r3, r0
 800094e:	71fb      	strb	r3, [r7, #7]
		}
		if (state == JOY_SEL) {
 8000950:	79bb      	ldrb	r3, [r7, #6]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1ea      	bne.n	800092c <menu_main+0x54>
			if (selection == 0)
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d101      	bne.n	8000960 <menu_main+0x88>
				return QR;
 800095c:	2301      	movs	r3, #1
 800095e:	e003      	b.n	8000968 <menu_main+0x90>
			if (selection == 1)
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d1e2      	bne.n	800092c <menu_main+0x54>
				return LOG;
 8000966:	2302      	movs	r3, #2
		}
	}

	HAL_Delay(100);
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000000 	.word	0x20000000
 8000974:	0800adb0 	.word	0x0800adb0
 8000978:	0800adc0 	.word	0x0800adc0
 800097c:	0800adc4 	.word	0x0800adc4

08000980 <menu_state>:

void menu_state(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
	uint8_t state = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	71fb      	strb	r3, [r7, #7]
	BSP_JOY_Init(JOY_MODE_GPIO);
 800098a:	2000      	movs	r0, #0
 800098c:	f001 f8a2 	bl	8001ad4 <BSP_JOY_Init>
	while (1) {
		switch (state) {
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d008      	beq.n	80009a8 <menu_state+0x28>
 8000996:	2b02      	cmp	r3, #2
 8000998:	d00b      	beq.n	80009b2 <menu_state+0x32>
 800099a:	2b00      	cmp	r3, #0
 800099c:	d10e      	bne.n	80009bc <menu_state+0x3c>
		case MAIN:
			state = menu_main();
 800099e:	f7ff ff9b 	bl	80008d8 <menu_main>
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
			break;
 80009a6:	e019      	b.n	80009dc <menu_state+0x5c>
		case QR:
			state = menu_QR();
 80009a8:	f7ff ff46 	bl	8000838 <menu_QR>
 80009ac:	4603      	mov	r3, r0
 80009ae:	71fb      	strb	r3, [r7, #7]

			break;
 80009b0:	e014      	b.n	80009dc <menu_state+0x5c>
		case LOG:
			state = menu_log();
 80009b2:	f7ff fef3 	bl	800079c <menu_log>
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
			break;
 80009ba:	e00f      	b.n	80009dc <menu_state+0x5c>
		default:
			ssd1306_Fill(Black);
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 ff1b 	bl	80017f8 <ssd1306_Fill>
			ssd1306_SetCursor(2, 0);
 80009c2:	2100      	movs	r1, #0
 80009c4:	2002      	movs	r0, #2
 80009c6:	f001 f86d 	bl	8001aa4 <ssd1306_SetCursor>
			ssd1306_WriteString("MESSAGE HERE", Font_M, White);
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <menu_state+0x60>)
 80009cc:	2301      	movs	r3, #1
 80009ce:	ca06      	ldmia	r2, {r1, r2}
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <menu_state+0x64>)
 80009d2:	f001 f841 	bl	8001a58 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80009d6:	f000 ff31 	bl	800183c <ssd1306_UpdateScreen>
			break;
 80009da:	bf00      	nop
		switch (state) {
 80009dc:	e7d8      	b.n	8000990 <menu_state+0x10>
 80009de:	bf00      	nop
 80009e0:	20000000 	.word	0x20000000
 80009e4:	0800adb0 	.word	0x0800adb0

080009e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08c      	sub	sp, #48	; 0x30
 80009ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009fe:	4b92      	ldr	r3, [pc, #584]	; (8000c48 <MX_GPIO_Init+0x260>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	4a91      	ldr	r2, [pc, #580]	; (8000c48 <MX_GPIO_Init+0x260>)
 8000a04:	f043 0310 	orr.w	r3, r3, #16
 8000a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0a:	4b8f      	ldr	r3, [pc, #572]	; (8000c48 <MX_GPIO_Init+0x260>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	f003 0310 	and.w	r3, r3, #16
 8000a12:	61bb      	str	r3, [r7, #24]
 8000a14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	4b8c      	ldr	r3, [pc, #560]	; (8000c48 <MX_GPIO_Init+0x260>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	4a8b      	ldr	r2, [pc, #556]	; (8000c48 <MX_GPIO_Init+0x260>)
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a22:	4b89      	ldr	r3, [pc, #548]	; (8000c48 <MX_GPIO_Init+0x260>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2e:	4b86      	ldr	r3, [pc, #536]	; (8000c48 <MX_GPIO_Init+0x260>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4a85      	ldr	r2, [pc, #532]	; (8000c48 <MX_GPIO_Init+0x260>)
 8000a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4b83      	ldr	r3, [pc, #524]	; (8000c48 <MX_GPIO_Init+0x260>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b80      	ldr	r3, [pc, #512]	; (8000c48 <MX_GPIO_Init+0x260>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a7f      	ldr	r2, [pc, #508]	; (8000c48 <MX_GPIO_Init+0x260>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b7d      	ldr	r3, [pc, #500]	; (8000c48 <MX_GPIO_Init+0x260>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	4b7a      	ldr	r3, [pc, #488]	; (8000c48 <MX_GPIO_Init+0x260>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4a79      	ldr	r2, [pc, #484]	; (8000c48 <MX_GPIO_Init+0x260>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4b77      	ldr	r3, [pc, #476]	; (8000c48 <MX_GPIO_Init+0x260>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a76:	4b74      	ldr	r3, [pc, #464]	; (8000c48 <MX_GPIO_Init+0x260>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a73      	ldr	r2, [pc, #460]	; (8000c48 <MX_GPIO_Init+0x260>)
 8000a7c:	f043 0308 	orr.w	r3, r3, #8
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b71      	ldr	r3, [pc, #452]	; (8000c48 <MX_GPIO_Init+0x260>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0308 	and.w	r3, r3, #8
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f240 1109 	movw	r1, #265	; 0x109
 8000a94:	486d      	ldr	r0, [pc, #436]	; (8000c4c <MX_GPIO_Init+0x264>)
 8000a96:	f001 fdbd 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	210c      	movs	r1, #12
 8000a9e:	486c      	ldr	r0, [pc, #432]	; (8000c50 <MX_GPIO_Init+0x268>)
 8000aa0:	f001 fdb8 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aaa:	486a      	ldr	r0, [pc, #424]	; (8000c54 <MX_GPIO_Init+0x26c>)
 8000aac:	f001 fdb2 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab6:	4867      	ldr	r0, [pc, #412]	; (8000c54 <MX_GPIO_Init+0x26c>)
 8000ab8:	f001 fdac 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2180      	movs	r1, #128	; 0x80
 8000ac0:	4865      	ldr	r0, [pc, #404]	; (8000c58 <MX_GPIO_Init+0x270>)
 8000ac2:	f001 fda7 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000ac6:	2308      	movs	r3, #8
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	485b      	ldr	r0, [pc, #364]	; (8000c4c <MX_GPIO_Init+0x264>)
 8000ade:	f001 fbd9 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8000ae2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ae8:	4b5c      	ldr	r3, [pc, #368]	; (8000c5c <MX_GPIO_Init+0x274>)
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	4857      	ldr	r0, [pc, #348]	; (8000c54 <MX_GPIO_Init+0x26c>)
 8000af8:	f001 fbcc 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 8000afc:	2307      	movs	r3, #7
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4851      	ldr	r0, [pc, #324]	; (8000c54 <MX_GPIO_Init+0x26c>)
 8000b10:	f001 fbc0 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000b14:	2310      	movs	r3, #16
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b18:	4b50      	ldr	r3, [pc, #320]	; (8000c5c <MX_GPIO_Init+0x274>)
 8000b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2a:	f001 fbb3 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin;
 8000b2e:	2320      	movs	r3, #32
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b36:	2302      	movs	r3, #2
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_DOWN_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b44:	f001 fba6 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	483c      	ldr	r0, [pc, #240]	; (8000c50 <MX_GPIO_Init+0x268>)
 8000b60:	f001 fb98 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000b64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4833      	ldr	r0, [pc, #204]	; (8000c4c <MX_GPIO_Init+0x264>)
 8000b7e:	f001 fb89 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8000b82:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	482e      	ldr	r0, [pc, #184]	; (8000c54 <MX_GPIO_Init+0x26c>)
 8000b9c:	f001 fb7a 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8000ba0:	2305      	movs	r3, #5
 8000ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ba4:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <MX_GPIO_Init+0x274>)
 8000ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4829      	ldr	r0, [pc, #164]	; (8000c58 <MX_GPIO_Init+0x270>)
 8000bb4:	f001 fb6e 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4822      	ldr	r0, [pc, #136]	; (8000c58 <MX_GPIO_Init+0x270>)
 8000bd0:	f001 fb60 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	4819      	ldr	r0, [pc, #100]	; (8000c50 <MX_GPIO_Init+0x268>)
 8000bec:	f001 fb52 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000bf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_GPIO_Init+0x274>)
 8000bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4619      	mov	r1, r3
 8000c04:	4812      	ldr	r0, [pc, #72]	; (8000c50 <MX_GPIO_Init+0x268>)
 8000c06:	f001 fb45 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480a      	ldr	r0, [pc, #40]	; (8000c4c <MX_GPIO_Init+0x264>)
 8000c22:	f001 fb37 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_GPIO_Init+0x274>)
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_GPIO_Init+0x264>)
 8000c3a:	f001 fb2b 	bl	8002294 <HAL_GPIO_Init>

}
 8000c3e:	bf00      	nop
 8000c40:	3730      	adds	r7, #48	; 0x30
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	48001000 	.word	0x48001000
 8000c50:	48000400 	.word	0x48000400
 8000c54:	48000800 	.word	0x48000800
 8000c58:	48000c00 	.word	0x48000c00
 8000c5c:	10120000 	.word	0x10120000

08000c60 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <MX_I2C1_Init+0x74>)
 8000c66:	4a1c      	ldr	r2, [pc, #112]	; (8000cd8 <MX_I2C1_Init+0x78>)
 8000c68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_I2C1_Init+0x74>)
 8000c6c:	4a1b      	ldr	r2, [pc, #108]	; (8000cdc <MX_I2C1_Init+0x7c>)
 8000c6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c70:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_I2C1_Init+0x74>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <MX_I2C1_Init+0x74>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c7c:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_I2C1_Init+0x74>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <MX_I2C1_Init+0x74>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <MX_I2C1_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <MX_I2C1_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_I2C1_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c9a:	480e      	ldr	r0, [pc, #56]	; (8000cd4 <MX_I2C1_Init+0x74>)
 8000c9c:	f003 f8f2 	bl	8003e84 <HAL_I2C_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ca6:	f000 fa73 	bl	8001190 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000caa:	2100      	movs	r1, #0
 8000cac:	4809      	ldr	r0, [pc, #36]	; (8000cd4 <MX_I2C1_Init+0x74>)
 8000cae:	f003 fc55 	bl	800455c <HAL_I2CEx_ConfigAnalogFilter>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cb8:	f000 fa6a 	bl	8001190 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_I2C1_Init+0x74>)
 8000cc0:	f003 fc97 	bl	80045f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cca:	f000 fa61 	bl	8001190 <Error_Handler>
  }

}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200004e8 	.word	0x200004e8
 8000cd8:	40005400 	.word	0x40005400
 8000cdc:	00404c74 	.word	0x00404c74

08000ce0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <MX_I2C2_Init+0x74>)
 8000ce6:	4a1c      	ldr	r2, [pc, #112]	; (8000d58 <MX_I2C2_Init+0x78>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00404C74;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <MX_I2C2_Init+0x74>)
 8000cec:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <MX_I2C2_Init+0x7c>)
 8000cee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000cf0:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <MX_I2C2_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <MX_I2C2_Init+0x74>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_I2C2_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_I2C2_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <MX_I2C2_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_I2C2_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_I2C2_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d1a:	480e      	ldr	r0, [pc, #56]	; (8000d54 <MX_I2C2_Init+0x74>)
 8000d1c:	f003 f8b2 	bl	8003e84 <HAL_I2C_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d26:	f000 fa33 	bl	8001190 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4809      	ldr	r0, [pc, #36]	; (8000d54 <MX_I2C2_Init+0x74>)
 8000d2e:	f003 fc15 	bl	800455c <HAL_I2CEx_ConfigAnalogFilter>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d38:	f000 fa2a 	bl	8001190 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_I2C2_Init+0x74>)
 8000d40:	f003 fc57 	bl	80045f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d4a:	f000 fa21 	bl	8001190 <Error_Handler>
  }

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000534 	.word	0x20000534
 8000d58:	40005800 	.word	0x40005800
 8000d5c:	00404c74 	.word	0x00404c74

08000d60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08c      	sub	sp, #48	; 0x30
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a2e      	ldr	r2, [pc, #184]	; (8000e38 <HAL_I2C_MspInit+0xd8>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d128      	bne.n	8000dd4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <HAL_I2C_MspInit+0xdc>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	4a2d      	ldr	r2, [pc, #180]	; (8000e3c <HAL_I2C_MspInit+0xdc>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8e:	4b2b      	ldr	r3, [pc, #172]	; (8000e3c <HAL_I2C_MspInit+0xdc>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	61bb      	str	r3, [r7, #24]
 8000d98:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000d9a:	23c0      	movs	r3, #192	; 0xc0
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9e:	2312      	movs	r3, #18
 8000da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da6:	2303      	movs	r3, #3
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000daa:	2304      	movs	r3, #4
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	4619      	mov	r1, r3
 8000db4:	4822      	ldr	r0, [pc, #136]	; (8000e40 <HAL_I2C_MspInit+0xe0>)
 8000db6:	f001 fa6d 	bl	8002294 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dba:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <HAL_I2C_MspInit+0xdc>)
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dbe:	4a1f      	ldr	r2, [pc, #124]	; (8000e3c <HAL_I2C_MspInit+0xdc>)
 8000dc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <HAL_I2C_MspInit+0xdc>)
 8000dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000dd2:	e02d      	b.n	8000e30 <HAL_I2C_MspInit+0xd0>
  else if(i2cHandle->Instance==I2C2)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a1a      	ldr	r2, [pc, #104]	; (8000e44 <HAL_I2C_MspInit+0xe4>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d128      	bne.n	8000e30 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <HAL_I2C_MspInit+0xdc>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	4a16      	ldr	r2, [pc, #88]	; (8000e3c <HAL_I2C_MspInit+0xdc>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <HAL_I2C_MspInit+0xdc>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8000df6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dfc:	2312      	movs	r3, #18
 8000dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e08:	2304      	movs	r3, #4
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	4619      	mov	r1, r3
 8000e12:	480b      	ldr	r0, [pc, #44]	; (8000e40 <HAL_I2C_MspInit+0xe0>)
 8000e14:	f001 fa3e 	bl	8002294 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_I2C_MspInit+0xdc>)
 8000e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HAL_I2C_MspInit+0xdc>)
 8000e1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e22:	6593      	str	r3, [r2, #88]	; 0x58
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <HAL_I2C_MspInit+0xdc>)
 8000e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3730      	adds	r7, #48	; 0x30
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40005400 	.word	0x40005400
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	48000400 	.word	0x48000400
 8000e44:	40005800 	.word	0x40005800

08000e48 <MX_LCD_Init>:

LCD_HandleTypeDef hlcd;

/* LCD init function */
void MX_LCD_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0

  hlcd.Instance = LCD;
 8000e4c:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <MX_LCD_Init+0x68>)
 8000e4e:	4a19      	ldr	r2, [pc, #100]	; (8000eb4 <MX_LCD_Init+0x6c>)
 8000e50:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8000e52:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <MX_LCD_Init+0x68>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8000e58:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <MX_LCD_Init+0x68>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_LCD_Init+0x68>)
 8000e60:	220c      	movs	r2, #12
 8000e62:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <MX_LCD_Init+0x68>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_LCD_Init+0x68>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_LCD_Init+0x68>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_LCD_Init+0x68>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_LCD_Init+0x68>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_LCD_Init+0x68>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_LCD_Init+0x68>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <MX_LCD_Init+0x68>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_LCD_Init+0x68>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_LCD_Init+0x68>)
 8000e9c:	f003 fbf6 	bl	800468c <HAL_LCD_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_LCD_Init+0x62>
  {
    Error_Handler();
 8000ea6:	f000 f973 	bl	8001190 <Error_Handler>
  }

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000580 	.word	0x20000580
 8000eb4:	40002400 	.word	0x40002400

08000eb8 <HAL_LCD_MspInit>:

void HAL_LCD_MspInit(LCD_HandleTypeDef* lcdHandle)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08c      	sub	sp, #48	; 0x30
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(lcdHandle->Instance==LCD)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a44      	ldr	r2, [pc, #272]	; (8000fe8 <HAL_LCD_MspInit+0x130>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	f040 8081 	bne.w	8000fde <HAL_LCD_MspInit+0x126>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* LCD clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8000edc:	4b43      	ldr	r3, [pc, #268]	; (8000fec <HAL_LCD_MspInit+0x134>)
 8000ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee0:	4a42      	ldr	r2, [pc, #264]	; (8000fec <HAL_LCD_MspInit+0x134>)
 8000ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ee8:	4b40      	ldr	r3, [pc, #256]	; (8000fec <HAL_LCD_MspInit+0x134>)
 8000eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ef0:	61bb      	str	r3, [r7, #24]
 8000ef2:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef4:	4b3d      	ldr	r3, [pc, #244]	; (8000fec <HAL_LCD_MspInit+0x134>)
 8000ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef8:	4a3c      	ldr	r2, [pc, #240]	; (8000fec <HAL_LCD_MspInit+0x134>)
 8000efa:	f043 0304 	orr.w	r3, r3, #4
 8000efe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f00:	4b3a      	ldr	r3, [pc, #232]	; (8000fec <HAL_LCD_MspInit+0x134>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b37      	ldr	r3, [pc, #220]	; (8000fec <HAL_LCD_MspInit+0x134>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f10:	4a36      	ldr	r2, [pc, #216]	; (8000fec <HAL_LCD_MspInit+0x134>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f18:	4b34      	ldr	r3, [pc, #208]	; (8000fec <HAL_LCD_MspInit+0x134>)
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f24:	4b31      	ldr	r3, [pc, #196]	; (8000fec <HAL_LCD_MspInit+0x134>)
 8000f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f28:	4a30      	ldr	r2, [pc, #192]	; (8000fec <HAL_LCD_MspInit+0x134>)
 8000f2a:	f043 0302 	orr.w	r3, r3, #2
 8000f2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f30:	4b2e      	ldr	r3, [pc, #184]	; (8000fec <HAL_LCD_MspInit+0x134>)
 8000f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3c:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <HAL_LCD_MspInit+0x134>)
 8000f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f40:	4a2a      	ldr	r2, [pc, #168]	; (8000fec <HAL_LCD_MspInit+0x134>)
 8000f42:	f043 0308 	orr.w	r3, r3, #8
 8000f46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f48:	4b28      	ldr	r3, [pc, #160]	; (8000fec <HAL_LCD_MspInit+0x134>)
 8000f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4c:	f003 0308 	and.w	r3, r3, #8
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3 
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 8000f54:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000f58:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f66:	230b      	movs	r3, #11
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	4619      	mov	r1, r3
 8000f70:	481f      	ldr	r0, [pc, #124]	; (8000ff0 <HAL_LCD_MspInit+0x138>)
 8000f72:	f001 f98f 	bl	8002294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 8000f76:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000f7a:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f88:	230b      	movs	r3, #11
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f96:	f001 f97d 	bl	8002294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 8000f9a:	f24f 2333 	movw	r3, #62003	; 0xf233
 8000f9e:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin 
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000fac:	230b      	movs	r3, #11
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	480f      	ldr	r0, [pc, #60]	; (8000ff4 <HAL_LCD_MspInit+0x13c>)
 8000fb8:	f001 f96c 	bl	8002294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8000fbc:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000fc0:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000fce:	230b      	movs	r3, #11
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <HAL_LCD_MspInit+0x140>)
 8000fda:	f001 f95b 	bl	8002294 <HAL_GPIO_Init>

  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }
}
 8000fde:	bf00      	nop
 8000fe0:	3730      	adds	r7, #48	; 0x30
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40002400 	.word	0x40002400
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	48000800 	.word	0x48000800
 8000ff4:	48000400 	.word	0x48000400
 8000ff8:	48000c00 	.word	0x48000c00

08000ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001000:	f000 ff9c 	bl	8001f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001004:	f000 f81a 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001008:	f7ff fcee 	bl	80009e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800100c:	f7ff fe28 	bl	8000c60 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001010:	f7ff fe66 	bl	8000ce0 <MX_I2C2_Init>
  MX_LCD_Init();
 8001014:	f7ff ff18 	bl	8000e48 <MX_LCD_Init>
  MX_QUADSPI_Init();
 8001018:	f000 f8c2 	bl	80011a0 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800101c:	f000 f9a2 	bl	8001364 <MX_SAI1_Init>
  MX_SPI2_Init();
 8001020:	f000 fac0 	bl	80015a4 <MX_SPI2_Init>
  MX_USB_HOST_Init();
 8001024:	f009 fa94 	bl	800a550 <MX_USB_HOST_Init>
  MX_UART4_Init();
 8001028:	f000 feec 	bl	8001e04 <MX_UART4_Init>
  MX_RTC_Init();
 800102c:	f000 f922 	bl	8001274 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
#ifdef RUN_TEST_PROGRAM
  //Test_program();
  test_disp();
 8001030:	f7ff fb2e 	bl	8000690 <test_disp>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001034:	f009 fab2 	bl	800a59c <MX_USB_HOST_Process>
 8001038:	e7fc      	b.n	8001034 <main+0x38>
	...

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b0b8      	sub	sp, #224	; 0xe0
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001046:	2244      	movs	r2, #68	; 0x44
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f009 fdc6 	bl	800abdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001060:	463b      	mov	r3, r7
 8001062:	2288      	movs	r2, #136	; 0x88
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f009 fdb8 	bl	800abdc <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800106c:	f003 fbf0 	bl	8004850 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001070:	4b45      	ldr	r3, [pc, #276]	; (8001188 <SystemClock_Config+0x14c>)
 8001072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001076:	4a44      	ldr	r2, [pc, #272]	; (8001188 <SystemClock_Config+0x14c>)
 8001078:	f023 0318 	bic.w	r3, r3, #24
 800107c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001080:	231c      	movs	r3, #28
 8001082:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001086:	2301      	movs	r3, #1
 8001088:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800108c:	2301      	movs	r3, #1
 800108e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001092:	2301      	movs	r3, #1
 8001094:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800109e:	2360      	movs	r3, #96	; 0x60
 80010a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a4:	2302      	movs	r3, #2
 80010a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010aa:	2301      	movs	r3, #1
 80010ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010b0:	2301      	movs	r3, #1
 80010b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 80010b6:	2314      	movs	r3, #20
 80010b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010bc:	2307      	movs	r3, #7
 80010be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010c2:	2302      	movs	r3, #2
 80010c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010d2:	4618      	mov	r0, r3
 80010d4:	f003 fd08 	bl	8004ae8 <HAL_RCC_OscConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010de:	f000 f857 	bl	8001190 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e2:	230f      	movs	r3, #15
 80010e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e8:	2303      	movs	r3, #3
 80010ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001100:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001104:	2101      	movs	r1, #1
 8001106:	4618      	mov	r0, r3
 8001108:	f004 f89e 	bl	8005248 <HAL_RCC_ClockConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001112:	f000 f83d 	bl	8001190 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <SystemClock_Config+0x150>)
 8001118:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800111a:	2300      	movs	r3, #0
 800111c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800111e:	2300      	movs	r3, #0
 8001120:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001122:	2300      	movs	r3, #0
 8001124:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001126:	2300      	movs	r3, #0
 8001128:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800112a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800112e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001132:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001136:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001138:	2301      	movs	r3, #1
 800113a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800113c:	2301      	movs	r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001140:	2318      	movs	r3, #24
 8001142:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001144:	2307      	movs	r3, #7
 8001146:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001148:	2302      	movs	r3, #2
 800114a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800114c:	2302      	movs	r3, #2
 800114e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 8001150:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001154:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	4618      	mov	r0, r3
 800115a:	f004 fa79 	bl	8005650 <HAL_RCCEx_PeriphCLKConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8001164:	f000 f814 	bl	8001190 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001168:	f44f 7000 	mov.w	r0, #512	; 0x200
 800116c:	f003 fb8e 	bl	800488c <HAL_PWREx_ControlVoltageScaling>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0x13e>
  {
    Error_Handler();
 8001176:	f000 f80b 	bl	8001190 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800117a:	f005 f9c7 	bl	800650c <HAL_RCCEx_EnableMSIPLLMode>
}
 800117e:	bf00      	nop
 8001180:	37e0      	adds	r7, #224	; 0xe0
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000
 800118c:	000228c8 	.word	0x000228c8

08001190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_QUADSPI_Init+0x44>)
 80011a6:	4a10      	ldr	r2, [pc, #64]	; (80011e8 <MX_QUADSPI_Init+0x48>)
 80011a8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_QUADSPI_Init+0x44>)
 80011ac:	22ff      	movs	r2, #255	; 0xff
 80011ae:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_QUADSPI_Init+0x44>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MX_QUADSPI_Init+0x44>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_QUADSPI_Init+0x44>)
 80011be:	2201      	movs	r2, #1
 80011c0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <MX_QUADSPI_Init+0x44>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_QUADSPI_Init+0x44>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_QUADSPI_Init+0x44>)
 80011d0:	f003 fbc2 	bl	8004958 <HAL_QSPI_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80011da:	f7ff ffd9 	bl	8001190 <Error_Handler>
  }

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200005bc 	.word	0x200005bc
 80011e8:	a0001000 	.word	0xa0001000

080011ec <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a17      	ldr	r2, [pc, #92]	; (8001268 <HAL_QSPI_MspInit+0x7c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d128      	bne.n	8001260 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <HAL_QSPI_MspInit+0x80>)
 8001210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001212:	4a16      	ldr	r2, [pc, #88]	; (800126c <HAL_QSPI_MspInit+0x80>)
 8001214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001218:	6513      	str	r3, [r2, #80]	; 0x50
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <HAL_QSPI_MspInit+0x80>)
 800121c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800121e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_QSPI_MspInit+0x80>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	4a10      	ldr	r2, [pc, #64]	; (800126c <HAL_QSPI_MspInit+0x80>)
 800122c:	f043 0310 	orr.w	r3, r3, #16
 8001230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <HAL_QSPI_MspInit+0x80>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	f003 0310 	and.w	r3, r3, #16
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 800123e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001242:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001250:	230a      	movs	r3, #10
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <HAL_QSPI_MspInit+0x84>)
 800125c:	f001 f81a 	bl	8002294 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001260:	bf00      	nop
 8001262:	3728      	adds	r7, #40	; 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	a0001000 	.word	0xa0001000
 800126c:	40021000 	.word	0x40021000
 8001270:	48001000 	.word	0x48001000

08001274 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001288:	2300      	movs	r3, #0
 800128a:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800128c:	4b25      	ldr	r3, [pc, #148]	; (8001324 <MX_RTC_Init+0xb0>)
 800128e:	4a26      	ldr	r2, [pc, #152]	; (8001328 <MX_RTC_Init+0xb4>)
 8001290:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001292:	4b24      	ldr	r3, [pc, #144]	; (8001324 <MX_RTC_Init+0xb0>)
 8001294:	2200      	movs	r2, #0
 8001296:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001298:	4b22      	ldr	r3, [pc, #136]	; (8001324 <MX_RTC_Init+0xb0>)
 800129a:	227f      	movs	r2, #127	; 0x7f
 800129c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800129e:	4b21      	ldr	r3, [pc, #132]	; (8001324 <MX_RTC_Init+0xb0>)
 80012a0:	22ff      	movs	r2, #255	; 0xff
 80012a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012a4:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <MX_RTC_Init+0xb0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80012aa:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <MX_RTC_Init+0xb0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012b0:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <MX_RTC_Init+0xb0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012b6:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <MX_RTC_Init+0xb0>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012bc:	4819      	ldr	r0, [pc, #100]	; (8001324 <MX_RTC_Init+0xb0>)
 80012be:	f005 fbd7 	bl	8006a70 <HAL_RTC_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80012c8:	f7ff ff62 	bl	8001190 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	2201      	movs	r2, #1
 80012e4:	4619      	mov	r1, r3
 80012e6:	480f      	ldr	r0, [pc, #60]	; (8001324 <MX_RTC_Init+0xb0>)
 80012e8:	f005 fc40 	bl	8006b6c <HAL_RTC_SetTime>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80012f2:	f7ff ff4d 	bl	8001190 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80012f6:	2301      	movs	r3, #1
 80012f8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80012fa:	2301      	movs	r3, #1
 80012fc:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80012fe:	2301      	movs	r3, #1
 8001300:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001302:	2300      	movs	r3, #0
 8001304:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001306:	463b      	mov	r3, r7
 8001308:	2201      	movs	r2, #1
 800130a:	4619      	mov	r1, r3
 800130c:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_RTC_Init+0xb0>)
 800130e:	f005 fcca 	bl	8006ca6 <HAL_RTC_SetDate>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001318:	f7ff ff3a 	bl	8001190 <Error_Handler>
  }

}
 800131c:	bf00      	nop
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000600 	.word	0x20000600
 8001328:	40002800 	.word	0x40002800

0800132c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_RTC_MspInit+0x30>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d107      	bne.n	800134e <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_RTC_MspInit+0x34>)
 8001340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001344:	4a06      	ldr	r2, [pc, #24]	; (8001360 <HAL_RTC_MspInit+0x34>)
 8001346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800134a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40002800 	.word	0x40002800
 8001360:	40021000 	.word	0x40021000

08001364 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001368:	4b4d      	ldr	r3, [pc, #308]	; (80014a0 <MX_SAI1_Init+0x13c>)
 800136a:	4a4e      	ldr	r2, [pc, #312]	; (80014a4 <MX_SAI1_Init+0x140>)
 800136c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800136e:	4b4c      	ldr	r3, [pc, #304]	; (80014a0 <MX_SAI1_Init+0x13c>)
 8001370:	2200      	movs	r2, #0
 8001372:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001374:	4b4a      	ldr	r3, [pc, #296]	; (80014a0 <MX_SAI1_Init+0x13c>)
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800137a:	4b49      	ldr	r3, [pc, #292]	; (80014a0 <MX_SAI1_Init+0x13c>)
 800137c:	2240      	movs	r2, #64	; 0x40
 800137e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001380:	4b47      	ldr	r3, [pc, #284]	; (80014a0 <MX_SAI1_Init+0x13c>)
 8001382:	2200      	movs	r2, #0
 8001384:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001386:	4b46      	ldr	r3, [pc, #280]	; (80014a0 <MX_SAI1_Init+0x13c>)
 8001388:	2200      	movs	r2, #0
 800138a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800138c:	4b44      	ldr	r3, [pc, #272]	; (80014a0 <MX_SAI1_Init+0x13c>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001392:	4b43      	ldr	r3, [pc, #268]	; (80014a0 <MX_SAI1_Init+0x13c>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001398:	4b41      	ldr	r3, [pc, #260]	; (80014a0 <MX_SAI1_Init+0x13c>)
 800139a:	2200      	movs	r2, #0
 800139c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800139e:	4b40      	ldr	r3, [pc, #256]	; (80014a0 <MX_SAI1_Init+0x13c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80013a4:	4b3e      	ldr	r3, [pc, #248]	; (80014a0 <MX_SAI1_Init+0x13c>)
 80013a6:	4a40      	ldr	r2, [pc, #256]	; (80014a8 <MX_SAI1_Init+0x144>)
 80013a8:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80013aa:	4b3d      	ldr	r3, [pc, #244]	; (80014a0 <MX_SAI1_Init+0x13c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80013b0:	4b3b      	ldr	r3, [pc, #236]	; (80014a0 <MX_SAI1_Init+0x13c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80013b6:	4b3a      	ldr	r3, [pc, #232]	; (80014a0 <MX_SAI1_Init+0x13c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80013bc:	4b38      	ldr	r3, [pc, #224]	; (80014a0 <MX_SAI1_Init+0x13c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80013c2:	4b37      	ldr	r3, [pc, #220]	; (80014a0 <MX_SAI1_Init+0x13c>)
 80013c4:	2208      	movs	r2, #8
 80013c6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80013c8:	4b35      	ldr	r3, [pc, #212]	; (80014a0 <MX_SAI1_Init+0x13c>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80013ce:	4b34      	ldr	r3, [pc, #208]	; (80014a0 <MX_SAI1_Init+0x13c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80013d4:	4b32      	ldr	r3, [pc, #200]	; (80014a0 <MX_SAI1_Init+0x13c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80013da:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <MX_SAI1_Init+0x13c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80013e0:	4b2f      	ldr	r3, [pc, #188]	; (80014a0 <MX_SAI1_Init+0x13c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80013e6:	4b2e      	ldr	r3, [pc, #184]	; (80014a0 <MX_SAI1_Init+0x13c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80013ec:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <MX_SAI1_Init+0x13c>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80013f2:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <MX_SAI1_Init+0x13c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80013f8:	4829      	ldr	r0, [pc, #164]	; (80014a0 <MX_SAI1_Init+0x13c>)
 80013fa:	f005 fd93 	bl	8006f24 <HAL_SAI_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8001404:	f7ff fec4 	bl	8001190 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8001408:	4b28      	ldr	r3, [pc, #160]	; (80014ac <MX_SAI1_Init+0x148>)
 800140a:	4a29      	ldr	r2, [pc, #164]	; (80014b0 <MX_SAI1_Init+0x14c>)
 800140c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 800140e:	4b27      	ldr	r3, [pc, #156]	; (80014ac <MX_SAI1_Init+0x148>)
 8001410:	2200      	movs	r2, #0
 8001412:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001414:	4b25      	ldr	r3, [pc, #148]	; (80014ac <MX_SAI1_Init+0x148>)
 8001416:	2203      	movs	r2, #3
 8001418:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800141a:	4b24      	ldr	r3, [pc, #144]	; (80014ac <MX_SAI1_Init+0x148>)
 800141c:	2240      	movs	r2, #64	; 0x40
 800141e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001420:	4b22      	ldr	r3, [pc, #136]	; (80014ac <MX_SAI1_Init+0x148>)
 8001422:	2200      	movs	r2, #0
 8001424:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <MX_SAI1_Init+0x148>)
 8001428:	2200      	movs	r2, #0
 800142a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800142c:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <MX_SAI1_Init+0x148>)
 800142e:	2201      	movs	r2, #1
 8001430:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001432:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <MX_SAI1_Init+0x148>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001438:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_SAI1_Init+0x148>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800143e:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <MX_SAI1_Init+0x148>)
 8001440:	2200      	movs	r2, #0
 8001442:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001444:	4b19      	ldr	r3, [pc, #100]	; (80014ac <MX_SAI1_Init+0x148>)
 8001446:	2200      	movs	r2, #0
 8001448:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_SAI1_Init+0x148>)
 800144c:	2200      	movs	r2, #0
 800144e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <MX_SAI1_Init+0x148>)
 8001452:	2200      	movs	r2, #0
 8001454:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_SAI1_Init+0x148>)
 8001458:	2208      	movs	r2, #8
 800145a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <MX_SAI1_Init+0x148>)
 800145e:	2201      	movs	r2, #1
 8001460:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <MX_SAI1_Init+0x148>)
 8001464:	2200      	movs	r2, #0
 8001466:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <MX_SAI1_Init+0x148>)
 800146a:	2200      	movs	r2, #0
 800146c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_SAI1_Init+0x148>)
 8001470:	2200      	movs	r2, #0
 8001472:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001474:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <MX_SAI1_Init+0x148>)
 8001476:	2200      	movs	r2, #0
 8001478:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_SAI1_Init+0x148>)
 800147c:	2200      	movs	r2, #0
 800147e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <MX_SAI1_Init+0x148>)
 8001482:	2201      	movs	r2, #1
 8001484:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_SAI1_Init+0x148>)
 8001488:	2200      	movs	r2, #0
 800148a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 800148c:	4807      	ldr	r0, [pc, #28]	; (80014ac <MX_SAI1_Init+0x148>)
 800148e:	f005 fd49 	bl	8006f24 <HAL_SAI_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8001498:	f7ff fe7a 	bl	8001190 <Error_Handler>
  }

}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200006a8 	.word	0x200006a8
 80014a4:	40015404 	.word	0x40015404
 80014a8:	0002ee00 	.word	0x0002ee00
 80014ac:	20000624 	.word	0x20000624
 80014b0:	40015424 	.word	0x40015424

080014b4 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a33      	ldr	r2, [pc, #204]	; (8001590 <HAL_SAI_MspInit+0xdc>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d135      	bne.n	8001532 <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 80014c6:	4b33      	ldr	r3, [pc, #204]	; (8001594 <HAL_SAI_MspInit+0xe0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10b      	bne.n	80014e6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80014ce:	4b32      	ldr	r3, [pc, #200]	; (8001598 <HAL_SAI_MspInit+0xe4>)
 80014d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d2:	4a31      	ldr	r2, [pc, #196]	; (8001598 <HAL_SAI_MspInit+0xe4>)
 80014d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014d8:	6613      	str	r3, [r2, #96]	; 0x60
 80014da:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <HAL_SAI_MspInit+0xe4>)
 80014dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80014e6:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <HAL_SAI_MspInit+0xe0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	4a29      	ldr	r2, [pc, #164]	; (8001594 <HAL_SAI_MspInit+0xe0>)
 80014ee:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B 
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 80014f0:	2374      	movs	r3, #116	; 0x74
 80014f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	2303      	movs	r3, #3
 80014fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001500:	230d      	movs	r3, #13
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4824      	ldr	r0, [pc, #144]	; (800159c <HAL_SAI_MspInit+0xe8>)
 800150c:	f000 fec2 	bl	8002294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8001510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001522:	230d      	movs	r3, #13
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4619      	mov	r1, r3
 800152c:	481b      	ldr	r0, [pc, #108]	; (800159c <HAL_SAI_MspInit+0xe8>)
 800152e:	f000 feb1 	bl	8002294 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a1a      	ldr	r2, [pc, #104]	; (80015a0 <HAL_SAI_MspInit+0xec>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d124      	bne.n	8001586 <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_SAI_MspInit+0xe0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10b      	bne.n	800155c <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <HAL_SAI_MspInit+0xe4>)
 8001546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001548:	4a13      	ldr	r2, [pc, #76]	; (8001598 <HAL_SAI_MspInit+0xe4>)
 800154a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800154e:	6613      	str	r3, [r2, #96]	; 0x60
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <HAL_SAI_MspInit+0xe4>)
 8001552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800155c:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <HAL_SAI_MspInit+0xe0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	4a0c      	ldr	r2, [pc, #48]	; (8001594 <HAL_SAI_MspInit+0xe0>)
 8001564:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE7     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001576:	230d      	movs	r3, #13
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	4806      	ldr	r0, [pc, #24]	; (800159c <HAL_SAI_MspInit+0xe8>)
 8001582:	f000 fe87 	bl	8002294 <HAL_GPIO_Init>

    }
}
 8001586:	bf00      	nop
 8001588:	3728      	adds	r7, #40	; 0x28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40015404 	.word	0x40015404
 8001594:	200000c8 	.word	0x200000c8
 8001598:	40021000 	.word	0x40021000
 800159c:	48001000 	.word	0x48001000
 80015a0:	40015424 	.word	0x40015424

080015a4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <MX_SPI2_Init+0x74>)
 80015aa:	4a1c      	ldr	r2, [pc, #112]	; (800161c <MX_SPI2_Init+0x78>)
 80015ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <MX_SPI2_Init+0x74>)
 80015b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015b6:	4b18      	ldr	r3, [pc, #96]	; (8001618 <MX_SPI2_Init+0x74>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80015bc:	4b16      	ldr	r3, [pc, #88]	; (8001618 <MX_SPI2_Init+0x74>)
 80015be:	f44f 7240 	mov.w	r2, #768	; 0x300
 80015c2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <MX_SPI2_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <MX_SPI2_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_SPI2_Init+0x74>)
 80015d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <MX_SPI2_Init+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_SPI2_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MX_SPI2_Init+0x74>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <MX_SPI2_Init+0x74>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_SPI2_Init+0x74>)
 80015f2:	2207      	movs	r2, #7
 80015f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <MX_SPI2_Init+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_SPI2_Init+0x74>)
 80015fe:	2208      	movs	r2, #8
 8001600:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_SPI2_Init+0x74>)
 8001604:	f005 fe28 	bl	8007258 <HAL_SPI_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800160e:	f7ff fdbf 	bl	8001190 <Error_Handler>
  }

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	2000072c 	.word	0x2000072c
 800161c:	40003800 	.word	0x40003800

08001620 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a17      	ldr	r2, [pc, #92]	; (800169c <HAL_SPI_MspInit+0x7c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d127      	bne.n	8001692 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <HAL_SPI_MspInit+0x80>)
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001646:	4a16      	ldr	r2, [pc, #88]	; (80016a0 <HAL_SPI_MspInit+0x80>)
 8001648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800164c:	6593      	str	r3, [r2, #88]	; 0x58
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <HAL_SPI_MspInit+0x80>)
 8001650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_SPI_MspInit+0x80>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	4a10      	ldr	r2, [pc, #64]	; (80016a0 <HAL_SPI_MspInit+0x80>)
 8001660:	f043 0308 	orr.w	r3, r3, #8
 8001664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_SPI_MspInit+0x80>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8001672:	231a      	movs	r3, #26
 8001674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001682:	2305      	movs	r3, #5
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <HAL_SPI_MspInit+0x84>)
 800168e:	f000 fe01 	bl	8002294 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001692:	bf00      	nop
 8001694:	3728      	adds	r7, #40	; 0x28
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40003800 	.word	0x40003800
 80016a0:	40021000 	.word	0x40021000
 80016a4:	48000c00 	.word	0x48000c00

080016a8 <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af04      	add	r7, sp, #16
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	9302      	str	r3, [sp, #8]
 80016c8:	2301      	movs	r3, #1
 80016ca:	9301      	str	r3, [sp, #4]
 80016cc:	1dfb      	adds	r3, r7, #7
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	2301      	movs	r3, #1
 80016d2:	2200      	movs	r2, #0
 80016d4:	2178      	movs	r1, #120	; 0x78
 80016d6:	4803      	ldr	r0, [pc, #12]	; (80016e4 <ssd1306_WriteCommand+0x2c>)
 80016d8:	f002 fc64 	bl	8003fa4 <HAL_I2C_Mem_Write>
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200004e8 	.word	0x200004e8

080016e8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af04      	add	r7, sp, #16
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	f04f 32ff 	mov.w	r2, #4294967295
 80016fa:	9202      	str	r2, [sp, #8]
 80016fc:	9301      	str	r3, [sp, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2301      	movs	r3, #1
 8001704:	2240      	movs	r2, #64	; 0x40
 8001706:	2178      	movs	r1, #120	; 0x78
 8001708:	4803      	ldr	r0, [pc, #12]	; (8001718 <ssd1306_WriteData+0x30>)
 800170a:	f002 fc4b 	bl	8003fa4 <HAL_I2C_Mem_Write>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200004e8 	.word	0x200004e8

0800171c <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8001720:	f7ff ffc2 	bl	80016a8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001724:	2064      	movs	r0, #100	; 0x64
 8001726:	f000 fc81 	bl	800202c <HAL_Delay>

    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 800172a:	20ae      	movs	r0, #174	; 0xae
 800172c:	f7ff ffc4 	bl	80016b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001730:	2020      	movs	r0, #32
 8001732:	f7ff ffc1 	bl	80016b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001736:	2000      	movs	r0, #0
 8001738:	f7ff ffbe 	bl	80016b8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800173c:	20b0      	movs	r0, #176	; 0xb0
 800173e:	f7ff ffbb 	bl	80016b8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001742:	20c8      	movs	r0, #200	; 0xc8
 8001744:	f7ff ffb8 	bl	80016b8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001748:	2000      	movs	r0, #0
 800174a:	f7ff ffb5 	bl	80016b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800174e:	2010      	movs	r0, #16
 8001750:	f7ff ffb2 	bl	80016b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001754:	2040      	movs	r0, #64	; 0x40
 8001756:	f7ff ffaf 	bl	80016b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 800175a:	2081      	movs	r0, #129	; 0x81
 800175c:	f7ff ffac 	bl	80016b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8001760:	20ff      	movs	r0, #255	; 0xff
 8001762:	f7ff ffa9 	bl	80016b8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001766:	20a1      	movs	r0, #161	; 0xa1
 8001768:	f7ff ffa6 	bl	80016b8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800176c:	20a6      	movs	r0, #166	; 0xa6
 800176e:	f7ff ffa3 	bl	80016b8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001772:	20a8      	movs	r0, #168	; 0xa8
 8001774:	f7ff ffa0 	bl	80016b8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001778:	203f      	movs	r0, #63	; 0x3f
 800177a:	f7ff ff9d 	bl	80016b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800177e:	20a4      	movs	r0, #164	; 0xa4
 8001780:	f7ff ff9a 	bl	80016b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001784:	20d3      	movs	r0, #211	; 0xd3
 8001786:	f7ff ff97 	bl	80016b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800178a:	2000      	movs	r0, #0
 800178c:	f7ff ff94 	bl	80016b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001790:	20d5      	movs	r0, #213	; 0xd5
 8001792:	f7ff ff91 	bl	80016b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001796:	20f0      	movs	r0, #240	; 0xf0
 8001798:	f7ff ff8e 	bl	80016b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800179c:	20d9      	movs	r0, #217	; 0xd9
 800179e:	f7ff ff8b 	bl	80016b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80017a2:	2022      	movs	r0, #34	; 0x22
 80017a4:	f7ff ff88 	bl	80016b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80017a8:	20da      	movs	r0, #218	; 0xda
 80017aa:	f7ff ff85 	bl	80016b8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80017ae:	2012      	movs	r0, #18
 80017b0:	f7ff ff82 	bl	80016b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80017b4:	20db      	movs	r0, #219	; 0xdb
 80017b6:	f7ff ff7f 	bl	80016b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80017ba:	2020      	movs	r0, #32
 80017bc:	f7ff ff7c 	bl	80016b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80017c0:	208d      	movs	r0, #141	; 0x8d
 80017c2:	f7ff ff79 	bl	80016b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80017c6:	2014      	movs	r0, #20
 80017c8:	f7ff ff76 	bl	80016b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80017cc:	20af      	movs	r0, #175	; 0xaf
 80017ce:	f7ff ff73 	bl	80016b8 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 80017d2:	2000      	movs	r0, #0
 80017d4:	f000 f810 	bl	80017f8 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80017d8:	f000 f830 	bl	800183c <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <ssd1306_Init+0xd8>)
 80017de:	2200      	movs	r2, #0
 80017e0:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80017e2:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <ssd1306_Init+0xd8>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80017e8:	4b02      	ldr	r3, [pc, #8]	; (80017f4 <ssd1306_Init+0xd8>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	715a      	strb	r2, [r3, #5]
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200004cc 	.word	0x200004cc

080017f8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	e00d      	b.n	8001824 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <ssd1306_Fill+0x1a>
 800180e:	2100      	movs	r1, #0
 8001810:	e000      	b.n	8001814 <ssd1306_Fill+0x1c>
 8001812:	21ff      	movs	r1, #255	; 0xff
 8001814:	4a08      	ldr	r2, [pc, #32]	; (8001838 <ssd1306_Fill+0x40>)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4413      	add	r3, r2
 800181a:	460a      	mov	r2, r1
 800181c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	3301      	adds	r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800182a:	d3ed      	bcc.n	8001808 <ssd1306_Fill+0x10>
    }
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	200000cc 	.word	0x200000cc

0800183c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001842:	2300      	movs	r3, #0
 8001844:	71fb      	strb	r3, [r7, #7]
 8001846:	e016      	b.n	8001876 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	3b50      	subs	r3, #80	; 0x50
 800184c:	b2db      	uxtb	r3, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ff32 	bl	80016b8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001854:	2000      	movs	r0, #0
 8001856:	f7ff ff2f 	bl	80016b8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800185a:	2010      	movs	r0, #16
 800185c:	f7ff ff2c 	bl	80016b8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	01db      	lsls	r3, r3, #7
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <ssd1306_UpdateScreen+0x48>)
 8001866:	4413      	add	r3, r2
 8001868:	2180      	movs	r1, #128	; 0x80
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff3c 	bl	80016e8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	3301      	adds	r3, #1
 8001874:	71fb      	strb	r3, [r7, #7]
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	2b07      	cmp	r3, #7
 800187a:	d9e5      	bls.n	8001848 <ssd1306_UpdateScreen+0xc>
    }
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200000cc 	.word	0x200000cc

08001888 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
 8001892:	460b      	mov	r3, r1
 8001894:	71bb      	strb	r3, [r7, #6]
 8001896:	4613      	mov	r3, r2
 8001898:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	db48      	blt.n	8001934 <ssd1306_DrawPixel+0xac>
 80018a2:	79bb      	ldrb	r3, [r7, #6]
 80018a4:	2b3f      	cmp	r3, #63	; 0x3f
 80018a6:	d845      	bhi.n	8001934 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80018a8:	4b25      	ldr	r3, [pc, #148]	; (8001940 <ssd1306_DrawPixel+0xb8>)
 80018aa:	791b      	ldrb	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d006      	beq.n	80018be <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80018b0:	797b      	ldrb	r3, [r7, #5]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	bf0c      	ite	eq
 80018b6:	2301      	moveq	r3, #1
 80018b8:	2300      	movne	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the right color
    if(color == White) {
 80018be:	797b      	ldrb	r3, [r7, #5]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d11a      	bne.n	80018fa <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80018c4:	79fa      	ldrb	r2, [r7, #7]
 80018c6:	79bb      	ldrb	r3, [r7, #6]
 80018c8:	08db      	lsrs	r3, r3, #3
 80018ca:	b2d8      	uxtb	r0, r3
 80018cc:	4603      	mov	r3, r0
 80018ce:	01db      	lsls	r3, r3, #7
 80018d0:	4413      	add	r3, r2
 80018d2:	4a1c      	ldr	r2, [pc, #112]	; (8001944 <ssd1306_DrawPixel+0xbc>)
 80018d4:	5cd3      	ldrb	r3, [r2, r3]
 80018d6:	b25a      	sxtb	r2, r3
 80018d8:	79bb      	ldrb	r3, [r7, #6]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	2101      	movs	r1, #1
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	b25b      	sxtb	r3, r3
 80018e6:	4313      	orrs	r3, r2
 80018e8:	b259      	sxtb	r1, r3
 80018ea:	79fa      	ldrb	r2, [r7, #7]
 80018ec:	4603      	mov	r3, r0
 80018ee:	01db      	lsls	r3, r3, #7
 80018f0:	4413      	add	r3, r2
 80018f2:	b2c9      	uxtb	r1, r1
 80018f4:	4a13      	ldr	r2, [pc, #76]	; (8001944 <ssd1306_DrawPixel+0xbc>)
 80018f6:	54d1      	strb	r1, [r2, r3]
 80018f8:	e01d      	b.n	8001936 <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80018fa:	79fa      	ldrb	r2, [r7, #7]
 80018fc:	79bb      	ldrb	r3, [r7, #6]
 80018fe:	08db      	lsrs	r3, r3, #3
 8001900:	b2d8      	uxtb	r0, r3
 8001902:	4603      	mov	r3, r0
 8001904:	01db      	lsls	r3, r3, #7
 8001906:	4413      	add	r3, r2
 8001908:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <ssd1306_DrawPixel+0xbc>)
 800190a:	5cd3      	ldrb	r3, [r2, r3]
 800190c:	b25a      	sxtb	r2, r3
 800190e:	79bb      	ldrb	r3, [r7, #6]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	2101      	movs	r1, #1
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	b25b      	sxtb	r3, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	b25b      	sxtb	r3, r3
 8001920:	4013      	ands	r3, r2
 8001922:	b259      	sxtb	r1, r3
 8001924:	79fa      	ldrb	r2, [r7, #7]
 8001926:	4603      	mov	r3, r0
 8001928:	01db      	lsls	r3, r3, #7
 800192a:	4413      	add	r3, r2
 800192c:	b2c9      	uxtb	r1, r1
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <ssd1306_DrawPixel+0xbc>)
 8001930:	54d1      	strb	r1, [r2, r3]
 8001932:	e000      	b.n	8001936 <ssd1306_DrawPixel+0xae>
        return;
 8001934:	bf00      	nop
    }
}
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	200004cc 	.word	0x200004cc
 8001944:	200000cc 	.word	0x200000cc

08001948 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	4604      	mov	r4, r0
 8001950:	1d38      	adds	r0, r7, #4
 8001952:	e880 0006 	stmia.w	r0, {r1, r2}
 8001956:	461a      	mov	r2, r3
 8001958:	4623      	mov	r3, r4
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	4613      	mov	r3, r2
 800195e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	2b1f      	cmp	r3, #31
 8001964:	d902      	bls.n	800196c <ssd1306_WriteChar+0x24>
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	2b7e      	cmp	r3, #126	; 0x7e
 800196a:	d901      	bls.n	8001970 <ssd1306_WriteChar+0x28>
        return 0;
 800196c:	2300      	movs	r3, #0
 800196e:	e06d      	b.n	8001a4c <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001970:	4b38      	ldr	r3, [pc, #224]	; (8001a54 <ssd1306_WriteChar+0x10c>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	793b      	ldrb	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	2b80      	cmp	r3, #128	; 0x80
 800197c:	dc06      	bgt.n	800198c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800197e:	4b35      	ldr	r3, [pc, #212]	; (8001a54 <ssd1306_WriteChar+0x10c>)
 8001980:	885b      	ldrh	r3, [r3, #2]
 8001982:	461a      	mov	r2, r3
 8001984:	797b      	ldrb	r3, [r7, #5]
 8001986:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001988:	2b40      	cmp	r3, #64	; 0x40
 800198a:	dd01      	ble.n	8001990 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800198c:	2300      	movs	r3, #0
 800198e:	e05d      	b.n	8001a4c <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	e04c      	b.n	8001a30 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	3b20      	subs	r3, #32
 800199c:	7979      	ldrb	r1, [r7, #5]
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	4619      	mov	r1, r3
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	440b      	add	r3, r1
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80019b0:	2300      	movs	r3, #0
 80019b2:	61bb      	str	r3, [r7, #24]
 80019b4:	e034      	b.n	8001a20 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d012      	beq.n	80019ec <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80019c6:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <ssd1306_WriteChar+0x10c>)
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	4413      	add	r3, r2
 80019d2:	b2d8      	uxtb	r0, r3
 80019d4:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <ssd1306_WriteChar+0x10c>)
 80019d6:	885b      	ldrh	r3, [r3, #2]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	4413      	add	r3, r2
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	7bba      	ldrb	r2, [r7, #14]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f7ff ff4f 	bl	8001888 <ssd1306_DrawPixel>
 80019ea:	e016      	b.n	8001a1a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80019ec:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <ssd1306_WriteChar+0x10c>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	4413      	add	r3, r2
 80019f8:	b2d8      	uxtb	r0, r3
 80019fa:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <ssd1306_WriteChar+0x10c>)
 80019fc:	885b      	ldrh	r3, [r3, #2]
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	b2d9      	uxtb	r1, r3
 8001a08:	7bbb      	ldrb	r3, [r7, #14]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	bf0c      	ite	eq
 8001a0e:	2301      	moveq	r3, #1
 8001a10:	2300      	movne	r3, #0
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	461a      	mov	r2, r3
 8001a16:	f7ff ff37 	bl	8001888 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	61bb      	str	r3, [r7, #24]
 8001a20:	793b      	ldrb	r3, [r7, #4]
 8001a22:	461a      	mov	r2, r3
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d3c5      	bcc.n	80019b6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	61fb      	str	r3, [r7, #28]
 8001a30:	797b      	ldrb	r3, [r7, #5]
 8001a32:	461a      	mov	r2, r3
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d3ad      	bcc.n	8001996 <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <ssd1306_WriteChar+0x10c>)
 8001a3c:	881a      	ldrh	r2, [r3, #0]
 8001a3e:	793b      	ldrb	r3, [r7, #4]
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	4413      	add	r3, r2
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <ssd1306_WriteChar+0x10c>)
 8001a48:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3724      	adds	r7, #36	; 0x24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd90      	pop	{r4, r7, pc}
 8001a54:	200004cc 	.word	0x200004cc

08001a58 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	1d38      	adds	r0, r7, #4
 8001a62:	e880 0006 	stmia.w	r0, {r1, r2}
 8001a66:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001a68:	e012      	b.n	8001a90 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	7818      	ldrb	r0, [r3, #0]
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	1d3a      	adds	r2, r7, #4
 8001a72:	ca06      	ldmia	r2, {r1, r2}
 8001a74:	f7ff ff68 	bl	8001948 <ssd1306_WriteChar>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d002      	beq.n	8001a8a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	e008      	b.n	8001a9c <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1e8      	bne.n	8001a6a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	781b      	ldrb	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	460a      	mov	r2, r1
 8001aae:	71fb      	strb	r3, [r7, #7]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <ssd1306_SetCursor+0x2c>)
 8001aba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001abc:	79bb      	ldrb	r3, [r7, #6]
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <ssd1306_SetCursor+0x2c>)
 8001ac2:	805a      	strh	r2, [r3, #2]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	200004cc 	.word	0x200004cc

08001ad4 <BSP_JOY_Init>:
  *     @arg  JOY_MODE_EXTI: Joystick pins will be connected to EXTI line
  *                                 with interrupt generation capability
  * @retval HAL_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_JOY_Init(JOYMode_TypeDef Joy_Mode)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08e      	sub	sp, #56	; 0x38
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
  JOYState_TypeDef joykey;
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Initialized the Joystick. */
  for (joykey = JOY_SEL; joykey < (JOY_SEL + JOYn) ; joykey++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001ae4:	e095      	b.n	8001c12 <BSP_JOY_Init+0x13e>
  {
    /* Enable the JOY clock */
    JOYx_GPIO_CLK_ENABLE(joykey);
 8001ae6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10c      	bne.n	8001b08 <BSP_JOY_Init+0x34>
 8001aee:	4b4e      	ldr	r3, [pc, #312]	; (8001c28 <BSP_JOY_Init+0x154>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	4a4d      	ldr	r2, [pc, #308]	; (8001c28 <BSP_JOY_Init+0x154>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afa:	4b4b      	ldr	r3, [pc, #300]	; (8001c28 <BSP_JOY_Init+0x154>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	e042      	b.n	8001b8e <BSP_JOY_Init+0xba>
 8001b08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d10c      	bne.n	8001b2a <BSP_JOY_Init+0x56>
 8001b10:	4b45      	ldr	r3, [pc, #276]	; (8001c28 <BSP_JOY_Init+0x154>)
 8001b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b14:	4a44      	ldr	r2, [pc, #272]	; (8001c28 <BSP_JOY_Init+0x154>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1c:	4b42      	ldr	r3, [pc, #264]	; (8001c28 <BSP_JOY_Init+0x154>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	e031      	b.n	8001b8e <BSP_JOY_Init+0xba>
 8001b2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d10c      	bne.n	8001b4c <BSP_JOY_Init+0x78>
 8001b32:	4b3d      	ldr	r3, [pc, #244]	; (8001c28 <BSP_JOY_Init+0x154>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	4a3c      	ldr	r2, [pc, #240]	; (8001c28 <BSP_JOY_Init+0x154>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3e:	4b3a      	ldr	r3, [pc, #232]	; (8001c28 <BSP_JOY_Init+0x154>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	e020      	b.n	8001b8e <BSP_JOY_Init+0xba>
 8001b4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d10c      	bne.n	8001b6e <BSP_JOY_Init+0x9a>
 8001b54:	4b34      	ldr	r3, [pc, #208]	; (8001c28 <BSP_JOY_Init+0x154>)
 8001b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b58:	4a33      	ldr	r2, [pc, #204]	; (8001c28 <BSP_JOY_Init+0x154>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b60:	4b31      	ldr	r3, [pc, #196]	; (8001c28 <BSP_JOY_Init+0x154>)
 8001b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	e00f      	b.n	8001b8e <BSP_JOY_Init+0xba>
 8001b6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d10b      	bne.n	8001b8e <BSP_JOY_Init+0xba>
 8001b76:	4b2c      	ldr	r3, [pc, #176]	; (8001c28 <BSP_JOY_Init+0x154>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	4a2b      	ldr	r2, [pc, #172]	; (8001c28 <BSP_JOY_Init+0x154>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b82:	4b29      	ldr	r3, [pc, #164]	; (8001c28 <BSP_JOY_Init+0x154>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = JOY_PIN[joykey];
 8001b8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b92:	4a26      	ldr	r2, [pc, #152]	; (8001c2c <BSP_JOY_Init+0x158>)
 8001b94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (Joy_Mode == JOY_MODE_GPIO)
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10d      	bne.n	8001bc4 <BSP_JOY_Init+0xf0>
    {
      /* Configure Joy pin as input */
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
      HAL_GPIO_Init(JOY_PORT[joykey], &GPIO_InitStruct);
 8001bac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001bb0:	4a1f      	ldr	r2, [pc, #124]	; (8001c30 <BSP_JOY_Init+0x15c>)
 8001bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb6:	f107 0220 	add.w	r2, r7, #32
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f000 fb69 	bl	8002294 <HAL_GPIO_Init>
 8001bc2:	e021      	b.n	8001c08 <BSP_JOY_Init+0x134>
    }
    else if (Joy_Mode == JOY_MODE_EXTI)
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d11e      	bne.n	8001c08 <BSP_JOY_Init+0x134>
    {
      /* Configure Joy pin as input with External interrupt */
      GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bca:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <BSP_JOY_Init+0x160>)
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
      HAL_GPIO_Init(JOY_PORT[joykey], &GPIO_InitStruct);
 8001bce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001bd2:	4a17      	ldr	r2, [pc, #92]	; (8001c30 <BSP_JOY_Init+0x15c>)
 8001bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd8:	f107 0220 	add.w	r2, r7, #32
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 fb58 	bl	8002294 <HAL_GPIO_Init>

      /* Enable and set Joy EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((IRQn_Type)(JOY_IRQn[joykey]), 0x0F, 0x00);
 8001be4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001be8:	4a13      	ldr	r2, [pc, #76]	; (8001c38 <BSP_JOY_Init+0x164>)
 8001bea:	5cd3      	ldrb	r3, [r2, r3]
 8001bec:	b25b      	sxtb	r3, r3
 8001bee:	2200      	movs	r2, #0
 8001bf0:	210f      	movs	r1, #15
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 fb17 	bl	8002226 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((IRQn_Type)(JOY_IRQn[joykey]));
 8001bf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001bfc:	4a0e      	ldr	r2, [pc, #56]	; (8001c38 <BSP_JOY_Init+0x164>)
 8001bfe:	5cd3      	ldrb	r3, [r2, r3]
 8001c00:	b25b      	sxtb	r3, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 fb2b 	bl	800225e <HAL_NVIC_EnableIRQ>
  for (joykey = JOY_SEL; joykey < (JOY_SEL + JOYn) ; joykey++)
 8001c08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	f67f af65 	bls.w	8001ae6 <BSP_JOY_Init+0x12>
    }
  }

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3738      	adds	r7, #56	; 0x38
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	0800b884 	.word	0x0800b884
 8001c30:	20000008 	.word	0x20000008
 8001c34:	10210000 	.word	0x10210000
 8001c38:	0800b890 	.word	0x0800b890

08001c3c <BSP_JOY_GetState>:
*            @arg  JOY_LEFT
*            @arg  JOY_RIGHT
*            @arg  JOY_UP
*/
JOYState_TypeDef BSP_JOY_GetState(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
  JOYState_TypeDef joykey;

  for (joykey = JOY_SEL; joykey < (JOY_SEL + JOYn) ; joykey++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	71fb      	strb	r3, [r7, #7]
 8001c46:	e012      	b.n	8001c6e <BSP_JOY_GetState+0x32>
  {
    if (HAL_GPIO_ReadPin(JOY_PORT[joykey], JOY_PIN[joykey]) == GPIO_PIN_SET)
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	4a0d      	ldr	r2, [pc, #52]	; (8001c80 <BSP_JOY_GetState+0x44>)
 8001c4c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	4a0c      	ldr	r2, [pc, #48]	; (8001c84 <BSP_JOY_GetState+0x48>)
 8001c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f000 fcc3 	bl	80025e4 <HAL_GPIO_ReadPin>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <BSP_JOY_GetState+0x2c>
    {
      /* Return Code Joystick key pressed */
      return joykey;
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	e006      	b.n	8001c76 <BSP_JOY_GetState+0x3a>
  for (joykey = JOY_SEL; joykey < (JOY_SEL + JOYn) ; joykey++)
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	71fb      	strb	r3, [r7, #7]
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d9e9      	bls.n	8001c48 <BSP_JOY_GetState+0xc>
    }
  }

  /* No Joystick key pressed */
  return JOY_NONE;
 8001c74:	2305      	movs	r3, #5
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000008 	.word	0x20000008
 8001c84:	0800b884 	.word	0x0800b884

08001c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <HAL_MspInit+0x44>)
 8001c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c92:	4a0e      	ldr	r2, [pc, #56]	; (8001ccc <HAL_MspInit+0x44>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6613      	str	r3, [r2, #96]	; 0x60
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <HAL_MspInit+0x44>)
 8001c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_MspInit+0x44>)
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001caa:	4a08      	ldr	r2, [pc, #32]	; (8001ccc <HAL_MspInit+0x44>)
 8001cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	6593      	str	r3, [r2, #88]	; 0x58
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_MspInit+0x44>)
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000

08001cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce2:	e7fe      	b.n	8001ce2 <HardFault_Handler+0x4>

08001ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <MemManage_Handler+0x4>

08001cea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cee:	e7fe      	b.n	8001cee <BusFault_Handler+0x4>

08001cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <UsageFault_Handler+0x4>

08001cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d24:	f000 f964 	bl	8001ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <OTG_FS_IRQHandler+0x10>)
 8001d32:	f000 ff09 	bl	8002b48 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000be0 	.word	0x20000be0

08001d40 <_sbrk>:
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <_sbrk+0x50>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d102      	bne.n	8001d56 <_sbrk+0x16>
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <_sbrk+0x50>)
 8001d52:	4a10      	ldr	r2, [pc, #64]	; (8001d94 <_sbrk+0x54>)
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <_sbrk+0x50>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <_sbrk+0x50>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4413      	add	r3, r2
 8001d64:	466a      	mov	r2, sp
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d907      	bls.n	8001d7a <_sbrk+0x3a>
 8001d6a:	f008 fefd 	bl	800ab68 <__errno>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	230c      	movs	r3, #12
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295
 8001d78:	e006      	b.n	8001d88 <_sbrk+0x48>
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <_sbrk+0x50>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	4a03      	ldr	r2, [pc, #12]	; (8001d90 <_sbrk+0x50>)
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	200004d4 	.word	0x200004d4
 8001d94:	20000ea8 	.word	0x20000ea8

08001d98 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d9c:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <SystemInit+0x64>)
 8001d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da2:	4a16      	ldr	r2, [pc, #88]	; (8001dfc <SystemInit+0x64>)
 8001da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001dac:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <SystemInit+0x68>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a13      	ldr	r2, [pc, #76]	; (8001e00 <SystemInit+0x68>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <SystemInit+0x68>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <SystemInit+0x68>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a0f      	ldr	r2, [pc, #60]	; (8001e00 <SystemInit+0x68>)
 8001dc4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001dc8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001dcc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <SystemInit+0x68>)
 8001dd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dd4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <SystemInit+0x68>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a09      	ldr	r2, [pc, #36]	; (8001e00 <SystemInit+0x68>)
 8001ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <SystemInit+0x68>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001de8:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <SystemInit+0x64>)
 8001dea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dee:	609a      	str	r2, [r3, #8]
#endif
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	e000ed00 	.word	0xe000ed00
 8001e00:	40021000 	.word	0x40021000

08001e04 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <MX_UART4_Init+0x58>)
 8001e0a:	4a15      	ldr	r2, [pc, #84]	; (8001e60 <MX_UART4_Init+0x5c>)
 8001e0c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <MX_UART4_Init+0x58>)
 8001e10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e14:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <MX_UART4_Init+0x58>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <MX_UART4_Init+0x58>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <MX_UART4_Init+0x58>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <MX_UART4_Init+0x58>)
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <MX_UART4_Init+0x58>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <MX_UART4_Init+0x58>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e3a:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <MX_UART4_Init+0x58>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <MX_UART4_Init+0x58>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e46:	4805      	ldr	r0, [pc, #20]	; (8001e5c <MX_UART4_Init+0x58>)
 8001e48:	f005 fa90 	bl	800736c <HAL_UART_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001e52:	f7ff f99d 	bl	8001190 <Error_Handler>
  }

}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000790 	.word	0x20000790
 8001e60:	40004c00 	.word	0x40004c00

08001e64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a17      	ldr	r2, [pc, #92]	; (8001ee0 <HAL_UART_MspInit+0x7c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d128      	bne.n	8001ed8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <HAL_UART_MspInit+0x80>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <HAL_UART_MspInit+0x80>)
 8001e8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e90:	6593      	str	r3, [r2, #88]	; 0x58
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <HAL_UART_MspInit+0x80>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_UART_MspInit+0x80>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <HAL_UART_MspInit+0x80>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_UART_MspInit+0x80>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ec6:	2308      	movs	r3, #8
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed4:	f000 f9de 	bl	8002294 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001ed8:	bf00      	nop
 8001eda:	3728      	adds	r7, #40	; 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40004c00 	.word	0x40004c00
 8001ee4:	40021000 	.word	0x40021000

08001ee8 <Reset_Handler>:
 8001ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f20 <LoopForever+0x2>
 8001eec:	2100      	movs	r1, #0
 8001eee:	e003      	b.n	8001ef8 <LoopCopyDataInit>

08001ef0 <CopyDataInit>:
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <LoopForever+0x6>)
 8001ef2:	585b      	ldr	r3, [r3, r1]
 8001ef4:	5043      	str	r3, [r0, r1]
 8001ef6:	3104      	adds	r1, #4

08001ef8 <LoopCopyDataInit>:
 8001ef8:	480b      	ldr	r0, [pc, #44]	; (8001f28 <LoopForever+0xa>)
 8001efa:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <LoopForever+0xe>)
 8001efc:	1842      	adds	r2, r0, r1
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d3f6      	bcc.n	8001ef0 <CopyDataInit>
 8001f02:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <LoopForever+0x12>)
 8001f04:	e002      	b.n	8001f0c <LoopFillZerobss>

08001f06 <FillZerobss>:
 8001f06:	2300      	movs	r3, #0
 8001f08:	f842 3b04 	str.w	r3, [r2], #4

08001f0c <LoopFillZerobss>:
 8001f0c:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <LoopForever+0x16>)
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d3f9      	bcc.n	8001f06 <FillZerobss>
 8001f12:	f7ff ff41 	bl	8001d98 <SystemInit>
 8001f16:	f008 fe2d 	bl	800ab74 <__libc_init_array>
 8001f1a:	f7ff f86f 	bl	8000ffc <main>

08001f1e <LoopForever>:
 8001f1e:	e7fe      	b.n	8001f1e <LoopForever>
 8001f20:	20018000 	.word	0x20018000
 8001f24:	0800b8f0 	.word	0x0800b8f0
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	200000ac 	.word	0x200000ac
 8001f30:	200000ac 	.word	0x200000ac
 8001f34:	20000ea8 	.word	0x20000ea8

08001f38 <ADC1_2_IRQHandler>:
 8001f38:	e7fe      	b.n	8001f38 <ADC1_2_IRQHandler>
	...

08001f3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f46:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <HAL_Init+0x3c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a0b      	ldr	r2, [pc, #44]	; (8001f78 <HAL_Init+0x3c>)
 8001f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f50:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f52:	2003      	movs	r0, #3
 8001f54:	f000 f95c 	bl	8002210 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f000 f80f 	bl	8001f7c <HAL_InitTick>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	71fb      	strb	r3, [r7, #7]
 8001f68:	e001      	b.n	8001f6e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f6a:	f7ff fe8d 	bl	8001c88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40022000 	.word	0x40022000

08001f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f88:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <HAL_InitTick+0x68>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d022      	beq.n	8001fd6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f90:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_InitTick+0x6c>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <HAL_InitTick+0x68>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 f968 	bl	800227a <HAL_SYSTICK_Config>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10f      	bne.n	8001fd0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b0f      	cmp	r3, #15
 8001fb4:	d809      	bhi.n	8001fca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	f04f 30ff 	mov.w	r0, #4294967295
 8001fbe:	f000 f932 	bl	8002226 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <HAL_InitTick+0x70>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	e007      	b.n	8001fda <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	73fb      	strb	r3, [r7, #15]
 8001fce:	e004      	b.n	8001fda <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	e001      	b.n	8001fda <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000024 	.word	0x20000024
 8001fe8:	2000001c 	.word	0x2000001c
 8001fec:	20000020 	.word	0x20000020

08001ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_IncTick+0x1c>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_IncTick+0x20>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	4a03      	ldr	r2, [pc, #12]	; (800200c <HAL_IncTick+0x1c>)
 8002000:	6013      	str	r3, [r2, #0]
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	20000810 	.word	0x20000810
 8002010:	20000024 	.word	0x20000024

08002014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return uwTick;
 8002018:	4b03      	ldr	r3, [pc, #12]	; (8002028 <HAL_GetTick+0x14>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000810 	.word	0x20000810

0800202c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002034:	f7ff ffee 	bl	8002014 <HAL_GetTick>
 8002038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002044:	d004      	beq.n	8002050 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_Delay+0x40>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4413      	add	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002050:	bf00      	nop
 8002052:	f7ff ffdf 	bl	8002014 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	429a      	cmp	r2, r3
 8002060:	d8f7      	bhi.n	8002052 <HAL_Delay+0x26>
  {
  }
}
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000024 	.word	0x20000024

08002070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800208c:	4013      	ands	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800209c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020a2:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	60d3      	str	r3, [r2, #12]
}
 80020a8:	bf00      	nop
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <__NVIC_GetPriorityGrouping+0x18>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	f003 0307 	and.w	r3, r3, #7
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	db0b      	blt.n	80020fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	f003 021f 	and.w	r2, r3, #31
 80020ec:	4907      	ldr	r1, [pc, #28]	; (800210c <__NVIC_EnableIRQ+0x38>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	2001      	movs	r0, #1
 80020f6:	fa00 f202 	lsl.w	r2, r0, r2
 80020fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000e100 	.word	0xe000e100

08002110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	6039      	str	r1, [r7, #0]
 800211a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002120:	2b00      	cmp	r3, #0
 8002122:	db0a      	blt.n	800213a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	490c      	ldr	r1, [pc, #48]	; (800215c <__NVIC_SetPriority+0x4c>)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	0112      	lsls	r2, r2, #4
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	440b      	add	r3, r1
 8002134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002138:	e00a      	b.n	8002150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4908      	ldr	r1, [pc, #32]	; (8002160 <__NVIC_SetPriority+0x50>)
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	3b04      	subs	r3, #4
 8002148:	0112      	lsls	r2, r2, #4
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	440b      	add	r3, r1
 800214e:	761a      	strb	r2, [r3, #24]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000e100 	.word	0xe000e100
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	; 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f1c3 0307 	rsb	r3, r3, #7
 800217e:	2b04      	cmp	r3, #4
 8002180:	bf28      	it	cs
 8002182:	2304      	movcs	r3, #4
 8002184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3304      	adds	r3, #4
 800218a:	2b06      	cmp	r3, #6
 800218c:	d902      	bls.n	8002194 <NVIC_EncodePriority+0x30>
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3b03      	subs	r3, #3
 8002192:	e000      	b.n	8002196 <NVIC_EncodePriority+0x32>
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002198:	f04f 32ff 	mov.w	r2, #4294967295
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43da      	mvns	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	401a      	ands	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ac:	f04f 31ff 	mov.w	r1, #4294967295
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	43d9      	mvns	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	4313      	orrs	r3, r2
         );
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3724      	adds	r7, #36	; 0x24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021dc:	d301      	bcc.n	80021e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021de:	2301      	movs	r3, #1
 80021e0:	e00f      	b.n	8002202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021e2:	4a0a      	ldr	r2, [pc, #40]	; (800220c <SysTick_Config+0x40>)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ea:	210f      	movs	r1, #15
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295
 80021f0:	f7ff ff8e 	bl	8002110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <SysTick_Config+0x40>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <SysTick_Config+0x40>)
 80021fc:	2207      	movs	r2, #7
 80021fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	e000e010 	.word	0xe000e010

08002210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff ff29 	bl	8002070 <__NVIC_SetPriorityGrouping>
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af00      	add	r7, sp, #0
 800222c:	4603      	mov	r3, r0
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002238:	f7ff ff3e 	bl	80020b8 <__NVIC_GetPriorityGrouping>
 800223c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68b9      	ldr	r1, [r7, #8]
 8002242:	6978      	ldr	r0, [r7, #20]
 8002244:	f7ff ff8e 	bl	8002164 <NVIC_EncodePriority>
 8002248:	4602      	mov	r2, r0
 800224a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224e:	4611      	mov	r1, r2
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff ff5d 	bl	8002110 <__NVIC_SetPriority>
}
 8002256:	bf00      	nop
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff31 	bl	80020d4 <__NVIC_EnableIRQ>
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff ffa2 	bl	80021cc <SysTick_Config>
 8002288:	4603      	mov	r3, r0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a2:	e17f      	b.n	80025a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	2101      	movs	r1, #1
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	fa01 f303 	lsl.w	r3, r1, r3
 80022b0:	4013      	ands	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8171 	beq.w	800259e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x38>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b12      	cmp	r3, #18
 80022ca:	d123      	bne.n	8002314 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	08da      	lsrs	r2, r3, #3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3208      	adds	r2, #8
 80022d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	220f      	movs	r2, #15
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	08da      	lsrs	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3208      	adds	r2, #8
 800230e:	6939      	ldr	r1, [r7, #16]
 8002310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2203      	movs	r2, #3
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0203 	and.w	r2, r3, #3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d00b      	beq.n	8002368 <HAL_GPIO_Init+0xd4>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d007      	beq.n	8002368 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800235c:	2b11      	cmp	r3, #17
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b12      	cmp	r3, #18
 8002366:	d130      	bne.n	80023ca <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	2203      	movs	r2, #3
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800239e:	2201      	movs	r2, #1
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4013      	ands	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	091b      	lsrs	r3, r3, #4
 80023b4:	f003 0201 	and.w	r2, r3, #1
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d118      	bne.n	8002408 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80023dc:	2201      	movs	r2, #1
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	08db      	lsrs	r3, r3, #3
 80023f2:	f003 0201 	and.w	r2, r3, #1
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	2203      	movs	r2, #3
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80ac 	beq.w	800259e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002446:	4b5e      	ldr	r3, [pc, #376]	; (80025c0 <HAL_GPIO_Init+0x32c>)
 8002448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244a:	4a5d      	ldr	r2, [pc, #372]	; (80025c0 <HAL_GPIO_Init+0x32c>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6613      	str	r3, [r2, #96]	; 0x60
 8002452:	4b5b      	ldr	r3, [pc, #364]	; (80025c0 <HAL_GPIO_Init+0x32c>)
 8002454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800245e:	4a59      	ldr	r2, [pc, #356]	; (80025c4 <HAL_GPIO_Init+0x330>)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	089b      	lsrs	r3, r3, #2
 8002464:	3302      	adds	r3, #2
 8002466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	220f      	movs	r2, #15
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002488:	d025      	beq.n	80024d6 <HAL_GPIO_Init+0x242>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4e      	ldr	r2, [pc, #312]	; (80025c8 <HAL_GPIO_Init+0x334>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d01f      	beq.n	80024d2 <HAL_GPIO_Init+0x23e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4d      	ldr	r2, [pc, #308]	; (80025cc <HAL_GPIO_Init+0x338>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d019      	beq.n	80024ce <HAL_GPIO_Init+0x23a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a4c      	ldr	r2, [pc, #304]	; (80025d0 <HAL_GPIO_Init+0x33c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d013      	beq.n	80024ca <HAL_GPIO_Init+0x236>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a4b      	ldr	r2, [pc, #300]	; (80025d4 <HAL_GPIO_Init+0x340>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00d      	beq.n	80024c6 <HAL_GPIO_Init+0x232>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a4a      	ldr	r2, [pc, #296]	; (80025d8 <HAL_GPIO_Init+0x344>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d007      	beq.n	80024c2 <HAL_GPIO_Init+0x22e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a49      	ldr	r2, [pc, #292]	; (80025dc <HAL_GPIO_Init+0x348>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d101      	bne.n	80024be <HAL_GPIO_Init+0x22a>
 80024ba:	2306      	movs	r3, #6
 80024bc:	e00c      	b.n	80024d8 <HAL_GPIO_Init+0x244>
 80024be:	2307      	movs	r3, #7
 80024c0:	e00a      	b.n	80024d8 <HAL_GPIO_Init+0x244>
 80024c2:	2305      	movs	r3, #5
 80024c4:	e008      	b.n	80024d8 <HAL_GPIO_Init+0x244>
 80024c6:	2304      	movs	r3, #4
 80024c8:	e006      	b.n	80024d8 <HAL_GPIO_Init+0x244>
 80024ca:	2303      	movs	r3, #3
 80024cc:	e004      	b.n	80024d8 <HAL_GPIO_Init+0x244>
 80024ce:	2302      	movs	r3, #2
 80024d0:	e002      	b.n	80024d8 <HAL_GPIO_Init+0x244>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <HAL_GPIO_Init+0x244>
 80024d6:	2300      	movs	r3, #0
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	f002 0203 	and.w	r2, r2, #3
 80024de:	0092      	lsls	r2, r2, #2
 80024e0:	4093      	lsls	r3, r2
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024e8:	4936      	ldr	r1, [pc, #216]	; (80025c4 <HAL_GPIO_Init+0x330>)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	089b      	lsrs	r3, r3, #2
 80024ee:	3302      	adds	r3, #2
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024f6:	4b3a      	ldr	r3, [pc, #232]	; (80025e0 <HAL_GPIO_Init+0x34c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	43db      	mvns	r3, r3
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4013      	ands	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800251a:	4a31      	ldr	r2, [pc, #196]	; (80025e0 <HAL_GPIO_Init+0x34c>)
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002520:	4b2f      	ldr	r3, [pc, #188]	; (80025e0 <HAL_GPIO_Init+0x34c>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	43db      	mvns	r3, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002544:	4a26      	ldr	r2, [pc, #152]	; (80025e0 <HAL_GPIO_Init+0x34c>)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800254a:	4b25      	ldr	r3, [pc, #148]	; (80025e0 <HAL_GPIO_Init+0x34c>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	43db      	mvns	r3, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800256e:	4a1c      	ldr	r2, [pc, #112]	; (80025e0 <HAL_GPIO_Init+0x34c>)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002574:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <HAL_GPIO_Init+0x34c>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	43db      	mvns	r3, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002598:	4a11      	ldr	r2, [pc, #68]	; (80025e0 <HAL_GPIO_Init+0x34c>)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	3301      	adds	r3, #1
 80025a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	fa22 f303 	lsr.w	r3, r2, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f47f ae78 	bne.w	80022a4 <HAL_GPIO_Init+0x10>
  }
}
 80025b4:	bf00      	nop
 80025b6:	371c      	adds	r7, #28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40010000 	.word	0x40010000
 80025c8:	48000400 	.word	0x48000400
 80025cc:	48000800 	.word	0x48000800
 80025d0:	48000c00 	.word	0x48000c00
 80025d4:	48001000 	.word	0x48001000
 80025d8:	48001400 	.word	0x48001400
 80025dc:	48001800 	.word	0x48001800
 80025e0:	40010400 	.word	0x40010400

080025e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	887b      	ldrh	r3, [r7, #2]
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025fc:	2301      	movs	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
 8002600:	e001      	b.n	8002606 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002606:	7bfb      	ldrb	r3, [r7, #15]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	807b      	strh	r3, [r7, #2]
 8002620:	4613      	mov	r3, r2
 8002622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002624:	787b      	ldrb	r3, [r7, #1]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800262a:	887a      	ldrh	r2, [r7, #2]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002630:	e002      	b.n	8002638 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002646:	b08f      	sub	sp, #60	; 0x3c
 8002648:	af0a      	add	r7, sp, #40	; 0x28
 800264a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e054      	b.n	8002700 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d106      	bne.n	8002676 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f007 ffcb 	bl	800a60c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2203      	movs	r2, #3
 800267a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d102      	bne.n	8002690 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f005 fb91 	bl	8007dbc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	687e      	ldr	r6, [r7, #4]
 80026a2:	466d      	mov	r5, sp
 80026a4:	f106 0410 	add.w	r4, r6, #16
 80026a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80026b8:	1d33      	adds	r3, r6, #4
 80026ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026bc:	6838      	ldr	r0, [r7, #0]
 80026be:	f005 fb1a 	bl	8007cf6 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2101      	movs	r1, #1
 80026c8:	4618      	mov	r0, r3
 80026ca:	f005 fb88 	bl	8007dde <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	687e      	ldr	r6, [r7, #4]
 80026d6:	466d      	mov	r5, sp
 80026d8:	f106 0410 	add.w	r4, r6, #16
 80026dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80026ec:	1d33      	adds	r3, r6, #4
 80026ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026f0:	6838      	ldr	r0, [r7, #0]
 80026f2:	f005 fc97 	bl	8008024 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002708 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b089      	sub	sp, #36	; 0x24
 800270c:	af04      	add	r7, sp, #16
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	4608      	mov	r0, r1
 8002712:	4611      	mov	r1, r2
 8002714:	461a      	mov	r2, r3
 8002716:	4603      	mov	r3, r0
 8002718:	70fb      	strb	r3, [r7, #3]
 800271a:	460b      	mov	r3, r1
 800271c:	70bb      	strb	r3, [r7, #2]
 800271e:	4613      	mov	r3, r2
 8002720:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_HCD_HC_Init+0x28>
 800272c:	2302      	movs	r3, #2
 800272e:	e07f      	b.n	8002830 <HAL_HCD_HC_Init+0x128>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	440b      	add	r3, r1
 8002746:	333d      	adds	r3, #61	; 0x3d
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800274c:	78fa      	ldrb	r2, [r7, #3]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	440b      	add	r3, r1
 800275a:	3338      	adds	r3, #56	; 0x38
 800275c:	787a      	ldrb	r2, [r7, #1]
 800275e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	440b      	add	r3, r1
 800276e:	3340      	adds	r3, #64	; 0x40
 8002770:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002772:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	440b      	add	r3, r1
 8002782:	3339      	adds	r3, #57	; 0x39
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	440b      	add	r3, r1
 8002796:	333f      	adds	r3, #63	; 0x3f
 8002798:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800279c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800279e:	78fa      	ldrb	r2, [r7, #3]
 80027a0:	78bb      	ldrb	r3, [r7, #2]
 80027a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027a6:	b2d8      	uxtb	r0, r3
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	440b      	add	r3, r1
 80027b4:	333a      	adds	r3, #58	; 0x3a
 80027b6:	4602      	mov	r2, r0
 80027b8:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80027ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	da0a      	bge.n	80027d8 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	440b      	add	r3, r1
 80027d0:	333b      	adds	r3, #59	; 0x3b
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	e009      	b.n	80027ec <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	440b      	add	r3, r1
 80027e6:	333b      	adds	r3, #59	; 0x3b
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80027ec:	78fa      	ldrb	r2, [r7, #3]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	440b      	add	r3, r1
 80027fa:	333c      	adds	r3, #60	; 0x3c
 80027fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002800:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	787c      	ldrb	r4, [r7, #1]
 8002808:	78ba      	ldrb	r2, [r7, #2]
 800280a:	78f9      	ldrb	r1, [r7, #3]
 800280c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800280e:	9302      	str	r3, [sp, #8]
 8002810:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002814:	9301      	str	r3, [sp, #4]
 8002816:	f897 3020 	ldrb.w	r3, [r7, #32]
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	4623      	mov	r3, r4
 800281e:	f005 fd45 	bl	80082ac <USB_HC_Init>
 8002822:	4603      	mov	r3, r0
 8002824:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800282e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	bd90      	pop	{r4, r7, pc}

08002838 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_HCD_HC_Halt+0x1e>
 8002852:	2302      	movs	r3, #2
 8002854:	e00f      	b.n	8002876 <HAL_HCD_HC_Halt+0x3e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	78fa      	ldrb	r2, [r7, #3]
 8002864:	4611      	mov	r1, r2
 8002866:	4618      	mov	r0, r3
 8002868:	f005 ff23 	bl	80086b2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002874:	7bfb      	ldrb	r3, [r7, #15]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	4608      	mov	r0, r1
 800288a:	4611      	mov	r1, r2
 800288c:	461a      	mov	r2, r3
 800288e:	4603      	mov	r3, r0
 8002890:	70fb      	strb	r3, [r7, #3]
 8002892:	460b      	mov	r3, r1
 8002894:	70bb      	strb	r3, [r7, #2]
 8002896:	4613      	mov	r3, r2
 8002898:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	440b      	add	r3, r1
 80028a8:	333b      	adds	r3, #59	; 0x3b
 80028aa:	78ba      	ldrb	r2, [r7, #2]
 80028ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80028ae:	78fa      	ldrb	r2, [r7, #3]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	440b      	add	r3, r1
 80028bc:	333f      	adds	r3, #63	; 0x3f
 80028be:	787a      	ldrb	r2, [r7, #1]
 80028c0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80028c2:	7c3b      	ldrb	r3, [r7, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10a      	bne.n	80028de <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	440b      	add	r3, r1
 80028d6:	3342      	adds	r3, #66	; 0x42
 80028d8:	2203      	movs	r2, #3
 80028da:	701a      	strb	r2, [r3, #0]
 80028dc:	e009      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028de:	78fa      	ldrb	r2, [r7, #3]
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	440b      	add	r3, r1
 80028ec:	3342      	adds	r3, #66	; 0x42
 80028ee:	2202      	movs	r2, #2
 80028f0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80028f2:	787b      	ldrb	r3, [r7, #1]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	f200 80d6 	bhi.w	8002aa6 <HAL_HCD_HC_SubmitRequest+0x226>
 80028fa:	a201      	add	r2, pc, #4	; (adr r2, 8002900 <HAL_HCD_HC_SubmitRequest+0x80>)
 80028fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002900:	08002911 	.word	0x08002911
 8002904:	08002a91 	.word	0x08002a91
 8002908:	0800297d 	.word	0x0800297d
 800290c:	08002a07 	.word	0x08002a07
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002910:	7c3b      	ldrb	r3, [r7, #16]
 8002912:	2b01      	cmp	r3, #1
 8002914:	f040 80c9 	bne.w	8002aaa <HAL_HCD_HC_SubmitRequest+0x22a>
 8002918:	78bb      	ldrb	r3, [r7, #2]
 800291a:	2b00      	cmp	r3, #0
 800291c:	f040 80c5 	bne.w	8002aaa <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8002920:	8b3b      	ldrh	r3, [r7, #24]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d109      	bne.n	800293a <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	440b      	add	r3, r1
 8002934:	3351      	adds	r3, #81	; 0x51
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800293a:	78fa      	ldrb	r2, [r7, #3]
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	440b      	add	r3, r1
 8002948:	3351      	adds	r3, #81	; 0x51
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10a      	bne.n	8002966 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	440b      	add	r3, r1
 800295e:	3342      	adds	r3, #66	; 0x42
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002964:	e0a1      	b.n	8002aaa <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002966:	78fa      	ldrb	r2, [r7, #3]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	3342      	adds	r3, #66	; 0x42
 8002976:	2202      	movs	r2, #2
 8002978:	701a      	strb	r2, [r3, #0]
      break;
 800297a:	e096      	b.n	8002aaa <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800297c:	78bb      	ldrb	r3, [r7, #2]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d120      	bne.n	80029c4 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	440b      	add	r3, r1
 8002990:	3351      	adds	r3, #81	; 0x51
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10a      	bne.n	80029ae <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002998:	78fa      	ldrb	r2, [r7, #3]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	440b      	add	r3, r1
 80029a6:	3342      	adds	r3, #66	; 0x42
 80029a8:	2200      	movs	r2, #0
 80029aa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80029ac:	e07e      	b.n	8002aac <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029ae:	78fa      	ldrb	r2, [r7, #3]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	440b      	add	r3, r1
 80029bc:	3342      	adds	r3, #66	; 0x42
 80029be:	2202      	movs	r2, #2
 80029c0:	701a      	strb	r2, [r3, #0]
      break;
 80029c2:	e073      	b.n	8002aac <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80029c4:	78fa      	ldrb	r2, [r7, #3]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	440b      	add	r3, r1
 80029d2:	3350      	adds	r3, #80	; 0x50
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10a      	bne.n	80029f0 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029da:	78fa      	ldrb	r2, [r7, #3]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	440b      	add	r3, r1
 80029e8:	3342      	adds	r3, #66	; 0x42
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
      break;
 80029ee:	e05d      	b.n	8002aac <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	440b      	add	r3, r1
 80029fe:	3342      	adds	r3, #66	; 0x42
 8002a00:	2202      	movs	r2, #2
 8002a02:	701a      	strb	r2, [r3, #0]
      break;
 8002a04:	e052      	b.n	8002aac <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002a06:	78bb      	ldrb	r3, [r7, #2]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d120      	bne.n	8002a4e <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a0c:	78fa      	ldrb	r2, [r7, #3]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	440b      	add	r3, r1
 8002a1a:	3351      	adds	r3, #81	; 0x51
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10a      	bne.n	8002a38 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	440b      	add	r3, r1
 8002a30:	3342      	adds	r3, #66	; 0x42
 8002a32:	2200      	movs	r2, #0
 8002a34:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002a36:	e039      	b.n	8002aac <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a38:	78fa      	ldrb	r2, [r7, #3]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	440b      	add	r3, r1
 8002a46:	3342      	adds	r3, #66	; 0x42
 8002a48:	2202      	movs	r2, #2
 8002a4a:	701a      	strb	r2, [r3, #0]
      break;
 8002a4c:	e02e      	b.n	8002aac <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	440b      	add	r3, r1
 8002a5c:	3350      	adds	r3, #80	; 0x50
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	440b      	add	r3, r1
 8002a72:	3342      	adds	r3, #66	; 0x42
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
      break;
 8002a78:	e018      	b.n	8002aac <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	440b      	add	r3, r1
 8002a88:	3342      	adds	r3, #66	; 0x42
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	701a      	strb	r2, [r3, #0]
      break;
 8002a8e:	e00d      	b.n	8002aac <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3342      	adds	r3, #66	; 0x42
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
      break;
 8002aa4:	e002      	b.n	8002aac <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8002aa6:	bf00      	nop
 8002aa8:	e000      	b.n	8002aac <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8002aaa:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002aac:	78fa      	ldrb	r2, [r7, #3]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	440b      	add	r3, r1
 8002aba:	3344      	adds	r3, #68	; 0x44
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002ac0:	78fa      	ldrb	r2, [r7, #3]
 8002ac2:	8b39      	ldrh	r1, [r7, #24]
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4403      	add	r3, r0
 8002ad0:	3348      	adds	r3, #72	; 0x48
 8002ad2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ad4:	78fa      	ldrb	r2, [r7, #3]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	440b      	add	r3, r1
 8002ae2:	335c      	adds	r3, #92	; 0x5c
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002ae8:	78fa      	ldrb	r2, [r7, #3]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	440b      	add	r3, r1
 8002af6:	334c      	adds	r3, #76	; 0x4c
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002afc:	78fa      	ldrb	r2, [r7, #3]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	440b      	add	r3, r1
 8002b0a:	3339      	adds	r3, #57	; 0x39
 8002b0c:	78fa      	ldrb	r2, [r7, #3]
 8002b0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	335d      	adds	r3, #93	; 0x5d
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	78fa      	ldrb	r2, [r7, #3]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	3338      	adds	r3, #56	; 0x38
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	4413      	add	r3, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f005 fca9 	bl	8008490 <USB_HC_StartXfer>
 8002b3e:	4603      	mov	r3, r0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f005 fa1d 	bl	8007f9e <USB_GetMode>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	f040 80f1 	bne.w	8002d4e <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f005 fa01 	bl	8007f78 <USB_ReadInterrupts>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80e7 	beq.w	8002d4c <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f005 f9f8 	bl	8007f78 <USB_ReadInterrupts>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b92:	d104      	bne.n	8002b9e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f005 f9e8 	bl	8007f78 <USB_ReadInterrupts>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bb2:	d104      	bne.n	8002bbe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002bbc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f005 f9d8 	bl	8007f78 <USB_ReadInterrupts>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bd2:	d104      	bne.n	8002bde <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002bdc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f005 f9c8 	bl	8007f78 <USB_ReadInterrupts>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d103      	bne.n	8002bfa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f005 f9ba 	bl	8007f78 <USB_ReadInterrupts>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c0e:	d117      	bne.n	8002c40 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002c1e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c22:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f007 fd73 	bl	800a710 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2101      	movs	r1, #1
 8002c30:	4618      	mov	r0, r3
 8002c32:	f005 fa75 	bl	8008120 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002c3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f005 f997 	bl	8007f78 <USB_ReadInterrupts>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c54:	d102      	bne.n	8002c5c <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f001 f884 	bl	8003d64 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f005 f989 	bl	8007f78 <USB_ReadInterrupts>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d106      	bne.n	8002c7e <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f007 fd31 	bl	800a6d8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2208      	movs	r2, #8
 8002c7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f005 f978 	bl	8007f78 <USB_ReadInterrupts>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c92:	d138      	bne.n	8002d06 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f005 fcf9 	bl	8008690 <USB_HC_ReadInterrupt>
 8002c9e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	e025      	b.n	8002cf2 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f003 030f 	and.w	r3, r3, #15
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d018      	beq.n	8002cec <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	015a      	lsls	r2, r3, #5
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cd0:	d106      	bne.n	8002ce0 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f8cf 	bl	8002e7c <HCD_HC_IN_IRQHandler>
 8002cde:	e005      	b.n	8002cec <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fc3b 	bl	8003562 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d3d4      	bcc.n	8002ca6 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f005 f934 	bl	8007f78 <USB_ReadInterrupts>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b10      	cmp	r3, #16
 8002d18:	d101      	bne.n	8002d1e <HAL_HCD_IRQHandler+0x1d6>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <HAL_HCD_IRQHandler+0x1d8>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d014      	beq.n	8002d4e <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0210 	bic.w	r2, r2, #16
 8002d32:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 ff69 	bl	8003c0c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699a      	ldr	r2, [r3, #24]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0210 	orr.w	r2, r2, #16
 8002d48:	619a      	str	r2, [r3, #24]
 8002d4a:	e000      	b.n	8002d4e <HAL_HCD_IRQHandler+0x206>
      return;
 8002d4c:	bf00      	nop
    }
  }
}
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_HCD_Start+0x16>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e013      	b.n	8002d92 <HAL_HCD_Start+0x3e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f005 f80f 	bl	8007d9a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2101      	movs	r1, #1
 8002d82:	4618      	mov	r0, r3
 8002d84:	f005 fa30 	bl	80081e8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_HCD_Stop+0x16>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e00d      	b.n	8002dcc <HAL_HCD_Stop+0x32>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f005 fd77 	bl	80088b0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f005 f9d7 	bl	8008194 <USB_ResetPort>
 8002de6:	4603      	mov	r3, r0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	440b      	add	r3, r1
 8002e0a:	335c      	adds	r3, #92	; 0x5c
 8002e0c:	781b      	ldrb	r3, [r3, #0]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	460b      	mov	r3, r1
 8002e24:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	440b      	add	r3, r1
 8002e34:	334c      	adds	r3, #76	; 0x4c
 8002e36:	681b      	ldr	r3, [r3, #0]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f005 fa19 	bl	8008288 <USB_GetCurrentFrame>
 8002e56:	4603      	mov	r3, r0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f005 f9f4 	bl	800825a <USB_GetHostSpeed>
 8002e72:	4603      	mov	r3, r0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d119      	bne.n	8002ee0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2304      	movs	r3, #4
 8002ebc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	0151      	lsls	r1, r2, #5
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	440a      	add	r2, r1
 8002ed4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	60d3      	str	r3, [r2, #12]
 8002ede:	e095      	b.n	800300c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	d109      	bne.n	8002f0a <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f02:	461a      	mov	r2, r3
 8002f04:	2320      	movs	r3, #32
 8002f06:	6093      	str	r3, [r2, #8]
 8002f08:	e080      	b.n	800300c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d134      	bne.n	8002f8a <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	0151      	lsls	r1, r2, #5
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	440a      	add	r2, r1
 8002f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f3a:	f043 0302 	orr.w	r3, r3, #2
 8002f3e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	440b      	add	r3, r1
 8002f4e:	335d      	adds	r3, #93	; 0x5d
 8002f50:	2205      	movs	r2, #5
 8002f52:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f60:	461a      	mov	r2, r3
 8002f62:	2310      	movs	r3, #16
 8002f64:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	015a      	lsls	r2, r3, #5
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f72:	461a      	mov	r2, r3
 8002f74:	2308      	movs	r3, #8
 8002f76:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	4611      	mov	r1, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f005 fb95 	bl	80086b2 <USB_HC_Halt>
 8002f88:	e040      	b.n	800300c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	015a      	lsls	r2, r3, #5
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa0:	d134      	bne.n	800300c <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	015a      	lsls	r2, r3, #5
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	0151      	lsls	r1, r2, #5
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	440a      	add	r2, r1
 8002fb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fbc:	f043 0302 	orr.w	r3, r3, #2
 8002fc0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f005 fb70 	bl	80086b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fde:	461a      	mov	r2, r3
 8002fe0:	2310      	movs	r3, #16
 8002fe2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	440b      	add	r3, r1
 8002ff2:	335d      	adds	r3, #93	; 0x5d
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003004:	461a      	mov	r2, r3
 8003006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800300a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4413      	add	r3, r2
 8003014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800301e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003022:	d122      	bne.n	800306a <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4413      	add	r3, r2
 800302c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	0151      	lsls	r1, r2, #5
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	440a      	add	r2, r1
 800303a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800303e:	f043 0302 	orr.w	r3, r3, #2
 8003042:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f005 fb2f 	bl	80086b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003060:	461a      	mov	r2, r3
 8003062:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003066:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003068:	e277      	b.n	800355a <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4413      	add	r3, r2
 8003072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b01      	cmp	r3, #1
 800307e:	f040 80a1 	bne.w	80031c4 <HCD_HC_IN_IRQHandler+0x348>
    hhcd->hc[ch_num].state = HC_XFRC;
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	440b      	add	r3, r1
 8003090:	335d      	adds	r3, #93	; 0x5d
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	440b      	add	r3, r1
 80030a4:	3358      	adds	r3, #88	; 0x58
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b6:	461a      	mov	r2, r3
 80030b8:	2301      	movs	r3, #1
 80030ba:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	440b      	add	r3, r1
 80030ca:	333f      	adds	r3, #63	; 0x3f
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HCD_HC_IN_IRQHandler+0x26c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	440b      	add	r3, r1
 80030e0:	333f      	adds	r3, #63	; 0x3f
 80030e2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d121      	bne.n	800312c <HCD_HC_IN_IRQHandler+0x2b0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	0151      	lsls	r1, r2, #5
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	440a      	add	r2, r1
 80030fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003102:	f043 0302 	orr.w	r3, r3, #2
 8003106:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	4611      	mov	r1, r2
 8003112:	4618      	mov	r0, r3
 8003114:	f005 facd 	bl	80086b2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4413      	add	r3, r2
 8003120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003124:	461a      	mov	r2, r3
 8003126:	2310      	movs	r3, #16
 8003128:	6093      	str	r3, [r2, #8]
 800312a:	e034      	b.n	8003196 <HCD_HC_IN_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	440b      	add	r3, r1
 800313a:	333f      	adds	r3, #63	; 0x3f
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b03      	cmp	r3, #3
 8003140:	d129      	bne.n	8003196 <HCD_HC_IN_IRQHandler+0x31a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	4413      	add	r3, r2
 800314a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	0151      	lsls	r1, r2, #5
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	440a      	add	r2, r1
 8003158:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800315c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003160:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	440b      	add	r3, r1
 8003170:	335c      	adds	r3, #92	; 0x5c
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	b2d8      	uxtb	r0, r3
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	440b      	add	r3, r1
 8003188:	335c      	adds	r3, #92	; 0x5c
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	4601      	mov	r1, r0
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f007 facb 	bl	800a72c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	440b      	add	r3, r1
 80031a4:	3350      	adds	r3, #80	; 0x50
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	f083 0301 	eor.w	r3, r3, #1
 80031ac:	b2d8      	uxtb	r0, r3
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	440b      	add	r3, r1
 80031bc:	3350      	adds	r3, #80	; 0x50
 80031be:	4602      	mov	r2, r0
 80031c0:	701a      	strb	r2, [r3, #0]
}
 80031c2:	e1ca      	b.n	800355a <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	f040 80f1 	bne.w	80033be <HCD_HC_IN_IRQHandler+0x542>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	0151      	lsls	r1, r2, #5
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	440a      	add	r2, r1
 80031f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031f6:	f023 0302 	bic.w	r3, r3, #2
 80031fa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	440b      	add	r3, r1
 800320a:	335d      	adds	r3, #93	; 0x5d
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d10a      	bne.n	8003228 <HCD_HC_IN_IRQHandler+0x3ac>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	440b      	add	r3, r1
 8003220:	335c      	adds	r3, #92	; 0x5c
 8003222:	2201      	movs	r2, #1
 8003224:	701a      	strb	r2, [r3, #0]
 8003226:	e0b0      	b.n	800338a <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	440b      	add	r3, r1
 8003236:	335d      	adds	r3, #93	; 0x5d
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b05      	cmp	r3, #5
 800323c:	d10a      	bne.n	8003254 <HCD_HC_IN_IRQHandler+0x3d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	440b      	add	r3, r1
 800324c:	335c      	adds	r3, #92	; 0x5c
 800324e:	2205      	movs	r2, #5
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	e09a      	b.n	800338a <HCD_HC_IN_IRQHandler+0x50e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	440b      	add	r3, r1
 8003262:	335d      	adds	r3, #93	; 0x5d
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b06      	cmp	r3, #6
 8003268:	d00a      	beq.n	8003280 <HCD_HC_IN_IRQHandler+0x404>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	440b      	add	r3, r1
 8003278:	335d      	adds	r3, #93	; 0x5d
 800327a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800327c:	2b08      	cmp	r3, #8
 800327e:	d156      	bne.n	800332e <HCD_HC_IN_IRQHandler+0x4b2>
      hhcd->hc[ch_num].ErrCnt++;
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	440b      	add	r3, r1
 800328e:	3358      	adds	r3, #88	; 0x58
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	1c59      	adds	r1, r3, #1
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4403      	add	r3, r0
 80032a2:	3358      	adds	r3, #88	; 0x58
 80032a4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	440b      	add	r3, r1
 80032b4:	3358      	adds	r3, #88	; 0x58
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d914      	bls.n	80032e6 <HCD_HC_IN_IRQHandler+0x46a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	440b      	add	r3, r1
 80032ca:	3358      	adds	r3, #88	; 0x58
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	440b      	add	r3, r1
 80032de:	335c      	adds	r3, #92	; 0x5c
 80032e0:	2204      	movs	r2, #4
 80032e2:	701a      	strb	r2, [r3, #0]
 80032e4:	e009      	b.n	80032fa <HCD_HC_IN_IRQHandler+0x47e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	440b      	add	r3, r1
 80032f4:	335c      	adds	r3, #92	; 0x5c
 80032f6:	2202      	movs	r2, #2
 80032f8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	015a      	lsls	r2, r3, #5
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4413      	add	r3, r2
 8003302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003310:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003318:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4413      	add	r3, r2
 8003322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003326:	461a      	mov	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	6013      	str	r3, [r2, #0]
 800332c:	e02d      	b.n	800338a <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	440b      	add	r3, r1
 800333c:	335d      	adds	r3, #93	; 0x5d
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d122      	bne.n	800338a <HCD_HC_IN_IRQHandler+0x50e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	440b      	add	r3, r1
 8003352:	335c      	adds	r3, #92	; 0x5c
 8003354:	2202      	movs	r2, #2
 8003356:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4413      	add	r3, r2
 8003360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800336e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003376:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4413      	add	r3, r2
 8003380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003384:	461a      	mov	r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4413      	add	r3, r2
 8003392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003396:	461a      	mov	r2, r3
 8003398:	2302      	movs	r3, #2
 800339a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	b2d8      	uxtb	r0, r3
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	440b      	add	r3, r1
 80033ae:	335c      	adds	r3, #92	; 0x5c
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	4601      	mov	r1, r0
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f007 f9b8 	bl	800a72c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80033bc:	e0cd      	b.n	800355a <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d0:	2b80      	cmp	r3, #128	; 0x80
 80033d2:	d13e      	bne.n	8003452 <HCD_HC_IN_IRQHandler+0x5d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	0151      	lsls	r1, r2, #5
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	440a      	add	r2, r1
 80033ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033ee:	f043 0302 	orr.w	r3, r3, #2
 80033f2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	440b      	add	r3, r1
 8003402:	3358      	adds	r3, #88	; 0x58
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	1c59      	adds	r1, r3, #1
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4403      	add	r3, r0
 8003416:	3358      	adds	r3, #88	; 0x58
 8003418:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	440b      	add	r3, r1
 8003428:	335d      	adds	r3, #93	; 0x5d
 800342a:	2206      	movs	r2, #6
 800342c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	4611      	mov	r1, r2
 8003438:	4618      	mov	r0, r3
 800343a:	f005 f93a 	bl	80086b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4413      	add	r3, r2
 8003446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344a:	461a      	mov	r2, r3
 800344c:	2380      	movs	r3, #128	; 0x80
 800344e:	6093      	str	r3, [r2, #8]
}
 8003450:	e083      	b.n	800355a <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	4413      	add	r3, r2
 800345a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b10      	cmp	r3, #16
 8003466:	d178      	bne.n	800355a <HCD_HC_IN_IRQHandler+0x6de>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	440b      	add	r3, r1
 8003476:	333f      	adds	r3, #63	; 0x3f
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b03      	cmp	r3, #3
 800347c:	d122      	bne.n	80034c4 <HCD_HC_IN_IRQHandler+0x648>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	440b      	add	r3, r1
 800348c:	3358      	adds	r3, #88	; 0x58
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4413      	add	r3, r2
 800349a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	0151      	lsls	r1, r2, #5
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	440a      	add	r2, r1
 80034a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034ac:	f043 0302 	orr.w	r3, r3, #2
 80034b0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f005 f8f8 	bl	80086b2 <USB_HC_Halt>
 80034c2:	e041      	b.n	8003548 <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	440b      	add	r3, r1
 80034d2:	333f      	adds	r3, #63	; 0x3f
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <HCD_HC_IN_IRQHandler+0x674>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	440b      	add	r3, r1
 80034e8:	333f      	adds	r3, #63	; 0x3f
 80034ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d12b      	bne.n	8003548 <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	440b      	add	r3, r1
 80034fe:	3358      	adds	r3, #88	; 0x58
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	440b      	add	r3, r1
 8003512:	335d      	adds	r3, #93	; 0x5d
 8003514:	2203      	movs	r2, #3
 8003516:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	4413      	add	r3, r2
 8003520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	0151      	lsls	r1, r2, #5
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	440a      	add	r2, r1
 800352e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003532:	f043 0302 	orr.w	r3, r3, #2
 8003536:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	4611      	mov	r1, r2
 8003542:	4618      	mov	r0, r3
 8003544:	f005 f8b5 	bl	80086b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4413      	add	r3, r2
 8003550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003554:	461a      	mov	r2, r3
 8003556:	2310      	movs	r3, #16
 8003558:	6093      	str	r3, [r2, #8]
}
 800355a:	bf00      	nop
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b086      	sub	sp, #24
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	460b      	mov	r3, r1
 800356c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4413      	add	r3, r2
 8003584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b04      	cmp	r3, #4
 8003590:	d119      	bne.n	80035c6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	4413      	add	r3, r2
 800359a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359e:	461a      	mov	r2, r3
 80035a0:	2304      	movs	r3, #4
 80035a2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	0151      	lsls	r1, r2, #5
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	440a      	add	r2, r1
 80035ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035be:	f043 0302 	orr.w	r3, r3, #2
 80035c2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80035c4:	e31e      	b.n	8003c04 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d141      	bne.n	8003660 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e8:	461a      	mov	r2, r3
 80035ea:	2320      	movs	r3, #32
 80035ec:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	440b      	add	r3, r1
 80035fc:	333d      	adds	r3, #61	; 0x3d
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b01      	cmp	r3, #1
 8003602:	f040 82ff 	bne.w	8003c04 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	440b      	add	r3, r1
 8003614:	333d      	adds	r3, #61	; 0x3d
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	440b      	add	r3, r1
 8003628:	335c      	adds	r3, #92	; 0x5c
 800362a:	2202      	movs	r2, #2
 800362c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4413      	add	r3, r2
 8003636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	0151      	lsls	r1, r2, #5
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	440a      	add	r2, r1
 8003644:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003648:	f043 0302 	orr.w	r3, r3, #2
 800364c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	4611      	mov	r1, r2
 8003658:	4618      	mov	r0, r3
 800365a:	f005 f82a 	bl	80086b2 <USB_HC_Halt>
}
 800365e:	e2d1      	b.n	8003c04 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4413      	add	r3, r2
 8003668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003672:	2b40      	cmp	r3, #64	; 0x40
 8003674:	d13f      	bne.n	80036f6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	440b      	add	r3, r1
 8003684:	335d      	adds	r3, #93	; 0x5d
 8003686:	2204      	movs	r2, #4
 8003688:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	440b      	add	r3, r1
 8003698:	333d      	adds	r3, #61	; 0x3d
 800369a:	2201      	movs	r2, #1
 800369c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4613      	mov	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	440b      	add	r3, r1
 80036ac:	3358      	adds	r3, #88	; 0x58
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	0151      	lsls	r1, r2, #5
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	440a      	add	r2, r1
 80036c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036cc:	f043 0302 	orr.w	r3, r3, #2
 80036d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	4611      	mov	r1, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	f004 ffe8 	bl	80086b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ee:	461a      	mov	r2, r3
 80036f0:	2340      	movs	r3, #64	; 0x40
 80036f2:	6093      	str	r3, [r2, #8]
}
 80036f4:	e286      	b.n	8003c04 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800370c:	d122      	bne.n	8003754 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	4413      	add	r3, r2
 8003716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	0151      	lsls	r1, r2, #5
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	440a      	add	r2, r1
 8003724:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003728:	f043 0302 	orr.w	r3, r3, #2
 800372c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	4611      	mov	r1, r2
 8003738:	4618      	mov	r0, r3
 800373a:	f004 ffba 	bl	80086b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4413      	add	r3, r2
 8003746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374a:	461a      	mov	r2, r3
 800374c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003750:	6093      	str	r3, [r2, #8]
}
 8003752:	e257      	b.n	8003c04 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	4413      	add	r3, r2
 800375c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b01      	cmp	r3, #1
 8003768:	d135      	bne.n	80037d6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	440b      	add	r3, r1
 8003778:	3358      	adds	r3, #88	; 0x58
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4413      	add	r3, r2
 8003786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	0151      	lsls	r1, r2, #5
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	440a      	add	r2, r1
 8003794:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003798:	f043 0302 	orr.w	r3, r3, #2
 800379c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	4611      	mov	r1, r2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f004 ff82 	bl	80086b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ba:	461a      	mov	r2, r3
 80037bc:	2301      	movs	r3, #1
 80037be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	440b      	add	r3, r1
 80037ce:	335d      	adds	r3, #93	; 0x5d
 80037d0:	2201      	movs	r2, #1
 80037d2:	701a      	strb	r2, [r3, #0]
}
 80037d4:	e216      	b.n	8003c04 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d12b      	bne.n	8003844 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f8:	461a      	mov	r2, r3
 80037fa:	2308      	movs	r3, #8
 80037fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4413      	add	r3, r2
 8003806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	0151      	lsls	r1, r2, #5
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	440a      	add	r2, r1
 8003814:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003818:	f043 0302 	orr.w	r3, r3, #2
 800381c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	4611      	mov	r1, r2
 8003828:	4618      	mov	r0, r3
 800382a:	f004 ff42 	bl	80086b2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	440b      	add	r3, r1
 800383c:	335d      	adds	r3, #93	; 0x5d
 800383e:	2205      	movs	r2, #5
 8003840:	701a      	strb	r2, [r3, #0]
}
 8003842:	e1df      	b.n	8003c04 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	4413      	add	r3, r2
 800384c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	2b10      	cmp	r3, #16
 8003858:	d135      	bne.n	80038c6 <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	440b      	add	r3, r1
 8003868:	3358      	adds	r3, #88	; 0x58
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4613      	mov	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	440b      	add	r3, r1
 800387c:	335d      	adds	r3, #93	; 0x5d
 800387e:	2203      	movs	r2, #3
 8003880:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4413      	add	r3, r2
 800388a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	0151      	lsls	r1, r2, #5
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	440a      	add	r2, r1
 8003898:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800389c:	f043 0302 	orr.w	r3, r3, #2
 80038a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	4611      	mov	r1, r2
 80038ac:	4618      	mov	r0, r3
 80038ae:	f004 ff00 	bl	80086b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038be:	461a      	mov	r2, r3
 80038c0:	2310      	movs	r3, #16
 80038c2:	6093      	str	r3, [r2, #8]
}
 80038c4:	e19e      	b.n	8003c04 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d8:	2b80      	cmp	r3, #128	; 0x80
 80038da:	d12b      	bne.n	8003934 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	0151      	lsls	r1, r2, #5
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	440a      	add	r2, r1
 80038f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038f6:	f043 0302 	orr.w	r3, r3, #2
 80038fa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	4611      	mov	r1, r2
 8003906:	4618      	mov	r0, r3
 8003908:	f004 fed3 	bl	80086b2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	440b      	add	r3, r1
 800391a:	335d      	adds	r3, #93	; 0x5d
 800391c:	2206      	movs	r2, #6
 800391e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4413      	add	r3, r2
 8003928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800392c:	461a      	mov	r2, r3
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	6093      	str	r3, [r2, #8]
}
 8003932:	e167      	b.n	8003c04 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4413      	add	r3, r2
 800393c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800394a:	d135      	bne.n	80039b8 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4413      	add	r3, r2
 8003954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	0151      	lsls	r1, r2, #5
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	440a      	add	r2, r1
 8003962:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003966:	f043 0302 	orr.w	r3, r3, #2
 800396a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	4611      	mov	r1, r2
 8003976:	4618      	mov	r0, r3
 8003978:	f004 fe9b 	bl	80086b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4413      	add	r3, r2
 8003984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003988:	461a      	mov	r2, r3
 800398a:	2310      	movs	r3, #16
 800398c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4413      	add	r3, r2
 8003996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399a:	461a      	mov	r2, r3
 800399c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	440b      	add	r3, r1
 80039b0:	335d      	adds	r3, #93	; 0x5d
 80039b2:	2208      	movs	r2, #8
 80039b4:	701a      	strb	r2, [r3, #0]
}
 80039b6:	e125      	b.n	8003c04 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	f040 811a 	bne.w	8003c04 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	0151      	lsls	r1, r2, #5
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	440a      	add	r2, r1
 80039e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039ea:	f023 0302 	bic.w	r3, r3, #2
 80039ee:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	440b      	add	r3, r1
 80039fe:	335d      	adds	r3, #93	; 0x5d
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d137      	bne.n	8003a76 <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	440b      	add	r3, r1
 8003a14:	335c      	adds	r3, #92	; 0x5c
 8003a16:	2201      	movs	r2, #1
 8003a18:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	440b      	add	r3, r1
 8003a28:	333f      	adds	r3, #63	; 0x3f
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d00b      	beq.n	8003a48 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	440b      	add	r3, r1
 8003a3e:	333f      	adds	r3, #63	; 0x3f
 8003a40:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	f040 80c5 	bne.w	8003bd2 <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	440b      	add	r3, r1
 8003a56:	3351      	adds	r3, #81	; 0x51
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	f083 0301 	eor.w	r3, r3, #1
 8003a5e:	b2d8      	uxtb	r0, r3
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3351      	adds	r3, #81	; 0x51
 8003a70:	4602      	mov	r2, r0
 8003a72:	701a      	strb	r2, [r3, #0]
 8003a74:	e0ad      	b.n	8003bd2 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	440b      	add	r3, r1
 8003a84:	335d      	adds	r3, #93	; 0x5d
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d10a      	bne.n	8003aa2 <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	440b      	add	r3, r1
 8003a9a:	335c      	adds	r3, #92	; 0x5c
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	701a      	strb	r2, [r3, #0]
 8003aa0:	e097      	b.n	8003bd2 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	440b      	add	r3, r1
 8003ab0:	335d      	adds	r3, #93	; 0x5d
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d10a      	bne.n	8003ace <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	440b      	add	r3, r1
 8003ac6:	335c      	adds	r3, #92	; 0x5c
 8003ac8:	2202      	movs	r2, #2
 8003aca:	701a      	strb	r2, [r3, #0]
 8003acc:	e081      	b.n	8003bd2 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	440b      	add	r3, r1
 8003adc:	335d      	adds	r3, #93	; 0x5d
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b05      	cmp	r3, #5
 8003ae2:	d10a      	bne.n	8003afa <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	440b      	add	r3, r1
 8003af2:	335c      	adds	r3, #92	; 0x5c
 8003af4:	2205      	movs	r2, #5
 8003af6:	701a      	strb	r2, [r3, #0]
 8003af8:	e06b      	b.n	8003bd2 <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	440b      	add	r3, r1
 8003b08:	335d      	adds	r3, #93	; 0x5d
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b06      	cmp	r3, #6
 8003b0e:	d00a      	beq.n	8003b26 <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	440b      	add	r3, r1
 8003b1e:	335d      	adds	r3, #93	; 0x5d
 8003b20:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d155      	bne.n	8003bd2 <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	440b      	add	r3, r1
 8003b34:	3358      	adds	r3, #88	; 0x58
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	1c59      	adds	r1, r3, #1
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4403      	add	r3, r0
 8003b48:	3358      	adds	r3, #88	; 0x58
 8003b4a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	440b      	add	r3, r1
 8003b5a:	3358      	adds	r3, #88	; 0x58
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d914      	bls.n	8003b8c <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4613      	mov	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	440b      	add	r3, r1
 8003b70:	3358      	adds	r3, #88	; 0x58
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	440b      	add	r3, r1
 8003b84:	335c      	adds	r3, #92	; 0x5c
 8003b86:	2204      	movs	r2, #4
 8003b88:	701a      	strb	r2, [r3, #0]
 8003b8a:	e009      	b.n	8003ba0 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	440b      	add	r3, r1
 8003b9a:	335c      	adds	r3, #92	; 0x5c
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bb6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bbe:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bcc:	461a      	mov	r2, r3
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bde:	461a      	mov	r2, r3
 8003be0:	2302      	movs	r3, #2
 8003be2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	b2d8      	uxtb	r0, r3
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	440b      	add	r3, r1
 8003bf6:	335c      	adds	r3, #92	; 0x5c
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	4601      	mov	r1, r0
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f006 fd94 	bl	800a72c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003c04:	bf00      	nop
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08a      	sub	sp, #40	; 0x28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	f003 030f 	and.w	r3, r3, #15
 8003c2c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	0c5b      	lsrs	r3, r3, #17
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	091b      	lsrs	r3, r3, #4
 8003c3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c40:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d003      	beq.n	8003c50 <HCD_RXQLVL_IRQHandler+0x44>
 8003c48:	2b05      	cmp	r3, #5
 8003c4a:	f000 8082 	beq.w	8003d52 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003c4e:	e083      	b.n	8003d58 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d07f      	beq.n	8003d56 <HCD_RXQLVL_IRQHandler+0x14a>
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	440b      	add	r3, r1
 8003c64:	3344      	adds	r3, #68	; 0x44
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d074      	beq.n	8003d56 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6818      	ldr	r0, [r3, #0]
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4613      	mov	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	440b      	add	r3, r1
 8003c7e:	3344      	adds	r3, #68	; 0x44
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	b292      	uxth	r2, r2
 8003c86:	4619      	mov	r1, r3
 8003c88:	f004 f94d 	bl	8007f26 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	440b      	add	r3, r1
 8003c9a:	3344      	adds	r3, #68	; 0x44
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	18d1      	adds	r1, r2, r3
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	4403      	add	r3, r0
 8003cb0:	3344      	adds	r3, #68	; 0x44
 8003cb2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	440b      	add	r3, r1
 8003cc2:	334c      	adds	r3, #76	; 0x4c
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	18d1      	adds	r1, r2, r3
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4403      	add	r3, r0
 8003cd8:	334c      	adds	r3, #76	; 0x4c
 8003cda:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce8:	691a      	ldr	r2, [r3, #16]
 8003cea:	4b1d      	ldr	r3, [pc, #116]	; (8003d60 <HCD_RXQLVL_IRQHandler+0x154>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d031      	beq.n	8003d56 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d08:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d10:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1e:	461a      	mov	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	440b      	add	r3, r1
 8003d32:	3350      	adds	r3, #80	; 0x50
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	f083 0301 	eor.w	r3, r3, #1
 8003d3a:	b2d8      	uxtb	r0, r3
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4613      	mov	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	440b      	add	r3, r1
 8003d4a:	3350      	adds	r3, #80	; 0x50
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	701a      	strb	r2, [r3, #0]
      break;
 8003d50:	e001      	b.n	8003d56 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003d52:	bf00      	nop
 8003d54:	e000      	b.n	8003d58 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003d56:	bf00      	nop
  }
}
 8003d58:	bf00      	nop
 8003d5a:	3728      	adds	r7, #40	; 0x28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	1ff80000 	.word	0x1ff80000

08003d64 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003d90:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d113      	bne.n	8003dc4 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d10a      	bne.n	8003dbc <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699a      	ldr	r2, [r3, #24]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003db4:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f006 fc9c 	bl	800a6f4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f043 0302 	orr.w	r3, r3, #2
 8003dc2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b08      	cmp	r3, #8
 8003dcc:	d147      	bne.n	8003e5e <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f043 0308 	orr.w	r3, r3, #8
 8003dd4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d129      	bne.n	8003e34 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d113      	bne.n	8003e10 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003dee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003df2:	d106      	bne.n	8003e02 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2102      	movs	r1, #2
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f004 f990 	bl	8008120 <USB_InitFSLSPClkSel>
 8003e00:	e011      	b.n	8003e26 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2101      	movs	r1, #1
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f004 f989 	bl	8008120 <USB_InitFSLSPClkSel>
 8003e0e:	e00a      	b.n	8003e26 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d106      	bne.n	8003e26 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003e24:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f006 fc8e 	bl	800a748 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f006 fc61 	bl	800a6f4 <HAL_HCD_Connect_Callback>
 8003e32:	e014      	b.n	8003e5e <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f006 fc95 	bl	800a764 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003e48:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003e4c:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699a      	ldr	r2, [r3, #24]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003e5c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d103      	bne.n	8003e70 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f043 0320 	orr.w	r3, r3, #32
 8003e6e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e76:	461a      	mov	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	6013      	str	r3, [r2, #0]
}
 8003e7c:	bf00      	nop
 8003e7e:	3718      	adds	r7, #24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e081      	b.n	8003f9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fc ff58 	bl	8000d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2224      	movs	r2, #36	; 0x24
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0201 	bic.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ed4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ee4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d107      	bne.n	8003efe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003efa:	609a      	str	r2, [r3, #8]
 8003efc:	e006      	b.n	8003f0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d104      	bne.n	8003f1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691a      	ldr	r2, [r3, #16]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	ea42 0103 	orr.w	r1, r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	021a      	lsls	r2, r3, #8
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	69d9      	ldr	r1, [r3, #28]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1a      	ldr	r2, [r3, #32]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	4608      	mov	r0, r1
 8003fae:	4611      	mov	r1, r2
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	817b      	strh	r3, [r7, #10]
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	813b      	strh	r3, [r7, #8]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b20      	cmp	r3, #32
 8003fc8:	f040 80f9 	bne.w	80041be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <HAL_I2C_Mem_Write+0x34>
 8003fd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d105      	bne.n	8003fe4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fde:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e0ed      	b.n	80041c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_I2C_Mem_Write+0x4e>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e0e6      	b.n	80041c0 <HAL_I2C_Mem_Write+0x21c>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ffa:	f7fe f80b 	bl	8002014 <HAL_GetTick>
 8003ffe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	2319      	movs	r3, #25
 8004006:	2201      	movs	r2, #1
 8004008:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 f955 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0d1      	b.n	80041c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2221      	movs	r2, #33	; 0x21
 8004020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2240      	movs	r2, #64	; 0x40
 8004028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a3a      	ldr	r2, [r7, #32]
 8004036:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800403c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004044:	88f8      	ldrh	r0, [r7, #6]
 8004046:	893a      	ldrh	r2, [r7, #8]
 8004048:	8979      	ldrh	r1, [r7, #10]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	9301      	str	r3, [sp, #4]
 800404e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	4603      	mov	r3, r0
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f8b9 	bl	80041cc <I2C_RequestMemoryWrite>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e0a9      	b.n	80041c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004070:	b29b      	uxth	r3, r3
 8004072:	2bff      	cmp	r3, #255	; 0xff
 8004074:	d90e      	bls.n	8004094 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	22ff      	movs	r2, #255	; 0xff
 800407a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004080:	b2da      	uxtb	r2, r3
 8004082:	8979      	ldrh	r1, [r7, #10]
 8004084:	2300      	movs	r3, #0
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 fa37 	bl	8004500 <I2C_TransferConfig>
 8004092:	e00f      	b.n	80040b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	8979      	ldrh	r1, [r7, #10]
 80040a6:	2300      	movs	r3, #0
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 fa26 	bl	8004500 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 f93f 	bl	800433c <I2C_WaitOnTXISFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e07b      	b.n	80041c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	781a      	ldrb	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d034      	beq.n	800416c <HAL_I2C_Mem_Write+0x1c8>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004106:	2b00      	cmp	r3, #0
 8004108:	d130      	bne.n	800416c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004110:	2200      	movs	r2, #0
 8004112:	2180      	movs	r1, #128	; 0x80
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 f8d1 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e04d      	b.n	80041c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004128:	b29b      	uxth	r3, r3
 800412a:	2bff      	cmp	r3, #255	; 0xff
 800412c:	d90e      	bls.n	800414c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	22ff      	movs	r2, #255	; 0xff
 8004132:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004138:	b2da      	uxtb	r2, r3
 800413a:	8979      	ldrh	r1, [r7, #10]
 800413c:	2300      	movs	r3, #0
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f9db 	bl	8004500 <I2C_TransferConfig>
 800414a:	e00f      	b.n	800416c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415a:	b2da      	uxtb	r2, r3
 800415c:	8979      	ldrh	r1, [r7, #10]
 800415e:	2300      	movs	r3, #0
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 f9ca 	bl	8004500 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d19e      	bne.n	80040b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 f91e 	bl	80043bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e01a      	b.n	80041c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2220      	movs	r2, #32
 8004190:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6859      	ldr	r1, [r3, #4]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <HAL_I2C_Mem_Write+0x224>)
 800419e:	400b      	ands	r3, r1
 80041a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	e000      	b.n	80041c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80041be:	2302      	movs	r3, #2
  }
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	fe00e800 	.word	0xfe00e800

080041cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	4608      	mov	r0, r1
 80041d6:	4611      	mov	r1, r2
 80041d8:	461a      	mov	r2, r3
 80041da:	4603      	mov	r3, r0
 80041dc:	817b      	strh	r3, [r7, #10]
 80041de:	460b      	mov	r3, r1
 80041e0:	813b      	strh	r3, [r7, #8]
 80041e2:	4613      	mov	r3, r2
 80041e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	8979      	ldrh	r1, [r7, #10]
 80041ec:	4b20      	ldr	r3, [pc, #128]	; (8004270 <I2C_RequestMemoryWrite+0xa4>)
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f983 	bl	8004500 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	69b9      	ldr	r1, [r7, #24]
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 f89c 	bl	800433c <I2C_WaitOnTXISFlagUntilTimeout>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e02c      	b.n	8004268 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800420e:	88fb      	ldrh	r3, [r7, #6]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d105      	bne.n	8004220 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004214:	893b      	ldrh	r3, [r7, #8]
 8004216:	b2da      	uxtb	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	629a      	str	r2, [r3, #40]	; 0x28
 800421e:	e015      	b.n	800424c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004220:	893b      	ldrh	r3, [r7, #8]
 8004222:	0a1b      	lsrs	r3, r3, #8
 8004224:	b29b      	uxth	r3, r3
 8004226:	b2da      	uxtb	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	69b9      	ldr	r1, [r7, #24]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 f882 	bl	800433c <I2C_WaitOnTXISFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e012      	b.n	8004268 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004242:	893b      	ldrh	r3, [r7, #8]
 8004244:	b2da      	uxtb	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	2200      	movs	r2, #0
 8004254:	2180      	movs	r1, #128	; 0x80
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 f830 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	80002000 	.word	0x80002000

08004274 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b02      	cmp	r3, #2
 8004288:	d103      	bne.n	8004292 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2200      	movs	r2, #0
 8004290:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b01      	cmp	r3, #1
 800429e:	d007      	beq.n	80042b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	619a      	str	r2, [r3, #24]
  }
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	4613      	mov	r3, r2
 80042ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042cc:	e022      	b.n	8004314 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d4:	d01e      	beq.n	8004314 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d6:	f7fd fe9d 	bl	8002014 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d302      	bcc.n	80042ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d113      	bne.n	8004314 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f0:	f043 0220 	orr.w	r2, r3, #32
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e00f      	b.n	8004334 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	4013      	ands	r3, r2
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	429a      	cmp	r2, r3
 8004322:	bf0c      	ite	eq
 8004324:	2301      	moveq	r3, #1
 8004326:	2300      	movne	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	429a      	cmp	r2, r3
 8004330:	d0cd      	beq.n	80042ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004348:	e02c      	b.n	80043a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68b9      	ldr	r1, [r7, #8]
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f870 	bl	8004434 <I2C_IsAcknowledgeFailed>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e02a      	b.n	80043b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004364:	d01e      	beq.n	80043a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004366:	f7fd fe55 	bl	8002014 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	429a      	cmp	r2, r3
 8004374:	d302      	bcc.n	800437c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d113      	bne.n	80043a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004380:	f043 0220 	orr.w	r2, r3, #32
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e007      	b.n	80043b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d1cb      	bne.n	800434a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043c8:	e028      	b.n	800441c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 f830 	bl	8004434 <I2C_IsAcknowledgeFailed>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e026      	b.n	800442c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043de:	f7fd fe19 	bl	8002014 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d302      	bcc.n	80043f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d113      	bne.n	800441c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f8:	f043 0220 	orr.w	r2, r3, #32
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e007      	b.n	800442c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	2b20      	cmp	r3, #32
 8004428:	d1cf      	bne.n	80043ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	f003 0310 	and.w	r3, r3, #16
 800444a:	2b10      	cmp	r3, #16
 800444c:	d151      	bne.n	80044f2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800444e:	e022      	b.n	8004496 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004456:	d01e      	beq.n	8004496 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004458:	f7fd fddc 	bl	8002014 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	429a      	cmp	r2, r3
 8004466:	d302      	bcc.n	800446e <I2C_IsAcknowledgeFailed+0x3a>
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d113      	bne.n	8004496 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004472:	f043 0220 	orr.w	r2, r3, #32
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e02e      	b.n	80044f4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d1d5      	bne.n	8004450 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2210      	movs	r2, #16
 80044aa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2220      	movs	r2, #32
 80044b2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f7ff fedd 	bl	8004274 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6859      	ldr	r1, [r3, #4]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	4b0d      	ldr	r3, [pc, #52]	; (80044fc <I2C_IsAcknowledgeFailed+0xc8>)
 80044c6:	400b      	ands	r3, r1
 80044c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ce:	f043 0204 	orr.w	r2, r3, #4
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e000      	b.n	80044f4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	fe00e800 	.word	0xfe00e800

08004500 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	607b      	str	r3, [r7, #4]
 800450a:	460b      	mov	r3, r1
 800450c:	817b      	strh	r3, [r7, #10]
 800450e:	4613      	mov	r3, r2
 8004510:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	0d5b      	lsrs	r3, r3, #21
 800451c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004520:	4b0d      	ldr	r3, [pc, #52]	; (8004558 <I2C_TransferConfig+0x58>)
 8004522:	430b      	orrs	r3, r1
 8004524:	43db      	mvns	r3, r3
 8004526:	ea02 0103 	and.w	r1, r2, r3
 800452a:	897b      	ldrh	r3, [r7, #10]
 800452c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004530:	7a7b      	ldrb	r3, [r7, #9]
 8004532:	041b      	lsls	r3, r3, #16
 8004534:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004538:	431a      	orrs	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	431a      	orrs	r2, r3
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	431a      	orrs	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800454a:	bf00      	nop
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	03ff63ff 	.word	0x03ff63ff

0800455c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b20      	cmp	r3, #32
 8004570:	d138      	bne.n	80045e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800457c:	2302      	movs	r3, #2
 800457e:	e032      	b.n	80045e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2224      	movs	r2, #36	; 0x24
 800458c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0201 	bic.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6819      	ldr	r1, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0201 	orr.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	e000      	b.n	80045e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045e4:	2302      	movs	r3, #2
  }
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b085      	sub	sp, #20
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b20      	cmp	r3, #32
 8004606:	d139      	bne.n	800467c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004612:	2302      	movs	r3, #2
 8004614:	e033      	b.n	800467e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2224      	movs	r2, #36	; 0x24
 8004622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0201 	bic.w	r2, r2, #1
 8004634:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004644:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	021b      	lsls	r3, r3, #8
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0201 	orr.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	e000      	b.n	800467e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800467c:	2302      	movs	r3, #2
  }
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
	...

0800468c <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e0af      	b.n	80047fe <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fc fc00 	bl	8000eb8 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0201 	bic.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	e00a      	b.n	80046ec <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	3304      	adds	r3, #4
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	2200      	movs	r2, #0
 80046e4:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	3301      	adds	r3, #1
 80046ea:	617b      	str	r3, [r7, #20]
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	2b0f      	cmp	r3, #15
 80046f0:	d9f1      	bls.n	80046d6 <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f042 0204 	orr.w	r2, r2, #4
 8004700:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	4b3f      	ldr	r3, [pc, #252]	; (8004808 <HAL_LCD_Init+0x17c>)
 800470a:	4013      	ands	r3, r2
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6851      	ldr	r1, [r2, #4]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6892      	ldr	r2, [r2, #8]
 8004714:	4311      	orrs	r1, r2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800471a:	4311      	orrs	r1, r2
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004720:	4311      	orrs	r1, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	69d2      	ldr	r2, [r2, #28]
 8004726:	4311      	orrs	r1, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6a12      	ldr	r2, [r2, #32]
 800472c:	4311      	orrs	r1, r2
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6992      	ldr	r2, [r2, #24]
 8004732:	4311      	orrs	r1, r2
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004738:	4311      	orrs	r1, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	430b      	orrs	r3, r1
 8004740:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f862 	bl	800480c <LCD_WaitForSynchro>
 8004748:	4603      	mov	r3, r0
 800474a:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 800474c:	7cfb      	ldrb	r3, [r7, #19]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <HAL_LCD_Init+0xca>
  {
    return status;
 8004752:	7cfb      	ldrb	r3, [r7, #19]
 8004754:	e053      	b.n	80047fe <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0201 	orr.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 800478e:	f7fd fc41 	bl	8002014 <HAL_GetTick>
 8004792:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8004794:	e00c      	b.n	80047b0 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8004796:	f7fd fc3d 	bl	8002014 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047a4:	d904      	bls.n	80047b0 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2208      	movs	r2, #8
 80047aa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e026      	b.n	80047fe <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d1eb      	bne.n	8004796 <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 80047be:	f7fd fc29 	bl	8002014 <HAL_GetTick>
 80047c2:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80047c4:	e00c      	b.n	80047e0 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80047c6:	f7fd fc25 	bl	8002014 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047d4:	d904      	bls.n	80047e0 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2210      	movs	r2, #16
 80047da:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e00e      	b.n	80047fe <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 0310 	and.w	r3, r3, #16
 80047ea:	2b10      	cmp	r3, #16
 80047ec:	d1eb      	bne.n	80047c6 <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 80047fc:	7cfb      	ldrb	r3, [r7, #19]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	fc00000e 	.word	0xfc00000e

0800480c <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8004814:	f7fd fbfe 	bl	8002014 <HAL_GetTick>
 8004818:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 800481a:	e00c      	b.n	8004836 <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800481c:	f7fd fbfa 	bl	8002014 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800482a:	d904      	bls.n	8004836 <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e007      	b.n	8004846 <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 0320 	and.w	r3, r3, #32
 8004840:	2b20      	cmp	r3, #32
 8004842:	d1eb      	bne.n	800481c <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004854:	4b05      	ldr	r3, [pc, #20]	; (800486c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a04      	ldr	r2, [pc, #16]	; (800486c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800485a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800485e:	6013      	str	r3, [r2, #0]
}
 8004860:	bf00      	nop
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40007000 	.word	0x40007000

08004870 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004874:	4b04      	ldr	r3, [pc, #16]	; (8004888 <HAL_PWREx_GetVoltageRange+0x18>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800487c:	4618      	mov	r0, r3
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40007000 	.word	0x40007000

0800488c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800489a:	d130      	bne.n	80048fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800489c:	4b23      	ldr	r3, [pc, #140]	; (800492c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a8:	d038      	beq.n	800491c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048aa:	4b20      	ldr	r3, [pc, #128]	; (800492c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048b2:	4a1e      	ldr	r2, [pc, #120]	; (800492c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048ba:	4b1d      	ldr	r3, [pc, #116]	; (8004930 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2232      	movs	r2, #50	; 0x32
 80048c0:	fb02 f303 	mul.w	r3, r2, r3
 80048c4:	4a1b      	ldr	r2, [pc, #108]	; (8004934 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80048c6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ca:	0c9b      	lsrs	r3, r3, #18
 80048cc:	3301      	adds	r3, #1
 80048ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048d0:	e002      	b.n	80048d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3b01      	subs	r3, #1
 80048d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048d8:	4b14      	ldr	r3, [pc, #80]	; (800492c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e4:	d102      	bne.n	80048ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1f2      	bne.n	80048d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048ec:	4b0f      	ldr	r3, [pc, #60]	; (800492c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f8:	d110      	bne.n	800491c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e00f      	b.n	800491e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80048fe:	4b0b      	ldr	r3, [pc, #44]	; (800492c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800490a:	d007      	beq.n	800491c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800490c:	4b07      	ldr	r3, [pc, #28]	; (800492c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004914:	4a05      	ldr	r2, [pc, #20]	; (800492c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800491a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40007000 	.word	0x40007000
 8004930:	2000001c 	.word	0x2000001c
 8004934:	431bde83 	.word	0x431bde83

08004938 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800493c:	4b05      	ldr	r3, [pc, #20]	; (8004954 <HAL_PWREx_EnableVddUSB+0x1c>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	4a04      	ldr	r2, [pc, #16]	; (8004954 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004946:	6053      	str	r3, [r2, #4]
}
 8004948:	bf00      	nop
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40007000 	.word	0x40007000

08004958 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af02      	add	r7, sp, #8
 800495e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004960:	f7fd fb58 	bl	8002014 <HAL_GetTick>
 8004964:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e06f      	b.n	8004a50 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_QSPI_Init+0x28>
 800497c:	2302      	movs	r3, #2
 800497e:	e067      	b.n	8004a50 <HAL_QSPI_Init+0xf8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10b      	bne.n	80049ac <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7fc fc25 	bl	80011ec <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80049a2:	f241 3188 	movw	r1, #5000	; 0x1388
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f858 	bl	8004a5c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	021a      	lsls	r2, r3, #8
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	2120      	movs	r1, #32
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f850 	bl	8004a78 <QSPI_WaitFlagStateUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80049dc:	7afb      	ldrb	r3, [r7, #11]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d131      	bne.n	8004a46 <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80049ec:	f023 0310 	bic.w	r3, r3, #16
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6852      	ldr	r2, [r2, #4]
 80049f4:	0611      	lsls	r1, r2, #24
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	68d2      	ldr	r2, [r2, #12]
 80049fa:	4311      	orrs	r1, r2
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6812      	ldr	r2, [r2, #0]
 8004a00:	430b      	orrs	r3, r1
 8004a02:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	4b13      	ldr	r3, [pc, #76]	; (8004a58 <HAL_QSPI_Init+0x100>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6912      	ldr	r2, [r2, #16]
 8004a12:	0411      	lsls	r1, r2, #16
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6952      	ldr	r2, [r2, #20]
 8004a18:	4311      	orrs	r1, r2
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6992      	ldr	r2, [r2, #24]
 8004a1e:	4311      	orrs	r1, r2
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6812      	ldr	r2, [r2, #0]
 8004a24:	430b      	orrs	r3, r1
 8004a26:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004a4e:	7afb      	ldrb	r3, [r7, #11]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	ffe0f8fe 	.word	0xffe0f8fe

08004a5c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	603b      	str	r3, [r7, #0]
 8004a84:	4613      	mov	r3, r2
 8004a86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004a88:	e01a      	b.n	8004ac0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a90:	d016      	beq.n	8004ac0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a92:	f7fd fabf 	bl	8002014 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d302      	bcc.n	8004aa8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10b      	bne.n	8004ac0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2204      	movs	r2, #4
 8004aac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab4:	f043 0201 	orr.w	r2, r3, #1
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e00e      	b.n	8004ade <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689a      	ldr	r2, [r3, #8]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bf14      	ite	ne
 8004ace:	2301      	movne	r3, #1
 8004ad0:	2300      	moveq	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d1d6      	bne.n	8004a8a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e39d      	b.n	8005236 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004afa:	4ba4      	ldr	r3, [pc, #656]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 030c 	and.w	r3, r3, #12
 8004b02:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b04:	4ba1      	ldr	r3, [pc, #644]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0303 	and.w	r3, r3, #3
 8004b0c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0310 	and.w	r3, r3, #16
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 80e1 	beq.w	8004cde <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d007      	beq.n	8004b32 <HAL_RCC_OscConfig+0x4a>
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b0c      	cmp	r3, #12
 8004b26:	f040 8088 	bne.w	8004c3a <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	f040 8084 	bne.w	8004c3a <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b32:	4b96      	ldr	r3, [pc, #600]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d005      	beq.n	8004b4a <HAL_RCC_OscConfig+0x62>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e375      	b.n	8005236 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1a      	ldr	r2, [r3, #32]
 8004b4e:	4b8f      	ldr	r3, [pc, #572]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d004      	beq.n	8004b64 <HAL_RCC_OscConfig+0x7c>
 8004b5a:	4b8c      	ldr	r3, [pc, #560]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b62:	e005      	b.n	8004b70 <HAL_RCC_OscConfig+0x88>
 8004b64:	4b89      	ldr	r3, [pc, #548]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b6a:	091b      	lsrs	r3, r3, #4
 8004b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d223      	bcs.n	8004bbc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 fd09 	bl	8005590 <RCC_SetFlashLatencyFromMSIRange>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e356      	b.n	8005236 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b88:	4b80      	ldr	r3, [pc, #512]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a7f      	ldr	r2, [pc, #508]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004b8e:	f043 0308 	orr.w	r3, r3, #8
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	4b7d      	ldr	r3, [pc, #500]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	497a      	ldr	r1, [pc, #488]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ba6:	4b79      	ldr	r3, [pc, #484]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	021b      	lsls	r3, r3, #8
 8004bb4:	4975      	ldr	r1, [pc, #468]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	604b      	str	r3, [r1, #4]
 8004bba:	e022      	b.n	8004c02 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bbc:	4b73      	ldr	r3, [pc, #460]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a72      	ldr	r2, [pc, #456]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004bc2:	f043 0308 	orr.w	r3, r3, #8
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	4b70      	ldr	r3, [pc, #448]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	496d      	ldr	r1, [pc, #436]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bda:	4b6c      	ldr	r3, [pc, #432]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	021b      	lsls	r3, r3, #8
 8004be8:	4968      	ldr	r1, [pc, #416]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fccc 	bl	8005590 <RCC_SetFlashLatencyFromMSIRange>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e319      	b.n	8005236 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c02:	f000 fc03 	bl	800540c <HAL_RCC_GetSysClockFreq>
 8004c06:	4601      	mov	r1, r0
 8004c08:	4b60      	ldr	r3, [pc, #384]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	091b      	lsrs	r3, r3, #4
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	4a5f      	ldr	r2, [pc, #380]	; (8004d90 <HAL_RCC_OscConfig+0x2a8>)
 8004c14:	5cd3      	ldrb	r3, [r2, r3]
 8004c16:	f003 031f 	and.w	r3, r3, #31
 8004c1a:	fa21 f303 	lsr.w	r3, r1, r3
 8004c1e:	4a5d      	ldr	r2, [pc, #372]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004c20:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c22:	4b5d      	ldr	r3, [pc, #372]	; (8004d98 <HAL_RCC_OscConfig+0x2b0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fd f9a8 	bl	8001f7c <HAL_InitTick>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d052      	beq.n	8004cdc <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8004c36:	7bfb      	ldrb	r3, [r7, #15]
 8004c38:	e2fd      	b.n	8005236 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d032      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c42:	4b52      	ldr	r3, [pc, #328]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a51      	ldr	r2, [pc, #324]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004c48:	f043 0301 	orr.w	r3, r3, #1
 8004c4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c4e:	f7fd f9e1 	bl	8002014 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c56:	f7fd f9dd 	bl	8002014 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e2e6      	b.n	8005236 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c68:	4b48      	ldr	r3, [pc, #288]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0f0      	beq.n	8004c56 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c74:	4b45      	ldr	r3, [pc, #276]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a44      	ldr	r2, [pc, #272]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004c7a:	f043 0308 	orr.w	r3, r3, #8
 8004c7e:	6013      	str	r3, [r2, #0]
 8004c80:	4b42      	ldr	r3, [pc, #264]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	493f      	ldr	r1, [pc, #252]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c92:	4b3e      	ldr	r3, [pc, #248]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	021b      	lsls	r3, r3, #8
 8004ca0:	493a      	ldr	r1, [pc, #232]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	604b      	str	r3, [r1, #4]
 8004ca6:	e01a      	b.n	8004cde <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ca8:	4b38      	ldr	r3, [pc, #224]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a37      	ldr	r2, [pc, #220]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004cae:	f023 0301 	bic.w	r3, r3, #1
 8004cb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cb4:	f7fd f9ae 	bl	8002014 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cbc:	f7fd f9aa 	bl	8002014 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e2b3      	b.n	8005236 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cce:	4b2f      	ldr	r3, [pc, #188]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1f0      	bne.n	8004cbc <HAL_RCC_OscConfig+0x1d4>
 8004cda:	e000      	b.n	8004cde <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cdc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d074      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d005      	beq.n	8004cfc <HAL_RCC_OscConfig+0x214>
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	2b0c      	cmp	r3, #12
 8004cf4:	d10e      	bne.n	8004d14 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	d10b      	bne.n	8004d14 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cfc:	4b23      	ldr	r3, [pc, #140]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d064      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x2ea>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d160      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e290      	b.n	8005236 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d1c:	d106      	bne.n	8004d2c <HAL_RCC_OscConfig+0x244>
 8004d1e:	4b1b      	ldr	r3, [pc, #108]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a1a      	ldr	r2, [pc, #104]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	e01d      	b.n	8004d68 <HAL_RCC_OscConfig+0x280>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d34:	d10c      	bne.n	8004d50 <HAL_RCC_OscConfig+0x268>
 8004d36:	4b15      	ldr	r3, [pc, #84]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a14      	ldr	r2, [pc, #80]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a11      	ldr	r2, [pc, #68]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	e00b      	b.n	8004d68 <HAL_RCC_OscConfig+0x280>
 8004d50:	4b0e      	ldr	r3, [pc, #56]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a0d      	ldr	r2, [pc, #52]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	4b0b      	ldr	r3, [pc, #44]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a0a      	ldr	r2, [pc, #40]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01c      	beq.n	8004daa <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d70:	f7fd f950 	bl	8002014 <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d76:	e011      	b.n	8004d9c <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d78:	f7fd f94c 	bl	8002014 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b64      	cmp	r3, #100	; 0x64
 8004d84:	d90a      	bls.n	8004d9c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e255      	b.n	8005236 <HAL_RCC_OscConfig+0x74e>
 8004d8a:	bf00      	nop
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	0800b898 	.word	0x0800b898
 8004d94:	2000001c 	.word	0x2000001c
 8004d98:	20000020 	.word	0x20000020
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d9c:	4bae      	ldr	r3, [pc, #696]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0e7      	beq.n	8004d78 <HAL_RCC_OscConfig+0x290>
 8004da8:	e014      	b.n	8004dd4 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004daa:	f7fd f933 	bl	8002014 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004db2:	f7fd f92f 	bl	8002014 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b64      	cmp	r3, #100	; 0x64
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e238      	b.n	8005236 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dc4:	4ba4      	ldr	r3, [pc, #656]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1f0      	bne.n	8004db2 <HAL_RCC_OscConfig+0x2ca>
 8004dd0:	e000      	b.n	8004dd4 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d060      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d005      	beq.n	8004df2 <HAL_RCC_OscConfig+0x30a>
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	2b0c      	cmp	r3, #12
 8004dea:	d119      	bne.n	8004e20 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d116      	bne.n	8004e20 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004df2:	4b99      	ldr	r3, [pc, #612]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <HAL_RCC_OscConfig+0x322>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e215      	b.n	8005236 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e0a:	4b93      	ldr	r3, [pc, #588]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	061b      	lsls	r3, r3, #24
 8004e18:	498f      	ldr	r1, [pc, #572]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e1e:	e040      	b.n	8004ea2 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d023      	beq.n	8004e70 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e28:	4b8b      	ldr	r3, [pc, #556]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a8a      	ldr	r2, [pc, #552]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e34:	f7fd f8ee 	bl	8002014 <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e3c:	f7fd f8ea 	bl	8002014 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e1f3      	b.n	8005236 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e4e:	4b82      	ldr	r3, [pc, #520]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0f0      	beq.n	8004e3c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e5a:	4b7f      	ldr	r3, [pc, #508]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	061b      	lsls	r3, r3, #24
 8004e68:	497b      	ldr	r1, [pc, #492]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	604b      	str	r3, [r1, #4]
 8004e6e:	e018      	b.n	8004ea2 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e70:	4b79      	ldr	r3, [pc, #484]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a78      	ldr	r2, [pc, #480]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004e76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7c:	f7fd f8ca 	bl	8002014 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e84:	f7fd f8c6 	bl	8002014 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e1cf      	b.n	8005236 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e96:	4b70      	ldr	r3, [pc, #448]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f0      	bne.n	8004e84 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d03c      	beq.n	8004f28 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d01c      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eb6:	4b68      	ldr	r3, [pc, #416]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ebc:	4a66      	ldr	r2, [pc, #408]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004ebe:	f043 0301 	orr.w	r3, r3, #1
 8004ec2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec6:	f7fd f8a5 	bl	8002014 <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ece:	f7fd f8a1 	bl	8002014 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e1aa      	b.n	8005236 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ee0:	4b5d      	ldr	r3, [pc, #372]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0ef      	beq.n	8004ece <HAL_RCC_OscConfig+0x3e6>
 8004eee:	e01b      	b.n	8004f28 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ef0:	4b59      	ldr	r3, [pc, #356]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ef6:	4a58      	ldr	r2, [pc, #352]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004ef8:	f023 0301 	bic.w	r3, r3, #1
 8004efc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f00:	f7fd f888 	bl	8002014 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f08:	f7fd f884 	bl	8002014 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e18d      	b.n	8005236 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f1a:	4b4f      	ldr	r3, [pc, #316]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1ef      	bne.n	8004f08 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 80a5 	beq.w	8005080 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f36:	2300      	movs	r3, #0
 8004f38:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f3a:	4b47      	ldr	r3, [pc, #284]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10d      	bne.n	8004f62 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f46:	4b44      	ldr	r3, [pc, #272]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4a:	4a43      	ldr	r2, [pc, #268]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f50:	6593      	str	r3, [r2, #88]	; 0x58
 8004f52:	4b41      	ldr	r3, [pc, #260]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f5a:	60bb      	str	r3, [r7, #8]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f62:	4b3e      	ldr	r3, [pc, #248]	; (800505c <HAL_RCC_OscConfig+0x574>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d118      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f6e:	4b3b      	ldr	r3, [pc, #236]	; (800505c <HAL_RCC_OscConfig+0x574>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a3a      	ldr	r2, [pc, #232]	; (800505c <HAL_RCC_OscConfig+0x574>)
 8004f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f7a:	f7fd f84b 	bl	8002014 <HAL_GetTick>
 8004f7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f80:	e008      	b.n	8004f94 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f82:	f7fd f847 	bl	8002014 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e150      	b.n	8005236 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f94:	4b31      	ldr	r3, [pc, #196]	; (800505c <HAL_RCC_OscConfig+0x574>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0f0      	beq.n	8004f82 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d108      	bne.n	8004fba <HAL_RCC_OscConfig+0x4d2>
 8004fa8:	4b2b      	ldr	r3, [pc, #172]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fae:	4a2a      	ldr	r2, [pc, #168]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004fb0:	f043 0301 	orr.w	r3, r3, #1
 8004fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fb8:	e024      	b.n	8005004 <HAL_RCC_OscConfig+0x51c>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	2b05      	cmp	r3, #5
 8004fc0:	d110      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x4fc>
 8004fc2:	4b25      	ldr	r3, [pc, #148]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc8:	4a23      	ldr	r2, [pc, #140]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004fca:	f043 0304 	orr.w	r3, r3, #4
 8004fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fd2:	4b21      	ldr	r3, [pc, #132]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd8:	4a1f      	ldr	r2, [pc, #124]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004fda:	f043 0301 	orr.w	r3, r3, #1
 8004fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fe2:	e00f      	b.n	8005004 <HAL_RCC_OscConfig+0x51c>
 8004fe4:	4b1c      	ldr	r3, [pc, #112]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fea:	4a1b      	ldr	r2, [pc, #108]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004fec:	f023 0301 	bic.w	r3, r3, #1
 8004ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ff4:	4b18      	ldr	r3, [pc, #96]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffa:	4a17      	ldr	r2, [pc, #92]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 8004ffc:	f023 0304 	bic.w	r3, r3, #4
 8005000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d016      	beq.n	800503a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500c:	f7fd f802 	bl	8002014 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005012:	e00a      	b.n	800502a <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005014:	f7fc fffe 	bl	8002014 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005022:	4293      	cmp	r3, r2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e105      	b.n	8005236 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800502a:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <HAL_RCC_OscConfig+0x570>)
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0ed      	beq.n	8005014 <HAL_RCC_OscConfig+0x52c>
 8005038:	e019      	b.n	800506e <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800503a:	f7fc ffeb 	bl	8002014 <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005040:	e00e      	b.n	8005060 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005042:	f7fc ffe7 	bl	8002014 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005050:	4293      	cmp	r3, r2
 8005052:	d905      	bls.n	8005060 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e0ee      	b.n	8005236 <HAL_RCC_OscConfig+0x74e>
 8005058:	40021000 	.word	0x40021000
 800505c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005060:	4b77      	ldr	r3, [pc, #476]	; (8005240 <HAL_RCC_OscConfig+0x758>)
 8005062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1e9      	bne.n	8005042 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800506e:	7ffb      	ldrb	r3, [r7, #31]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d105      	bne.n	8005080 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005074:	4b72      	ldr	r3, [pc, #456]	; (8005240 <HAL_RCC_OscConfig+0x758>)
 8005076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005078:	4a71      	ldr	r2, [pc, #452]	; (8005240 <HAL_RCC_OscConfig+0x758>)
 800507a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800507e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 80d5 	beq.w	8005234 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	2b0c      	cmp	r3, #12
 800508e:	f000 808e 	beq.w	80051ae <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005096:	2b02      	cmp	r3, #2
 8005098:	d15b      	bne.n	8005152 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800509a:	4b69      	ldr	r3, [pc, #420]	; (8005240 <HAL_RCC_OscConfig+0x758>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a68      	ldr	r2, [pc, #416]	; (8005240 <HAL_RCC_OscConfig+0x758>)
 80050a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a6:	f7fc ffb5 	bl	8002014 <HAL_GetTick>
 80050aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ae:	f7fc ffb1 	bl	8002014 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e0ba      	b.n	8005236 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050c0:	4b5f      	ldr	r3, [pc, #380]	; (8005240 <HAL_RCC_OscConfig+0x758>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1f0      	bne.n	80050ae <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050cc:	4b5c      	ldr	r3, [pc, #368]	; (8005240 <HAL_RCC_OscConfig+0x758>)
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	4b5c      	ldr	r3, [pc, #368]	; (8005244 <HAL_RCC_OscConfig+0x75c>)
 80050d2:	4013      	ands	r3, r2
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80050dc:	3a01      	subs	r2, #1
 80050de:	0112      	lsls	r2, r2, #4
 80050e0:	4311      	orrs	r1, r2
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050e6:	0212      	lsls	r2, r2, #8
 80050e8:	4311      	orrs	r1, r2
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80050ee:	0852      	lsrs	r2, r2, #1
 80050f0:	3a01      	subs	r2, #1
 80050f2:	0552      	lsls	r2, r2, #21
 80050f4:	4311      	orrs	r1, r2
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80050fa:	0852      	lsrs	r2, r2, #1
 80050fc:	3a01      	subs	r2, #1
 80050fe:	0652      	lsls	r2, r2, #25
 8005100:	4311      	orrs	r1, r2
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005106:	0912      	lsrs	r2, r2, #4
 8005108:	0452      	lsls	r2, r2, #17
 800510a:	430a      	orrs	r2, r1
 800510c:	494c      	ldr	r1, [pc, #304]	; (8005240 <HAL_RCC_OscConfig+0x758>)
 800510e:	4313      	orrs	r3, r2
 8005110:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005112:	4b4b      	ldr	r3, [pc, #300]	; (8005240 <HAL_RCC_OscConfig+0x758>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a4a      	ldr	r2, [pc, #296]	; (8005240 <HAL_RCC_OscConfig+0x758>)
 8005118:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800511c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800511e:	4b48      	ldr	r3, [pc, #288]	; (8005240 <HAL_RCC_OscConfig+0x758>)
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	4a47      	ldr	r2, [pc, #284]	; (8005240 <HAL_RCC_OscConfig+0x758>)
 8005124:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005128:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512a:	f7fc ff73 	bl	8002014 <HAL_GetTick>
 800512e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005130:	e008      	b.n	8005144 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005132:	f7fc ff6f 	bl	8002014 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e078      	b.n	8005236 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005144:	4b3e      	ldr	r3, [pc, #248]	; (8005240 <HAL_RCC_OscConfig+0x758>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0f0      	beq.n	8005132 <HAL_RCC_OscConfig+0x64a>
 8005150:	e070      	b.n	8005234 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005152:	4b3b      	ldr	r3, [pc, #236]	; (8005240 <HAL_RCC_OscConfig+0x758>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a3a      	ldr	r2, [pc, #232]	; (8005240 <HAL_RCC_OscConfig+0x758>)
 8005158:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800515c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800515e:	4b38      	ldr	r3, [pc, #224]	; (8005240 <HAL_RCC_OscConfig+0x758>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d105      	bne.n	8005176 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800516a:	4b35      	ldr	r3, [pc, #212]	; (8005240 <HAL_RCC_OscConfig+0x758>)
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	4a34      	ldr	r2, [pc, #208]	; (8005240 <HAL_RCC_OscConfig+0x758>)
 8005170:	f023 0303 	bic.w	r3, r3, #3
 8005174:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005176:	4b32      	ldr	r3, [pc, #200]	; (8005240 <HAL_RCC_OscConfig+0x758>)
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	4a31      	ldr	r2, [pc, #196]	; (8005240 <HAL_RCC_OscConfig+0x758>)
 800517c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005184:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005186:	f7fc ff45 	bl	8002014 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800518c:	e008      	b.n	80051a0 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800518e:	f7fc ff41 	bl	8002014 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e04a      	b.n	8005236 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051a0:	4b27      	ldr	r3, [pc, #156]	; (8005240 <HAL_RCC_OscConfig+0x758>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1f0      	bne.n	800518e <HAL_RCC_OscConfig+0x6a6>
 80051ac:	e042      	b.n	8005234 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d101      	bne.n	80051ba <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e03d      	b.n	8005236 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80051ba:	4b21      	ldr	r3, [pc, #132]	; (8005240 <HAL_RCC_OscConfig+0x758>)
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f003 0203 	and.w	r2, r3, #3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d130      	bne.n	8005230 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	3b01      	subs	r3, #1
 80051da:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051dc:	429a      	cmp	r2, r3
 80051de:	d127      	bne.n	8005230 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ea:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d11f      	bne.n	8005230 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051fa:	2a07      	cmp	r2, #7
 80051fc:	bf14      	ite	ne
 80051fe:	2201      	movne	r2, #1
 8005200:	2200      	moveq	r2, #0
 8005202:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005204:	4293      	cmp	r3, r2
 8005206:	d113      	bne.n	8005230 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005212:	085b      	lsrs	r3, r3, #1
 8005214:	3b01      	subs	r3, #1
 8005216:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005218:	429a      	cmp	r2, r3
 800521a:	d109      	bne.n	8005230 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	085b      	lsrs	r3, r3, #1
 8005228:	3b01      	subs	r3, #1
 800522a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800522c:	429a      	cmp	r2, r3
 800522e:	d001      	beq.n	8005234 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e000      	b.n	8005236 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3720      	adds	r7, #32
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	40021000 	.word	0x40021000
 8005244:	f99d808c 	.word	0xf99d808c

08005248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e0c8      	b.n	80053ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800525c:	4b66      	ldr	r3, [pc, #408]	; (80053f8 <HAL_RCC_ClockConfig+0x1b0>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d910      	bls.n	800528c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800526a:	4b63      	ldr	r3, [pc, #396]	; (80053f8 <HAL_RCC_ClockConfig+0x1b0>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f023 0207 	bic.w	r2, r3, #7
 8005272:	4961      	ldr	r1, [pc, #388]	; (80053f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	4313      	orrs	r3, r2
 8005278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800527a:	4b5f      	ldr	r3, [pc, #380]	; (80053f8 <HAL_RCC_ClockConfig+0x1b0>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	429a      	cmp	r2, r3
 8005286:	d001      	beq.n	800528c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e0b0      	b.n	80053ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d04c      	beq.n	8005332 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2b03      	cmp	r3, #3
 800529e:	d107      	bne.n	80052b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052a0:	4b56      	ldr	r3, [pc, #344]	; (80053fc <HAL_RCC_ClockConfig+0x1b4>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d121      	bne.n	80052f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e09e      	b.n	80053ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d107      	bne.n	80052c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052b8:	4b50      	ldr	r3, [pc, #320]	; (80053fc <HAL_RCC_ClockConfig+0x1b4>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d115      	bne.n	80052f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e092      	b.n	80053ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d107      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052d0:	4b4a      	ldr	r3, [pc, #296]	; (80053fc <HAL_RCC_ClockConfig+0x1b4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d109      	bne.n	80052f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e086      	b.n	80053ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052e0:	4b46      	ldr	r3, [pc, #280]	; (80053fc <HAL_RCC_ClockConfig+0x1b4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e07e      	b.n	80053ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052f0:	4b42      	ldr	r3, [pc, #264]	; (80053fc <HAL_RCC_ClockConfig+0x1b4>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f023 0203 	bic.w	r2, r3, #3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	493f      	ldr	r1, [pc, #252]	; (80053fc <HAL_RCC_ClockConfig+0x1b4>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005302:	f7fc fe87 	bl	8002014 <HAL_GetTick>
 8005306:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005308:	e00a      	b.n	8005320 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800530a:	f7fc fe83 	bl	8002014 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	f241 3288 	movw	r2, #5000	; 0x1388
 8005318:	4293      	cmp	r3, r2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e066      	b.n	80053ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005320:	4b36      	ldr	r3, [pc, #216]	; (80053fc <HAL_RCC_ClockConfig+0x1b4>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 020c 	and.w	r2, r3, #12
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	429a      	cmp	r2, r3
 8005330:	d1eb      	bne.n	800530a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d008      	beq.n	8005350 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800533e:	4b2f      	ldr	r3, [pc, #188]	; (80053fc <HAL_RCC_ClockConfig+0x1b4>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	492c      	ldr	r1, [pc, #176]	; (80053fc <HAL_RCC_ClockConfig+0x1b4>)
 800534c:	4313      	orrs	r3, r2
 800534e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005350:	4b29      	ldr	r3, [pc, #164]	; (80053f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d210      	bcs.n	8005380 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535e:	4b26      	ldr	r3, [pc, #152]	; (80053f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f023 0207 	bic.w	r2, r3, #7
 8005366:	4924      	ldr	r1, [pc, #144]	; (80053f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	4313      	orrs	r3, r2
 800536c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800536e:	4b22      	ldr	r3, [pc, #136]	; (80053f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0307 	and.w	r3, r3, #7
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d001      	beq.n	8005380 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e036      	b.n	80053ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	d008      	beq.n	800539e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800538c:	4b1b      	ldr	r3, [pc, #108]	; (80053fc <HAL_RCC_ClockConfig+0x1b4>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	4918      	ldr	r1, [pc, #96]	; (80053fc <HAL_RCC_ClockConfig+0x1b4>)
 800539a:	4313      	orrs	r3, r2
 800539c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d009      	beq.n	80053be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053aa:	4b14      	ldr	r3, [pc, #80]	; (80053fc <HAL_RCC_ClockConfig+0x1b4>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	4910      	ldr	r1, [pc, #64]	; (80053fc <HAL_RCC_ClockConfig+0x1b4>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053be:	f000 f825 	bl	800540c <HAL_RCC_GetSysClockFreq>
 80053c2:	4601      	mov	r1, r0
 80053c4:	4b0d      	ldr	r3, [pc, #52]	; (80053fc <HAL_RCC_ClockConfig+0x1b4>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	091b      	lsrs	r3, r3, #4
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	4a0c      	ldr	r2, [pc, #48]	; (8005400 <HAL_RCC_ClockConfig+0x1b8>)
 80053d0:	5cd3      	ldrb	r3, [r2, r3]
 80053d2:	f003 031f 	and.w	r3, r3, #31
 80053d6:	fa21 f303 	lsr.w	r3, r1, r3
 80053da:	4a0a      	ldr	r2, [pc, #40]	; (8005404 <HAL_RCC_ClockConfig+0x1bc>)
 80053dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80053de:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <HAL_RCC_ClockConfig+0x1c0>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fc fdca 	bl	8001f7c <HAL_InitTick>
 80053e8:	4603      	mov	r3, r0
 80053ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80053ec:	7afb      	ldrb	r3, [r7, #11]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	40022000 	.word	0x40022000
 80053fc:	40021000 	.word	0x40021000
 8005400:	0800b898 	.word	0x0800b898
 8005404:	2000001c 	.word	0x2000001c
 8005408:	20000020 	.word	0x20000020

0800540c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800540c:	b480      	push	{r7}
 800540e:	b089      	sub	sp, #36	; 0x24
 8005410:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	61fb      	str	r3, [r7, #28]
 8005416:	2300      	movs	r3, #0
 8005418:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800541a:	4b3d      	ldr	r3, [pc, #244]	; (8005510 <HAL_RCC_GetSysClockFreq+0x104>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 030c 	and.w	r3, r3, #12
 8005422:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005424:	4b3a      	ldr	r3, [pc, #232]	; (8005510 <HAL_RCC_GetSysClockFreq+0x104>)
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f003 0303 	and.w	r3, r3, #3
 800542c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <HAL_RCC_GetSysClockFreq+0x34>
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	2b0c      	cmp	r3, #12
 8005438:	d121      	bne.n	800547e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d11e      	bne.n	800547e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005440:	4b33      	ldr	r3, [pc, #204]	; (8005510 <HAL_RCC_GetSysClockFreq+0x104>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0308 	and.w	r3, r3, #8
 8005448:	2b00      	cmp	r3, #0
 800544a:	d107      	bne.n	800545c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800544c:	4b30      	ldr	r3, [pc, #192]	; (8005510 <HAL_RCC_GetSysClockFreq+0x104>)
 800544e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005452:	0a1b      	lsrs	r3, r3, #8
 8005454:	f003 030f 	and.w	r3, r3, #15
 8005458:	61fb      	str	r3, [r7, #28]
 800545a:	e005      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800545c:	4b2c      	ldr	r3, [pc, #176]	; (8005510 <HAL_RCC_GetSysClockFreq+0x104>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	091b      	lsrs	r3, r3, #4
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005468:	4a2a      	ldr	r2, [pc, #168]	; (8005514 <HAL_RCC_GetSysClockFreq+0x108>)
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005470:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10d      	bne.n	8005494 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800547c:	e00a      	b.n	8005494 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	2b04      	cmp	r3, #4
 8005482:	d102      	bne.n	800548a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005484:	4b24      	ldr	r3, [pc, #144]	; (8005518 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005486:	61bb      	str	r3, [r7, #24]
 8005488:	e004      	b.n	8005494 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	2b08      	cmp	r3, #8
 800548e:	d101      	bne.n	8005494 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005490:	4b22      	ldr	r3, [pc, #136]	; (800551c <HAL_RCC_GetSysClockFreq+0x110>)
 8005492:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	2b0c      	cmp	r3, #12
 8005498:	d133      	bne.n	8005502 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800549a:	4b1d      	ldr	r3, [pc, #116]	; (8005510 <HAL_RCC_GetSysClockFreq+0x104>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d002      	beq.n	80054b0 <HAL_RCC_GetSysClockFreq+0xa4>
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d003      	beq.n	80054b6 <HAL_RCC_GetSysClockFreq+0xaa>
 80054ae:	e005      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80054b0:	4b19      	ldr	r3, [pc, #100]	; (8005518 <HAL_RCC_GetSysClockFreq+0x10c>)
 80054b2:	617b      	str	r3, [r7, #20]
      break;
 80054b4:	e005      	b.n	80054c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80054b6:	4b19      	ldr	r3, [pc, #100]	; (800551c <HAL_RCC_GetSysClockFreq+0x110>)
 80054b8:	617b      	str	r3, [r7, #20]
      break;
 80054ba:	e002      	b.n	80054c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	617b      	str	r3, [r7, #20]
      break;
 80054c0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054c2:	4b13      	ldr	r3, [pc, #76]	; (8005510 <HAL_RCC_GetSysClockFreq+0x104>)
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	091b      	lsrs	r3, r3, #4
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	3301      	adds	r3, #1
 80054ce:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80054d0:	4b0f      	ldr	r3, [pc, #60]	; (8005510 <HAL_RCC_GetSysClockFreq+0x104>)
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	0a1b      	lsrs	r3, r3, #8
 80054d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	fb02 f203 	mul.w	r2, r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054e8:	4b09      	ldr	r3, [pc, #36]	; (8005510 <HAL_RCC_GetSysClockFreq+0x104>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	0e5b      	lsrs	r3, r3, #25
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	3301      	adds	r3, #1
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005500:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005502:	69bb      	ldr	r3, [r7, #24]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3724      	adds	r7, #36	; 0x24
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	40021000 	.word	0x40021000
 8005514:	0800b8b0 	.word	0x0800b8b0
 8005518:	00f42400 	.word	0x00f42400
 800551c:	007a1200 	.word	0x007a1200

08005520 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005524:	4b03      	ldr	r3, [pc, #12]	; (8005534 <HAL_RCC_GetHCLKFreq+0x14>)
 8005526:	681b      	ldr	r3, [r3, #0]
}
 8005528:	4618      	mov	r0, r3
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	2000001c 	.word	0x2000001c

08005538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800553c:	f7ff fff0 	bl	8005520 <HAL_RCC_GetHCLKFreq>
 8005540:	4601      	mov	r1, r0
 8005542:	4b06      	ldr	r3, [pc, #24]	; (800555c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	0a1b      	lsrs	r3, r3, #8
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	4a04      	ldr	r2, [pc, #16]	; (8005560 <HAL_RCC_GetPCLK1Freq+0x28>)
 800554e:	5cd3      	ldrb	r3, [r2, r3]
 8005550:	f003 031f 	and.w	r3, r3, #31
 8005554:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005558:	4618      	mov	r0, r3
 800555a:	bd80      	pop	{r7, pc}
 800555c:	40021000 	.word	0x40021000
 8005560:	0800b8a8 	.word	0x0800b8a8

08005564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005568:	f7ff ffda 	bl	8005520 <HAL_RCC_GetHCLKFreq>
 800556c:	4601      	mov	r1, r0
 800556e:	4b06      	ldr	r3, [pc, #24]	; (8005588 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	0adb      	lsrs	r3, r3, #11
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	4a04      	ldr	r2, [pc, #16]	; (800558c <HAL_RCC_GetPCLK2Freq+0x28>)
 800557a:	5cd3      	ldrb	r3, [r2, r3]
 800557c:	f003 031f 	and.w	r3, r3, #31
 8005580:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005584:	4618      	mov	r0, r3
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40021000 	.word	0x40021000
 800558c:	0800b8a8 	.word	0x0800b8a8

08005590 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005598:	2300      	movs	r3, #0
 800559a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800559c:	4b2a      	ldr	r3, [pc, #168]	; (8005648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800559e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d003      	beq.n	80055b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80055a8:	f7ff f962 	bl	8004870 <HAL_PWREx_GetVoltageRange>
 80055ac:	6178      	str	r0, [r7, #20]
 80055ae:	e014      	b.n	80055da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055b0:	4b25      	ldr	r3, [pc, #148]	; (8005648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b4:	4a24      	ldr	r2, [pc, #144]	; (8005648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ba:	6593      	str	r3, [r2, #88]	; 0x58
 80055bc:	4b22      	ldr	r3, [pc, #136]	; (8005648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80055c8:	f7ff f952 	bl	8004870 <HAL_PWREx_GetVoltageRange>
 80055cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80055ce:	4b1e      	ldr	r3, [pc, #120]	; (8005648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d2:	4a1d      	ldr	r2, [pc, #116]	; (8005648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e0:	d10b      	bne.n	80055fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b80      	cmp	r3, #128	; 0x80
 80055e6:	d919      	bls.n	800561c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2ba0      	cmp	r3, #160	; 0xa0
 80055ec:	d902      	bls.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80055ee:	2302      	movs	r3, #2
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	e013      	b.n	800561c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055f4:	2301      	movs	r3, #1
 80055f6:	613b      	str	r3, [r7, #16]
 80055f8:	e010      	b.n	800561c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b80      	cmp	r3, #128	; 0x80
 80055fe:	d902      	bls.n	8005606 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005600:	2303      	movs	r3, #3
 8005602:	613b      	str	r3, [r7, #16]
 8005604:	e00a      	b.n	800561c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b80      	cmp	r3, #128	; 0x80
 800560a:	d102      	bne.n	8005612 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800560c:	2302      	movs	r3, #2
 800560e:	613b      	str	r3, [r7, #16]
 8005610:	e004      	b.n	800561c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b70      	cmp	r3, #112	; 0x70
 8005616:	d101      	bne.n	800561c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005618:	2301      	movs	r3, #1
 800561a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800561c:	4b0b      	ldr	r3, [pc, #44]	; (800564c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f023 0207 	bic.w	r2, r3, #7
 8005624:	4909      	ldr	r1, [pc, #36]	; (800564c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800562c:	4b07      	ldr	r3, [pc, #28]	; (800564c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	429a      	cmp	r2, r3
 8005638:	d001      	beq.n	800563e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40021000 	.word	0x40021000
 800564c:	40022000 	.word	0x40022000

08005650 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005658:	2300      	movs	r3, #0
 800565a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800565c:	2300      	movs	r3, #0
 800565e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005668:	2b00      	cmp	r3, #0
 800566a:	d03f      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005670:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005674:	d01c      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005676:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800567a:	d802      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00e      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005680:	e01f      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005682:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005686:	d003      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005688:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800568c:	d01c      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800568e:	e018      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005690:	4b85      	ldr	r3, [pc, #532]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	4a84      	ldr	r2, [pc, #528]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800569a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800569c:	e015      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3304      	adds	r3, #4
 80056a2:	2100      	movs	r1, #0
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 ff41 	bl	800652c <RCCEx_PLLSAI1_Config>
 80056aa:	4603      	mov	r3, r0
 80056ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056ae:	e00c      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3320      	adds	r3, #32
 80056b4:	2100      	movs	r1, #0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f001 f828 	bl	800670c <RCCEx_PLLSAI2_Config>
 80056bc:	4603      	mov	r3, r0
 80056be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056c0:	e003      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	74fb      	strb	r3, [r7, #19]
      break;
 80056c6:	e000      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80056c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056ca:	7cfb      	ldrb	r3, [r7, #19]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10b      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056d0:	4b75      	ldr	r3, [pc, #468]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056de:	4972      	ldr	r1, [pc, #456]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80056e6:	e001      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e8:	7cfb      	ldrb	r3, [r7, #19]
 80056ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d03f      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005700:	d01c      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005702:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005706:	d802      	bhi.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00e      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800570c:	e01f      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800570e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005712:	d003      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005714:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005718:	d01c      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800571a:	e018      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800571c:	4b62      	ldr	r3, [pc, #392]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	4a61      	ldr	r2, [pc, #388]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005726:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005728:	e015      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3304      	adds	r3, #4
 800572e:	2100      	movs	r1, #0
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fefb 	bl	800652c <RCCEx_PLLSAI1_Config>
 8005736:	4603      	mov	r3, r0
 8005738:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800573a:	e00c      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3320      	adds	r3, #32
 8005740:	2100      	movs	r1, #0
 8005742:	4618      	mov	r0, r3
 8005744:	f000 ffe2 	bl	800670c <RCCEx_PLLSAI2_Config>
 8005748:	4603      	mov	r3, r0
 800574a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800574c:	e003      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	74fb      	strb	r3, [r7, #19]
      break;
 8005752:	e000      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005754:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005756:	7cfb      	ldrb	r3, [r7, #19]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10b      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800575c:	4b52      	ldr	r3, [pc, #328]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800575e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005762:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800576a:	494f      	ldr	r1, [pc, #316]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800576c:	4313      	orrs	r3, r2
 800576e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005772:	e001      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005774:	7cfb      	ldrb	r3, [r7, #19]
 8005776:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 80a0 	beq.w	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005786:	2300      	movs	r3, #0
 8005788:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800578a:	4b47      	ldr	r3, [pc, #284]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800578c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800578e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005796:	2301      	movs	r3, #1
 8005798:	e000      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800579a:	2300      	movs	r3, #0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00d      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057a0:	4b41      	ldr	r3, [pc, #260]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a4:	4a40      	ldr	r2, [pc, #256]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057aa:	6593      	str	r3, [r2, #88]	; 0x58
 80057ac:	4b3e      	ldr	r3, [pc, #248]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b4:	60bb      	str	r3, [r7, #8]
 80057b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057b8:	2301      	movs	r3, #1
 80057ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057bc:	4b3b      	ldr	r3, [pc, #236]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a3a      	ldr	r2, [pc, #232]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80057c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057c8:	f7fc fc24 	bl	8002014 <HAL_GetTick>
 80057cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057ce:	e009      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057d0:	f7fc fc20 	bl	8002014 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d902      	bls.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	74fb      	strb	r3, [r7, #19]
        break;
 80057e2:	e005      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057e4:	4b31      	ldr	r3, [pc, #196]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0ef      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80057f0:	7cfb      	ldrb	r3, [r7, #19]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d15c      	bne.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057f6:	4b2c      	ldr	r3, [pc, #176]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005800:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01f      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	429a      	cmp	r2, r3
 8005812:	d019      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005814:	4b24      	ldr	r3, [pc, #144]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800581e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005820:	4b21      	ldr	r3, [pc, #132]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005826:	4a20      	ldr	r2, [pc, #128]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800582c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005830:	4b1d      	ldr	r3, [pc, #116]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005836:	4a1c      	ldr	r2, [pc, #112]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800583c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005840:	4a19      	ldr	r2, [pc, #100]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d016      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005852:	f7fc fbdf 	bl	8002014 <HAL_GetTick>
 8005856:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005858:	e00b      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800585a:	f7fc fbdb 	bl	8002014 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	f241 3288 	movw	r2, #5000	; 0x1388
 8005868:	4293      	cmp	r3, r2
 800586a:	d902      	bls.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	74fb      	strb	r3, [r7, #19]
            break;
 8005870:	e006      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005872:	4b0d      	ldr	r3, [pc, #52]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0ec      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005880:	7cfb      	ldrb	r3, [r7, #19]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10c      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005886:	4b08      	ldr	r3, [pc, #32]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005896:	4904      	ldr	r1, [pc, #16]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800589e:	e009      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058a0:	7cfb      	ldrb	r3, [r7, #19]
 80058a2:	74bb      	strb	r3, [r7, #18]
 80058a4:	e006      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80058a6:	bf00      	nop
 80058a8:	40021000 	.word	0x40021000
 80058ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b0:	7cfb      	ldrb	r3, [r7, #19]
 80058b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058b4:	7c7b      	ldrb	r3, [r7, #17]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d105      	bne.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058ba:	4b9e      	ldr	r3, [pc, #632]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058be:	4a9d      	ldr	r2, [pc, #628]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058d2:	4b98      	ldr	r3, [pc, #608]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d8:	f023 0203 	bic.w	r2, r3, #3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	4994      	ldr	r1, [pc, #592]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00a      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058f4:	4b8f      	ldr	r3, [pc, #572]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fa:	f023 020c 	bic.w	r2, r3, #12
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005902:	498c      	ldr	r1, [pc, #560]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005904:	4313      	orrs	r3, r2
 8005906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0304 	and.w	r3, r3, #4
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005916:	4b87      	ldr	r3, [pc, #540]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005924:	4983      	ldr	r1, [pc, #524]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005926:	4313      	orrs	r3, r2
 8005928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005938:	4b7e      	ldr	r3, [pc, #504]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800593a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005946:	497b      	ldr	r1, [pc, #492]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005948:	4313      	orrs	r3, r2
 800594a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0310 	and.w	r3, r3, #16
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800595a:	4b76      	ldr	r3, [pc, #472]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800595c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005960:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005968:	4972      	ldr	r1, [pc, #456]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800596a:	4313      	orrs	r3, r2
 800596c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800597c:	4b6d      	ldr	r3, [pc, #436]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800597e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005982:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800598a:	496a      	ldr	r1, [pc, #424]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800598c:	4313      	orrs	r3, r2
 800598e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800599e:	4b65      	ldr	r3, [pc, #404]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ac:	4961      	ldr	r1, [pc, #388]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059c0:	4b5c      	ldr	r3, [pc, #368]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ce:	4959      	ldr	r1, [pc, #356]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059e2:	4b54      	ldr	r3, [pc, #336]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f0:	4950      	ldr	r1, [pc, #320]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00a      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a04:	4b4b      	ldr	r3, [pc, #300]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a12:	4948      	ldr	r1, [pc, #288]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a26:	4b43      	ldr	r3, [pc, #268]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a34:	493f      	ldr	r1, [pc, #252]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d028      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a48:	4b3a      	ldr	r3, [pc, #232]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a56:	4937      	ldr	r1, [pc, #220]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a66:	d106      	bne.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a68:	4b32      	ldr	r3, [pc, #200]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	4a31      	ldr	r2, [pc, #196]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a72:	60d3      	str	r3, [r2, #12]
 8005a74:	e011      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a7e:	d10c      	bne.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3304      	adds	r3, #4
 8005a84:	2101      	movs	r1, #1
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fd50 	bl	800652c <RCCEx_PLLSAI1_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005a90:	7cfb      	ldrb	r3, [r7, #19]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8005a96:	7cfb      	ldrb	r3, [r7, #19]
 8005a98:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d028      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005aa6:	4b23      	ldr	r3, [pc, #140]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab4:	491f      	ldr	r1, [pc, #124]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ac4:	d106      	bne.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ac6:	4b1b      	ldr	r3, [pc, #108]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	4a1a      	ldr	r2, [pc, #104]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005acc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ad0:	60d3      	str	r3, [r2, #12]
 8005ad2:	e011      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005adc:	d10c      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 fd21 	bl	800652c <RCCEx_PLLSAI1_Config>
 8005aea:	4603      	mov	r3, r0
 8005aec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005aee:	7cfb      	ldrb	r3, [r7, #19]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8005af4:	7cfb      	ldrb	r3, [r7, #19]
 8005af6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d02b      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b04:	4b0b      	ldr	r3, [pc, #44]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b12:	4908      	ldr	r1, [pc, #32]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b22:	d109      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b24:	4b03      	ldr	r3, [pc, #12]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	4a02      	ldr	r2, [pc, #8]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b2e:	60d3      	str	r3, [r2, #12]
 8005b30:	e014      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005b32:	bf00      	nop
 8005b34:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b40:	d10c      	bne.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	3304      	adds	r3, #4
 8005b46:	2101      	movs	r1, #1
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 fcef 	bl	800652c <RCCEx_PLLSAI1_Config>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b52:	7cfb      	ldrb	r3, [r7, #19]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005b58:	7cfb      	ldrb	r3, [r7, #19]
 8005b5a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d02f      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b68:	4b2b      	ldr	r3, [pc, #172]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b76:	4928      	ldr	r1, [pc, #160]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b86:	d10d      	bne.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	2102      	movs	r1, #2
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 fccc 	bl	800652c <RCCEx_PLLSAI1_Config>
 8005b94:	4603      	mov	r3, r0
 8005b96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b98:	7cfb      	ldrb	r3, [r7, #19]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d014      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005b9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ba0:	74bb      	strb	r3, [r7, #18]
 8005ba2:	e011      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bac:	d10c      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	3320      	adds	r3, #32
 8005bb2:	2102      	movs	r1, #2
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fda9 	bl	800670c <RCCEx_PLLSAI2_Config>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bbe:	7cfb      	ldrb	r3, [r7, #19]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005bc4:	7cfb      	ldrb	r3, [r7, #19]
 8005bc6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00a      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005bd4:	4b10      	ldr	r3, [pc, #64]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bda:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005be2:	490d      	ldr	r1, [pc, #52]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00b      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bf6:	4b08      	ldr	r3, [pc, #32]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c06:	4904      	ldr	r1, [pc, #16]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c0e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	40021000 	.word	0x40021000

08005c1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b088      	sub	sp, #32
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c2e:	d137      	bne.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005c30:	4bb8      	ldr	r3, [pc, #736]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c3a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c42:	d014      	beq.n	8005c6e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8005c44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c48:	d01e      	beq.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8005c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c4e:	d001      	beq.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005c50:	f000 bc53 	b.w	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c54:	4baf      	ldr	r3, [pc, #700]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	f040 8446 	bne.w	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        frequency = LSE_VALUE;
 8005c64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c68:	61fb      	str	r3, [r7, #28]
      break;
 8005c6a:	f000 bc41 	b.w	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005c6e:	4ba9      	ldr	r3, [pc, #676]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	f040 843b 	bne.w	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          frequency = LSI_VALUE;
 8005c7e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005c82:	61fb      	str	r3, [r7, #28]
      break;
 8005c84:	f000 bc36 	b.w	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c88:	4ba2      	ldr	r3, [pc, #648]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c94:	f040 8430 	bne.w	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        frequency = HSE_VALUE / 32U;
 8005c98:	4b9f      	ldr	r3, [pc, #636]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005c9a:	61fb      	str	r3, [r7, #28]
      break;
 8005c9c:	f000 bc2c 	b.w	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ca0:	4b9c      	ldr	r3, [pc, #624]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f003 0303 	and.w	r3, r3, #3
 8005ca8:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d023      	beq.n	8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d02e      	beq.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d139      	bne.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005cb8:	4b96      	ldr	r3, [pc, #600]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d116      	bne.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005cc4:	4b93      	ldr	r3, [pc, #588]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0308 	and.w	r3, r3, #8
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d005      	beq.n	8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8005cd0:	4b90      	ldr	r3, [pc, #576]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	091b      	lsrs	r3, r3, #4
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	e005      	b.n	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8005cdc:	4b8d      	ldr	r3, [pc, #564]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ce2:	0a1b      	lsrs	r3, r3, #8
 8005ce4:	f003 030f 	and.w	r3, r3, #15
 8005ce8:	4a8c      	ldr	r2, [pc, #560]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cee:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005cf0:	e01f      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61bb      	str	r3, [r7, #24]
      break;
 8005cf6:	e01c      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cf8:	4b86      	ldr	r3, [pc, #536]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d04:	d102      	bne.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8005d06:	4b86      	ldr	r3, [pc, #536]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005d08:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005d0a:	e012      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61bb      	str	r3, [r7, #24]
      break;
 8005d10:	e00f      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d12:	4b80      	ldr	r3, [pc, #512]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d1e:	d102      	bne.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8005d20:	4b80      	ldr	r3, [pc, #512]	; (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8005d22:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005d24:	e005      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	61bb      	str	r3, [r7, #24]
      break;
 8005d2a:	e002      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	61bb      	str	r3, [r7, #24]
      break;
 8005d30:	bf00      	nop
    }

    switch(PeriphClk)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d38:	f000 8337 	beq.w	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 8005d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d40:	d825      	bhi.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8005d42:	2b10      	cmp	r3, #16
 8005d44:	f000 81df 	beq.w	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005d48:	2b10      	cmp	r3, #16
 8005d4a:	d80f      	bhi.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	f000 8128 	beq.w	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d803      	bhi.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	f000 80ec 	beq.w	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005d5c:	e3cd      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	f000 8169 	beq.w	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	f000 819a 	beq.w	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 8005d6a:	e3c6      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005d6c:	2b40      	cmp	r3, #64	; 0x40
 8005d6e:	f000 82b3 	beq.w	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
 8005d72:	2b40      	cmp	r3, #64	; 0x40
 8005d74:	d803      	bhi.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8005d76:	2b20      	cmp	r3, #32
 8005d78:	f000 81fd 	beq.w	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 8005d7c:	e3bd      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005d7e:	2b80      	cmp	r3, #128	; 0x80
 8005d80:	f000 82cd 	beq.w	800631e <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8005d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d88:	f000 82ec 	beq.w	8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
      break;
 8005d8c:	e3b5      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005d8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d92:	f000 822d 	beq.w	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8005d96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d9a:	d811      	bhi.n	8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8005d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005da0:	d021      	beq.n	8005de6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8005da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005da6:	d804      	bhi.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dac:	f000 833e 	beq.w	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
      break;
 8005db0:	e3a3      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db6:	d01d      	beq.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8005db8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dbc:	d021      	beq.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8005dbe:	e39c      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc4:	f000 8277 	beq.w	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 8005dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dcc:	d804      	bhi.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dd2:	f000 8371 	beq.w	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
      break;
 8005dd6:	e390      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005dd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ddc:	d011      	beq.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005dde:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005de2:	d00e      	beq.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8005de4:	e389      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005de6:	69b9      	ldr	r1, [r7, #24]
 8005de8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005dec:	f000 fd68 	bl	80068c0 <RCCEx_GetSAIxPeriphCLKFreq>
 8005df0:	61f8      	str	r0, [r7, #28]
      break;
 8005df2:	e382      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005df4:	69b9      	ldr	r1, [r7, #24]
 8005df6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005dfa:	f000 fd61 	bl	80068c0 <RCCEx_GetSAIxPeriphCLKFreq>
 8005dfe:	61f8      	str	r0, [r7, #28]
      break;
 8005e00:	e37b      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005e02:	4b44      	ldr	r3, [pc, #272]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e08:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005e0c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e14:	d023      	beq.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 8005e16:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005e1a:	d003      	beq.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005e1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e20:	d04a      	beq.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 8005e22:	e086      	b.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005e24:	4b3b      	ldr	r3, [pc, #236]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d17b      	bne.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005e30:	4b38      	ldr	r3, [pc, #224]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0308 	and.w	r3, r3, #8
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8005e3c:	4b35      	ldr	r3, [pc, #212]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	091b      	lsrs	r3, r3, #4
 8005e42:	f003 030f 	and.w	r3, r3, #15
 8005e46:	e005      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8005e48:	4b32      	ldr	r3, [pc, #200]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e4e:	0a1b      	lsrs	r3, r3, #8
 8005e50:	f003 030f 	and.w	r3, r3, #15
 8005e54:	4a31      	ldr	r2, [pc, #196]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e5a:	61fb      	str	r3, [r7, #28]
          break;
 8005e5c:	e064      	b.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005e5e:	4b2d      	ldr	r3, [pc, #180]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e6a:	d15f      	bne.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005e6c:	4b29      	ldr	r3, [pc, #164]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e78:	d158      	bne.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005e7a:	4b26      	ldr	r3, [pc, #152]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	0a1b      	lsrs	r3, r3, #8
 8005e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e84:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	fb02 f203 	mul.w	r2, r2, r3
 8005e8e:	4b21      	ldr	r3, [pc, #132]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	091b      	lsrs	r3, r3, #4
 8005e94:	f003 0307 	and.w	r3, r3, #7
 8005e98:	3301      	adds	r3, #1
 8005e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005ea0:	4b1c      	ldr	r3, [pc, #112]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	0d5b      	lsrs	r3, r3, #21
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	3301      	adds	r3, #1
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb4:	61fb      	str	r3, [r7, #28]
          break;
 8005eb6:	e039      	b.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005eb8:	4b16      	ldr	r3, [pc, #88]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ec0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ec4:	d134      	bne.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005ec6:	4b13      	ldr	r3, [pc, #76]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ed2:	d12d      	bne.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005ed4:	4b0f      	ldr	r3, [pc, #60]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	0a1b      	lsrs	r3, r3, #8
 8005eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ede:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	fb02 f203 	mul.w	r2, r2, r3
 8005ee8:	4b0a      	ldr	r3, [pc, #40]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	091b      	lsrs	r3, r3, #4
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005efa:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	0d5b      	lsrs	r3, r3, #21
 8005f00:	f003 0303 	and.w	r3, r3, #3
 8005f04:	3301      	adds	r3, #1
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0e:	61fb      	str	r3, [r7, #28]
          break;
 8005f10:	e00e      	b.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005f12:	bf00      	nop
 8005f14:	40021000 	.word	0x40021000
 8005f18:	0003d090 	.word	0x0003d090
 8005f1c:	0800b8b0 	.word	0x0800b8b0
 8005f20:	00f42400 	.word	0x00f42400
 8005f24:	007a1200 	.word	0x007a1200
          break;
 8005f28:	bf00      	nop
 8005f2a:	e2e6      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005f2c:	bf00      	nop
 8005f2e:	e2e4      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005f30:	bf00      	nop
        break;
 8005f32:	e2e2      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005f34:	4bac      	ldr	r3, [pc, #688]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f3a:	f003 0303 	and.w	r3, r3, #3
 8005f3e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d827      	bhi.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8005f46:	a201      	add	r2, pc, #4	; (adr r2, 8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4c:	08005f5d 	.word	0x08005f5d
 8005f50:	08005f65 	.word	0x08005f65
 8005f54:	08005f6d 	.word	0x08005f6d
 8005f58:	08005f81 	.word	0x08005f81
          frequency = HAL_RCC_GetPCLK2Freq();
 8005f5c:	f7ff fb02 	bl	8005564 <HAL_RCC_GetPCLK2Freq>
 8005f60:	61f8      	str	r0, [r7, #28]
          break;
 8005f62:	e01d      	b.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f64:	f7ff fa52 	bl	800540c <HAL_RCC_GetSysClockFreq>
 8005f68:	61f8      	str	r0, [r7, #28]
          break;
 8005f6a:	e019      	b.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f6c:	4b9e      	ldr	r3, [pc, #632]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f78:	d10f      	bne.n	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 8005f7a:	4b9c      	ldr	r3, [pc, #624]	; (80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005f7c:	61fb      	str	r3, [r7, #28]
          break;
 8005f7e:	e00c      	b.n	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005f80:	4b99      	ldr	r3, [pc, #612]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d107      	bne.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 8005f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f92:	61fb      	str	r3, [r7, #28]
          break;
 8005f94:	e003      	b.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 8005f96:	bf00      	nop
 8005f98:	e2af      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005f9a:	bf00      	nop
 8005f9c:	e2ad      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005f9e:	bf00      	nop
        break;
 8005fa0:	e2ab      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005fa2:	4b91      	ldr	r3, [pc, #580]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa8:	f003 030c 	and.w	r3, r3, #12
 8005fac:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	2b0c      	cmp	r3, #12
 8005fb2:	d83a      	bhi.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8005fb4:	a201      	add	r2, pc, #4	; (adr r2, 8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8005fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fba:	bf00      	nop
 8005fbc:	08005ff1 	.word	0x08005ff1
 8005fc0:	0800602b 	.word	0x0800602b
 8005fc4:	0800602b 	.word	0x0800602b
 8005fc8:	0800602b 	.word	0x0800602b
 8005fcc:	08005ff9 	.word	0x08005ff9
 8005fd0:	0800602b 	.word	0x0800602b
 8005fd4:	0800602b 	.word	0x0800602b
 8005fd8:	0800602b 	.word	0x0800602b
 8005fdc:	08006001 	.word	0x08006001
 8005fe0:	0800602b 	.word	0x0800602b
 8005fe4:	0800602b 	.word	0x0800602b
 8005fe8:	0800602b 	.word	0x0800602b
 8005fec:	08006015 	.word	0x08006015
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ff0:	f7ff faa2 	bl	8005538 <HAL_RCC_GetPCLK1Freq>
 8005ff4:	61f8      	str	r0, [r7, #28]
          break;
 8005ff6:	e01d      	b.n	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ff8:	f7ff fa08 	bl	800540c <HAL_RCC_GetSysClockFreq>
 8005ffc:	61f8      	str	r0, [r7, #28]
          break;
 8005ffe:	e019      	b.n	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006000:	4b79      	ldr	r3, [pc, #484]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800600c:	d10f      	bne.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 800600e:	4b77      	ldr	r3, [pc, #476]	; (80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8006010:	61fb      	str	r3, [r7, #28]
          break;
 8006012:	e00c      	b.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006014:	4b74      	ldr	r3, [pc, #464]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b02      	cmp	r3, #2
 8006020:	d107      	bne.n	8006032 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 8006022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006026:	61fb      	str	r3, [r7, #28]
          break;
 8006028:	e003      	b.n	8006032 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 800602a:	bf00      	nop
 800602c:	e265      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800602e:	bf00      	nop
 8006030:	e263      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006032:	bf00      	nop
        break;
 8006034:	e261      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006036:	4b6c      	ldr	r3, [pc, #432]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006040:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	2b10      	cmp	r3, #16
 8006046:	d00d      	beq.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8006048:	2b10      	cmp	r3, #16
 800604a:	d802      	bhi.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800604c:	2b00      	cmp	r3, #0
 800604e:	d005      	beq.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 8006050:	e024      	b.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 8006052:	2b20      	cmp	r3, #32
 8006054:	d00a      	beq.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8006056:	2b30      	cmp	r3, #48	; 0x30
 8006058:	d012      	beq.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 800605a:	e01f      	b.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 800605c:	f7ff fa6c 	bl	8005538 <HAL_RCC_GetPCLK1Freq>
 8006060:	61f8      	str	r0, [r7, #28]
          break;
 8006062:	e01b      	b.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 8006064:	f7ff f9d2 	bl	800540c <HAL_RCC_GetSysClockFreq>
 8006068:	61f8      	str	r0, [r7, #28]
          break;
 800606a:	e017      	b.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800606c:	4b5e      	ldr	r3, [pc, #376]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006078:	d10d      	bne.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 800607a:	4b5c      	ldr	r3, [pc, #368]	; (80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800607c:	61fb      	str	r3, [r7, #28]
          break;
 800607e:	e00a      	b.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006080:	4b59      	ldr	r3, [pc, #356]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b02      	cmp	r3, #2
 800608c:	d105      	bne.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 800608e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006092:	61fb      	str	r3, [r7, #28]
          break;
 8006094:	e001      	b.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8006096:	bf00      	nop
 8006098:	e22f      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800609a:	bf00      	nop
        break;
 800609c:	e22d      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800609e:	4b52      	ldr	r3, [pc, #328]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80060a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80060a8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	2b40      	cmp	r3, #64	; 0x40
 80060ae:	d00d      	beq.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 80060b0:	2b40      	cmp	r3, #64	; 0x40
 80060b2:	d802      	bhi.n	80060ba <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d005      	beq.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 80060b8:	e024      	b.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 80060ba:	2b80      	cmp	r3, #128	; 0x80
 80060bc:	d00a      	beq.n	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80060be:	2bc0      	cmp	r3, #192	; 0xc0
 80060c0:	d012      	beq.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 80060c2:	e01f      	b.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80060c4:	f7ff fa38 	bl	8005538 <HAL_RCC_GetPCLK1Freq>
 80060c8:	61f8      	str	r0, [r7, #28]
          break;
 80060ca:	e01b      	b.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 80060cc:	f7ff f99e 	bl	800540c <HAL_RCC_GetSysClockFreq>
 80060d0:	61f8      	str	r0, [r7, #28]
          break;
 80060d2:	e017      	b.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060d4:	4b44      	ldr	r3, [pc, #272]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060e0:	d10d      	bne.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 80060e2:	4b42      	ldr	r3, [pc, #264]	; (80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80060e4:	61fb      	str	r3, [r7, #28]
          break;
 80060e6:	e00a      	b.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80060e8:	4b3f      	ldr	r3, [pc, #252]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80060ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d105      	bne.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 80060f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060fa:	61fb      	str	r3, [r7, #28]
          break;
 80060fc:	e001      	b.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 80060fe:	bf00      	nop
 8006100:	e1fb      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006102:	bf00      	nop
        break;
 8006104:	e1f9      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006106:	4b38      	ldr	r3, [pc, #224]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800610c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006110:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006118:	d010      	beq.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 800611a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800611e:	d802      	bhi.n	8006126 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8006120:	2b00      	cmp	r3, #0
 8006122:	d007      	beq.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 8006124:	e026      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 8006126:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800612a:	d00b      	beq.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800612c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006130:	d012      	beq.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 8006132:	e01f      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006134:	f7ff fa00 	bl	8005538 <HAL_RCC_GetPCLK1Freq>
 8006138:	61f8      	str	r0, [r7, #28]
          break;
 800613a:	e01b      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 800613c:	f7ff f966 	bl	800540c <HAL_RCC_GetSysClockFreq>
 8006140:	61f8      	str	r0, [r7, #28]
          break;
 8006142:	e017      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006144:	4b28      	ldr	r3, [pc, #160]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800614c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006150:	d10d      	bne.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 8006152:	4b26      	ldr	r3, [pc, #152]	; (80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8006154:	61fb      	str	r3, [r7, #28]
          break;
 8006156:	e00a      	b.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006158:	4b23      	ldr	r3, [pc, #140]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800615a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b02      	cmp	r3, #2
 8006164:	d105      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 8006166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800616a:	61fb      	str	r3, [r7, #28]
          break;
 800616c:	e001      	b.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 800616e:	bf00      	nop
 8006170:	e1c3      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006172:	bf00      	nop
        break;
 8006174:	e1c1      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006176:	4b1c      	ldr	r3, [pc, #112]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006180:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006188:	d010      	beq.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800618a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800618e:	d802      	bhi.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006190:	2b00      	cmp	r3, #0
 8006192:	d007      	beq.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 8006194:	e026      	b.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 8006196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800619a:	d00b      	beq.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800619c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061a0:	d012      	beq.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 80061a2:	e01f      	b.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80061a4:	f7ff f9c8 	bl	8005538 <HAL_RCC_GetPCLK1Freq>
 80061a8:	61f8      	str	r0, [r7, #28]
          break;
 80061aa:	e01b      	b.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 80061ac:	f7ff f92e 	bl	800540c <HAL_RCC_GetSysClockFreq>
 80061b0:	61f8      	str	r0, [r7, #28]
          break;
 80061b2:	e017      	b.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061b4:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061c0:	d10d      	bne.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 80061c2:	4b0a      	ldr	r3, [pc, #40]	; (80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80061c4:	61fb      	str	r3, [r7, #28]
          break;
 80061c6:	e00a      	b.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80061c8:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80061ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d105      	bne.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 80061d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061da:	61fb      	str	r3, [r7, #28]
          break;
 80061dc:	e001      	b.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 80061de:	bf00      	nop
 80061e0:	e18b      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80061e2:	bf00      	nop
        break;
 80061e4:	e189      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80061e6:	bf00      	nop
 80061e8:	40021000 	.word	0x40021000
 80061ec:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80061f0:	4bae      	ldr	r3, [pc, #696]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80061f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061fa:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006202:	d02f      	beq.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8006204:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006208:	d003      	beq.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800620a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800620e:	d004      	beq.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 8006210:	e050      	b.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetSysClockFreq();
 8006212:	f7ff f8fb 	bl	800540c <HAL_RCC_GetSysClockFreq>
 8006216:	61f8      	str	r0, [r7, #28]
          break;
 8006218:	e04c      	b.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 800621a:	4ba4      	ldr	r3, [pc, #656]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d043      	beq.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006226:	4ba1      	ldr	r3, [pc, #644]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	0a1b      	lsrs	r3, r3, #8
 800622c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006230:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	fb02 f203 	mul.w	r2, r2, r3
 800623a:	4b9c      	ldr	r3, [pc, #624]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	091b      	lsrs	r3, r3, #4
 8006240:	f003 0307 	and.w	r3, r3, #7
 8006244:	3301      	adds	r3, #1
 8006246:	fbb2 f3f3 	udiv	r3, r2, r3
 800624a:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800624c:	4b97      	ldr	r3, [pc, #604]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	0e5b      	lsrs	r3, r3, #25
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	3301      	adds	r3, #1
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006260:	61fb      	str	r3, [r7, #28]
          break;
 8006262:	e024      	b.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 8006264:	4b91      	ldr	r3, [pc, #580]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d020      	beq.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006270:	4b8e      	ldr	r3, [pc, #568]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	0a1b      	lsrs	r3, r3, #8
 8006276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800627a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	fb02 f203 	mul.w	r2, r2, r3
 8006284:	4b89      	ldr	r3, [pc, #548]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	091b      	lsrs	r3, r3, #4
 800628a:	f003 0307 	and.w	r3, r3, #7
 800628e:	3301      	adds	r3, #1
 8006290:	fbb2 f3f3 	udiv	r3, r2, r3
 8006294:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8006296:	4b85      	ldr	r3, [pc, #532]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	0e5b      	lsrs	r3, r3, #25
 800629c:	f003 0303 	and.w	r3, r3, #3
 80062a0:	3301      	adds	r3, #1
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062aa:	61fb      	str	r3, [r7, #28]
          break;
 80062ac:	e001      	b.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          break;
 80062ae:	bf00      	nop
 80062b0:	e123      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80062b2:	bf00      	nop
        break;
 80062b4:	e121      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80062b6:	4b7d      	ldr	r3, [pc, #500]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80062b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062c0:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d103      	bne.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetPCLK2Freq();
 80062c8:	f7ff f94c 	bl	8005564 <HAL_RCC_GetPCLK2Freq>
 80062cc:	61f8      	str	r0, [r7, #28]
        break;
 80062ce:	e114      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 80062d0:	f7ff f89c 	bl	800540c <HAL_RCC_GetSysClockFreq>
 80062d4:	61f8      	str	r0, [r7, #28]
        break;
 80062d6:	e110      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80062d8:	4b74      	ldr	r3, [pc, #464]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80062da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80062e2:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ea:	d009      	beq.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 80062ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062f0:	d00a      	beq.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d000      	beq.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          break;
 80062f6:	e011      	b.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetPCLK1Freq();
 80062f8:	f7ff f91e 	bl	8005538 <HAL_RCC_GetPCLK1Freq>
 80062fc:	61f8      	str	r0, [r7, #28]
          break;
 80062fe:	e00d      	b.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetSysClockFreq();
 8006300:	f7ff f884 	bl	800540c <HAL_RCC_GetSysClockFreq>
 8006304:	61f8      	str	r0, [r7, #28]
          break;
 8006306:	e009      	b.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006308:	4b68      	ldr	r3, [pc, #416]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006314:	d101      	bne.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
            frequency = HSI_VALUE;
 8006316:	4b66      	ldr	r3, [pc, #408]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006318:	61fb      	str	r3, [r7, #28]
          break;
 800631a:	bf00      	nop
        break;
 800631c:	e0ed      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800631e:	4b63      	ldr	r3, [pc, #396]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006324:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006328:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006330:	d009      	beq.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8006332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006336:	d00a      	beq.n	800634e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 8006338:	2b00      	cmp	r3, #0
 800633a:	d000      	beq.n	800633e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 800633c:	e011      	b.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetPCLK1Freq();
 800633e:	f7ff f8fb 	bl	8005538 <HAL_RCC_GetPCLK1Freq>
 8006342:	61f8      	str	r0, [r7, #28]
          break;
 8006344:	e00d      	b.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetSysClockFreq();
 8006346:	f7ff f861 	bl	800540c <HAL_RCC_GetSysClockFreq>
 800634a:	61f8      	str	r0, [r7, #28]
          break;
 800634c:	e009      	b.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800634e:	4b57      	ldr	r3, [pc, #348]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800635a:	d101      	bne.n	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
            frequency = HSI_VALUE;
 800635c:	4b54      	ldr	r3, [pc, #336]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800635e:	61fb      	str	r3, [r7, #28]
          break;
 8006360:	bf00      	nop
        break;
 8006362:	e0ca      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006364:	4b51      	ldr	r3, [pc, #324]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800636e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006376:	d009      	beq.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006378:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800637c:	d00a      	beq.n	8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
 800637e:	2b00      	cmp	r3, #0
 8006380:	d000      	beq.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 8006382:	e011      	b.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006384:	f7ff f8d8 	bl	8005538 <HAL_RCC_GetPCLK1Freq>
 8006388:	61f8      	str	r0, [r7, #28]
          break;
 800638a:	e00d      	b.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetSysClockFreq();
 800638c:	f7ff f83e 	bl	800540c <HAL_RCC_GetSysClockFreq>
 8006390:	61f8      	str	r0, [r7, #28]
          break;
 8006392:	e009      	b.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006394:	4b45      	ldr	r3, [pc, #276]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800639c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063a0:	d101      	bne.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            frequency = HSI_VALUE;
 80063a2:	4b43      	ldr	r3, [pc, #268]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80063a4:	61fb      	str	r3, [r7, #28]
          break;
 80063a6:	bf00      	nop
        break;
 80063a8:	e0a7      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80063aa:	4b40      	ldr	r3, [pc, #256]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80063ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80063b4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063bc:	d010      	beq.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 80063be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063c2:	d802      	bhi.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d007      	beq.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
          break;
 80063c8:	e02f      	b.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
        switch(srcclk)
 80063ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80063ce:	d012      	beq.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 80063d0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80063d4:	d019      	beq.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 80063d6:	e028      	b.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80063d8:	f7ff f8ae 	bl	8005538 <HAL_RCC_GetPCLK1Freq>
 80063dc:	61f8      	str	r0, [r7, #28]
          break;
 80063de:	e024      	b.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80063e0:	4b32      	ldr	r3, [pc, #200]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80063e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d118      	bne.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
              frequency = LSI_VALUE;
 80063ee:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80063f2:	61fb      	str	r3, [r7, #28]
          break;
 80063f4:	e014      	b.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063f6:	4b2d      	ldr	r3, [pc, #180]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006402:	d10f      	bne.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
            frequency = HSI_VALUE;
 8006404:	4b2a      	ldr	r3, [pc, #168]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006406:	61fb      	str	r3, [r7, #28]
          break;
 8006408:	e00c      	b.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800640a:	4b28      	ldr	r3, [pc, #160]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800640c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b02      	cmp	r3, #2
 8006416:	d107      	bne.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
            frequency = LSE_VALUE;
 8006418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800641c:	61fb      	str	r3, [r7, #28]
          break;
 800641e:	e003      	b.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          break;
 8006420:	bf00      	nop
 8006422:	e06a      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006424:	bf00      	nop
 8006426:	e068      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006428:	bf00      	nop
        break;
 800642a:	e066      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800642c:	4b1f      	ldr	r3, [pc, #124]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800642e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006432:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006436:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800643e:	d010      	beq.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006440:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006444:	d802      	bhi.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8006446:	2b00      	cmp	r3, #0
 8006448:	d007      	beq.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          break;
 800644a:	e034      	b.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
        switch(srcclk)
 800644c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006450:	d012      	beq.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8006452:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006456:	d019      	beq.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          break;
 8006458:	e02d      	b.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800645a:	f7ff f86d 	bl	8005538 <HAL_RCC_GetPCLK1Freq>
 800645e:	61f8      	str	r0, [r7, #28]
          break;
 8006460:	e029      	b.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006462:	4b12      	ldr	r3, [pc, #72]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006464:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b02      	cmp	r3, #2
 800646e:	d118      	bne.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = LSI_VALUE;
 8006470:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006474:	61fb      	str	r3, [r7, #28]
          break;
 8006476:	e014      	b.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006478:	4b0c      	ldr	r3, [pc, #48]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006484:	d10f      	bne.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
            frequency = HSI_VALUE;
 8006486:	4b0a      	ldr	r3, [pc, #40]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006488:	61fb      	str	r3, [r7, #28]
          break;
 800648a:	e00c      	b.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800648c:	4b07      	ldr	r3, [pc, #28]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800648e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b02      	cmp	r3, #2
 8006498:	d10c      	bne.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
            frequency = LSE_VALUE;
 800649a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800649e:	61fb      	str	r3, [r7, #28]
          break;
 80064a0:	e008      	b.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          break;
 80064a2:	bf00      	nop
 80064a4:	e029      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80064a6:	bf00      	nop
 80064a8:	e027      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80064aa:	bf00      	nop
 80064ac:	40021000 	.word	0x40021000
 80064b0:	00f42400 	.word	0x00f42400
          break;
 80064b4:	bf00      	nop
        break;
 80064b6:	e020      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80064b8:	4b12      	ldr	r3, [pc, #72]	; (8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80064ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80064c2:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
 80064ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ce:	d004      	beq.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          break;
 80064d0:	e00d      	b.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 80064d2:	f7ff f831 	bl	8005538 <HAL_RCC_GetPCLK1Freq>
 80064d6:	61f8      	str	r0, [r7, #28]
          break;
 80064d8:	e009      	b.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064da:	4b0a      	ldr	r3, [pc, #40]	; (8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064e6:	d101      	bne.n	80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
            frequency = HSI_VALUE;
 80064e8:	4b07      	ldr	r3, [pc, #28]	; (8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
 80064ea:	61fb      	str	r3, [r7, #28]
          break;
 80064ec:	bf00      	nop
        break;
 80064ee:	e004      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 80064f0:	bf00      	nop
 80064f2:	e002      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 80064f4:	bf00      	nop
 80064f6:	e000      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 80064f8:	bf00      	nop
    }
  }

  return(frequency);
 80064fa:	69fb      	ldr	r3, [r7, #28]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3720      	adds	r7, #32
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	40021000 	.word	0x40021000
 8006508:	00f42400 	.word	0x00f42400

0800650c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800650c:	b480      	push	{r7}
 800650e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006510:	4b05      	ldr	r3, [pc, #20]	; (8006528 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a04      	ldr	r2, [pc, #16]	; (8006528 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006516:	f043 0304 	orr.w	r3, r3, #4
 800651a:	6013      	str	r3, [r2, #0]
}
 800651c:	bf00      	nop
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	40021000 	.word	0x40021000

0800652c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800653a:	4b73      	ldr	r3, [pc, #460]	; (8006708 <RCCEx_PLLSAI1_Config+0x1dc>)
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d018      	beq.n	8006578 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006546:	4b70      	ldr	r3, [pc, #448]	; (8006708 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f003 0203 	and.w	r2, r3, #3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	429a      	cmp	r2, r3
 8006554:	d10d      	bne.n	8006572 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
       ||
 800655a:	2b00      	cmp	r3, #0
 800655c:	d009      	beq.n	8006572 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800655e:	4b6a      	ldr	r3, [pc, #424]	; (8006708 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	091b      	lsrs	r3, r3, #4
 8006564:	f003 0307 	and.w	r3, r3, #7
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
       ||
 800656e:	429a      	cmp	r2, r3
 8006570:	d044      	beq.n	80065fc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	73fb      	strb	r3, [r7, #15]
 8006576:	e041      	b.n	80065fc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b02      	cmp	r3, #2
 800657e:	d00c      	beq.n	800659a <RCCEx_PLLSAI1_Config+0x6e>
 8006580:	2b03      	cmp	r3, #3
 8006582:	d013      	beq.n	80065ac <RCCEx_PLLSAI1_Config+0x80>
 8006584:	2b01      	cmp	r3, #1
 8006586:	d120      	bne.n	80065ca <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006588:	4b5f      	ldr	r3, [pc, #380]	; (8006708 <RCCEx_PLLSAI1_Config+0x1dc>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0302 	and.w	r3, r3, #2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d11d      	bne.n	80065d0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006598:	e01a      	b.n	80065d0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800659a:	4b5b      	ldr	r3, [pc, #364]	; (8006708 <RCCEx_PLLSAI1_Config+0x1dc>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d116      	bne.n	80065d4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065aa:	e013      	b.n	80065d4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80065ac:	4b56      	ldr	r3, [pc, #344]	; (8006708 <RCCEx_PLLSAI1_Config+0x1dc>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10f      	bne.n	80065d8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80065b8:	4b53      	ldr	r3, [pc, #332]	; (8006708 <RCCEx_PLLSAI1_Config+0x1dc>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d109      	bne.n	80065d8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065c8:	e006      	b.n	80065d8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	73fb      	strb	r3, [r7, #15]
      break;
 80065ce:	e004      	b.n	80065da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80065d0:	bf00      	nop
 80065d2:	e002      	b.n	80065da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80065d4:	bf00      	nop
 80065d6:	e000      	b.n	80065da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80065d8:	bf00      	nop
    }

    if(status == HAL_OK)
 80065da:	7bfb      	ldrb	r3, [r7, #15]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10d      	bne.n	80065fc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80065e0:	4b49      	ldr	r3, [pc, #292]	; (8006708 <RCCEx_PLLSAI1_Config+0x1dc>)
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6819      	ldr	r1, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	3b01      	subs	r3, #1
 80065f2:	011b      	lsls	r3, r3, #4
 80065f4:	430b      	orrs	r3, r1
 80065f6:	4944      	ldr	r1, [pc, #272]	; (8006708 <RCCEx_PLLSAI1_Config+0x1dc>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80065fc:	7bfb      	ldrb	r3, [r7, #15]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d17d      	bne.n	80066fe <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006602:	4b41      	ldr	r3, [pc, #260]	; (8006708 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a40      	ldr	r2, [pc, #256]	; (8006708 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006608:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800660c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800660e:	f7fb fd01 	bl	8002014 <HAL_GetTick>
 8006612:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006614:	e009      	b.n	800662a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006616:	f7fb fcfd 	bl	8002014 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d902      	bls.n	800662a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	73fb      	strb	r3, [r7, #15]
        break;
 8006628:	e005      	b.n	8006636 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800662a:	4b37      	ldr	r3, [pc, #220]	; (8006708 <RCCEx_PLLSAI1_Config+0x1dc>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1ef      	bne.n	8006616 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d160      	bne.n	80066fe <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d111      	bne.n	8006666 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006642:	4b31      	ldr	r3, [pc, #196]	; (8006708 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800664a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6892      	ldr	r2, [r2, #8]
 8006652:	0211      	lsls	r1, r2, #8
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	68d2      	ldr	r2, [r2, #12]
 8006658:	0912      	lsrs	r2, r2, #4
 800665a:	0452      	lsls	r2, r2, #17
 800665c:	430a      	orrs	r2, r1
 800665e:	492a      	ldr	r1, [pc, #168]	; (8006708 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006660:	4313      	orrs	r3, r2
 8006662:	610b      	str	r3, [r1, #16]
 8006664:	e027      	b.n	80066b6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d112      	bne.n	8006692 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800666c:	4b26      	ldr	r3, [pc, #152]	; (8006708 <RCCEx_PLLSAI1_Config+0x1dc>)
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006674:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6892      	ldr	r2, [r2, #8]
 800667c:	0211      	lsls	r1, r2, #8
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6912      	ldr	r2, [r2, #16]
 8006682:	0852      	lsrs	r2, r2, #1
 8006684:	3a01      	subs	r2, #1
 8006686:	0552      	lsls	r2, r2, #21
 8006688:	430a      	orrs	r2, r1
 800668a:	491f      	ldr	r1, [pc, #124]	; (8006708 <RCCEx_PLLSAI1_Config+0x1dc>)
 800668c:	4313      	orrs	r3, r2
 800668e:	610b      	str	r3, [r1, #16]
 8006690:	e011      	b.n	80066b6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006692:	4b1d      	ldr	r3, [pc, #116]	; (8006708 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800669a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6892      	ldr	r2, [r2, #8]
 80066a2:	0211      	lsls	r1, r2, #8
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6952      	ldr	r2, [r2, #20]
 80066a8:	0852      	lsrs	r2, r2, #1
 80066aa:	3a01      	subs	r2, #1
 80066ac:	0652      	lsls	r2, r2, #25
 80066ae:	430a      	orrs	r2, r1
 80066b0:	4915      	ldr	r1, [pc, #84]	; (8006708 <RCCEx_PLLSAI1_Config+0x1dc>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80066b6:	4b14      	ldr	r3, [pc, #80]	; (8006708 <RCCEx_PLLSAI1_Config+0x1dc>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a13      	ldr	r2, [pc, #76]	; (8006708 <RCCEx_PLLSAI1_Config+0x1dc>)
 80066bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066c0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c2:	f7fb fca7 	bl	8002014 <HAL_GetTick>
 80066c6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80066c8:	e009      	b.n	80066de <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066ca:	f7fb fca3 	bl	8002014 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d902      	bls.n	80066de <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	73fb      	strb	r3, [r7, #15]
          break;
 80066dc:	e005      	b.n	80066ea <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80066de:	4b0a      	ldr	r3, [pc, #40]	; (8006708 <RCCEx_PLLSAI1_Config+0x1dc>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d0ef      	beq.n	80066ca <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d106      	bne.n	80066fe <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80066f0:	4b05      	ldr	r3, [pc, #20]	; (8006708 <RCCEx_PLLSAI1_Config+0x1dc>)
 80066f2:	691a      	ldr	r2, [r3, #16]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	4903      	ldr	r1, [pc, #12]	; (8006708 <RCCEx_PLLSAI1_Config+0x1dc>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	40021000 	.word	0x40021000

0800670c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800671a:	4b68      	ldr	r3, [pc, #416]	; (80068bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d018      	beq.n	8006758 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006726:	4b65      	ldr	r3, [pc, #404]	; (80068bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	f003 0203 	and.w	r2, r3, #3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	429a      	cmp	r2, r3
 8006734:	d10d      	bne.n	8006752 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
       ||
 800673a:	2b00      	cmp	r3, #0
 800673c:	d009      	beq.n	8006752 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800673e:	4b5f      	ldr	r3, [pc, #380]	; (80068bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	091b      	lsrs	r3, r3, #4
 8006744:	f003 0307 	and.w	r3, r3, #7
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
       ||
 800674e:	429a      	cmp	r2, r3
 8006750:	d044      	beq.n	80067dc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	73fb      	strb	r3, [r7, #15]
 8006756:	e041      	b.n	80067dc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b02      	cmp	r3, #2
 800675e:	d00c      	beq.n	800677a <RCCEx_PLLSAI2_Config+0x6e>
 8006760:	2b03      	cmp	r3, #3
 8006762:	d013      	beq.n	800678c <RCCEx_PLLSAI2_Config+0x80>
 8006764:	2b01      	cmp	r3, #1
 8006766:	d120      	bne.n	80067aa <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006768:	4b54      	ldr	r3, [pc, #336]	; (80068bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0302 	and.w	r3, r3, #2
 8006770:	2b00      	cmp	r3, #0
 8006772:	d11d      	bne.n	80067b0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006778:	e01a      	b.n	80067b0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800677a:	4b50      	ldr	r3, [pc, #320]	; (80068bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006782:	2b00      	cmp	r3, #0
 8006784:	d116      	bne.n	80067b4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800678a:	e013      	b.n	80067b4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800678c:	4b4b      	ldr	r3, [pc, #300]	; (80068bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10f      	bne.n	80067b8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006798:	4b48      	ldr	r3, [pc, #288]	; (80068bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d109      	bne.n	80067b8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067a8:	e006      	b.n	80067b8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	73fb      	strb	r3, [r7, #15]
      break;
 80067ae:	e004      	b.n	80067ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80067b0:	bf00      	nop
 80067b2:	e002      	b.n	80067ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80067b4:	bf00      	nop
 80067b6:	e000      	b.n	80067ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80067b8:	bf00      	nop
    }

    if(status == HAL_OK)
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10d      	bne.n	80067dc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80067c0:	4b3e      	ldr	r3, [pc, #248]	; (80068bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6819      	ldr	r1, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	3b01      	subs	r3, #1
 80067d2:	011b      	lsls	r3, r3, #4
 80067d4:	430b      	orrs	r3, r1
 80067d6:	4939      	ldr	r1, [pc, #228]	; (80068bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d167      	bne.n	80068b2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80067e2:	4b36      	ldr	r3, [pc, #216]	; (80068bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a35      	ldr	r2, [pc, #212]	; (80068bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80067e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067ee:	f7fb fc11 	bl	8002014 <HAL_GetTick>
 80067f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80067f4:	e009      	b.n	800680a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80067f6:	f7fb fc0d 	bl	8002014 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d902      	bls.n	800680a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	73fb      	strb	r3, [r7, #15]
        break;
 8006808:	e005      	b.n	8006816 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800680a:	4b2c      	ldr	r3, [pc, #176]	; (80068bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1ef      	bne.n	80067f6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006816:	7bfb      	ldrb	r3, [r7, #15]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d14a      	bne.n	80068b2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d111      	bne.n	8006846 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006822:	4b26      	ldr	r3, [pc, #152]	; (80068bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800682a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	6892      	ldr	r2, [r2, #8]
 8006832:	0211      	lsls	r1, r2, #8
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	68d2      	ldr	r2, [r2, #12]
 8006838:	0912      	lsrs	r2, r2, #4
 800683a:	0452      	lsls	r2, r2, #17
 800683c:	430a      	orrs	r2, r1
 800683e:	491f      	ldr	r1, [pc, #124]	; (80068bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8006840:	4313      	orrs	r3, r2
 8006842:	614b      	str	r3, [r1, #20]
 8006844:	e011      	b.n	800686a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006846:	4b1d      	ldr	r3, [pc, #116]	; (80068bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800684e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	6892      	ldr	r2, [r2, #8]
 8006856:	0211      	lsls	r1, r2, #8
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6912      	ldr	r2, [r2, #16]
 800685c:	0852      	lsrs	r2, r2, #1
 800685e:	3a01      	subs	r2, #1
 8006860:	0652      	lsls	r2, r2, #25
 8006862:	430a      	orrs	r2, r1
 8006864:	4915      	ldr	r1, [pc, #84]	; (80068bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8006866:	4313      	orrs	r3, r2
 8006868:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800686a:	4b14      	ldr	r3, [pc, #80]	; (80068bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a13      	ldr	r2, [pc, #76]	; (80068bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8006870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006874:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006876:	f7fb fbcd 	bl	8002014 <HAL_GetTick>
 800687a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800687c:	e009      	b.n	8006892 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800687e:	f7fb fbc9 	bl	8002014 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	2b02      	cmp	r3, #2
 800688a:	d902      	bls.n	8006892 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	73fb      	strb	r3, [r7, #15]
          break;
 8006890:	e005      	b.n	800689e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006892:	4b0a      	ldr	r3, [pc, #40]	; (80068bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0ef      	beq.n	800687e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800689e:	7bfb      	ldrb	r3, [r7, #15]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d106      	bne.n	80068b2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80068a4:	4b05      	ldr	r3, [pc, #20]	; (80068bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80068a6:	695a      	ldr	r2, [r3, #20]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	4903      	ldr	r1, [pc, #12]	; (80068bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	40021000 	.word	0x40021000

080068c0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b089      	sub	sp, #36	; 0x24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068dc:	d10c      	bne.n	80068f8 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80068de:	4b62      	ldr	r3, [pc, #392]	; (8006a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80068e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80068e8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80068f0:	d112      	bne.n	8006918 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80068f2:	4b5e      	ldr	r3, [pc, #376]	; (8006a6c <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80068f4:	61fb      	str	r3, [r7, #28]
 80068f6:	e00f      	b.n	8006918 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068fe:	d10b      	bne.n	8006918 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006900:	4b59      	ldr	r3, [pc, #356]	; (8006a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006906:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800690a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006912:	d101      	bne.n	8006918 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006914:	4b55      	ldr	r3, [pc, #340]	; (8006a6c <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8006916:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	2b00      	cmp	r3, #0
 800691c:	f040 809c 	bne.w	8006a58 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
  {
    pllvco = InputFrequency;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800692a:	d003      	beq.n	8006934 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006932:	d12d      	bne.n	8006990 <RCCEx_GetSAIxPeriphCLKFreq+0xd0>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8006934:	4b4c      	ldr	r3, [pc, #304]	; (8006a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 808b 	beq.w	8006a58 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006942:	4b49      	ldr	r3, [pc, #292]	; (8006a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	091b      	lsrs	r3, r3, #4
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	3301      	adds	r3, #1
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	fbb2 f3f3 	udiv	r3, r2, r3
 8006954:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006956:	4b44      	ldr	r3, [pc, #272]	; (8006a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	0a1b      	lsrs	r3, r3, #8
 800695c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006960:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10a      	bne.n	800697e <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006968:	4b3f      	ldr	r3, [pc, #252]	; (8006a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <RCCEx_GetSAIxPeriphCLKFreq+0xba>
          {
            pllp = 17U;
 8006974:	2311      	movs	r3, #17
 8006976:	617b      	str	r3, [r7, #20]
 8006978:	e001      	b.n	800697e <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
          }
          else
          {
            pllp = 7U;
 800697a:	2307      	movs	r3, #7
 800697c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	fb02 f203 	mul.w	r2, r2, r3
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	fbb2 f3f3 	udiv	r3, r2, r3
 800698c:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 800698e:	e063      	b.n	8006a58 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d12c      	bne.n	80069f0 <RCCEx_GetSAIxPeriphCLKFreq+0x130>
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8006996:	4b34      	ldr	r3, [pc, #208]	; (8006a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d05a      	beq.n	8006a58 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80069a2:	4b31      	ldr	r3, [pc, #196]	; (8006a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	091b      	lsrs	r3, r3, #4
 80069a8:	f003 0307 	and.w	r3, r3, #7
 80069ac:	3301      	adds	r3, #1
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b4:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80069b6:	4b2c      	ldr	r3, [pc, #176]	; (8006a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	0a1b      	lsrs	r3, r3, #8
 80069bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069c0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10a      	bne.n	80069de <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80069c8:	4b27      	ldr	r3, [pc, #156]	; (8006a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d002      	beq.n	80069da <RCCEx_GetSAIxPeriphCLKFreq+0x11a>
          {
            pllp = 17U;
 80069d4:	2311      	movs	r3, #17
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	e001      	b.n	80069de <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
          }
          else
          {
            pllp = 7U;
 80069da:	2307      	movs	r3, #7
 80069dc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	fb02 f203 	mul.w	r2, r2, r3
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ec:	61fb      	str	r3, [r7, #28]
 80069ee:	e033      	b.n	8006a58 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069f6:	d003      	beq.n	8006a00 <RCCEx_GetSAIxPeriphCLKFreq+0x140>
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069fe:	d12b      	bne.n	8006a58 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8006a00:	4b19      	ldr	r3, [pc, #100]	; (8006a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d025      	beq.n	8006a58 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006a0c:	4b16      	ldr	r3, [pc, #88]	; (8006a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	091b      	lsrs	r3, r3, #4
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	3301      	adds	r3, #1
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a1e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006a20:	4b11      	ldr	r3, [pc, #68]	; (8006a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	0a1b      	lsrs	r3, r3, #8
 8006a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a2a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10a      	bne.n	8006a48 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006a32:	4b0d      	ldr	r3, [pc, #52]	; (8006a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <RCCEx_GetSAIxPeriphCLKFreq+0x184>
          {
            pllp = 17U;
 8006a3e:	2311      	movs	r3, #17
 8006a40:	617b      	str	r3, [r7, #20]
 8006a42:	e001      	b.n	8006a48 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
          }
          else
          {
            pllp = 7U;
 8006a44:	2307      	movs	r3, #7
 8006a46:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	fb02 f203 	mul.w	r2, r2, r3
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a56:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006a58:	69fb      	ldr	r3, [r7, #28]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3724      	adds	r7, #36	; 0x24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	40021000 	.word	0x40021000
 8006a6c:	001fff68 	.word	0x001fff68

08006a70 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d06f      	beq.n	8006b62 <HAL_RTC_Init+0xf2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d106      	bne.n	8006a9c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7fa fc48 	bl	800132c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	22ca      	movs	r2, #202	; 0xca
 8006aaa:	625a      	str	r2, [r3, #36]	; 0x24
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2253      	movs	r2, #83	; 0x53
 8006ab2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f9a3 	bl	8006e00 <RTC_EnterInitMode>
 8006aba:	4603      	mov	r3, r0
 8006abc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d14e      	bne.n	8006b62 <HAL_RTC_Init+0xf2>
#if defined(STM32L412xx) || defined(STM32L422xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	6812      	ldr	r2, [r2, #0]
 8006ace:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ad6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6899      	ldr	r1, [r3, #8]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	431a      	orrs	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	68d2      	ldr	r2, [r2, #12]
 8006afe:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6919      	ldr	r1, [r3, #16]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	041a      	lsls	r2, r3, #16
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	430a      	orrs	r2, r1
 8006b12:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f9a7 	bl	8006e68 <RTC_ExitInitMode>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d11e      	bne.n	8006b62 <HAL_RTC_Init+0xf2>
      {
#if defined(STM32L412xx) || defined(STM32L422xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 0203 	bic.w	r2, r2, #3
 8006b32:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	69da      	ldr	r2, [r3, #28]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	431a      	orrs	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	22ff      	movs	r2, #255	; 0xff
 8006b52:	625a      	str	r2, [r3, #36]	; 0x24

        if (status == HAL_OK)
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d103      	bne.n	8006b62 <HAL_RTC_Init+0xf2>
        {
          hrtc->State = HAL_RTC_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
      }
    }
  }

  return status;
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006b6c:	b590      	push	{r4, r7, lr}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d101      	bne.n	8006b86 <HAL_RTC_SetTime+0x1a>
 8006b82:	2302      	movs	r3, #2
 8006b84:	e08b      	b.n	8006c9e <HAL_RTC_SetTime+0x132>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2202      	movs	r2, #2
 8006b92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	22ca      	movs	r2, #202	; 0xca
 8006b9c:	625a      	str	r2, [r3, #36]	; 0x24
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2253      	movs	r2, #83	; 0x53
 8006ba4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 f92a 	bl	8006e00 <RTC_EnterInitMode>
 8006bac:	4603      	mov	r3, r0
 8006bae:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006bb0:	7cfb      	ldrb	r3, [r7, #19]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d163      	bne.n	8006c7e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d126      	bne.n	8006c0a <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d102      	bne.n	8006bd0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 f985 	bl	8006ee4 <RTC_ByteToBcd2>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	785b      	ldrb	r3, [r3, #1]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 f97e 	bl	8006ee4 <RTC_ByteToBcd2>
 8006be8:	4603      	mov	r3, r0
 8006bea:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006bec:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	789b      	ldrb	r3, [r3, #2]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 f976 	bl	8006ee4 <RTC_ByteToBcd2>
 8006bf8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006bfa:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	78db      	ldrb	r3, [r3, #3]
 8006c02:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006c04:	4313      	orrs	r3, r2
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	e018      	b.n	8006c3c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d102      	bne.n	8006c1e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	785b      	ldrb	r3, [r3, #1]
 8006c28:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006c2a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c30:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	78db      	ldrb	r3, [r3, #3]
 8006c36:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006c46:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006c4a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689a      	ldr	r2, [r3, #8]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c5a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6899      	ldr	r1, [r3, #8]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	68da      	ldr	r2, [r3, #12]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f000 f8f7 	bl	8006e68 <RTC_ExitInitMode>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	22ff      	movs	r2, #255	; 0xff
 8006c84:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006c86:	7cfb      	ldrb	r3, [r7, #19]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d103      	bne.n	8006c94 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006c9c:	7cfb      	ldrb	r3, [r7, #19]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	371c      	adds	r7, #28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd90      	pop	{r4, r7, pc}

08006ca6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006ca6:	b590      	push	{r4, r7, lr}
 8006ca8:	b087      	sub	sp, #28
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d101      	bne.n	8006cc0 <HAL_RTC_SetDate+0x1a>
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	e075      	b.n	8006dac <HAL_RTC_SetDate+0x106>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10e      	bne.n	8006cf4 <HAL_RTC_SetDate+0x4e>
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	785b      	ldrb	r3, [r3, #1]
 8006cda:	f003 0310 	and.w	r3, r3, #16
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d008      	beq.n	8006cf4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	785b      	ldrb	r3, [r3, #1]
 8006ce6:	f023 0310 	bic.w	r3, r3, #16
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	330a      	adds	r3, #10
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d11c      	bne.n	8006d34 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	78db      	ldrb	r3, [r3, #3]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 f8f0 	bl	8006ee4 <RTC_ByteToBcd2>
 8006d04:	4603      	mov	r3, r0
 8006d06:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	785b      	ldrb	r3, [r3, #1]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 f8e9 	bl	8006ee4 <RTC_ByteToBcd2>
 8006d12:	4603      	mov	r3, r0
 8006d14:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006d16:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	789b      	ldrb	r3, [r3, #2]
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 f8e1 	bl	8006ee4 <RTC_ByteToBcd2>
 8006d22:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006d24:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]
 8006d32:	e00e      	b.n	8006d52 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	78db      	ldrb	r3, [r3, #3]
 8006d38:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	785b      	ldrb	r3, [r3, #1]
 8006d3e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006d40:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006d46:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	22ca      	movs	r2, #202	; 0xca
 8006d58:	625a      	str	r2, [r3, #36]	; 0x24
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2253      	movs	r2, #83	; 0x53
 8006d60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f000 f84c 	bl	8006e00 <RTC_EnterInitMode>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006d6c:	7cfb      	ldrb	r3, [r7, #19]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10c      	bne.n	8006d8c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d7c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006d80:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f000 f870 	bl	8006e68 <RTC_ExitInitMode>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	22ff      	movs	r2, #255	; 0xff
 8006d92:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006d94:	7cfb      	ldrb	r3, [r7, #19]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d103      	bne.n	8006da2 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006daa:	7cfb      	ldrb	r3, [r7, #19]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	371c      	adds	r7, #28
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd90      	pop	{r4, r7, pc}

08006db4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68da      	ldr	r2, [r3, #12]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006dca:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006dcc:	f7fb f922 	bl	8002014 <HAL_GetTick>
 8006dd0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006dd2:	e009      	b.n	8006de8 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006dd4:	f7fb f91e 	bl	8002014 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006de2:	d901      	bls.n	8006de8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e007      	b.n	8006df8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0ee      	beq.n	8006dd4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d120      	bne.n	8006e5c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e22:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006e24:	f7fb f8f6 	bl	8002014 <HAL_GetTick>
 8006e28:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006e2a:	e00d      	b.n	8006e48 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006e2c:	f7fb f8f2 	bl	8002014 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e3a:	d905      	bls.n	8006e48 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2203      	movs	r2, #3
 8006e44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d102      	bne.n	8006e5c <RTC_EnterInitMode+0x5c>
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
 8006e58:	2b03      	cmp	r3, #3
 8006e5a:	d1e7      	bne.n	8006e2c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return status;
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
	...

08006e68 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006e74:	4b1a      	ldr	r3, [pc, #104]	; (8006ee0 <RTC_ExitInitMode+0x78>)
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	4a19      	ldr	r2, [pc, #100]	; (8006ee0 <RTC_ExitInitMode+0x78>)
 8006e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e7e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006e80:	4b17      	ldr	r3, [pc, #92]	; (8006ee0 <RTC_ExitInitMode+0x78>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 0320 	and.w	r3, r3, #32
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10c      	bne.n	8006ea6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7ff ff91 	bl	8006db4 <HAL_RTC_WaitForSynchro>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d01e      	beq.n	8006ed6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2203      	movs	r2, #3
 8006e9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	73fb      	strb	r3, [r7, #15]
 8006ea4:	e017      	b.n	8006ed6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006ea6:	4b0e      	ldr	r3, [pc, #56]	; (8006ee0 <RTC_ExitInitMode+0x78>)
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	4a0d      	ldr	r2, [pc, #52]	; (8006ee0 <RTC_ExitInitMode+0x78>)
 8006eac:	f023 0320 	bic.w	r3, r3, #32
 8006eb0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7ff ff7e 	bl	8006db4 <HAL_RTC_WaitForSynchro>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d005      	beq.n	8006eca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2203      	movs	r2, #3
 8006ec2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006eca:	4b05      	ldr	r3, [pc, #20]	; (8006ee0 <RTC_ExitInitMode+0x78>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	4a04      	ldr	r2, [pc, #16]	; (8006ee0 <RTC_ExitInitMode+0x78>)
 8006ed0:	f043 0320 	orr.w	r3, r3, #32
 8006ed4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	40002800 	.word	0x40002800

08006ee4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	4603      	mov	r3, r0
 8006eec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8006ef2:	79fb      	ldrb	r3, [r7, #7]
 8006ef4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8006ef6:	e005      	b.n	8006f04 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	3301      	adds	r3, #1
 8006efc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8006efe:	7afb      	ldrb	r3, [r7, #11]
 8006f00:	3b0a      	subs	r3, #10
 8006f02:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006f04:	7afb      	ldrb	r3, [r7, #11]
 8006f06:	2b09      	cmp	r3, #9
 8006f08:	d8f6      	bhi.n	8006ef8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	011b      	lsls	r3, r3, #4
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	7afb      	ldrb	r3, [r7, #11]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	b2db      	uxtb	r3, r3
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b088      	sub	sp, #32
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e14a      	b.n	80071cc <HAL_SAI_Init+0x2a8>
      return HAL_ERROR;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d106      	bne.n	8006f50 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7fa fab2 	bl	80014b4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f94d 	bl	80071f0 <SAI_Disable>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e135      	b.n	80071cc <HAL_SAI_Init+0x2a8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d007      	beq.n	8006f80 <HAL_SAI_Init+0x5c>
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d302      	bcc.n	8006f7a <HAL_SAI_Init+0x56>
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d006      	beq.n	8006f86 <HAL_SAI_Init+0x62>
 8006f78:	e008      	b.n	8006f8c <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	61fb      	str	r3, [r7, #28]
      break;
 8006f7e:	e008      	b.n	8006f92 <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006f80:	2310      	movs	r3, #16
 8006f82:	61fb      	str	r3, [r7, #28]
      break;
 8006f84:	e005      	b.n	8006f92 <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006f86:	2320      	movs	r3, #32
 8006f88:	61fb      	str	r3, [r7, #28]
      break;
 8006f8a:	e002      	b.n	8006f92 <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	61fb      	str	r3, [r7, #28]
      break;
 8006f90:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	2b03      	cmp	r3, #3
 8006f98:	d81d      	bhi.n	8006fd6 <HAL_SAI_Init+0xb2>
 8006f9a:	a201      	add	r2, pc, #4	; (adr r2, 8006fa0 <HAL_SAI_Init+0x7c>)
 8006f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa0:	08006fb1 	.word	0x08006fb1
 8006fa4:	08006fb7 	.word	0x08006fb7
 8006fa8:	08006fbf 	.word	0x08006fbf
 8006fac:	08006fc7 	.word	0x08006fc7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	617b      	str	r3, [r7, #20]
      break;
 8006fb4:	e012      	b.n	8006fdc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fba:	617b      	str	r3, [r7, #20]
      break;
 8006fbc:	e00e      	b.n	8006fdc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006fbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fc2:	617b      	str	r3, [r7, #20]
      break;
 8006fc4:	e00a      	b.n	8006fdc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006fc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fca:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	f043 0301 	orr.w	r3, r3, #1
 8006fd2:	61fb      	str	r3, [r7, #28]
      break;
 8006fd4:	e002      	b.n	8006fdc <HAL_SAI_Init+0xb8>
    default :
      syncen_bits = 0;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	617b      	str	r3, [r7, #20]
      break;
 8006fda:	bf00      	nop

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a7c      	ldr	r2, [pc, #496]	; (80071d4 <HAL_SAI_Init+0x2b0>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d004      	beq.n	8006ff0 <HAL_SAI_Init+0xcc>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a7b      	ldr	r2, [pc, #492]	; (80071d8 <HAL_SAI_Init+0x2b4>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d103      	bne.n	8006ff8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8006ff0:	4a7a      	ldr	r2, [pc, #488]	; (80071dc <HAL_SAI_Init+0x2b8>)
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	e002      	b.n	8006ffe <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006ff8:	4a79      	ldr	r2, [pc, #484]	; (80071e0 <HAL_SAI_Init+0x2bc>)
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	6013      	str	r3, [r2, #0]

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || */
  /* STM32L496xx || STM32L4A6xx || */
  /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d038      	beq.n	8007078 <HAL_SAI_Init+0x154>
    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a72      	ldr	r2, [pc, #456]	; (80071d4 <HAL_SAI_Init+0x2b0>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d004      	beq.n	800701a <HAL_SAI_Init+0xf6>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a70      	ldr	r2, [pc, #448]	; (80071d8 <HAL_SAI_Init+0x2b4>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d105      	bne.n	8007026 <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800701a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800701e:	f7fe fdfd 	bl	8005c1c <HAL_RCCEx_GetPeriphCLKFreq>
 8007022:	6138      	str	r0, [r7, #16]
 8007024:	e004      	b.n	8007030 <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007026:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800702a:	f7fe fdf7 	bl	8005c1c <HAL_RCCEx_GetPeriphCLKFreq>
 800702e:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	4613      	mov	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	005b      	lsls	r3, r3, #1
 800703a:	461a      	mov	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	025b      	lsls	r3, r3, #9
 8007042:	fbb2 f3f3 	udiv	r3, r2, r3
 8007046:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4a66      	ldr	r2, [pc, #408]	; (80071e4 <HAL_SAI_Init+0x2c0>)
 800704c:	fba2 2303 	umull	r2, r3, r2, r3
 8007050:	08da      	lsrs	r2, r3, #3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007056:	68f9      	ldr	r1, [r7, #12]
 8007058:	4b62      	ldr	r3, [pc, #392]	; (80071e4 <HAL_SAI_Init+0x2c0>)
 800705a:	fba3 2301 	umull	r2, r3, r3, r1
 800705e:	08da      	lsrs	r2, r3, #3
 8007060:	4613      	mov	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	1aca      	subs	r2, r1, r3
 800706a:	2a08      	cmp	r2, #8
 800706c:	d904      	bls.n	8007078 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	1c5a      	adds	r2, r3, #1
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <HAL_SAI_Init+0x164>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	2b02      	cmp	r3, #2
 8007086:	d109      	bne.n	800709c <HAL_SAI_Init+0x178>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800708c:	2b01      	cmp	r3, #1
 800708e:	d101      	bne.n	8007094 <HAL_SAI_Init+0x170>
 8007090:	2300      	movs	r3, #0
 8007092:	e001      	b.n	8007098 <HAL_SAI_Init+0x174>
 8007094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007098:	61bb      	str	r3, [r7, #24]
 800709a:	e008      	b.n	80070ae <HAL_SAI_Init+0x18a>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d102      	bne.n	80070aa <HAL_SAI_Init+0x186>
 80070a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070a8:	e000      	b.n	80070ac <HAL_SAI_Init+0x188>
 80070aa:	2300      	movs	r3, #0
 80070ac:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6819      	ldr	r1, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	4b4b      	ldr	r3, [pc, #300]	; (80071e8 <HAL_SAI_Init+0x2c4>)
 80070ba:	400b      	ands	r3, r1
 80070bc:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	6819      	ldr	r1, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070cc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80070d2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d8:	431a      	orrs	r2, r3
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 80070e6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80070f2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	051b      	lsls	r3, r3, #20
 80070fa:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	430a      	orrs	r2, r1
 8007102:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	6812      	ldr	r2, [r2, #0]
 800710e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007112:	f023 030f 	bic.w	r3, r3, #15
 8007116:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6859      	ldr	r1, [r3, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	699a      	ldr	r2, [r3, #24]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007126:	431a      	orrs	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712c:	431a      	orrs	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	430a      	orrs	r2, r1
 8007134:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6899      	ldr	r1, [r3, #8]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	4b2a      	ldr	r3, [pc, #168]	; (80071ec <HAL_SAI_Init+0x2c8>)
 8007142:	400b      	ands	r3, r1
 8007144:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6899      	ldr	r1, [r3, #8]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007150:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007156:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800715c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8007162:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007168:	3b01      	subs	r3, #1
 800716a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800716c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68d9      	ldr	r1, [r3, #12]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007184:	400b      	ands	r3, r1
 8007186:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68d9      	ldr	r1, [r3, #12]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007196:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800719c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800719e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a4:	3b01      	subs	r3, #1
 80071a6:	021b      	lsls	r3, r3, #8
 80071a8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3720      	adds	r7, #32
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	40015404 	.word	0x40015404
 80071d8:	40015424 	.word	0x40015424
 80071dc:	40015400 	.word	0x40015400
 80071e0:	40015800 	.word	0x40015800
 80071e4:	cccccccd 	.word	0xcccccccd
 80071e8:	ff05c010 	.word	0xff05c010
 80071ec:	fff88000 	.word	0xfff88000

080071f0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80071f0:	b490      	push	{r4, r7}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80071f8:	4b15      	ldr	r3, [pc, #84]	; (8007250 <SAI_Disable+0x60>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a15      	ldr	r2, [pc, #84]	; (8007254 <SAI_Disable+0x64>)
 80071fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007202:	0b1b      	lsrs	r3, r3, #12
 8007204:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8007206:	2300      	movs	r3, #0
 8007208:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007218:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800721a:	2c00      	cmp	r4, #0
 800721c:	d10a      	bne.n	8007234 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007224:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	73fb      	strb	r3, [r7, #15]
      break;
 8007232:	e007      	b.n	8007244 <SAI_Disable+0x54>
    }
    count--;
 8007234:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1ea      	bne.n	800721a <SAI_Disable+0x2a>

  return status;
 8007244:	7bfb      	ldrb	r3, [r7, #15]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bc90      	pop	{r4, r7}
 800724e:	4770      	bx	lr
 8007250:	2000001c 	.word	0x2000001c
 8007254:	95cbec1b 	.word	0x95cbec1b

08007258 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e07c      	b.n	8007364 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b00      	cmp	r3, #0
 800727a:	d106      	bne.n	800728a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f7fa f9cb 	bl	8001620 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2202      	movs	r2, #2
 800728e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072a0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072aa:	d902      	bls.n	80072b2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80072ac:	2300      	movs	r3, #0
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	e002      	b.n	80072b8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80072b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072b6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80072c0:	d007      	beq.n	80072d2 <HAL_SPI_Init+0x7a>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072ca:	d002      	beq.n	80072d2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10b      	bne.n	80072f2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072e2:	d903      	bls.n	80072ec <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	631a      	str	r2, [r3, #48]	; 0x30
 80072ea:	e002      	b.n	80072f2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	431a      	orrs	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	431a      	orrs	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	431a      	orrs	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007310:	431a      	orrs	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	431a      	orrs	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	ea42 0103 	orr.w	r1, r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	430a      	orrs	r2, r1
 800732a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	0c1b      	lsrs	r3, r3, #16
 8007332:	f003 0204 	and.w	r2, r3, #4
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007340:	431a      	orrs	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	ea42 0103 	orr.w	r1, r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	430a      	orrs	r2, r1
 8007352:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d101      	bne.n	800737e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e040      	b.n	8007400 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007382:	2b00      	cmp	r3, #0
 8007384:	d106      	bne.n	8007394 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7fa fd68 	bl	8001e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2224      	movs	r2, #36	; 0x24
 8007398:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 0201 	bic.w	r2, r2, #1
 80073a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f82c 	bl	8007408 <UART_SetConfig>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d101      	bne.n	80073ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e022      	b.n	8007400 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d002      	beq.n	80073c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fb68 	bl	8007a98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	689a      	ldr	r2, [r3, #8]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f042 0201 	orr.w	r2, r2, #1
 80073f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fbef 	bl	8007bdc <UART_CheckIdleState>
 80073fe:	4603      	mov	r3, r0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007408:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800740c:	b088      	sub	sp, #32
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007412:	2300      	movs	r3, #0
 8007414:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800741a:	2300      	movs	r3, #0
 800741c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	689a      	ldr	r2, [r3, #8]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	431a      	orrs	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	431a      	orrs	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	4313      	orrs	r3, r2
 8007434:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	4bac      	ldr	r3, [pc, #688]	; (80076f0 <UART_SetConfig+0x2e8>)
 800743e:	4013      	ands	r3, r2
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	6812      	ldr	r2, [r2, #0]
 8007444:	69f9      	ldr	r1, [r7, #28]
 8007446:	430b      	orrs	r3, r1
 8007448:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	68da      	ldr	r2, [r3, #12]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4aa2      	ldr	r2, [pc, #648]	; (80076f4 <UART_SetConfig+0x2ec>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d004      	beq.n	800747a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	69fa      	ldr	r2, [r7, #28]
 8007476:	4313      	orrs	r3, r2
 8007478:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	69fa      	ldr	r2, [r7, #28]
 800748a:	430a      	orrs	r2, r1
 800748c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a99      	ldr	r2, [pc, #612]	; (80076f8 <UART_SetConfig+0x2f0>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d121      	bne.n	80074dc <UART_SetConfig+0xd4>
 8007498:	4b98      	ldr	r3, [pc, #608]	; (80076fc <UART_SetConfig+0x2f4>)
 800749a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800749e:	f003 0303 	and.w	r3, r3, #3
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d816      	bhi.n	80074d4 <UART_SetConfig+0xcc>
 80074a6:	a201      	add	r2, pc, #4	; (adr r2, 80074ac <UART_SetConfig+0xa4>)
 80074a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ac:	080074bd 	.word	0x080074bd
 80074b0:	080074c9 	.word	0x080074c9
 80074b4:	080074c3 	.word	0x080074c3
 80074b8:	080074cf 	.word	0x080074cf
 80074bc:	2301      	movs	r3, #1
 80074be:	76fb      	strb	r3, [r7, #27]
 80074c0:	e0e8      	b.n	8007694 <UART_SetConfig+0x28c>
 80074c2:	2302      	movs	r3, #2
 80074c4:	76fb      	strb	r3, [r7, #27]
 80074c6:	e0e5      	b.n	8007694 <UART_SetConfig+0x28c>
 80074c8:	2304      	movs	r3, #4
 80074ca:	76fb      	strb	r3, [r7, #27]
 80074cc:	e0e2      	b.n	8007694 <UART_SetConfig+0x28c>
 80074ce:	2308      	movs	r3, #8
 80074d0:	76fb      	strb	r3, [r7, #27]
 80074d2:	e0df      	b.n	8007694 <UART_SetConfig+0x28c>
 80074d4:	2310      	movs	r3, #16
 80074d6:	76fb      	strb	r3, [r7, #27]
 80074d8:	bf00      	nop
 80074da:	e0db      	b.n	8007694 <UART_SetConfig+0x28c>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a87      	ldr	r2, [pc, #540]	; (8007700 <UART_SetConfig+0x2f8>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d134      	bne.n	8007550 <UART_SetConfig+0x148>
 80074e6:	4b85      	ldr	r3, [pc, #532]	; (80076fc <UART_SetConfig+0x2f4>)
 80074e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ec:	f003 030c 	and.w	r3, r3, #12
 80074f0:	2b0c      	cmp	r3, #12
 80074f2:	d829      	bhi.n	8007548 <UART_SetConfig+0x140>
 80074f4:	a201      	add	r2, pc, #4	; (adr r2, 80074fc <UART_SetConfig+0xf4>)
 80074f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fa:	bf00      	nop
 80074fc:	08007531 	.word	0x08007531
 8007500:	08007549 	.word	0x08007549
 8007504:	08007549 	.word	0x08007549
 8007508:	08007549 	.word	0x08007549
 800750c:	0800753d 	.word	0x0800753d
 8007510:	08007549 	.word	0x08007549
 8007514:	08007549 	.word	0x08007549
 8007518:	08007549 	.word	0x08007549
 800751c:	08007537 	.word	0x08007537
 8007520:	08007549 	.word	0x08007549
 8007524:	08007549 	.word	0x08007549
 8007528:	08007549 	.word	0x08007549
 800752c:	08007543 	.word	0x08007543
 8007530:	2300      	movs	r3, #0
 8007532:	76fb      	strb	r3, [r7, #27]
 8007534:	e0ae      	b.n	8007694 <UART_SetConfig+0x28c>
 8007536:	2302      	movs	r3, #2
 8007538:	76fb      	strb	r3, [r7, #27]
 800753a:	e0ab      	b.n	8007694 <UART_SetConfig+0x28c>
 800753c:	2304      	movs	r3, #4
 800753e:	76fb      	strb	r3, [r7, #27]
 8007540:	e0a8      	b.n	8007694 <UART_SetConfig+0x28c>
 8007542:	2308      	movs	r3, #8
 8007544:	76fb      	strb	r3, [r7, #27]
 8007546:	e0a5      	b.n	8007694 <UART_SetConfig+0x28c>
 8007548:	2310      	movs	r3, #16
 800754a:	76fb      	strb	r3, [r7, #27]
 800754c:	bf00      	nop
 800754e:	e0a1      	b.n	8007694 <UART_SetConfig+0x28c>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a6b      	ldr	r2, [pc, #428]	; (8007704 <UART_SetConfig+0x2fc>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d120      	bne.n	800759c <UART_SetConfig+0x194>
 800755a:	4b68      	ldr	r3, [pc, #416]	; (80076fc <UART_SetConfig+0x2f4>)
 800755c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007560:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007564:	2b10      	cmp	r3, #16
 8007566:	d00f      	beq.n	8007588 <UART_SetConfig+0x180>
 8007568:	2b10      	cmp	r3, #16
 800756a:	d802      	bhi.n	8007572 <UART_SetConfig+0x16a>
 800756c:	2b00      	cmp	r3, #0
 800756e:	d005      	beq.n	800757c <UART_SetConfig+0x174>
 8007570:	e010      	b.n	8007594 <UART_SetConfig+0x18c>
 8007572:	2b20      	cmp	r3, #32
 8007574:	d005      	beq.n	8007582 <UART_SetConfig+0x17a>
 8007576:	2b30      	cmp	r3, #48	; 0x30
 8007578:	d009      	beq.n	800758e <UART_SetConfig+0x186>
 800757a:	e00b      	b.n	8007594 <UART_SetConfig+0x18c>
 800757c:	2300      	movs	r3, #0
 800757e:	76fb      	strb	r3, [r7, #27]
 8007580:	e088      	b.n	8007694 <UART_SetConfig+0x28c>
 8007582:	2302      	movs	r3, #2
 8007584:	76fb      	strb	r3, [r7, #27]
 8007586:	e085      	b.n	8007694 <UART_SetConfig+0x28c>
 8007588:	2304      	movs	r3, #4
 800758a:	76fb      	strb	r3, [r7, #27]
 800758c:	e082      	b.n	8007694 <UART_SetConfig+0x28c>
 800758e:	2308      	movs	r3, #8
 8007590:	76fb      	strb	r3, [r7, #27]
 8007592:	e07f      	b.n	8007694 <UART_SetConfig+0x28c>
 8007594:	2310      	movs	r3, #16
 8007596:	76fb      	strb	r3, [r7, #27]
 8007598:	bf00      	nop
 800759a:	e07b      	b.n	8007694 <UART_SetConfig+0x28c>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a59      	ldr	r2, [pc, #356]	; (8007708 <UART_SetConfig+0x300>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d120      	bne.n	80075e8 <UART_SetConfig+0x1e0>
 80075a6:	4b55      	ldr	r3, [pc, #340]	; (80076fc <UART_SetConfig+0x2f4>)
 80075a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80075b0:	2b40      	cmp	r3, #64	; 0x40
 80075b2:	d00f      	beq.n	80075d4 <UART_SetConfig+0x1cc>
 80075b4:	2b40      	cmp	r3, #64	; 0x40
 80075b6:	d802      	bhi.n	80075be <UART_SetConfig+0x1b6>
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d005      	beq.n	80075c8 <UART_SetConfig+0x1c0>
 80075bc:	e010      	b.n	80075e0 <UART_SetConfig+0x1d8>
 80075be:	2b80      	cmp	r3, #128	; 0x80
 80075c0:	d005      	beq.n	80075ce <UART_SetConfig+0x1c6>
 80075c2:	2bc0      	cmp	r3, #192	; 0xc0
 80075c4:	d009      	beq.n	80075da <UART_SetConfig+0x1d2>
 80075c6:	e00b      	b.n	80075e0 <UART_SetConfig+0x1d8>
 80075c8:	2300      	movs	r3, #0
 80075ca:	76fb      	strb	r3, [r7, #27]
 80075cc:	e062      	b.n	8007694 <UART_SetConfig+0x28c>
 80075ce:	2302      	movs	r3, #2
 80075d0:	76fb      	strb	r3, [r7, #27]
 80075d2:	e05f      	b.n	8007694 <UART_SetConfig+0x28c>
 80075d4:	2304      	movs	r3, #4
 80075d6:	76fb      	strb	r3, [r7, #27]
 80075d8:	e05c      	b.n	8007694 <UART_SetConfig+0x28c>
 80075da:	2308      	movs	r3, #8
 80075dc:	76fb      	strb	r3, [r7, #27]
 80075de:	e059      	b.n	8007694 <UART_SetConfig+0x28c>
 80075e0:	2310      	movs	r3, #16
 80075e2:	76fb      	strb	r3, [r7, #27]
 80075e4:	bf00      	nop
 80075e6:	e055      	b.n	8007694 <UART_SetConfig+0x28c>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a47      	ldr	r2, [pc, #284]	; (800770c <UART_SetConfig+0x304>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d124      	bne.n	800763c <UART_SetConfig+0x234>
 80075f2:	4b42      	ldr	r3, [pc, #264]	; (80076fc <UART_SetConfig+0x2f4>)
 80075f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007600:	d012      	beq.n	8007628 <UART_SetConfig+0x220>
 8007602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007606:	d802      	bhi.n	800760e <UART_SetConfig+0x206>
 8007608:	2b00      	cmp	r3, #0
 800760a:	d007      	beq.n	800761c <UART_SetConfig+0x214>
 800760c:	e012      	b.n	8007634 <UART_SetConfig+0x22c>
 800760e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007612:	d006      	beq.n	8007622 <UART_SetConfig+0x21a>
 8007614:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007618:	d009      	beq.n	800762e <UART_SetConfig+0x226>
 800761a:	e00b      	b.n	8007634 <UART_SetConfig+0x22c>
 800761c:	2300      	movs	r3, #0
 800761e:	76fb      	strb	r3, [r7, #27]
 8007620:	e038      	b.n	8007694 <UART_SetConfig+0x28c>
 8007622:	2302      	movs	r3, #2
 8007624:	76fb      	strb	r3, [r7, #27]
 8007626:	e035      	b.n	8007694 <UART_SetConfig+0x28c>
 8007628:	2304      	movs	r3, #4
 800762a:	76fb      	strb	r3, [r7, #27]
 800762c:	e032      	b.n	8007694 <UART_SetConfig+0x28c>
 800762e:	2308      	movs	r3, #8
 8007630:	76fb      	strb	r3, [r7, #27]
 8007632:	e02f      	b.n	8007694 <UART_SetConfig+0x28c>
 8007634:	2310      	movs	r3, #16
 8007636:	76fb      	strb	r3, [r7, #27]
 8007638:	bf00      	nop
 800763a:	e02b      	b.n	8007694 <UART_SetConfig+0x28c>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a2c      	ldr	r2, [pc, #176]	; (80076f4 <UART_SetConfig+0x2ec>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d124      	bne.n	8007690 <UART_SetConfig+0x288>
 8007646:	4b2d      	ldr	r3, [pc, #180]	; (80076fc <UART_SetConfig+0x2f4>)
 8007648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800764c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007654:	d012      	beq.n	800767c <UART_SetConfig+0x274>
 8007656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800765a:	d802      	bhi.n	8007662 <UART_SetConfig+0x25a>
 800765c:	2b00      	cmp	r3, #0
 800765e:	d007      	beq.n	8007670 <UART_SetConfig+0x268>
 8007660:	e012      	b.n	8007688 <UART_SetConfig+0x280>
 8007662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007666:	d006      	beq.n	8007676 <UART_SetConfig+0x26e>
 8007668:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800766c:	d009      	beq.n	8007682 <UART_SetConfig+0x27a>
 800766e:	e00b      	b.n	8007688 <UART_SetConfig+0x280>
 8007670:	2300      	movs	r3, #0
 8007672:	76fb      	strb	r3, [r7, #27]
 8007674:	e00e      	b.n	8007694 <UART_SetConfig+0x28c>
 8007676:	2302      	movs	r3, #2
 8007678:	76fb      	strb	r3, [r7, #27]
 800767a:	e00b      	b.n	8007694 <UART_SetConfig+0x28c>
 800767c:	2304      	movs	r3, #4
 800767e:	76fb      	strb	r3, [r7, #27]
 8007680:	e008      	b.n	8007694 <UART_SetConfig+0x28c>
 8007682:	2308      	movs	r3, #8
 8007684:	76fb      	strb	r3, [r7, #27]
 8007686:	e005      	b.n	8007694 <UART_SetConfig+0x28c>
 8007688:	2310      	movs	r3, #16
 800768a:	76fb      	strb	r3, [r7, #27]
 800768c:	bf00      	nop
 800768e:	e001      	b.n	8007694 <UART_SetConfig+0x28c>
 8007690:	2310      	movs	r3, #16
 8007692:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a16      	ldr	r2, [pc, #88]	; (80076f4 <UART_SetConfig+0x2ec>)
 800769a:	4293      	cmp	r3, r2
 800769c:	f040 80fa 	bne.w	8007894 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076a0:	7efb      	ldrb	r3, [r7, #27]
 80076a2:	2b08      	cmp	r3, #8
 80076a4:	d836      	bhi.n	8007714 <UART_SetConfig+0x30c>
 80076a6:	a201      	add	r2, pc, #4	; (adr r2, 80076ac <UART_SetConfig+0x2a4>)
 80076a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ac:	080076d1 	.word	0x080076d1
 80076b0:	08007715 	.word	0x08007715
 80076b4:	080076d9 	.word	0x080076d9
 80076b8:	08007715 	.word	0x08007715
 80076bc:	080076df 	.word	0x080076df
 80076c0:	08007715 	.word	0x08007715
 80076c4:	08007715 	.word	0x08007715
 80076c8:	08007715 	.word	0x08007715
 80076cc:	080076e7 	.word	0x080076e7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80076d0:	f7fd ff32 	bl	8005538 <HAL_RCC_GetPCLK1Freq>
 80076d4:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80076d6:	e020      	b.n	800771a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80076d8:	4b0d      	ldr	r3, [pc, #52]	; (8007710 <UART_SetConfig+0x308>)
 80076da:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80076dc:	e01d      	b.n	800771a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80076de:	f7fd fe95 	bl	800540c <HAL_RCC_GetSysClockFreq>
 80076e2:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80076e4:	e019      	b.n	800771a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80076e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076ea:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80076ec:	e015      	b.n	800771a <UART_SetConfig+0x312>
 80076ee:	bf00      	nop
 80076f0:	efff69f3 	.word	0xefff69f3
 80076f4:	40008000 	.word	0x40008000
 80076f8:	40013800 	.word	0x40013800
 80076fc:	40021000 	.word	0x40021000
 8007700:	40004400 	.word	0x40004400
 8007704:	40004800 	.word	0x40004800
 8007708:	40004c00 	.word	0x40004c00
 800770c:	40005000 	.word	0x40005000
 8007710:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	74fb      	strb	r3, [r7, #19]
        break;
 8007718:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 81ac 	beq.w	8007a7a <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685a      	ldr	r2, [r3, #4]
 8007726:	4613      	mov	r3, r2
 8007728:	005b      	lsls	r3, r3, #1
 800772a:	4413      	add	r3, r2
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	429a      	cmp	r2, r3
 8007730:	d305      	bcc.n	800773e <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	429a      	cmp	r2, r3
 800773c:	d902      	bls.n	8007744 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	74fb      	strb	r3, [r7, #19]
 8007742:	e19a      	b.n	8007a7a <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8007744:	7efb      	ldrb	r3, [r7, #27]
 8007746:	2b08      	cmp	r3, #8
 8007748:	f200 8091 	bhi.w	800786e <UART_SetConfig+0x466>
 800774c:	a201      	add	r2, pc, #4	; (adr r2, 8007754 <UART_SetConfig+0x34c>)
 800774e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007752:	bf00      	nop
 8007754:	08007779 	.word	0x08007779
 8007758:	0800786f 	.word	0x0800786f
 800775c:	080077c5 	.word	0x080077c5
 8007760:	0800786f 	.word	0x0800786f
 8007764:	080077f9 	.word	0x080077f9
 8007768:	0800786f 	.word	0x0800786f
 800776c:	0800786f 	.word	0x0800786f
 8007770:	0800786f 	.word	0x0800786f
 8007774:	08007845 	.word	0x08007845
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007778:	f7fd fede 	bl	8005538 <HAL_RCC_GetPCLK1Freq>
 800777c:	4603      	mov	r3, r0
 800777e:	4619      	mov	r1, r3
 8007780:	f04f 0200 	mov.w	r2, #0
 8007784:	f04f 0300 	mov.w	r3, #0
 8007788:	f04f 0400 	mov.w	r4, #0
 800778c:	0214      	lsls	r4, r2, #8
 800778e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007792:	020b      	lsls	r3, r1, #8
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	6852      	ldr	r2, [r2, #4]
 8007798:	0852      	lsrs	r2, r2, #1
 800779a:	4611      	mov	r1, r2
 800779c:	f04f 0200 	mov.w	r2, #0
 80077a0:	eb13 0b01 	adds.w	fp, r3, r1
 80077a4:	eb44 0c02 	adc.w	ip, r4, r2
 80077a8:	4658      	mov	r0, fp
 80077aa:	4661      	mov	r1, ip
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f04f 0400 	mov.w	r4, #0
 80077b4:	461a      	mov	r2, r3
 80077b6:	4623      	mov	r3, r4
 80077b8:	f7f8 fd06 	bl	80001c8 <__aeabi_uldivmod>
 80077bc:	4603      	mov	r3, r0
 80077be:	460c      	mov	r4, r1
 80077c0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80077c2:	e057      	b.n	8007874 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	085b      	lsrs	r3, r3, #1
 80077ca:	f04f 0400 	mov.w	r4, #0
 80077ce:	49b1      	ldr	r1, [pc, #708]	; (8007a94 <UART_SetConfig+0x68c>)
 80077d0:	f04f 0200 	mov.w	r2, #0
 80077d4:	eb13 0b01 	adds.w	fp, r3, r1
 80077d8:	eb44 0c02 	adc.w	ip, r4, r2
 80077dc:	4658      	mov	r0, fp
 80077de:	4661      	mov	r1, ip
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f04f 0400 	mov.w	r4, #0
 80077e8:	461a      	mov	r2, r3
 80077ea:	4623      	mov	r3, r4
 80077ec:	f7f8 fcec 	bl	80001c8 <__aeabi_uldivmod>
 80077f0:	4603      	mov	r3, r0
 80077f2:	460c      	mov	r4, r1
 80077f4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80077f6:	e03d      	b.n	8007874 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80077f8:	f7fd fe08 	bl	800540c <HAL_RCC_GetSysClockFreq>
 80077fc:	4603      	mov	r3, r0
 80077fe:	4619      	mov	r1, r3
 8007800:	f04f 0200 	mov.w	r2, #0
 8007804:	f04f 0300 	mov.w	r3, #0
 8007808:	f04f 0400 	mov.w	r4, #0
 800780c:	0214      	lsls	r4, r2, #8
 800780e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007812:	020b      	lsls	r3, r1, #8
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	6852      	ldr	r2, [r2, #4]
 8007818:	0852      	lsrs	r2, r2, #1
 800781a:	4611      	mov	r1, r2
 800781c:	f04f 0200 	mov.w	r2, #0
 8007820:	eb13 0b01 	adds.w	fp, r3, r1
 8007824:	eb44 0c02 	adc.w	ip, r4, r2
 8007828:	4658      	mov	r0, fp
 800782a:	4661      	mov	r1, ip
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f04f 0400 	mov.w	r4, #0
 8007834:	461a      	mov	r2, r3
 8007836:	4623      	mov	r3, r4
 8007838:	f7f8 fcc6 	bl	80001c8 <__aeabi_uldivmod>
 800783c:	4603      	mov	r3, r0
 800783e:	460c      	mov	r4, r1
 8007840:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007842:	e017      	b.n	8007874 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	085b      	lsrs	r3, r3, #1
 800784a:	f04f 0400 	mov.w	r4, #0
 800784e:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8007852:	f144 0100 	adc.w	r1, r4, #0
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f04f 0400 	mov.w	r4, #0
 800785e:	461a      	mov	r2, r3
 8007860:	4623      	mov	r3, r4
 8007862:	f7f8 fcb1 	bl	80001c8 <__aeabi_uldivmod>
 8007866:	4603      	mov	r3, r0
 8007868:	460c      	mov	r4, r1
 800786a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800786c:	e002      	b.n	8007874 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	74fb      	strb	r3, [r7, #19]
            break;
 8007872:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800787a:	d308      	bcc.n	800788e <UART_SetConfig+0x486>
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007882:	d204      	bcs.n	800788e <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	60da      	str	r2, [r3, #12]
 800788c:	e0f5      	b.n	8007a7a <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	74fb      	strb	r3, [r7, #19]
 8007892:	e0f2      	b.n	8007a7a <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800789c:	d17f      	bne.n	800799e <UART_SetConfig+0x596>
  {
    switch (clocksource)
 800789e:	7efb      	ldrb	r3, [r7, #27]
 80078a0:	2b08      	cmp	r3, #8
 80078a2:	d85c      	bhi.n	800795e <UART_SetConfig+0x556>
 80078a4:	a201      	add	r2, pc, #4	; (adr r2, 80078ac <UART_SetConfig+0x4a4>)
 80078a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078aa:	bf00      	nop
 80078ac:	080078d1 	.word	0x080078d1
 80078b0:	080078ef 	.word	0x080078ef
 80078b4:	0800790d 	.word	0x0800790d
 80078b8:	0800795f 	.word	0x0800795f
 80078bc:	08007929 	.word	0x08007929
 80078c0:	0800795f 	.word	0x0800795f
 80078c4:	0800795f 	.word	0x0800795f
 80078c8:	0800795f 	.word	0x0800795f
 80078cc:	08007947 	.word	0x08007947
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80078d0:	f7fd fe32 	bl	8005538 <HAL_RCC_GetPCLK1Freq>
 80078d4:	4603      	mov	r3, r0
 80078d6:	005a      	lsls	r2, r3, #1
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	085b      	lsrs	r3, r3, #1
 80078de:	441a      	add	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80078ec:	e03a      	b.n	8007964 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80078ee:	f7fd fe39 	bl	8005564 <HAL_RCC_GetPCLK2Freq>
 80078f2:	4603      	mov	r3, r0
 80078f4:	005a      	lsls	r2, r3, #1
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	085b      	lsrs	r3, r3, #1
 80078fc:	441a      	add	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	fbb2 f3f3 	udiv	r3, r2, r3
 8007906:	b29b      	uxth	r3, r3
 8007908:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800790a:	e02b      	b.n	8007964 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	085b      	lsrs	r3, r3, #1
 8007912:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8007916:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	6852      	ldr	r2, [r2, #4]
 800791e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007922:	b29b      	uxth	r3, r3
 8007924:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007926:	e01d      	b.n	8007964 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007928:	f7fd fd70 	bl	800540c <HAL_RCC_GetSysClockFreq>
 800792c:	4603      	mov	r3, r0
 800792e:	005a      	lsls	r2, r3, #1
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	085b      	lsrs	r3, r3, #1
 8007936:	441a      	add	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007940:	b29b      	uxth	r3, r3
 8007942:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007944:	e00e      	b.n	8007964 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	085b      	lsrs	r3, r3, #1
 800794c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	fbb2 f3f3 	udiv	r3, r2, r3
 8007958:	b29b      	uxth	r3, r3
 800795a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800795c:	e002      	b.n	8007964 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	74fb      	strb	r3, [r7, #19]
        break;
 8007962:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	2b0f      	cmp	r3, #15
 8007968:	d916      	bls.n	8007998 <UART_SetConfig+0x590>
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007970:	d212      	bcs.n	8007998 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	b29b      	uxth	r3, r3
 8007976:	f023 030f 	bic.w	r3, r3, #15
 800797a:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	085b      	lsrs	r3, r3, #1
 8007980:	b29b      	uxth	r3, r3
 8007982:	f003 0307 	and.w	r3, r3, #7
 8007986:	b29a      	uxth	r2, r3
 8007988:	897b      	ldrh	r3, [r7, #10]
 800798a:	4313      	orrs	r3, r2
 800798c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	897a      	ldrh	r2, [r7, #10]
 8007994:	60da      	str	r2, [r3, #12]
 8007996:	e070      	b.n	8007a7a <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	74fb      	strb	r3, [r7, #19]
 800799c:	e06d      	b.n	8007a7a <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 800799e:	7efb      	ldrb	r3, [r7, #27]
 80079a0:	2b08      	cmp	r3, #8
 80079a2:	d859      	bhi.n	8007a58 <UART_SetConfig+0x650>
 80079a4:	a201      	add	r2, pc, #4	; (adr r2, 80079ac <UART_SetConfig+0x5a4>)
 80079a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079aa:	bf00      	nop
 80079ac:	080079d1 	.word	0x080079d1
 80079b0:	080079ed 	.word	0x080079ed
 80079b4:	08007a09 	.word	0x08007a09
 80079b8:	08007a59 	.word	0x08007a59
 80079bc:	08007a25 	.word	0x08007a25
 80079c0:	08007a59 	.word	0x08007a59
 80079c4:	08007a59 	.word	0x08007a59
 80079c8:	08007a59 	.word	0x08007a59
 80079cc:	08007a41 	.word	0x08007a41
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80079d0:	f7fd fdb2 	bl	8005538 <HAL_RCC_GetPCLK1Freq>
 80079d4:	4602      	mov	r2, r0
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	085b      	lsrs	r3, r3, #1
 80079dc:	441a      	add	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80079ea:	e038      	b.n	8007a5e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80079ec:	f7fd fdba 	bl	8005564 <HAL_RCC_GetPCLK2Freq>
 80079f0:	4602      	mov	r2, r0
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	085b      	lsrs	r3, r3, #1
 80079f8:	441a      	add	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007a06:	e02a      	b.n	8007a5e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	085b      	lsrs	r3, r3, #1
 8007a0e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8007a12:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	6852      	ldr	r2, [r2, #4]
 8007a1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007a22:	e01c      	b.n	8007a5e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007a24:	f7fd fcf2 	bl	800540c <HAL_RCC_GetSysClockFreq>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	085b      	lsrs	r3, r3, #1
 8007a30:	441a      	add	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007a3e:	e00e      	b.n	8007a5e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	085b      	lsrs	r3, r3, #1
 8007a46:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007a56:	e002      	b.n	8007a5e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	74fb      	strb	r3, [r7, #19]
        break;
 8007a5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	2b0f      	cmp	r3, #15
 8007a62:	d908      	bls.n	8007a76 <UART_SetConfig+0x66e>
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a6a:	d204      	bcs.n	8007a76 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	60da      	str	r2, [r3, #12]
 8007a74:	e001      	b.n	8007a7a <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007a86:	7cfb      	ldrb	r3, [r7, #19]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3720      	adds	r7, #32
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007a92:	bf00      	nop
 8007a94:	f4240000 	.word	0xf4240000

08007a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00a      	beq.n	8007ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	f003 0304 	and.w	r3, r3, #4
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00a      	beq.n	8007b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0a:	f003 0308 	and.w	r3, r3, #8
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2c:	f003 0310 	and.w	r3, r3, #16
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00a      	beq.n	8007b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4e:	f003 0320 	and.w	r3, r3, #32
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00a      	beq.n	8007b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d01a      	beq.n	8007bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b96:	d10a      	bne.n	8007bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00a      	beq.n	8007bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	605a      	str	r2, [r3, #4]
  }
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af02      	add	r7, sp, #8
 8007be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007bea:	f7fa fa13 	bl	8002014 <HAL_GetTick>
 8007bee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 0308 	and.w	r3, r3, #8
 8007bfa:	2b08      	cmp	r3, #8
 8007bfc:	d10e      	bne.n	8007c1c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bfe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f82a 	bl	8007c66 <UART_WaitOnFlagUntilTimeout>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e020      	b.n	8007c5e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0304 	and.w	r3, r3, #4
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	d10e      	bne.n	8007c48 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f814 	bl	8007c66 <UART_WaitOnFlagUntilTimeout>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e00a      	b.n	8007c5e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2220      	movs	r2, #32
 8007c52:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b084      	sub	sp, #16
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	60f8      	str	r0, [r7, #12]
 8007c6e:	60b9      	str	r1, [r7, #8]
 8007c70:	603b      	str	r3, [r7, #0]
 8007c72:	4613      	mov	r3, r2
 8007c74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c76:	e02a      	b.n	8007cce <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7e:	d026      	beq.n	8007cce <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c80:	f7fa f9c8 	bl	8002014 <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	69ba      	ldr	r2, [r7, #24]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d302      	bcc.n	8007c96 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d11b      	bne.n	8007cce <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ca4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	689a      	ldr	r2, [r3, #8]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f022 0201 	bic.w	r2, r2, #1
 8007cb4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2220      	movs	r2, #32
 8007cba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e00f      	b.n	8007cee <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	69da      	ldr	r2, [r3, #28]
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	bf0c      	ite	eq
 8007cde:	2301      	moveq	r3, #1
 8007ce0:	2300      	movne	r3, #0
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	79fb      	ldrb	r3, [r7, #7]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d0c5      	beq.n	8007c78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	f107 001c 	add.w	r0, r7, #28
 8007d04:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d122      	bne.n	8007d54 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d105      	bne.n	8007d48 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f937 	bl	8007fbc <USB_CoreReset>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	73fb      	strb	r3, [r7, #15]
 8007d52:	e01a      	b.n	8007d8a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f92b 	bl	8007fbc <USB_CoreReset>
 8007d66:	4603      	mov	r3, r0
 8007d68:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d106      	bne.n	8007d7e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	639a      	str	r2, [r3, #56]	; 0x38
 8007d7c:	e005      	b.n	8007d8a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d96:	b004      	add	sp, #16
 8007d98:	4770      	bx	lr

08007d9a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f043 0201 	orr.w	r2, r3, #1
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f023 0201 	bic.w	r2, r3, #1
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	460b      	mov	r3, r1
 8007de8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007df6:	78fb      	ldrb	r3, [r7, #3]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d106      	bne.n	8007e0a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	60da      	str	r2, [r3, #12]
 8007e08:	e00b      	b.n	8007e22 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e0a:	78fb      	ldrb	r3, [r7, #3]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d106      	bne.n	8007e1e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	60da      	str	r2, [r3, #12]
 8007e1c:	e001      	b.n	8007e22 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e003      	b.n	8007e2a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007e22:	2032      	movs	r0, #50	; 0x32
 8007e24:	f7fa f902 	bl	800202c <HAL_Delay>

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	019b      	lsls	r3, r3, #6
 8007e46:	f043 0220 	orr.w	r2, r3, #32
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	3301      	adds	r3, #1
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	4a09      	ldr	r2, [pc, #36]	; (8007e7c <USB_FlushTxFifo+0x48>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d901      	bls.n	8007e60 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e006      	b.n	8007e6e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	f003 0320 	and.w	r3, r3, #32
 8007e68:	2b20      	cmp	r3, #32
 8007e6a:	d0f0      	beq.n	8007e4e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3714      	adds	r7, #20
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	00030d40 	.word	0x00030d40

08007e80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2210      	movs	r2, #16
 8007e90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	3301      	adds	r3, #1
 8007e96:	60fb      	str	r3, [r7, #12]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	4a09      	ldr	r2, [pc, #36]	; (8007ec0 <USB_FlushRxFifo+0x40>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d901      	bls.n	8007ea4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e006      	b.n	8007eb2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	f003 0310 	and.w	r3, r3, #16
 8007eac:	2b10      	cmp	r3, #16
 8007eae:	d0f0      	beq.n	8007e92 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	00030d40 	.word	0x00030d40

08007ec4 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b089      	sub	sp, #36	; 0x24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	4611      	mov	r1, r2
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	71fb      	strb	r3, [r7, #7]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8007ee2:	88bb      	ldrh	r3, [r7, #4]
 8007ee4:	3303      	adds	r3, #3
 8007ee6:	089b      	lsrs	r3, r3, #2
 8007ee8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8007eea:	2300      	movs	r3, #0
 8007eec:	61bb      	str	r3, [r7, #24]
 8007eee:	e00f      	b.n	8007f10 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ef0:	79fb      	ldrb	r3, [r7, #7]
 8007ef2:	031a      	lsls	r2, r3, #12
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007efc:	461a      	mov	r2, r3
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	3304      	adds	r3, #4
 8007f08:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	61bb      	str	r3, [r7, #24]
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d3eb      	bcc.n	8007ef0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3724      	adds	r7, #36	; 0x24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b089      	sub	sp, #36	; 0x24
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	4613      	mov	r3, r2
 8007f32:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007f3c:	88fb      	ldrh	r3, [r7, #6]
 8007f3e:	3303      	adds	r3, #3
 8007f40:	089b      	lsrs	r3, r3, #2
 8007f42:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007f44:	2300      	movs	r3, #0
 8007f46:	61bb      	str	r3, [r7, #24]
 8007f48:	e00b      	b.n	8007f62 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	3304      	adds	r3, #4
 8007f5a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	61bb      	str	r3, [r7, #24]
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d3ef      	bcc.n	8007f4a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007f6a:	69fb      	ldr	r3, [r7, #28]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3724      	adds	r7, #36	; 0x24
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	695b      	ldr	r3, [r3, #20]
 8007f84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	699b      	ldr	r3, [r3, #24]
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f90:	68fb      	ldr	r3, [r7, #12]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3714      	adds	r7, #20
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b083      	sub	sp, #12
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	f003 0301 	and.w	r3, r3, #1
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
	...

08007fbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	60fb      	str	r3, [r7, #12]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	4a13      	ldr	r2, [pc, #76]	; (8008020 <USB_CoreReset+0x64>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d901      	bls.n	8007fda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e01b      	b.n	8008012 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	daf2      	bge.n	8007fc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	f043 0201 	orr.w	r2, r3, #1
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	60fb      	str	r3, [r7, #12]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	4a09      	ldr	r2, [pc, #36]	; (8008020 <USB_CoreReset+0x64>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d901      	bls.n	8008004 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	e006      	b.n	8008012 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	f003 0301 	and.w	r3, r3, #1
 800800c:	2b01      	cmp	r3, #1
 800800e:	d0f0      	beq.n	8007ff2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3714      	adds	r7, #20
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	00030d40 	.word	0x00030d40

08008024 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008024:	b084      	sub	sp, #16
 8008026:	b580      	push	{r7, lr}
 8008028:	b084      	sub	sp, #16
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	f107 001c 	add.w	r0, r7, #28
 8008032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008040:	461a      	mov	r2, r3
 8008042:	2300      	movs	r3, #0
 8008044:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008056:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800806c:	f023 0304 	bic.w	r3, r3, #4
 8008070:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008072:	2110      	movs	r1, #16
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff fedd 	bl	8007e34 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7ff ff00 	bl	8007e80 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008080:	2300      	movs	r3, #0
 8008082:	60fb      	str	r3, [r7, #12]
 8008084:	e015      	b.n	80080b2 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	015a      	lsls	r2, r3, #5
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	4413      	add	r3, r2
 800808e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008092:	461a      	mov	r2, r3
 8008094:	f04f 33ff 	mov.w	r3, #4294967295
 8008098:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	015a      	lsls	r2, r3, #5
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	4413      	add	r3, r2
 80080a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080a6:	461a      	mov	r2, r3
 80080a8:	2300      	movs	r3, #0
 80080aa:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	3301      	adds	r3, #1
 80080b0:	60fb      	str	r3, [r7, #12]
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d3e5      	bcc.n	8008086 <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80080ba:	2101      	movs	r1, #1
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f893 	bl	80081e8 <USB_DriveVbus>

  HAL_Delay(200U);
 80080c2:	20c8      	movs	r0, #200	; 0xc8
 80080c4:	f7f9 ffb2 	bl	800202c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f04f 32ff 	mov.w	r2, #4294967295
 80080d4:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2280      	movs	r2, #128	; 0x80
 80080da:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a0d      	ldr	r2, [pc, #52]	; (8008114 <USB_HostInit+0xf0>)
 80080e0:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a0c      	ldr	r2, [pc, #48]	; (8008118 <USB_HostInit+0xf4>)
 80080e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	f043 0210 	orr.w	r2, r3, #16
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	699a      	ldr	r2, [r3, #24]
 80080fa:	4b08      	ldr	r3, [pc, #32]	; (800811c <USB_HostInit+0xf8>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800810e:	b004      	add	sp, #16
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	00600080 	.word	0x00600080
 8008118:	004000e0 	.word	0x004000e0
 800811c:	a3200008 	.word	0xa3200008

08008120 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800813e:	f023 0303 	bic.w	r3, r3, #3
 8008142:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	78fb      	ldrb	r3, [r7, #3]
 800814e:	f003 0303 	and.w	r3, r3, #3
 8008152:	68f9      	ldr	r1, [r7, #12]
 8008154:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008158:	4313      	orrs	r3, r2
 800815a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800815c:	78fb      	ldrb	r3, [r7, #3]
 800815e:	2b01      	cmp	r3, #1
 8008160:	d107      	bne.n	8008172 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008168:	461a      	mov	r2, r3
 800816a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800816e:	6053      	str	r3, [r2, #4]
 8008170:	e009      	b.n	8008186 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008172:	78fb      	ldrb	r3, [r7, #3]
 8008174:	2b02      	cmp	r3, #2
 8008176:	d106      	bne.n	8008186 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800817e:	461a      	mov	r2, r3
 8008180:	f241 7370 	movw	r3, #6000	; 0x1770
 8008184:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80081a0:	2300      	movs	r3, #0
 80081a2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80081b4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80081be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081c2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80081c4:	2064      	movs	r0, #100	; 0x64
 80081c6:	f7f9 ff31 	bl	800202c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80081d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081d6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80081d8:	200a      	movs	r0, #10
 80081da:	f7f9 ff27 	bl	800202c <HAL_Delay>

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	460b      	mov	r3, r1
 80081f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80081f8:	2300      	movs	r3, #0
 80081fa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800820c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d109      	bne.n	800822c <USB_DriveVbus+0x44>
 8008218:	78fb      	ldrb	r3, [r7, #3]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d106      	bne.n	800822c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008226:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800822a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008236:	d109      	bne.n	800824c <USB_DriveVbus+0x64>
 8008238:	78fb      	ldrb	r3, [r7, #3]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d106      	bne.n	800824c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008246:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800824a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800825a:	b480      	push	{r7}
 800825c:	b085      	sub	sp, #20
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008266:	2300      	movs	r3, #0
 8008268:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	0c5b      	lsrs	r3, r3, #17
 8008278:	f003 0303 	and.w	r3, r3, #3
}
 800827c:	4618      	mov	r0, r3
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	b29b      	uxth	r3, r3
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
	...

080082ac <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b087      	sub	sp, #28
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	4608      	mov	r0, r1
 80082b6:	4611      	mov	r1, r2
 80082b8:	461a      	mov	r2, r3
 80082ba:	4603      	mov	r3, r0
 80082bc:	70fb      	strb	r3, [r7, #3]
 80082be:	460b      	mov	r3, r1
 80082c0:	70bb      	strb	r3, [r7, #2]
 80082c2:	4613      	mov	r3, r2
 80082c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80082c6:	2300      	movs	r3, #0
 80082c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80082ce:	78fb      	ldrb	r3, [r7, #3]
 80082d0:	015a      	lsls	r2, r3, #5
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	4413      	add	r3, r2
 80082d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082da:	461a      	mov	r2, r3
 80082dc:	f04f 33ff 	mov.w	r3, #4294967295
 80082e0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80082e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	d867      	bhi.n	80083ba <USB_HC_Init+0x10e>
 80082ea:	a201      	add	r2, pc, #4	; (adr r2, 80082f0 <USB_HC_Init+0x44>)
 80082ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f0:	08008301 	.word	0x08008301
 80082f4:	0800837d 	.word	0x0800837d
 80082f8:	08008301 	.word	0x08008301
 80082fc:	0800833f 	.word	0x0800833f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	015a      	lsls	r2, r3, #5
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	4413      	add	r3, r2
 8008308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800830c:	461a      	mov	r2, r3
 800830e:	f240 439d 	movw	r3, #1181	; 0x49d
 8008312:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008314:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008318:	2b00      	cmp	r3, #0
 800831a:	da51      	bge.n	80083c0 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800831c:	78fb      	ldrb	r3, [r7, #3]
 800831e:	015a      	lsls	r2, r3, #5
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	4413      	add	r3, r2
 8008324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	78fa      	ldrb	r2, [r7, #3]
 800832c:	0151      	lsls	r1, r2, #5
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	440a      	add	r2, r1
 8008332:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800833a:	60d3      	str	r3, [r2, #12]
      }
      break;
 800833c:	e040      	b.n	80083c0 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800833e:	78fb      	ldrb	r3, [r7, #3]
 8008340:	015a      	lsls	r2, r3, #5
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	4413      	add	r3, r2
 8008346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800834a:	461a      	mov	r2, r3
 800834c:	f240 639d 	movw	r3, #1693	; 0x69d
 8008350:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008352:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008356:	2b00      	cmp	r3, #0
 8008358:	da34      	bge.n	80083c4 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800835a:	78fb      	ldrb	r3, [r7, #3]
 800835c:	015a      	lsls	r2, r3, #5
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	4413      	add	r3, r2
 8008362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	78fa      	ldrb	r2, [r7, #3]
 800836a:	0151      	lsls	r1, r2, #5
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	440a      	add	r2, r1
 8008370:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008378:	60d3      	str	r3, [r2, #12]
      }

      break;
 800837a:	e023      	b.n	80083c4 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800837c:	78fb      	ldrb	r3, [r7, #3]
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	4413      	add	r3, r2
 8008384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008388:	461a      	mov	r2, r3
 800838a:	f240 2325 	movw	r3, #549	; 0x225
 800838e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008390:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008394:	2b00      	cmp	r3, #0
 8008396:	da17      	bge.n	80083c8 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008398:	78fb      	ldrb	r3, [r7, #3]
 800839a:	015a      	lsls	r2, r3, #5
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	4413      	add	r3, r2
 80083a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	78fa      	ldrb	r2, [r7, #3]
 80083a8:	0151      	lsls	r1, r2, #5
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	440a      	add	r2, r1
 80083ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083b2:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80083b6:	60d3      	str	r3, [r2, #12]
      }
      break;
 80083b8:	e006      	b.n	80083c8 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	75fb      	strb	r3, [r7, #23]
      break;
 80083be:	e004      	b.n	80083ca <USB_HC_Init+0x11e>
      break;
 80083c0:	bf00      	nop
 80083c2:	e002      	b.n	80083ca <USB_HC_Init+0x11e>
      break;
 80083c4:	bf00      	nop
 80083c6:	e000      	b.n	80083ca <USB_HC_Init+0x11e>
      break;
 80083c8:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083d0:	699a      	ldr	r2, [r3, #24]
 80083d2:	78fb      	ldrb	r3, [r7, #3]
 80083d4:	f003 030f 	and.w	r3, r3, #15
 80083d8:	2101      	movs	r1, #1
 80083da:	fa01 f303 	lsl.w	r3, r1, r3
 80083de:	68b9      	ldr	r1, [r7, #8]
 80083e0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80083e4:	4313      	orrs	r3, r2
 80083e6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80083f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	da03      	bge.n	8008404 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80083fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008400:	613b      	str	r3, [r7, #16]
 8008402:	e001      	b.n	8008408 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8008404:	2300      	movs	r3, #0
 8008406:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8008408:	f897 3020 	ldrb.w	r3, [r7, #32]
 800840c:	2b02      	cmp	r3, #2
 800840e:	d103      	bne.n	8008418 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008410:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008414:	60fb      	str	r3, [r7, #12]
 8008416:	e001      	b.n	800841c <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008418:	2300      	movs	r3, #0
 800841a:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800841c:	787b      	ldrb	r3, [r7, #1]
 800841e:	059b      	lsls	r3, r3, #22
 8008420:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008424:	78bb      	ldrb	r3, [r7, #2]
 8008426:	02db      	lsls	r3, r3, #11
 8008428:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800842c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800842e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008432:	049b      	lsls	r3, r3, #18
 8008434:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008438:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800843a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800843c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008440:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008446:	78fb      	ldrb	r3, [r7, #3]
 8008448:	0159      	lsls	r1, r3, #5
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	440b      	add	r3, r1
 800844e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008452:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008458:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800845a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800845e:	2b03      	cmp	r3, #3
 8008460:	d10f      	bne.n	8008482 <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008462:	78fb      	ldrb	r3, [r7, #3]
 8008464:	015a      	lsls	r2, r3, #5
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	4413      	add	r3, r2
 800846a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	78fa      	ldrb	r2, [r7, #3]
 8008472:	0151      	lsls	r1, r2, #5
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	440a      	add	r2, r1
 8008478:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800847c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008480:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008482:	7dfb      	ldrb	r3, [r7, #23]
}
 8008484:	4618      	mov	r0, r3
 8008486:	371c      	adds	r7, #28
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b088      	sub	sp, #32
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	785b      	ldrb	r3, [r3, #1]
 80084a2:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80084a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084a8:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d018      	beq.n	80084e4 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	8912      	ldrh	r2, [r2, #8]
 80084ba:	4413      	add	r3, r2
 80084bc:	3b01      	subs	r3, #1
 80084be:	683a      	ldr	r2, [r7, #0]
 80084c0:	8912      	ldrh	r2, [r2, #8]
 80084c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80084c6:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 80084c8:	8bfa      	ldrh	r2, [r7, #30]
 80084ca:	8a7b      	ldrh	r3, [r7, #18]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d90b      	bls.n	80084e8 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 80084d0:	8a7b      	ldrh	r3, [r7, #18]
 80084d2:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80084d4:	8bfb      	ldrh	r3, [r7, #30]
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	8912      	ldrh	r2, [r2, #8]
 80084da:	fb02 f203 	mul.w	r2, r2, r3
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	611a      	str	r2, [r3, #16]
 80084e2:	e001      	b.n	80084e8 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 80084e4:	2301      	movs	r3, #1
 80084e6:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	78db      	ldrb	r3, [r3, #3]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d006      	beq.n	80084fe <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80084f0:	8bfb      	ldrh	r3, [r7, #30]
 80084f2:	683a      	ldr	r2, [r7, #0]
 80084f4:	8912      	ldrh	r2, [r2, #8]
 80084f6:	fb02 f203 	mul.w	r2, r2, r3
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008506:	8bfb      	ldrh	r3, [r7, #30]
 8008508:	04d9      	lsls	r1, r3, #19
 800850a:	4b5f      	ldr	r3, [pc, #380]	; (8008688 <USB_HC_StartXfer+0x1f8>)
 800850c:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800850e:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	7a9b      	ldrb	r3, [r3, #10]
 8008514:	075b      	lsls	r3, r3, #29
 8008516:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800851a:	6979      	ldr	r1, [r7, #20]
 800851c:	0148      	lsls	r0, r1, #5
 800851e:	69b9      	ldr	r1, [r7, #24]
 8008520:	4401      	add	r1, r0
 8008522:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008526:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008528:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b00      	cmp	r3, #0
 8008538:	bf0c      	ite	eq
 800853a:	2301      	moveq	r3, #1
 800853c:	2300      	movne	r3, #0
 800853e:	b2db      	uxtb	r3, r3
 8008540:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	4413      	add	r3, r2
 800854a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	0151      	lsls	r1, r2, #5
 8008554:	69ba      	ldr	r2, [r7, #24]
 8008556:	440a      	add	r2, r1
 8008558:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800855c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008560:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	015a      	lsls	r2, r3, #5
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	4413      	add	r3, r2
 800856a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	7c7b      	ldrb	r3, [r7, #17]
 8008572:	075b      	lsls	r3, r3, #29
 8008574:	6979      	ldr	r1, [r7, #20]
 8008576:	0148      	lsls	r0, r1, #5
 8008578:	69b9      	ldr	r1, [r7, #24]
 800857a:	4401      	add	r1, r0
 800857c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008580:	4313      	orrs	r3, r2
 8008582:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	015a      	lsls	r2, r3, #5
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	4413      	add	r3, r2
 800858c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a3e      	ldr	r2, [pc, #248]	; (800868c <USB_HC_StartXfer+0x1fc>)
 8008594:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008596:	4b3d      	ldr	r3, [pc, #244]	; (800868c <USB_HC_StartXfer+0x1fc>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800859e:	4a3b      	ldr	r2, [pc, #236]	; (800868c <USB_HC_StartXfer+0x1fc>)
 80085a0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	78db      	ldrb	r3, [r3, #3]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d006      	beq.n	80085b8 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80085aa:	4b38      	ldr	r3, [pc, #224]	; (800868c <USB_HC_StartXfer+0x1fc>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085b2:	4a36      	ldr	r2, [pc, #216]	; (800868c <USB_HC_StartXfer+0x1fc>)
 80085b4:	6013      	str	r3, [r2, #0]
 80085b6:	e005      	b.n	80085c4 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80085b8:	4b34      	ldr	r3, [pc, #208]	; (800868c <USB_HC_StartXfer+0x1fc>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085c0:	4a32      	ldr	r2, [pc, #200]	; (800868c <USB_HC_StartXfer+0x1fc>)
 80085c2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80085c4:	4b31      	ldr	r3, [pc, #196]	; (800868c <USB_HC_StartXfer+0x1fc>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085cc:	4a2f      	ldr	r2, [pc, #188]	; (800868c <USB_HC_StartXfer+0x1fc>)
 80085ce:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085dc:	461a      	mov	r2, r3
 80085de:	4b2b      	ldr	r3, [pc, #172]	; (800868c <USB_HC_StartXfer+0x1fc>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	78db      	ldrb	r3, [r3, #3]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d148      	bne.n	800867e <USB_HC_StartXfer+0x1ee>
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d044      	beq.n	800867e <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	79db      	ldrb	r3, [r3, #7]
 80085f8:	2b03      	cmp	r3, #3
 80085fa:	d831      	bhi.n	8008660 <USB_HC_StartXfer+0x1d0>
 80085fc:	a201      	add	r2, pc, #4	; (adr r2, 8008604 <USB_HC_StartXfer+0x174>)
 80085fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008602:	bf00      	nop
 8008604:	08008615 	.word	0x08008615
 8008608:	08008639 	.word	0x08008639
 800860c:	08008615 	.word	0x08008615
 8008610:	08008639 	.word	0x08008639
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	3303      	adds	r3, #3
 800861a:	089b      	lsrs	r3, r3, #2
 800861c:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800861e:	89fa      	ldrh	r2, [r7, #14]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008624:	b29b      	uxth	r3, r3
 8008626:	429a      	cmp	r2, r3
 8008628:	d91c      	bls.n	8008664 <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	f043 0220 	orr.w	r2, r3, #32
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	619a      	str	r2, [r3, #24]
          }
          break;
 8008636:	e015      	b.n	8008664 <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	3303      	adds	r3, #3
 800863e:	089b      	lsrs	r3, r3, #2
 8008640:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008642:	89fa      	ldrh	r2, [r7, #14]
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	b29b      	uxth	r3, r3
 800864e:	429a      	cmp	r2, r3
 8008650:	d90a      	bls.n	8008668 <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	619a      	str	r2, [r3, #24]
          }
          break;
 800865e:	e003      	b.n	8008668 <USB_HC_StartXfer+0x1d8>

        default:
          break;
 8008660:	bf00      	nop
 8008662:	e002      	b.n	800866a <USB_HC_StartXfer+0x1da>
          break;
 8008664:	bf00      	nop
 8008666:	e000      	b.n	800866a <USB_HC_StartXfer+0x1da>
          break;
 8008668:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	68d9      	ldr	r1, [r3, #12]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	785a      	ldrb	r2, [r3, #1]
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	b29b      	uxth	r3, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f7ff fc23 	bl	8007ec4 <USB_WritePacket>
    }

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3720      	adds	r7, #32
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	1ff80000 	.word	0x1ff80000
 800868c:	200004d8 	.word	0x200004d8

08008690 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086a2:	695b      	ldr	r3, [r3, #20]
 80086a4:	b29b      	uxth	r3, r3
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b087      	sub	sp, #28
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
 80086ba:	460b      	mov	r3, r1
 80086bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80086c2:	78fb      	ldrb	r3, [r7, #3]
 80086c4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80086c6:	2300      	movs	r3, #0
 80086c8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	015a      	lsls	r2, r3, #5
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	4413      	add	r3, r2
 80086d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	0c9b      	lsrs	r3, r3, #18
 80086da:	f003 0303 	and.w	r3, r3, #3
 80086de:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d002      	beq.n	80086ec <USB_HC_Halt+0x3a>
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d16c      	bne.n	80087c6 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	0151      	lsls	r1, r2, #5
 80086fe:	693a      	ldr	r2, [r7, #16]
 8008700:	440a      	add	r2, r1
 8008702:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008706:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800870a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008710:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d143      	bne.n	80087a0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	015a      	lsls	r2, r3, #5
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	4413      	add	r3, r2
 8008720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	0151      	lsls	r1, r2, #5
 800872a:	693a      	ldr	r2, [r7, #16]
 800872c:	440a      	add	r2, r1
 800872e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008732:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008736:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	015a      	lsls	r2, r3, #5
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	4413      	add	r3, r2
 8008740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	0151      	lsls	r1, r2, #5
 800874a:	693a      	ldr	r2, [r7, #16]
 800874c:	440a      	add	r2, r1
 800874e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008752:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008756:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	015a      	lsls	r2, r3, #5
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	4413      	add	r3, r2
 8008760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	0151      	lsls	r1, r2, #5
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	440a      	add	r2, r1
 800876e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008772:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008776:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	3301      	adds	r3, #1
 800877c:	617b      	str	r3, [r7, #20]
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008784:	d81d      	bhi.n	80087c2 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	015a      	lsls	r2, r3, #5
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	4413      	add	r3, r2
 800878e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800879c:	d0ec      	beq.n	8008778 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800879e:	e080      	b.n	80088a2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	015a      	lsls	r2, r3, #5
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	0151      	lsls	r1, r2, #5
 80087b2:	693a      	ldr	r2, [r7, #16]
 80087b4:	440a      	add	r2, r1
 80087b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087be:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80087c0:	e06f      	b.n	80088a2 <USB_HC_Halt+0x1f0>
          break;
 80087c2:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80087c4:	e06d      	b.n	80088a2 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	015a      	lsls	r2, r3, #5
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	4413      	add	r3, r2
 80087ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	0151      	lsls	r1, r2, #5
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	440a      	add	r2, r1
 80087dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087e4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d143      	bne.n	800887e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	0151      	lsls	r1, r2, #5
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	440a      	add	r2, r1
 800880c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008810:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008814:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	015a      	lsls	r2, r3, #5
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	4413      	add	r3, r2
 800881e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	0151      	lsls	r1, r2, #5
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	440a      	add	r2, r1
 800882c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008830:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008834:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	015a      	lsls	r2, r3, #5
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	4413      	add	r3, r2
 800883e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	0151      	lsls	r1, r2, #5
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	440a      	add	r2, r1
 800884c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008850:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008854:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	3301      	adds	r3, #1
 800885a:	617b      	str	r3, [r7, #20]
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008862:	d81d      	bhi.n	80088a0 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	4413      	add	r3, r2
 800886c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008876:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800887a:	d0ec      	beq.n	8008856 <USB_HC_Halt+0x1a4>
 800887c:	e011      	b.n	80088a2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	4413      	add	r3, r2
 8008886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	0151      	lsls	r1, r2, #5
 8008890:	693a      	ldr	r2, [r7, #16]
 8008892:	440a      	add	r2, r1
 8008894:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008898:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800889c:	6013      	str	r3, [r2, #0]
 800889e:	e000      	b.n	80088a2 <USB_HC_Halt+0x1f0>
          break;
 80088a0:	bf00      	nop
    }
  }

  return HAL_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	371c      	adds	r7, #28
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80088bc:	2300      	movs	r3, #0
 80088be:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7ff fa7b 	bl	8007dbc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80088c6:	2110      	movs	r1, #16
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7ff fab3 	bl	8007e34 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7ff fad6 	bl	8007e80 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80088d4:	2300      	movs	r3, #0
 80088d6:	613b      	str	r3, [r7, #16]
 80088d8:	e01f      	b.n	800891a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	015a      	lsls	r2, r3, #5
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	4413      	add	r3, r2
 80088e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088f0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088f8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008900:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	015a      	lsls	r2, r3, #5
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	4413      	add	r3, r2
 800890a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800890e:	461a      	mov	r2, r3
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	3301      	adds	r3, #1
 8008918:	613b      	str	r3, [r7, #16]
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	2b0f      	cmp	r3, #15
 800891e:	d9dc      	bls.n	80088da <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008920:	2300      	movs	r3, #0
 8008922:	613b      	str	r3, [r7, #16]
 8008924:	e034      	b.n	8008990 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	015a      	lsls	r2, r3, #5
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	4413      	add	r3, r2
 800892e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800893c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008944:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800894c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	015a      	lsls	r2, r3, #5
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	4413      	add	r3, r2
 8008956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800895a:	461a      	mov	r2, r3
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	3301      	adds	r3, #1
 8008964:	617b      	str	r3, [r7, #20]
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800896c:	d80c      	bhi.n	8008988 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	015a      	lsls	r2, r3, #5
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	4413      	add	r3, r2
 8008976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008980:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008984:	d0ec      	beq.n	8008960 <USB_StopHost+0xb0>
 8008986:	e000      	b.n	800898a <USB_StopHost+0xda>
        break;
 8008988:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	3301      	adds	r3, #1
 800898e:	613b      	str	r3, [r7, #16]
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	2b0f      	cmp	r3, #15
 8008994:	d9c7      	bls.n	8008926 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800899c:	461a      	mov	r2, r3
 800899e:	f04f 33ff 	mov.w	r3, #4294967295
 80089a2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f04f 32ff 	mov.w	r2, #4294967295
 80089aa:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7ff f9f4 	bl	8007d9a <USB_EnableGlobalInt>

  return HAL_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80089bc:	b590      	push	{r4, r7, lr}
 80089be:	b089      	sub	sp, #36	; 0x24
 80089c0:	af04      	add	r7, sp, #16
 80089c2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 80089c4:	2302      	movs	r3, #2
 80089c6:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 80089c8:	2301      	movs	r3, #1
 80089ca:	2202      	movs	r2, #2
 80089cc:	2102      	movs	r1, #2
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fc3a 	bl	8009248 <USBH_FindInterface>
 80089d4:	4603      	mov	r3, r0
 80089d6:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 80089d8:	7bbb      	ldrb	r3, [r7, #14]
 80089da:	2bff      	cmp	r3, #255	; 0xff
 80089dc:	f000 812a 	beq.w	8008c34 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	4619      	mov	r1, r3
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fc13 	bl	8009210 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80089f0:	2050      	movs	r0, #80	; 0x50
 80089f2:	f002 f8e3 	bl	800abbc <malloc>
 80089f6:	4603      	mov	r3, r0
 80089f8:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008a00:	69db      	ldr	r3, [r3, #28]
 8008a02:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008a04:	7bbb      	ldrb	r3, [r7, #14]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	211a      	movs	r1, #26
 8008a0a:	fb01 f303 	mul.w	r3, r1, r3
 8008a0e:	4413      	add	r3, r2
 8008a10:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	b25b      	sxtb	r3, r3
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	da15      	bge.n	8008a48 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	211a      	movs	r1, #26
 8008a22:	fb01 f303 	mul.w	r3, r1, r3
 8008a26:	4413      	add	r3, r2
 8008a28:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008a2c:	781a      	ldrb	r2, [r3, #0]
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008a32:	7bbb      	ldrb	r3, [r7, #14]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	211a      	movs	r1, #26
 8008a38:	fb01 f303 	mul.w	r3, r1, r3
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008a42:	881a      	ldrh	r2, [r3, #0]
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	785b      	ldrb	r3, [r3, #1]
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f001 fd21 	bl	800a496 <USBH_AllocPipe>
 8008a54:	4603      	mov	r3, r0
 8008a56:	461a      	mov	r2, r3
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	7819      	ldrb	r1, [r3, #0]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	7858      	ldrb	r0, [r3, #1]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	8952      	ldrh	r2, [r2, #10]
 8008a74:	9202      	str	r2, [sp, #8]
 8008a76:	2203      	movs	r2, #3
 8008a78:	9201      	str	r2, [sp, #4]
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	4623      	mov	r3, r4
 8008a7e:	4602      	mov	r2, r0
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f001 fcd9 	bl	800a438 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f001 ffe4 	bl	800aa5c <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8008a94:	2300      	movs	r3, #0
 8008a96:	2200      	movs	r2, #0
 8008a98:	210a      	movs	r1, #10
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fbd4 	bl	8009248 <USBH_FindInterface>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8008aa4:	7bbb      	ldrb	r3, [r7, #14]
 8008aa6:	2bff      	cmp	r3, #255	; 0xff
 8008aa8:	f000 80c4 	beq.w	8008c34 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008aac:	7bbb      	ldrb	r3, [r7, #14]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	211a      	movs	r1, #26
 8008ab2:	fb01 f303 	mul.w	r3, r1, r3
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	b25b      	sxtb	r3, r3
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	da16      	bge.n	8008af2 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008ac4:	7bbb      	ldrb	r3, [r7, #14]
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	211a      	movs	r1, #26
 8008aca:	fb01 f303 	mul.w	r3, r1, r3
 8008ace:	4413      	add	r3, r2
 8008ad0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008ad4:	781a      	ldrb	r2, [r3, #0]
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ada:	7bbb      	ldrb	r3, [r7, #14]
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	211a      	movs	r1, #26
 8008ae0:	fb01 f303 	mul.w	r3, r1, r3
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008aea:	881a      	ldrh	r2, [r3, #0]
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	835a      	strh	r2, [r3, #26]
 8008af0:	e015      	b.n	8008b1e <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008af2:	7bbb      	ldrb	r3, [r7, #14]
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	211a      	movs	r1, #26
 8008af8:	fb01 f303 	mul.w	r3, r1, r3
 8008afc:	4413      	add	r3, r2
 8008afe:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008b02:	781a      	ldrb	r2, [r3, #0]
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b08:	7bbb      	ldrb	r3, [r7, #14]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	211a      	movs	r1, #26
 8008b0e:	fb01 f303 	mul.w	r3, r1, r3
 8008b12:	4413      	add	r3, r2
 8008b14:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008b18:	881a      	ldrh	r2, [r3, #0]
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008b1e:	7bbb      	ldrb	r3, [r7, #14]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	211a      	movs	r1, #26
 8008b24:	fb01 f303 	mul.w	r3, r1, r3
 8008b28:	4413      	add	r3, r2
 8008b2a:	f203 3352 	addw	r3, r3, #850	; 0x352
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	b25b      	sxtb	r3, r3
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	da16      	bge.n	8008b64 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008b36:	7bbb      	ldrb	r3, [r7, #14]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	211a      	movs	r1, #26
 8008b3c:	fb01 f303 	mul.w	r3, r1, r3
 8008b40:	4413      	add	r3, r2
 8008b42:	f203 3352 	addw	r3, r3, #850	; 0x352
 8008b46:	781a      	ldrb	r2, [r3, #0]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008b4c:	7bbb      	ldrb	r3, [r7, #14]
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	211a      	movs	r1, #26
 8008b52:	fb01 f303 	mul.w	r3, r1, r3
 8008b56:	4413      	add	r3, r2
 8008b58:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8008b5c:	881a      	ldrh	r2, [r3, #0]
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	835a      	strh	r2, [r3, #26]
 8008b62:	e015      	b.n	8008b90 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	211a      	movs	r1, #26
 8008b6a:	fb01 f303 	mul.w	r3, r1, r3
 8008b6e:	4413      	add	r3, r2
 8008b70:	f203 3352 	addw	r3, r3, #850	; 0x352
 8008b74:	781a      	ldrb	r2, [r3, #0]
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008b7a:	7bbb      	ldrb	r3, [r7, #14]
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	211a      	movs	r1, #26
 8008b80:	fb01 f303 	mul.w	r3, r1, r3
 8008b84:	4413      	add	r3, r2
 8008b86:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8008b8a:	881a      	ldrh	r2, [r3, #0]
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	7b9b      	ldrb	r3, [r3, #14]
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f001 fc7d 	bl	800a496 <USBH_AllocPipe>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	7bdb      	ldrb	r3, [r3, #15]
 8008ba8:	4619      	mov	r1, r3
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f001 fc73 	bl	800a496 <USBH_AllocPipe>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	7b59      	ldrb	r1, [r3, #13]
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	7b98      	ldrb	r0, [r3, #14]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	8b12      	ldrh	r2, [r2, #24]
 8008bd0:	9202      	str	r2, [sp, #8]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	9201      	str	r2, [sp, #4]
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	4623      	mov	r3, r4
 8008bda:	4602      	mov	r2, r0
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f001 fc2b 	bl	800a438 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	7b19      	ldrb	r1, [r3, #12]
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	7bd8      	ldrb	r0, [r3, #15]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	8b52      	ldrh	r2, [r2, #26]
 8008bfa:	9202      	str	r2, [sp, #8]
 8008bfc:	2202      	movs	r2, #2
 8008bfe:	9201      	str	r2, [sp, #4]
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	4623      	mov	r3, r4
 8008c04:	4602      	mov	r2, r0
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f001 fc16 	bl	800a438 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	7b5b      	ldrb	r3, [r3, #13]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f001 ff1d 	bl	800aa5c <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	7b1b      	ldrb	r3, [r3, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	4619      	mov	r1, r3
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f001 ff16 	bl	800aa5c <USBH_LL_SetToggle>
      status = USBH_OK;
 8008c30:	2300      	movs	r3, #0
 8008c32:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3714      	adds	r7, #20
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd90      	pop	{r4, r7, pc}

08008c3e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b084      	sub	sp, #16
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00e      	beq.n	8008c76 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f001 fc09 	bl	800a476 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f001 fc31 	bl	800a4d2 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	7b1b      	ldrb	r3, [r3, #12]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00e      	beq.n	8008c9c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	7b1b      	ldrb	r3, [r3, #12]
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f001 fbf6 	bl	800a476 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	7b1b      	ldrb	r3, [r3, #12]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f001 fc1e 	bl	800a4d2 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	7b5b      	ldrb	r3, [r3, #13]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00e      	beq.n	8008cc2 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	7b5b      	ldrb	r3, [r3, #13]
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f001 fbe3 	bl	800a476 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	7b5b      	ldrb	r3, [r3, #13]
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f001 fc0b 	bl	800a4d2 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008cc8:	69db      	ldr	r3, [r3, #28]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00b      	beq.n	8008ce6 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008cd4:	69db      	ldr	r3, [r3, #28]
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f001 ff78 	bl	800abcc <free>
    phost->pActiveClass->pData = 0U;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008d02:	69db      	ldr	r3, [r3, #28]
 8008d04:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	3340      	adds	r3, #64	; 0x40
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f8b2 	bl	8008e76 <GetLineCoding>
 8008d12:	4603      	mov	r3, r0
 8008d14:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8008d16:	7bfb      	ldrb	r3, [r7, #15]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d105      	bne.n	8008d28 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008d22:	2102      	movs	r1, #2
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	4798      	blx	r3
  }
  return status;
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
	...

08008d34 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008d4a:	69db      	ldr	r3, [r3, #28]
 8008d4c:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008d54:	2b04      	cmp	r3, #4
 8008d56:	d877      	bhi.n	8008e48 <USBH_CDC_Process+0x114>
 8008d58:	a201      	add	r2, pc, #4	; (adr r2, 8008d60 <USBH_CDC_Process+0x2c>)
 8008d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d5e:	bf00      	nop
 8008d60:	08008d75 	.word	0x08008d75
 8008d64:	08008d7b 	.word	0x08008d7b
 8008d68:	08008dab 	.word	0x08008dab
 8008d6c:	08008e1f 	.word	0x08008e1f
 8008d70:	08008e2d 	.word	0x08008e2d
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8008d74:	2300      	movs	r3, #0
 8008d76:	73fb      	strb	r3, [r7, #15]
    break;
 8008d78:	e06d      	b.n	8008e56 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d7e:	4619      	mov	r1, r3
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f897 	bl	8008eb4 <SetLineCoding>
 8008d86:	4603      	mov	r3, r0
 8008d88:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8008d8a:	7bbb      	ldrb	r3, [r7, #14]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d104      	bne.n	8008d9a <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	2202      	movs	r2, #2
 8008d94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8008d98:	e058      	b.n	8008e4c <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8008d9a:	7bbb      	ldrb	r3, [r7, #14]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d055      	beq.n	8008e4c <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	2204      	movs	r2, #4
 8008da4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8008da8:	e050      	b.n	8008e4c <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	3340      	adds	r3, #64	; 0x40
 8008dae:	4619      	mov	r1, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f860 	bl	8008e76 <GetLineCoding>
 8008db6:	4603      	mov	r3, r0
 8008db8:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8008dba:	7bbb      	ldrb	r3, [r7, #14]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d126      	bne.n	8008e0e <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dd2:	791b      	ldrb	r3, [r3, #4]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d13b      	bne.n	8008e50 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008de2:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d133      	bne.n	8008e50 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008df2:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d12b      	bne.n	8008e50 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e00:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d124      	bne.n	8008e50 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f95a 	bl	80090c0 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8008e0c:	e020      	b.n	8008e50 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8008e0e:	7bbb      	ldrb	r3, [r7, #14]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d01d      	beq.n	8008e50 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	2204      	movs	r2, #4
 8008e18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8008e1c:	e018      	b.n	8008e50 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f867 	bl	8008ef2 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 f8dc 	bl	8008fe2 <CDC_ProcessReception>
    break;
 8008e2a:	e014      	b.n	8008e56 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fece 	bl	8009bd0 <USBH_ClrFeature>
 8008e34:	4603      	mov	r3, r0
 8008e36:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8008e38:	7bbb      	ldrb	r3, [r7, #14]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10a      	bne.n	8008e54 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8008e46:	e005      	b.n	8008e54 <USBH_CDC_Process+0x120>

  default:
    break;
 8008e48:	bf00      	nop
 8008e4a:	e004      	b.n	8008e56 <USBH_CDC_Process+0x122>
    break;
 8008e4c:	bf00      	nop
 8008e4e:	e002      	b.n	8008e56 <USBH_CDC_Process+0x122>
    break;
 8008e50:	bf00      	nop
 8008e52:	e000      	b.n	8008e56 <USBH_CDC_Process+0x122>
    break;
 8008e54:	bf00      	nop

  }

  return status;
 8008e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	370c      	adds	r7, #12
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b082      	sub	sp, #8
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	22a1      	movs	r2, #161	; 0xa1
 8008e84:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2221      	movs	r2, #33	; 0x21
 8008e8a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2207      	movs	r2, #7
 8008e9c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2207      	movs	r2, #7
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f001 f873 	bl	8009f90 <USBH_CtlReq>
 8008eaa:	4603      	mov	r3, r0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2221      	movs	r2, #33	; 0x21
 8008ec2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2220      	movs	r2, #32
 8008ec8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2207      	movs	r2, #7
 8008eda:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	2207      	movs	r2, #7
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f001 f854 	bl	8009f90 <USBH_CtlReq>
 8008ee8:	4603      	mov	r3, r0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b086      	sub	sp, #24
 8008ef6:	af02      	add	r7, sp, #8
 8008ef8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008f00:	69db      	ldr	r3, [r3, #28]
 8008f02:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008f04:	2300      	movs	r3, #0
 8008f06:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d002      	beq.n	8008f18 <CDC_ProcessTransmission+0x26>
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d025      	beq.n	8008f62 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8008f16:	e060      	b.n	8008fda <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	8b12      	ldrh	r2, [r2, #24]
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d90c      	bls.n	8008f3e <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	69d9      	ldr	r1, [r3, #28]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	8b1a      	ldrh	r2, [r3, #24]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	7b58      	ldrb	r0, [r3, #13]
 8008f30:	2301      	movs	r3, #1
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	4603      	mov	r3, r0
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f001 fa3b 	bl	800a3b2 <USBH_BulkSendData>
 8008f3c:	e00c      	b.n	8008f58 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	7b58      	ldrb	r0, [r3, #13]
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	4603      	mov	r3, r0
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f001 fa2d 	bl	800a3b2 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8008f60:	e03b      	b.n	8008fda <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	7b5b      	ldrb	r3, [r3, #13]
 8008f66:	4619      	mov	r1, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f001 fd4d 	bl	800aa08 <USBH_LL_GetURBState>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8008f72:	7afb      	ldrb	r3, [r7, #11]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d128      	bne.n	8008fca <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	8b12      	ldrh	r2, [r2, #24]
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d90e      	bls.n	8008fa2 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	8b12      	ldrh	r2, [r2, #24]
 8008f8c:	1a9a      	subs	r2, r3, r2
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	69db      	ldr	r3, [r3, #28]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	8b12      	ldrh	r2, [r2, #24]
 8008f9a:	441a      	add	r2, r3
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	61da      	str	r2, [r3, #28]
 8008fa0:	e002      	b.n	8008fa8 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d004      	beq.n	8008fba <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8008fb8:	e00e      	b.n	8008fd8 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 f868 	bl	8009098 <USBH_CDC_TransmitCallback>
    break;
 8008fc8:	e006      	b.n	8008fd8 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8008fca:	7afb      	ldrb	r3, [r7, #11]
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d103      	bne.n	8008fd8 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8008fd8:	bf00      	nop
  }
}
 8008fda:	bf00      	nop
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b086      	sub	sp, #24
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008ff0:	69db      	ldr	r3, [r3, #28]
 8008ff2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008ffe:	2b03      	cmp	r3, #3
 8009000:	d002      	beq.n	8009008 <CDC_ProcessReception+0x26>
 8009002:	2b04      	cmp	r3, #4
 8009004:	d00e      	beq.n	8009024 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8009006:	e043      	b.n	8009090 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	6a19      	ldr	r1, [r3, #32]
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	8b5a      	ldrh	r2, [r3, #26]
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	7b1b      	ldrb	r3, [r3, #12]
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f001 f9f1 	bl	800a3fc <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	2204      	movs	r2, #4
 800901e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8009022:	e035      	b.n	8009090 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	7b1b      	ldrb	r3, [r3, #12]
 8009028:	4619      	mov	r1, r3
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f001 fcec 	bl	800aa08 <USBH_LL_GetURBState>
 8009030:	4603      	mov	r3, r0
 8009032:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8009034:	7cfb      	ldrb	r3, [r7, #19]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d129      	bne.n	800908e <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	7b1b      	ldrb	r3, [r3, #12]
 800903e:	4619      	mov	r1, r3
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f001 fc4f 	bl	800a8e4 <USBH_LL_GetLastXferSize>
 8009046:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	429a      	cmp	r2, r3
 8009050:	d016      	beq.n	8009080 <CDC_ProcessReception+0x9e>
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	8b5b      	ldrh	r3, [r3, #26]
 8009056:	461a      	mov	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	4293      	cmp	r3, r2
 800905c:	d910      	bls.n	8009080 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	1ad2      	subs	r2, r2, r3
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	6a1a      	ldr	r2, [r3, #32]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	441a      	add	r2, r3
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	2203      	movs	r2, #3
 800907a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800907e:	e006      	b.n	800908e <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f80f 	bl	80090ac <USBH_CDC_ReceiveCallback>
    break;
 800908e:	bf00      	nop
  }
}
 8009090:	bf00      	nop
 8009092:	3718      	adds	r7, #24
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]

}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]

}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]

}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	4613      	mov	r3, r2
 80090e0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d101      	bne.n	80090ec <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80090e8:	2302      	movs	r3, #2
 80090ea:	e019      	b.n	8009120 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	79fa      	ldrb	r2, [r7, #7]
 80090f0:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f000 f80f 	bl	8009128 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d003      	beq.n	8009118 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f001 fb31 	bl	800a780 <USBH_LL_Init>

  return USBH_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009130:	2300      	movs	r3, #0
 8009132:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8009134:	e008      	b.n	8009148 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	32e0      	adds	r2, #224	; 0xe0
 800913c:	2100      	movs	r1, #0
 800913e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	3301      	adds	r3, #1
 8009146:	60fb      	str	r3, [r7, #12]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2b0e      	cmp	r3, #14
 800914c:	d9f3      	bls.n	8009136 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800914e:	2300      	movs	r3, #0
 8009150:	60fb      	str	r3, [r7, #12]
 8009152:	e009      	b.n	8009168 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	4413      	add	r3, r2
 800915a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800915e:	2200      	movs	r2, #0
 8009160:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3301      	adds	r3, #1
 8009166:	60fb      	str	r3, [r7, #12]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800916e:	d3f1      	bcc.n	8009154 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2201      	movs	r2, #1
 800918e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2240      	movs	r2, #64	; 0x40
 8009194:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80091ba:	b480      	push	{r7}
 80091bc:	b085      	sub	sp, #20
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 80091c4:	2300      	movs	r3, #0
 80091c6:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d017      	beq.n	80091fe <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10f      	bne.n	80091f8 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091de:	1c59      	adds	r1, r3, #1
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	33dc      	adds	r3, #220	; 0xdc
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	4413      	add	r3, r2
 80091ee:	683a      	ldr	r2, [r7, #0]
 80091f0:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	73fb      	strb	r3, [r7, #15]
 80091f6:	e004      	b.n	8009202 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80091f8:	2302      	movs	r3, #2
 80091fa:	73fb      	strb	r3, [r7, #15]
 80091fc:	e001      	b.n	8009202 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80091fe:	2302      	movs	r3, #2
 8009200:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009202:	7bfb      	ldrb	r3, [r7, #15]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3714      	adds	r7, #20
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009210:	b480      	push	{r7}
 8009212:	b085      	sub	sp, #20
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	460b      	mov	r3, r1
 800921a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800921c:	2300      	movs	r3, #0
 800921e:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8009226:	78fa      	ldrb	r2, [r7, #3]
 8009228:	429a      	cmp	r2, r3
 800922a:	d204      	bcs.n	8009236 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	78fa      	ldrb	r2, [r7, #3]
 8009230:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8009234:	e001      	b.n	800923a <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009236:	2302      	movs	r3, #2
 8009238:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800923a:	7bfb      	ldrb	r3, [r7, #15]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009248:	b480      	push	{r7}
 800924a:	b087      	sub	sp, #28
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	4608      	mov	r0, r1
 8009252:	4611      	mov	r1, r2
 8009254:	461a      	mov	r2, r3
 8009256:	4603      	mov	r3, r0
 8009258:	70fb      	strb	r3, [r7, #3]
 800925a:	460b      	mov	r3, r1
 800925c:	70bb      	strb	r3, [r7, #2]
 800925e:	4613      	mov	r3, r2
 8009260:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8009262:	2300      	movs	r3, #0
 8009264:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009266:	2300      	movs	r3, #0
 8009268:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8009270:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009272:	e025      	b.n	80092c0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009274:	7dfb      	ldrb	r3, [r7, #23]
 8009276:	221a      	movs	r2, #26
 8009278:	fb02 f303 	mul.w	r3, r2, r3
 800927c:	3308      	adds	r3, #8
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	4413      	add	r3, r2
 8009282:	3302      	adds	r3, #2
 8009284:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	795b      	ldrb	r3, [r3, #5]
 800928a:	78fa      	ldrb	r2, [r7, #3]
 800928c:	429a      	cmp	r2, r3
 800928e:	d002      	beq.n	8009296 <USBH_FindInterface+0x4e>
 8009290:	78fb      	ldrb	r3, [r7, #3]
 8009292:	2bff      	cmp	r3, #255	; 0xff
 8009294:	d111      	bne.n	80092ba <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800929a:	78ba      	ldrb	r2, [r7, #2]
 800929c:	429a      	cmp	r2, r3
 800929e:	d002      	beq.n	80092a6 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80092a0:	78bb      	ldrb	r3, [r7, #2]
 80092a2:	2bff      	cmp	r3, #255	; 0xff
 80092a4:	d109      	bne.n	80092ba <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80092aa:	787a      	ldrb	r2, [r7, #1]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d002      	beq.n	80092b6 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80092b0:	787b      	ldrb	r3, [r7, #1]
 80092b2:	2bff      	cmp	r3, #255	; 0xff
 80092b4:	d101      	bne.n	80092ba <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80092b6:	7dfb      	ldrb	r3, [r7, #23]
 80092b8:	e006      	b.n	80092c8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80092ba:	7dfb      	ldrb	r3, [r7, #23]
 80092bc:	3301      	adds	r3, #1
 80092be:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80092c0:	7dfb      	ldrb	r3, [r7, #23]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d9d6      	bls.n	8009274 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80092c6:	23ff      	movs	r3, #255	; 0xff
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	371c      	adds	r7, #28
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f001 fa8b 	bl	800a7f8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80092e2:	2101      	movs	r1, #1
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f001 fba2 	bl	800aa2e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b088      	sub	sp, #32
 80092f8:	af04      	add	r7, sp, #16
 80092fa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80092fc:	2302      	movs	r3, #2
 80092fe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009300:	2300      	movs	r3, #0
 8009302:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 faec 	bl	80098e2 <USBH_IsPortEnabled>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d10c      	bne.n	800932a <USBH_Process+0x36>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2b00      	cmp	r3, #0
 8009318:	d007      	beq.n	800932a <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	b2db      	uxtb	r3, r3
 8009320:	2b03      	cmp	r3, #3
 8009322:	d002      	beq.n	800932a <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2203      	movs	r2, #3
 8009328:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	b2db      	uxtb	r3, r3
 8009330:	2b0b      	cmp	r3, #11
 8009332:	f200 814c 	bhi.w	80095ce <USBH_Process+0x2da>
 8009336:	a201      	add	r2, pc, #4	; (adr r2, 800933c <USBH_Process+0x48>)
 8009338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933c:	0800936d 	.word	0x0800936d
 8009340:	0800938f 	.word	0x0800938f
 8009344:	080093a3 	.word	0x080093a3
 8009348:	080095a9 	.word	0x080095a9
 800934c:	080095cf 	.word	0x080095cf
 8009350:	08009431 	.word	0x08009431
 8009354:	0800955f 	.word	0x0800955f
 8009358:	08009461 	.word	0x08009461
 800935c:	08009481 	.word	0x08009481
 8009360:	080094a1 	.word	0x080094a1
 8009364:	080094cf 	.word	0x080094cf
 8009368:	08009591 	.word	0x08009591
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009372:	b2db      	uxtb	r3, r3
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 812c 	beq.w	80095d2 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8009380:	20c8      	movs	r0, #200	; 0xc8
 8009382:	f001 fb9e 	bl	800aac2 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f001 fa91 	bl	800a8ae <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800938c:	e121      	b.n	80095d2 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009394:	2b01      	cmp	r3, #1
 8009396:	f040 811e 	bne.w	80095d6 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2202      	movs	r2, #2
 800939e:	701a      	strb	r2, [r3, #0]
    }
    break;
 80093a0:	e119      	b.n	80095d6 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 80093a2:	2064      	movs	r0, #100	; 0x64
 80093a4:	f001 fb8d 	bl	800aac2 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f001 fa5b 	bl	800a864 <USBH_LL_GetSpeed>
 80093ae:	4603      	mov	r3, r0
 80093b0:	461a      	mov	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2205      	movs	r2, #5
 80093bc:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80093be:	2100      	movs	r1, #0
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f001 f868 	bl	800a496 <USBH_AllocPipe>
 80093c6:	4603      	mov	r3, r0
 80093c8:	461a      	mov	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80093ce:	2180      	movs	r1, #128	; 0x80
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f001 f860 	bl	800a496 <USBH_AllocPipe>
 80093d6:	4603      	mov	r3, r0
 80093d8:	461a      	mov	r2, r3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	7919      	ldrb	r1, [r3, #4]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80093f2:	b292      	uxth	r2, r2
 80093f4:	9202      	str	r2, [sp, #8]
 80093f6:	2200      	movs	r2, #0
 80093f8:	9201      	str	r2, [sp, #4]
 80093fa:	9300      	str	r3, [sp, #0]
 80093fc:	4603      	mov	r3, r0
 80093fe:	2280      	movs	r2, #128	; 0x80
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f001 f819 	bl	800a438 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	7959      	ldrb	r1, [r3, #5]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800941a:	b292      	uxth	r2, r2
 800941c:	9202      	str	r2, [sp, #8]
 800941e:	2200      	movs	r2, #0
 8009420:	9201      	str	r2, [sp, #4]
 8009422:	9300      	str	r3, [sp, #0]
 8009424:	4603      	mov	r3, r0
 8009426:	2200      	movs	r2, #0
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f001 f805 	bl	800a438 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800942e:	e0e3      	b.n	80095f8 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f8e7 	bl	8009604 <USBH_HandleEnum>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	f040 80ce 	bne.w	80095da <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800944c:	2b01      	cmp	r3, #1
 800944e:	d103      	bne.n	8009458 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2208      	movs	r2, #8
 8009454:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8009456:	e0c0      	b.n	80095da <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2207      	movs	r2, #7
 800945c:	701a      	strb	r2, [r3, #0]
    break;
 800945e:	e0bc      	b.n	80095da <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009466:	2b00      	cmp	r3, #0
 8009468:	f000 80b9 	beq.w	80095de <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009472:	2101      	movs	r1, #1
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2208      	movs	r2, #8
 800947c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800947e:	e0ae      	b.n	80095de <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8009486:	b29b      	uxth	r3, r3
 8009488:	4619      	mov	r1, r3
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fb59 	bl	8009b42 <USBH_SetCfg>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	f040 80a5 	bne.w	80095e2 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2209      	movs	r2, #9
 800949c:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800949e:	e0a0      	b.n	80095e2 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 80094a6:	f003 0320 	and.w	r3, r3, #32
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00b      	beq.n	80094c6 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80094ae:	2101      	movs	r1, #1
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 fb69 	bl	8009b88 <USBH_SetFeature>
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f040 8094 	bne.w	80095e6 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	220a      	movs	r2, #10
 80094c2:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80094c4:	e08f      	b.n	80095e6 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	220a      	movs	r2, #10
 80094ca:	701a      	strb	r2, [r3, #0]
    break;
 80094cc:	e08b      	b.n	80095e6 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f000 8088 	beq.w	80095ea <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80094e2:	2300      	movs	r3, #0
 80094e4:	73fb      	strb	r3, [r7, #15]
 80094e6:	e017      	b.n	8009518 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80094e8:	7bfb      	ldrb	r3, [r7, #15]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	33dc      	adds	r3, #220	; 0xdc
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	4413      	add	r3, r2
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	791a      	ldrb	r2, [r3, #4]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d108      	bne.n	8009512 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8009500:	7bfb      	ldrb	r3, [r7, #15]
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	33dc      	adds	r3, #220	; 0xdc
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4413      	add	r3, r2
 800950a:	685a      	ldr	r2, [r3, #4]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009512:	7bfb      	ldrb	r3, [r7, #15]
 8009514:	3301      	adds	r3, #1
 8009516:	73fb      	strb	r3, [r7, #15]
 8009518:	7bfb      	ldrb	r3, [r7, #15]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d0e4      	beq.n	80094e8 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009524:	2b00      	cmp	r3, #0
 8009526:	d016      	beq.n	8009556 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	4798      	blx	r3
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d109      	bne.n	800954e <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2206      	movs	r2, #6
 800953e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009546:	2103      	movs	r1, #3
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800954c:	e04d      	b.n	80095ea <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	220d      	movs	r2, #13
 8009552:	701a      	strb	r2, [r3, #0]
    break;
 8009554:	e049      	b.n	80095ea <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	220d      	movs	r2, #13
 800955a:	701a      	strb	r2, [r3, #0]
    break;
 800955c:	e045      	b.n	80095ea <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00f      	beq.n	8009588 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	4798      	blx	r3
 8009574:	4603      	mov	r3, r0
 8009576:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8009578:	7bbb      	ldrb	r3, [r7, #14]
 800957a:	b2db      	uxtb	r3, r3
 800957c:	2b00      	cmp	r3, #0
 800957e:	d136      	bne.n	80095ee <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	220b      	movs	r2, #11
 8009584:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8009586:	e032      	b.n	80095ee <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	220d      	movs	r2, #13
 800958c:	701a      	strb	r2, [r3, #0]
    break;
 800958e:	e02e      	b.n	80095ee <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009596:	2b00      	cmp	r3, #0
 8009598:	d02b      	beq.n	80095f2 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	4798      	blx	r3
    }
    break;
 80095a6:	e024      	b.n	80095f2 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f7ff fdbd 	bl	8009128 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d01e      	beq.n	80095f6 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 80095cc:	e013      	b.n	80095f6 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 80095ce:	bf00      	nop
 80095d0:	e012      	b.n	80095f8 <USBH_Process+0x304>
    break;
 80095d2:	bf00      	nop
 80095d4:	e010      	b.n	80095f8 <USBH_Process+0x304>
    break;
 80095d6:	bf00      	nop
 80095d8:	e00e      	b.n	80095f8 <USBH_Process+0x304>
    break;
 80095da:	bf00      	nop
 80095dc:	e00c      	b.n	80095f8 <USBH_Process+0x304>
    break;
 80095de:	bf00      	nop
 80095e0:	e00a      	b.n	80095f8 <USBH_Process+0x304>
    break;
 80095e2:	bf00      	nop
 80095e4:	e008      	b.n	80095f8 <USBH_Process+0x304>
    break;
 80095e6:	bf00      	nop
 80095e8:	e006      	b.n	80095f8 <USBH_Process+0x304>
    break;
 80095ea:	bf00      	nop
 80095ec:	e004      	b.n	80095f8 <USBH_Process+0x304>
    break;
 80095ee:	bf00      	nop
 80095f0:	e002      	b.n	80095f8 <USBH_Process+0x304>
    break;
 80095f2:	bf00      	nop
 80095f4:	e000      	b.n	80095f8 <USBH_Process+0x304>
    break;
 80095f6:	bf00      	nop
  }
 return USBH_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop

08009604 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b088      	sub	sp, #32
 8009608:	af04      	add	r7, sp, #16
 800960a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800960c:	2301      	movs	r3, #1
 800960e:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	785b      	ldrb	r3, [r3, #1]
 8009614:	2b07      	cmp	r3, #7
 8009616:	f200 80f8 	bhi.w	800980a <USBH_HandleEnum+0x206>
 800961a:	a201      	add	r2, pc, #4	; (adr r2, 8009620 <USBH_HandleEnum+0x1c>)
 800961c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009620:	08009641 	.word	0x08009641
 8009624:	080096b3 	.word	0x080096b3
 8009628:	080096cb 	.word	0x080096cb
 800962c:	08009741 	.word	0x08009741
 8009630:	08009757 	.word	0x08009757
 8009634:	08009773 	.word	0x08009773
 8009638:	080097a7 	.word	0x080097a7
 800963c:	080097db 	.word	0x080097db
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8009640:	2108      	movs	r1, #8
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f9ad 	bl	80099a2 <USBH_Get_DevDesc>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	f040 80df 	bne.w	800980e <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	7919      	ldrb	r1, [r3, #4]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009674:	b292      	uxth	r2, r2
 8009676:	9202      	str	r2, [sp, #8]
 8009678:	2200      	movs	r2, #0
 800967a:	9201      	str	r2, [sp, #4]
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	4603      	mov	r3, r0
 8009680:	2280      	movs	r2, #128	; 0x80
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 fed8 	bl	800a438 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	7959      	ldrb	r1, [r3, #5]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800969c:	b292      	uxth	r2, r2
 800969e:	9202      	str	r2, [sp, #8]
 80096a0:	2200      	movs	r2, #0
 80096a2:	9201      	str	r2, [sp, #4]
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	4603      	mov	r3, r0
 80096a8:	2200      	movs	r2, #0
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 fec4 	bl	800a438 <USBH_OpenPipe>

    }
    break;
 80096b0:	e0ad      	b.n	800980e <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80096b2:	2112      	movs	r1, #18
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f974 	bl	80099a2 <USBH_Get_DevDesc>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f040 80a8 	bne.w	8009812 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2202      	movs	r2, #2
 80096c6:	705a      	strb	r2, [r3, #1]

    }
    break;
 80096c8:	e0a3      	b.n	8009812 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80096ca:	2101      	movs	r1, #1
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fa14 	bl	8009afa <USBH_SetAddress>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f040 809e 	bne.w	8009816 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 80096da:	2002      	movs	r0, #2
 80096dc:	f001 f9f1 	bl	800aac2 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2203      	movs	r2, #3
 80096ec:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	7919      	ldrb	r1, [r3, #4]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009702:	b292      	uxth	r2, r2
 8009704:	9202      	str	r2, [sp, #8]
 8009706:	2200      	movs	r2, #0
 8009708:	9201      	str	r2, [sp, #4]
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	4603      	mov	r3, r0
 800970e:	2280      	movs	r2, #128	; 0x80
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fe91 	bl	800a438 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	7959      	ldrb	r1, [r3, #5]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800972a:	b292      	uxth	r2, r2
 800972c:	9202      	str	r2, [sp, #8]
 800972e:	2200      	movs	r2, #0
 8009730:	9201      	str	r2, [sp, #4]
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	4603      	mov	r3, r0
 8009736:	2200      	movs	r2, #0
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fe7d 	bl	800a438 <USBH_OpenPipe>
    }
    break;
 800973e:	e06a      	b.n	8009816 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8009740:	2109      	movs	r1, #9
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f955 	bl	80099f2 <USBH_Get_CfgDesc>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d165      	bne.n	800981a <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2204      	movs	r2, #4
 8009752:	705a      	strb	r2, [r3, #1]
    }
    break;
 8009754:	e061      	b.n	800981a <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800975c:	4619      	mov	r1, r3
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f947 	bl	80099f2 <USBH_Get_CfgDesc>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d159      	bne.n	800981e <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2205      	movs	r2, #5
 800976e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8009770:	e055      	b.n	800981e <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8009778:	2b00      	cmp	r3, #0
 800977a:	d010      	beq.n	800979e <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009788:	23ff      	movs	r3, #255	; 0xff
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 f955 	bl	8009a3a <USBH_Get_StringDesc>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d145      	bne.n	8009822 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2206      	movs	r2, #6
 800979a:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800979c:	e041      	b.n	8009822 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2206      	movs	r2, #6
 80097a2:	705a      	strb	r2, [r3, #1]
    break;
 80097a4:	e03d      	b.n	8009822 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d010      	beq.n	80097d2 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80097bc:	23ff      	movs	r3, #255	; 0xff
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f93b 	bl	8009a3a <USBH_Get_StringDesc>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d12d      	bne.n	8009826 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2207      	movs	r2, #7
 80097ce:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80097d0:	e029      	b.n	8009826 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2207      	movs	r2, #7
 80097d6:	705a      	strb	r2, [r3, #1]
    break;
 80097d8:	e025      	b.n	8009826 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00f      	beq.n	8009804 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80097f0:	23ff      	movs	r3, #255	; 0xff
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f921 	bl	8009a3a <USBH_Get_StringDesc>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d115      	bne.n	800982a <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80097fe:	2300      	movs	r3, #0
 8009800:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009802:	e012      	b.n	800982a <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8009804:	2300      	movs	r3, #0
 8009806:	73fb      	strb	r3, [r7, #15]
    break;
 8009808:	e00f      	b.n	800982a <USBH_HandleEnum+0x226>

  default:
    break;
 800980a:	bf00      	nop
 800980c:	e00e      	b.n	800982c <USBH_HandleEnum+0x228>
    break;
 800980e:	bf00      	nop
 8009810:	e00c      	b.n	800982c <USBH_HandleEnum+0x228>
    break;
 8009812:	bf00      	nop
 8009814:	e00a      	b.n	800982c <USBH_HandleEnum+0x228>
    break;
 8009816:	bf00      	nop
 8009818:	e008      	b.n	800982c <USBH_HandleEnum+0x228>
    break;
 800981a:	bf00      	nop
 800981c:	e006      	b.n	800982c <USBH_HandleEnum+0x228>
    break;
 800981e:	bf00      	nop
 8009820:	e004      	b.n	800982c <USBH_HandleEnum+0x228>
    break;
 8009822:	bf00      	nop
 8009824:	e002      	b.n	800982c <USBH_HandleEnum+0x228>
    break;
 8009826:	bf00      	nop
 8009828:	e000      	b.n	800982c <USBH_HandleEnum+0x228>
    break;
 800982a:	bf00      	nop
  }
  return Status;
 800982c:	7bfb      	ldrb	r3, [r7, #15]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop

08009838 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	683a      	ldr	r2, [r7, #0]
 8009846:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800984a:	bf00      	nop
 800984c:	370c      	adds	r7, #12
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr

08009856 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b082      	sub	sp, #8
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009864:	1c5a      	adds	r2, r3, #1
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 f804 	bl	800987a <USBH_HandleSof>
}
 8009872:	bf00      	nop
 8009874:	3708      	adds	r7, #8
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b082      	sub	sp, #8
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	b2db      	uxtb	r3, r3
 8009888:	2b0b      	cmp	r3, #11
 800988a:	d10a      	bne.n	80098a2 <USBH_HandleSof+0x28>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009892:	2b00      	cmp	r3, #0
 8009894:	d005      	beq.n	80098a2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	4798      	blx	r3
  }
}
 80098a2:	bf00      	nop
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 80098aa:	b480      	push	{r7}
 80098ac:	b083      	sub	sp, #12
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80098ba:	bf00      	nop
}
 80098bc:	370c      	adds	r7, #12
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr

080098c6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80098c6:	b480      	push	{r7}
 80098c8:	b083      	sub	sp, #12
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80098d6:	bf00      	nop
}
 80098d8:	370c      	adds	r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr

080098e2 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 80098e2:	b480      	push	{r7}
 80098e4:	b083      	sub	sp, #12
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	b2db      	uxtb	r3, r3
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10f      	bne.n	800992e <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800991c:	2b00      	cmp	r3, #0
 800991e:	d00e      	beq.n	800993e <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009926:	2104      	movs	r1, #4
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	4798      	blx	r3
 800992c:	e007      	b.n	800993e <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009934:	2b01      	cmp	r3, #1
 8009936:	d102      	bne.n	800993e <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2202      	movs	r2, #2
 800993c:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 ff6c 	bl	800a82e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	791b      	ldrb	r3, [r3, #4]
 800995a:	4619      	mov	r1, r3
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 fdb8 	bl	800a4d2 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	795b      	ldrb	r3, [r3, #5]
 8009966:	4619      	mov	r1, r3
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 fdb2 	bl	800a4d2 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800997c:	2b00      	cmp	r3, #0
 800997e:	d005      	beq.n	800998c <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009986:	2105      	movs	r1, #5
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 ff33 	bl	800a7f8 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2203      	movs	r2, #3
 8009996:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b086      	sub	sp, #24
 80099a6:	af02      	add	r7, sp, #8
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	460b      	mov	r3, r1
 80099ac:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80099b4:	78fb      	ldrb	r3, [r7, #3]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	9300      	str	r3, [sp, #0]
 80099ba:	4613      	mov	r3, r2
 80099bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099c0:	2100      	movs	r1, #0
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 f864 	bl	8009a90 <USBH_GetDescriptor>
 80099c8:	4603      	mov	r3, r0
 80099ca:	73fb      	strb	r3, [r7, #15]
 80099cc:	7bfb      	ldrb	r3, [r7, #15]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10a      	bne.n	80099e8 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f203 3022 	addw	r0, r3, #802	; 0x322
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80099de:	78fa      	ldrb	r2, [r7, #3]
 80099e0:	b292      	uxth	r2, r2
 80099e2:	4619      	mov	r1, r3
 80099e4:	f000 f918 	bl	8009c18 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 80099e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b086      	sub	sp, #24
 80099f6:	af02      	add	r7, sp, #8
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	460b      	mov	r3, r1
 80099fc:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	331c      	adds	r3, #28
 8009a02:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8009a04:	887b      	ldrh	r3, [r7, #2]
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a0e:	2100      	movs	r1, #0
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 f83d 	bl	8009a90 <USBH_GetDescriptor>
 8009a16:	4603      	mov	r3, r0
 8009a18:	72fb      	strb	r3, [r7, #11]
 8009a1a:	7afb      	ldrb	r3, [r7, #11]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d107      	bne.n	8009a30 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8009a26:	887a      	ldrh	r2, [r7, #2]
 8009a28:	68f9      	ldr	r1, [r7, #12]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 f964 	bl	8009cf8 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8009a30:	7afb      	ldrb	r3, [r7, #11]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b088      	sub	sp, #32
 8009a3e:	af02      	add	r7, sp, #8
 8009a40:	60f8      	str	r0, [r7, #12]
 8009a42:	607a      	str	r2, [r7, #4]
 8009a44:	461a      	mov	r2, r3
 8009a46:	460b      	mov	r3, r1
 8009a48:	72fb      	strb	r3, [r7, #11]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8009a4e:	7afb      	ldrb	r3, [r7, #11]
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009a56:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8009a5e:	893b      	ldrh	r3, [r7, #8]
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	460b      	mov	r3, r1
 8009a64:	2100      	movs	r1, #0
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f000 f812 	bl	8009a90 <USBH_GetDescriptor>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	75fb      	strb	r3, [r7, #23]
 8009a70:	7dfb      	ldrb	r3, [r7, #23]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d107      	bne.n	8009a86 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009a7c:	893a      	ldrh	r2, [r7, #8]
 8009a7e:	6879      	ldr	r1, [r7, #4]
 8009a80:	4618      	mov	r0, r3
 8009a82:	f000 fa37 	bl	8009ef4 <USBH_ParseStringDesc>
  }
  return status;
 8009a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3718      	adds	r7, #24
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	607b      	str	r3, [r7, #4]
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	72fb      	strb	r3, [r7, #11]
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	789b      	ldrb	r3, [r3, #2]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d11c      	bne.n	8009ae4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009aaa:	7afb      	ldrb	r3, [r7, #11]
 8009aac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ab0:	b2da      	uxtb	r2, r3
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2206      	movs	r2, #6
 8009aba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	893a      	ldrh	r2, [r7, #8]
 8009ac0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009ac2:	893b      	ldrh	r3, [r7, #8]
 8009ac4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009ac8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009acc:	d104      	bne.n	8009ad8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f240 4209 	movw	r2, #1033	; 0x409
 8009ad4:	829a      	strh	r2, [r3, #20]
 8009ad6:	e002      	b.n	8009ade <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2200      	movs	r2, #0
 8009adc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	8b3a      	ldrh	r2, [r7, #24]
 8009ae2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8009ae4:	8b3b      	ldrh	r3, [r7, #24]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	6879      	ldr	r1, [r7, #4]
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f000 fa50 	bl	8009f90 <USBH_CtlReq>
 8009af0:	4603      	mov	r3, r0
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3710      	adds	r7, #16
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}

08009afa <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b082      	sub	sp, #8
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
 8009b02:	460b      	mov	r3, r1
 8009b04:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	789b      	ldrb	r3, [r3, #2]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d10f      	bne.n	8009b2e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2205      	movs	r2, #5
 8009b18:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009b1a:	78fb      	ldrb	r3, [r7, #3]
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009b2e:	2200      	movs	r2, #0
 8009b30:	2100      	movs	r1, #0
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 fa2c 	bl	8009f90 <USBH_CtlReq>
 8009b38:	4603      	mov	r3, r0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b082      	sub	sp, #8
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	789b      	ldrb	r3, [r3, #2]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d10e      	bne.n	8009b74 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2209      	movs	r2, #9
 8009b60:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	887a      	ldrh	r2, [r7, #2]
 8009b66:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8009b74:	2200      	movs	r2, #0
 8009b76:	2100      	movs	r1, #0
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 fa09 	bl	8009f90 <USBH_CtlReq>
 8009b7e:	4603      	mov	r3, r0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	460b      	mov	r3, r1
 8009b92:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	789b      	ldrb	r3, [r3, #2]
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d10f      	bne.n	8009bbc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2203      	movs	r2, #3
 8009ba6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009ba8:	78fb      	ldrb	r3, [r7, #3]
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	2100      	movs	r1, #0
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 f9e5 	bl	8009f90 <USBH_CtlReq>
 8009bc6:	4603      	mov	r3, r0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	460b      	mov	r3, r1
 8009bda:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	789b      	ldrb	r3, [r3, #2]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d10f      	bne.n	8009c04 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2202      	movs	r2, #2
 8009be8:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2201      	movs	r2, #1
 8009bee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009bf6:	78fb      	ldrb	r3, [r7, #3]
 8009bf8:	b29a      	uxth	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8009c04:	2200      	movs	r2, #0
 8009c06:	2100      	movs	r1, #0
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f9c1 	bl	8009f90 <USBH_CtlReq>
 8009c0e:	4603      	mov	r3, r0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3708      	adds	r7, #8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	60b9      	str	r1, [r7, #8]
 8009c22:	4613      	mov	r3, r2
 8009c24:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	781a      	ldrb	r2, [r3, #0]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	785a      	ldrb	r2, [r3, #1]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	3302      	adds	r3, #2
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	b29a      	uxth	r2, r3
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	3303      	adds	r3, #3
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	021b      	lsls	r3, r3, #8
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	791a      	ldrb	r2, [r3, #4]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	795a      	ldrb	r2, [r3, #5]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	799a      	ldrb	r2, [r3, #6]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	79da      	ldrb	r2, [r3, #7]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009c72:	88fb      	ldrh	r3, [r7, #6]
 8009c74:	2b08      	cmp	r3, #8
 8009c76:	d939      	bls.n	8009cec <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	3308      	adds	r3, #8
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	b29a      	uxth	r2, r3
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	3309      	adds	r3, #9
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	021b      	lsls	r3, r3, #8
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	330a      	adds	r3, #10
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	330b      	adds	r3, #11
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	021b      	lsls	r3, r3, #8
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	b29a      	uxth	r2, r3
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	330c      	adds	r3, #12
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	330d      	adds	r3, #13
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	021b      	lsls	r3, r3, #8
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	7b9a      	ldrb	r2, [r3, #14]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	7bda      	ldrb	r2, [r3, #15]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	7c1a      	ldrb	r2, [r3, #16]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	7c5a      	ldrb	r2, [r3, #17]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	745a      	strb	r2, [r3, #17]
  }
}
 8009cec:	bf00      	nop
 8009cee:	3714      	adds	r7, #20
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b08a      	sub	sp, #40	; 0x28
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	4613      	mov	r3, r2
 8009d04:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009d10:	2300      	movs	r3, #0
 8009d12:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	781a      	ldrb	r2, [r3, #0]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	785a      	ldrb	r2, [r3, #1]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	3302      	adds	r3, #2
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	3303      	adds	r3, #3
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	021b      	lsls	r3, r3, #8
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	791a      	ldrb	r2, [r3, #4]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	795a      	ldrb	r2, [r3, #5]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	799a      	ldrb	r2, [r3, #6]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	79da      	ldrb	r2, [r3, #7]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	7a1a      	ldrb	r2, [r3, #8]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009d6e:	88fb      	ldrh	r3, [r7, #6]
 8009d70:	2b09      	cmp	r3, #9
 8009d72:	d95f      	bls.n	8009e34 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009d74:	2309      	movs	r3, #9
 8009d76:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009d7c:	e051      	b.n	8009e22 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009d7e:	f107 0316 	add.w	r3, r7, #22
 8009d82:	4619      	mov	r1, r3
 8009d84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d86:	f000 f8e8 	bl	8009f5a <USBH_GetNextDesc>
 8009d8a:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8e:	785b      	ldrb	r3, [r3, #1]
 8009d90:	2b04      	cmp	r3, #4
 8009d92:	d146      	bne.n	8009e22 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009d94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d98:	221a      	movs	r2, #26
 8009d9a:	fb02 f303 	mul.w	r3, r2, r3
 8009d9e:	3308      	adds	r3, #8
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	4413      	add	r3, r2
 8009da4:	3302      	adds	r3, #2
 8009da6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8009da8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009daa:	69f8      	ldr	r0, [r7, #28]
 8009dac:	f000 f846 	bl	8009e3c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009db0:	2300      	movs	r3, #0
 8009db2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009db6:	2300      	movs	r3, #0
 8009db8:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009dba:	e022      	b.n	8009e02 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8009dbc:	f107 0316 	add.w	r3, r7, #22
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009dc4:	f000 f8c9 	bl	8009f5a <USBH_GetNextDesc>
 8009dc8:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dcc:	785b      	ldrb	r3, [r3, #1]
 8009dce:	2b05      	cmp	r3, #5
 8009dd0:	d117      	bne.n	8009e02 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009dd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009dd6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009dda:	3201      	adds	r2, #1
 8009ddc:	00d2      	lsls	r2, r2, #3
 8009dde:	211a      	movs	r1, #26
 8009de0:	fb01 f303 	mul.w	r3, r1, r3
 8009de4:	4413      	add	r3, r2
 8009de6:	3308      	adds	r3, #8
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	4413      	add	r3, r2
 8009dec:	3304      	adds	r3, #4
 8009dee:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8009df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009df2:	69b8      	ldr	r0, [r7, #24]
 8009df4:	f000 f851 	bl	8009e9a <USBH_ParseEPDesc>
            ep_ix++;
 8009df8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	791b      	ldrb	r3, [r3, #4]
 8009e06:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d204      	bcs.n	8009e18 <USBH_ParseCfgDesc+0x120>
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	885a      	ldrh	r2, [r3, #2]
 8009e12:	8afb      	ldrh	r3, [r7, #22]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d8d1      	bhi.n	8009dbc <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009e18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009e22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d804      	bhi.n	8009e34 <USBH_ParseCfgDesc+0x13c>
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	885a      	ldrh	r2, [r3, #2]
 8009e2e:	8afb      	ldrh	r3, [r7, #22]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d8a4      	bhi.n	8009d7e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009e34:	bf00      	nop
 8009e36:	3728      	adds	r7, #40	; 0x28
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	781a      	ldrb	r2, [r3, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	785a      	ldrb	r2, [r3, #1]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	789a      	ldrb	r2, [r3, #2]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	78da      	ldrb	r2, [r3, #3]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	791a      	ldrb	r2, [r3, #4]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	795a      	ldrb	r2, [r3, #5]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	799a      	ldrb	r2, [r3, #6]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	79da      	ldrb	r2, [r3, #7]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	7a1a      	ldrb	r2, [r3, #8]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	721a      	strb	r2, [r3, #8]
}
 8009e8e:	bf00      	nop
 8009e90:	370c      	adds	r7, #12
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr

08009e9a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8009e9a:	b480      	push	{r7}
 8009e9c:	b083      	sub	sp, #12
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	781a      	ldrb	r2, [r3, #0]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	785a      	ldrb	r2, [r3, #1]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	789a      	ldrb	r2, [r3, #2]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	78da      	ldrb	r2, [r3, #3]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	3304      	adds	r3, #4
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	3305      	adds	r3, #5
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	021b      	lsls	r3, r3, #8
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	b29a      	uxth	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	799a      	ldrb	r2, [r3, #6]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	719a      	strb	r2, [r3, #6]
}
 8009ee8:	bf00      	nop
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b087      	sub	sp, #28
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	4613      	mov	r3, r2
 8009f00:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	3301      	adds	r3, #1
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	2b03      	cmp	r3, #3
 8009f0a:	d120      	bne.n	8009f4e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	1e9a      	subs	r2, r3, #2
 8009f12:	88fb      	ldrh	r3, [r7, #6]
 8009f14:	4293      	cmp	r3, r2
 8009f16:	bf28      	it	cs
 8009f18:	4613      	movcs	r3, r2
 8009f1a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	3302      	adds	r3, #2
 8009f20:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009f22:	2300      	movs	r3, #0
 8009f24:	82fb      	strh	r3, [r7, #22]
 8009f26:	e00b      	b.n	8009f40 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009f28:	8afb      	ldrh	r3, [r7, #22]
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	781a      	ldrb	r2, [r3, #0]
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	3301      	adds	r3, #1
 8009f38:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009f3a:	8afb      	ldrh	r3, [r7, #22]
 8009f3c:	3302      	adds	r3, #2
 8009f3e:	82fb      	strh	r3, [r7, #22]
 8009f40:	8afa      	ldrh	r2, [r7, #22]
 8009f42:	8abb      	ldrh	r3, [r7, #20]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d3ef      	bcc.n	8009f28 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	701a      	strb	r2, [r3, #0]
  }
}
 8009f4e:	bf00      	nop
 8009f50:	371c      	adds	r7, #28
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr

08009f5a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8009f5a:	b480      	push	{r7}
 8009f5c:	b085      	sub	sp, #20
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
 8009f62:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	881a      	ldrh	r2, [r3, #0]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	4413      	add	r3, r2
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4413      	add	r3, r2
 8009f80:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8009f82:	68fb      	ldr	r3, [r7, #12]
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3714      	adds	r7, #20
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b086      	sub	sp, #24
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	60b9      	str	r1, [r7, #8]
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	789b      	ldrb	r3, [r3, #2]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d002      	beq.n	8009fb0 <USBH_CtlReq+0x20>
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d00f      	beq.n	8009fce <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8009fae:	e034      	b.n	800a01a <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	68ba      	ldr	r2, [r7, #8]
 8009fb4:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	88fa      	ldrh	r2, [r7, #6]
 8009fba:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2202      	movs	r2, #2
 8009fc6:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	75fb      	strb	r3, [r7, #23]
    break;
 8009fcc:	e025      	b.n	800a01a <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f000 f828 	bl	800a024 <USBH_HandleControl>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8009fd8:	7dfb      	ldrb	r3, [r7, #23]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d108      	bne.n	8009ff0 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8009fea:	2300      	movs	r3, #0
 8009fec:	75fb      	strb	r3, [r7, #23]
    break;
 8009fee:	e013      	b.n	800a018 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8009ff0:	7dfb      	ldrb	r3, [r7, #23]
 8009ff2:	2b03      	cmp	r3, #3
 8009ff4:	d108      	bne.n	800a008 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2200      	movs	r2, #0
 800a000:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800a002:	2303      	movs	r3, #3
 800a004:	75fb      	strb	r3, [r7, #23]
    break;
 800a006:	e007      	b.n	800a018 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 800a008:	7dfb      	ldrb	r3, [r7, #23]
 800a00a:	2b02      	cmp	r3, #2
 800a00c:	d104      	bne.n	800a018 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2201      	movs	r2, #1
 800a012:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800a014:	2302      	movs	r3, #2
 800a016:	75fb      	strb	r3, [r7, #23]
    break;
 800a018:	bf00      	nop
  }
  return status;
 800a01a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3718      	adds	r7, #24
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b086      	sub	sp, #24
 800a028:	af02      	add	r7, sp, #8
 800a02a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a02c:	2301      	movs	r3, #1
 800a02e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a030:	2300      	movs	r3, #0
 800a032:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	7e1b      	ldrb	r3, [r3, #24]
 800a038:	3b01      	subs	r3, #1
 800a03a:	2b0a      	cmp	r3, #10
 800a03c:	f200 814c 	bhi.w	800a2d8 <USBH_HandleControl+0x2b4>
 800a040:	a201      	add	r2, pc, #4	; (adr r2, 800a048 <USBH_HandleControl+0x24>)
 800a042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a046:	bf00      	nop
 800a048:	0800a075 	.word	0x0800a075
 800a04c:	0800a08f 	.word	0x0800a08f
 800a050:	0800a0f9 	.word	0x0800a0f9
 800a054:	0800a11f 	.word	0x0800a11f
 800a058:	0800a157 	.word	0x0800a157
 800a05c:	0800a183 	.word	0x0800a183
 800a060:	0800a1d5 	.word	0x0800a1d5
 800a064:	0800a1f7 	.word	0x0800a1f7
 800a068:	0800a233 	.word	0x0800a233
 800a06c:	0800a25b 	.word	0x0800a25b
 800a070:	0800a299 	.word	0x0800a299
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f103 0110 	add.w	r1, r3, #16
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	795b      	ldrb	r3, [r3, #5]
 800a07e:	461a      	mov	r2, r3
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 f939 	bl	800a2f8 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2202      	movs	r2, #2
 800a08a:	761a      	strb	r2, [r3, #24]
    break;
 800a08c:	e12f      	b.n	800a2ee <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	795b      	ldrb	r3, [r3, #5]
 800a092:	4619      	mov	r1, r3
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fcb7 	bl	800aa08 <USBH_LL_GetURBState>
 800a09a:	4603      	mov	r3, r0
 800a09c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800a09e:	7bbb      	ldrb	r3, [r7, #14]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d11e      	bne.n	800a0e2 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	7c1b      	ldrb	r3, [r3, #16]
 800a0a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a0ac:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	8adb      	ldrh	r3, [r3, #22]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00a      	beq.n	800a0cc <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800a0b6:	7b7b      	ldrb	r3, [r7, #13]
 800a0b8:	2b80      	cmp	r3, #128	; 0x80
 800a0ba:	d103      	bne.n	800a0c4 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2203      	movs	r2, #3
 800a0c0:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a0c2:	e10b      	b.n	800a2dc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2205      	movs	r2, #5
 800a0c8:	761a      	strb	r2, [r3, #24]
    break;
 800a0ca:	e107      	b.n	800a2dc <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 800a0cc:	7b7b      	ldrb	r3, [r7, #13]
 800a0ce:	2b80      	cmp	r3, #128	; 0x80
 800a0d0:	d103      	bne.n	800a0da <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2209      	movs	r2, #9
 800a0d6:	761a      	strb	r2, [r3, #24]
    break;
 800a0d8:	e100      	b.n	800a2dc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2207      	movs	r2, #7
 800a0de:	761a      	strb	r2, [r3, #24]
    break;
 800a0e0:	e0fc      	b.n	800a2dc <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a0e2:	7bbb      	ldrb	r3, [r7, #14]
 800a0e4:	2b04      	cmp	r3, #4
 800a0e6:	d003      	beq.n	800a0f0 <USBH_HandleControl+0xcc>
 800a0e8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	f040 80f6 	bne.w	800a2dc <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	220b      	movs	r2, #11
 800a0f4:	761a      	strb	r2, [r3, #24]
    break;
 800a0f6:	e0f1      	b.n	800a2dc <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a0fe:	b29a      	uxth	r2, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6899      	ldr	r1, [r3, #8]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	899a      	ldrh	r2, [r3, #12]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	791b      	ldrb	r3, [r3, #4]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 f930 	bl	800a376 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2204      	movs	r2, #4
 800a11a:	761a      	strb	r2, [r3, #24]
    break;
 800a11c:	e0e7      	b.n	800a2ee <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	791b      	ldrb	r3, [r3, #4]
 800a122:	4619      	mov	r1, r3
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 fc6f 	bl	800aa08 <USBH_LL_GetURBState>
 800a12a:	4603      	mov	r3, r0
 800a12c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800a12e:	7bbb      	ldrb	r3, [r7, #14]
 800a130:	2b01      	cmp	r3, #1
 800a132:	d102      	bne.n	800a13a <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2209      	movs	r2, #9
 800a138:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800a13a:	7bbb      	ldrb	r3, [r7, #14]
 800a13c:	2b05      	cmp	r3, #5
 800a13e:	d102      	bne.n	800a146 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800a140:	2303      	movs	r3, #3
 800a142:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a144:	e0cc      	b.n	800a2e0 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 800a146:	7bbb      	ldrb	r3, [r7, #14]
 800a148:	2b04      	cmp	r3, #4
 800a14a:	f040 80c9 	bne.w	800a2e0 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	220b      	movs	r2, #11
 800a152:	761a      	strb	r2, [r3, #24]
    break;
 800a154:	e0c4      	b.n	800a2e0 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6899      	ldr	r1, [r3, #8]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	899a      	ldrh	r2, [r3, #12]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	7958      	ldrb	r0, [r3, #5]
 800a162:	2301      	movs	r3, #1
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	4603      	mov	r3, r0
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 f8df 	bl	800a32c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a174:	b29a      	uxth	r2, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2206      	movs	r2, #6
 800a17e:	761a      	strb	r2, [r3, #24]
    break;
 800a180:	e0b5      	b.n	800a2ee <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	795b      	ldrb	r3, [r3, #5]
 800a186:	4619      	mov	r1, r3
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 fc3d 	bl	800aa08 <USBH_LL_GetURBState>
 800a18e:	4603      	mov	r3, r0
 800a190:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800a192:	7bbb      	ldrb	r3, [r7, #14]
 800a194:	2b01      	cmp	r3, #1
 800a196:	d103      	bne.n	800a1a0 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2207      	movs	r2, #7
 800a19c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a19e:	e0a1      	b.n	800a2e4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 800a1a0:	7bbb      	ldrb	r3, [r7, #14]
 800a1a2:	2b05      	cmp	r3, #5
 800a1a4:	d105      	bne.n	800a1b2 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	220c      	movs	r2, #12
 800a1aa:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a1b0:	e098      	b.n	800a2e4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800a1b2:	7bbb      	ldrb	r3, [r7, #14]
 800a1b4:	2b02      	cmp	r3, #2
 800a1b6:	d103      	bne.n	800a1c0 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2205      	movs	r2, #5
 800a1bc:	761a      	strb	r2, [r3, #24]
    break;
 800a1be:	e091      	b.n	800a2e4 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 800a1c0:	7bbb      	ldrb	r3, [r7, #14]
 800a1c2:	2b04      	cmp	r3, #4
 800a1c4:	f040 808e 	bne.w	800a2e4 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	220b      	movs	r2, #11
 800a1cc:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800a1ce:	2302      	movs	r3, #2
 800a1d0:	73fb      	strb	r3, [r7, #15]
    break;
 800a1d2:	e087      	b.n	800a2e4 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	791b      	ldrb	r3, [r3, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	2100      	movs	r1, #0
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 f8ca 	bl	800a376 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2208      	movs	r2, #8
 800a1f2:	761a      	strb	r2, [r3, #24]

    break;
 800a1f4:	e07b      	b.n	800a2ee <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	791b      	ldrb	r3, [r3, #4]
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 fc03 	bl	800aa08 <USBH_LL_GetURBState>
 800a202:	4603      	mov	r3, r0
 800a204:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800a206:	7bbb      	ldrb	r3, [r7, #14]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d105      	bne.n	800a218 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	220d      	movs	r2, #13
 800a210:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800a212:	2300      	movs	r3, #0
 800a214:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a216:	e067      	b.n	800a2e8 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 800a218:	7bbb      	ldrb	r3, [r7, #14]
 800a21a:	2b04      	cmp	r3, #4
 800a21c:	d103      	bne.n	800a226 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	220b      	movs	r2, #11
 800a222:	761a      	strb	r2, [r3, #24]
    break;
 800a224:	e060      	b.n	800a2e8 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 800a226:	7bbb      	ldrb	r3, [r7, #14]
 800a228:	2b05      	cmp	r3, #5
 800a22a:	d15d      	bne.n	800a2e8 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 800a22c:	2303      	movs	r3, #3
 800a22e:	73fb      	strb	r3, [r7, #15]
    break;
 800a230:	e05a      	b.n	800a2e8 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	795a      	ldrb	r2, [r3, #5]
 800a236:	2301      	movs	r3, #1
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	4613      	mov	r3, r2
 800a23c:	2200      	movs	r2, #0
 800a23e:	2100      	movs	r1, #0
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 f873 	bl	800a32c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a24c:	b29a      	uxth	r2, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	220a      	movs	r2, #10
 800a256:	761a      	strb	r2, [r3, #24]
    break;
 800a258:	e049      	b.n	800a2ee <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	795b      	ldrb	r3, [r3, #5]
 800a25e:	4619      	mov	r1, r3
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 fbd1 	bl	800aa08 <USBH_LL_GetURBState>
 800a266:	4603      	mov	r3, r0
 800a268:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800a26a:	7bbb      	ldrb	r3, [r7, #14]
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d105      	bne.n	800a27c <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 800a270:	2300      	movs	r3, #0
 800a272:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	220d      	movs	r2, #13
 800a278:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800a27a:	e037      	b.n	800a2ec <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800a27c:	7bbb      	ldrb	r3, [r7, #14]
 800a27e:	2b02      	cmp	r3, #2
 800a280:	d103      	bne.n	800a28a <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2209      	movs	r2, #9
 800a286:	761a      	strb	r2, [r3, #24]
    break;
 800a288:	e030      	b.n	800a2ec <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800a28a:	7bbb      	ldrb	r3, [r7, #14]
 800a28c:	2b04      	cmp	r3, #4
 800a28e:	d12d      	bne.n	800a2ec <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	220b      	movs	r2, #11
 800a294:	761a      	strb	r2, [r3, #24]
    break;
 800a296:	e029      	b.n	800a2ec <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	7e5b      	ldrb	r3, [r3, #25]
 800a29c:	3301      	adds	r3, #1
 800a29e:	b2da      	uxtb	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	765a      	strb	r2, [r3, #25]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	7e5b      	ldrb	r3, [r3, #25]
 800a2a8:	2b02      	cmp	r3, #2
 800a2aa:	d809      	bhi.n	800a2c0 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 fabe 	bl	800a82e <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800a2be:	e016      	b.n	800a2ee <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a2c6:	2106      	movs	r1, #6
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800a2d2:	2302      	movs	r3, #2
 800a2d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a2d6:	e00a      	b.n	800a2ee <USBH_HandleControl+0x2ca>

  default:
    break;
 800a2d8:	bf00      	nop
 800a2da:	e008      	b.n	800a2ee <USBH_HandleControl+0x2ca>
    break;
 800a2dc:	bf00      	nop
 800a2de:	e006      	b.n	800a2ee <USBH_HandleControl+0x2ca>
    break;
 800a2e0:	bf00      	nop
 800a2e2:	e004      	b.n	800a2ee <USBH_HandleControl+0x2ca>
    break;
 800a2e4:	bf00      	nop
 800a2e6:	e002      	b.n	800a2ee <USBH_HandleControl+0x2ca>
    break;
 800a2e8:	bf00      	nop
 800a2ea:	e000      	b.n	800a2ee <USBH_HandleControl+0x2ca>
    break;
 800a2ec:	bf00      	nop
  }
  return status;
 800a2ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3710      	adds	r7, #16
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <USBH_CtlSendSetup>:
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b088      	sub	sp, #32
 800a2fc:	af04      	add	r7, sp, #16
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	4613      	mov	r3, r2
 800a304:	71fb      	strb	r3, [r7, #7]
 800a306:	79f9      	ldrb	r1, [r7, #7]
 800a308:	2300      	movs	r3, #0
 800a30a:	9303      	str	r3, [sp, #12]
 800a30c:	2308      	movs	r3, #8
 800a30e:	9302      	str	r3, [sp, #8]
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	9301      	str	r3, [sp, #4]
 800a314:	2300      	movs	r3, #0
 800a316:	9300      	str	r3, [sp, #0]
 800a318:	2300      	movs	r3, #0
 800a31a:	2200      	movs	r2, #0
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f000 fb42 	bl	800a9a6 <USBH_LL_SubmitURB>
 800a322:	2300      	movs	r3, #0
 800a324:	4618      	mov	r0, r3
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <USBH_CtlSendData>:
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b088      	sub	sp, #32
 800a330:	af04      	add	r7, sp, #16
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	4611      	mov	r1, r2
 800a338:	461a      	mov	r2, r3
 800a33a:	460b      	mov	r3, r1
 800a33c:	80fb      	strh	r3, [r7, #6]
 800a33e:	4613      	mov	r3, r2
 800a340:	717b      	strb	r3, [r7, #5]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d001      	beq.n	800a350 <USBH_CtlSendData+0x24>
 800a34c:	2300      	movs	r3, #0
 800a34e:	763b      	strb	r3, [r7, #24]
 800a350:	7979      	ldrb	r1, [r7, #5]
 800a352:	7e3b      	ldrb	r3, [r7, #24]
 800a354:	9303      	str	r3, [sp, #12]
 800a356:	88fb      	ldrh	r3, [r7, #6]
 800a358:	9302      	str	r3, [sp, #8]
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	9301      	str	r3, [sp, #4]
 800a35e:	2301      	movs	r3, #1
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	2300      	movs	r3, #0
 800a364:	2200      	movs	r2, #0
 800a366:	68f8      	ldr	r0, [r7, #12]
 800a368:	f000 fb1d 	bl	800a9a6 <USBH_LL_SubmitURB>
 800a36c:	2300      	movs	r3, #0
 800a36e:	4618      	mov	r0, r3
 800a370:	3710      	adds	r7, #16
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <USBH_CtlReceiveData>:
 800a376:	b580      	push	{r7, lr}
 800a378:	b088      	sub	sp, #32
 800a37a:	af04      	add	r7, sp, #16
 800a37c:	60f8      	str	r0, [r7, #12]
 800a37e:	60b9      	str	r1, [r7, #8]
 800a380:	4611      	mov	r1, r2
 800a382:	461a      	mov	r2, r3
 800a384:	460b      	mov	r3, r1
 800a386:	80fb      	strh	r3, [r7, #6]
 800a388:	4613      	mov	r3, r2
 800a38a:	717b      	strb	r3, [r7, #5]
 800a38c:	7979      	ldrb	r1, [r7, #5]
 800a38e:	2300      	movs	r3, #0
 800a390:	9303      	str	r3, [sp, #12]
 800a392:	88fb      	ldrh	r3, [r7, #6]
 800a394:	9302      	str	r3, [sp, #8]
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	9301      	str	r3, [sp, #4]
 800a39a:	2301      	movs	r3, #1
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	2300      	movs	r3, #0
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f000 faff 	bl	800a9a6 <USBH_LL_SubmitURB>
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <USBH_BulkSendData>:
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b088      	sub	sp, #32
 800a3b6:	af04      	add	r7, sp, #16
 800a3b8:	60f8      	str	r0, [r7, #12]
 800a3ba:	60b9      	str	r1, [r7, #8]
 800a3bc:	4611      	mov	r1, r2
 800a3be:	461a      	mov	r2, r3
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	80fb      	strh	r3, [r7, #6]
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	717b      	strb	r3, [r7, #5]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d001      	beq.n	800a3d6 <USBH_BulkSendData+0x24>
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	763b      	strb	r3, [r7, #24]
 800a3d6:	7979      	ldrb	r1, [r7, #5]
 800a3d8:	7e3b      	ldrb	r3, [r7, #24]
 800a3da:	9303      	str	r3, [sp, #12]
 800a3dc:	88fb      	ldrh	r3, [r7, #6]
 800a3de:	9302      	str	r3, [sp, #8]
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	9301      	str	r3, [sp, #4]
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	f000 fada 	bl	800a9a6 <USBH_LL_SubmitURB>
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3710      	adds	r7, #16
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <USBH_BulkReceiveData>:
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b088      	sub	sp, #32
 800a400:	af04      	add	r7, sp, #16
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	4611      	mov	r1, r2
 800a408:	461a      	mov	r2, r3
 800a40a:	460b      	mov	r3, r1
 800a40c:	80fb      	strh	r3, [r7, #6]
 800a40e:	4613      	mov	r3, r2
 800a410:	717b      	strb	r3, [r7, #5]
 800a412:	7979      	ldrb	r1, [r7, #5]
 800a414:	2300      	movs	r3, #0
 800a416:	9303      	str	r3, [sp, #12]
 800a418:	88fb      	ldrh	r3, [r7, #6]
 800a41a:	9302      	str	r3, [sp, #8]
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	9301      	str	r3, [sp, #4]
 800a420:	2301      	movs	r3, #1
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	2302      	movs	r3, #2
 800a426:	2201      	movs	r2, #1
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f000 fabc 	bl	800a9a6 <USBH_LL_SubmitURB>
 800a42e:	2300      	movs	r3, #0
 800a430:	4618      	mov	r0, r3
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <USBH_OpenPipe>:
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af04      	add	r7, sp, #16
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	4608      	mov	r0, r1
 800a442:	4611      	mov	r1, r2
 800a444:	461a      	mov	r2, r3
 800a446:	4603      	mov	r3, r0
 800a448:	70fb      	strb	r3, [r7, #3]
 800a44a:	460b      	mov	r3, r1
 800a44c:	70bb      	strb	r3, [r7, #2]
 800a44e:	4613      	mov	r3, r2
 800a450:	707b      	strb	r3, [r7, #1]
 800a452:	7878      	ldrb	r0, [r7, #1]
 800a454:	78ba      	ldrb	r2, [r7, #2]
 800a456:	78f9      	ldrb	r1, [r7, #3]
 800a458:	8b3b      	ldrh	r3, [r7, #24]
 800a45a:	9302      	str	r3, [sp, #8]
 800a45c:	7d3b      	ldrb	r3, [r7, #20]
 800a45e:	9301      	str	r3, [sp, #4]
 800a460:	7c3b      	ldrb	r3, [r7, #16]
 800a462:	9300      	str	r3, [sp, #0]
 800a464:	4603      	mov	r3, r0
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 fa4f 	bl	800a90a <USBH_LL_OpenPipe>
 800a46c:	2300      	movs	r3, #0
 800a46e:	4618      	mov	r0, r3
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <USBH_ClosePipe>:
 800a476:	b580      	push	{r7, lr}
 800a478:	b082      	sub	sp, #8
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
 800a47e:	460b      	mov	r3, r1
 800a480:	70fb      	strb	r3, [r7, #3]
 800a482:	78fb      	ldrb	r3, [r7, #3]
 800a484:	4619      	mov	r1, r3
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 fa6e 	bl	800a968 <USBH_LL_ClosePipe>
 800a48c:	2300      	movs	r3, #0
 800a48e:	4618      	mov	r0, r3
 800a490:	3708      	adds	r7, #8
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <USBH_AllocPipe>:
 800a496:	b580      	push	{r7, lr}
 800a498:	b084      	sub	sp, #16
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
 800a49e:	460b      	mov	r3, r1
 800a4a0:	70fb      	strb	r3, [r7, #3]
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f831 	bl	800a50a <USBH_GetFreePipe>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	81fb      	strh	r3, [r7, #14]
 800a4ac:	89fb      	ldrh	r3, [r7, #14]
 800a4ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d007      	beq.n	800a4c6 <USBH_AllocPipe+0x30>
 800a4b6:	78fb      	ldrb	r3, [r7, #3]
 800a4b8:	89fa      	ldrh	r2, [r7, #14]
 800a4ba:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	32e0      	adds	r2, #224	; 0xe0
 800a4c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a4c6:	89fb      	ldrh	r3, [r7, #14]
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <USBH_FreePipe>:
 800a4d2:	b480      	push	{r7}
 800a4d4:	b083      	sub	sp, #12
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	460b      	mov	r3, r1
 800a4dc:	70fb      	strb	r3, [r7, #3]
 800a4de:	78fb      	ldrb	r3, [r7, #3]
 800a4e0:	2b0a      	cmp	r3, #10
 800a4e2:	d80b      	bhi.n	800a4fc <USBH_FreePipe+0x2a>
 800a4e4:	78fa      	ldrb	r2, [r7, #3]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	32e0      	adds	r2, #224	; 0xe0
 800a4ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ee:	78fa      	ldrb	r2, [r7, #3]
 800a4f0:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	32e0      	adds	r2, #224	; 0xe0
 800a4f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	4618      	mov	r0, r3
 800a500:	370c      	adds	r7, #12
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr

0800a50a <USBH_GetFreePipe>:
 800a50a:	b480      	push	{r7}
 800a50c:	b085      	sub	sp, #20
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
 800a512:	2300      	movs	r3, #0
 800a514:	73fb      	strb	r3, [r7, #15]
 800a516:	2300      	movs	r3, #0
 800a518:	73fb      	strb	r3, [r7, #15]
 800a51a:	e00e      	b.n	800a53a <USBH_GetFreePipe+0x30>
 800a51c:	7bfa      	ldrb	r2, [r7, #15]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	32e0      	adds	r2, #224	; 0xe0
 800a522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a526:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d102      	bne.n	800a534 <USBH_GetFreePipe+0x2a>
 800a52e:	7bfb      	ldrb	r3, [r7, #15]
 800a530:	b29b      	uxth	r3, r3
 800a532:	e007      	b.n	800a544 <USBH_GetFreePipe+0x3a>
 800a534:	7bfb      	ldrb	r3, [r7, #15]
 800a536:	3301      	adds	r3, #1
 800a538:	73fb      	strb	r3, [r7, #15]
 800a53a:	7bfb      	ldrb	r3, [r7, #15]
 800a53c:	2b0a      	cmp	r3, #10
 800a53e:	d9ed      	bls.n	800a51c <USBH_GetFreePipe+0x12>
 800a540:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a544:	4618      	mov	r0, r3
 800a546:	3714      	adds	r7, #20
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <MX_USB_HOST_Init>:
 800a550:	b580      	push	{r7, lr}
 800a552:	af00      	add	r7, sp, #0
 800a554:	2201      	movs	r2, #1
 800a556:	490e      	ldr	r1, [pc, #56]	; (800a590 <MX_USB_HOST_Init+0x40>)
 800a558:	480e      	ldr	r0, [pc, #56]	; (800a594 <MX_USB_HOST_Init+0x44>)
 800a55a:	f7fe fdbb 	bl	80090d4 <USBH_Init>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d001      	beq.n	800a568 <MX_USB_HOST_Init+0x18>
 800a564:	f7f6 fe14 	bl	8001190 <Error_Handler>
 800a568:	490b      	ldr	r1, [pc, #44]	; (800a598 <MX_USB_HOST_Init+0x48>)
 800a56a:	480a      	ldr	r0, [pc, #40]	; (800a594 <MX_USB_HOST_Init+0x44>)
 800a56c:	f7fe fe25 	bl	80091ba <USBH_RegisterClass>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d001      	beq.n	800a57a <MX_USB_HOST_Init+0x2a>
 800a576:	f7f6 fe0b 	bl	8001190 <Error_Handler>
 800a57a:	4806      	ldr	r0, [pc, #24]	; (800a594 <MX_USB_HOST_Init+0x44>)
 800a57c:	f7fe feaa 	bl	80092d4 <USBH_Start>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d001      	beq.n	800a58a <MX_USB_HOST_Init+0x3a>
 800a586:	f7f6 fe03 	bl	8001190 <Error_Handler>
 800a58a:	bf00      	nop
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	0800a5b1 	.word	0x0800a5b1
 800a594:	20000814 	.word	0x20000814
 800a598:	20000028 	.word	0x20000028

0800a59c <MX_USB_HOST_Process>:
 800a59c:	b580      	push	{r7, lr}
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	4802      	ldr	r0, [pc, #8]	; (800a5ac <MX_USB_HOST_Process+0x10>)
 800a5a2:	f7fe fea7 	bl	80092f4 <USBH_Process>
 800a5a6:	bf00      	nop
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	20000814 	.word	0x20000814

0800a5b0 <USBH_UserProcess>:
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	70fb      	strb	r3, [r7, #3]
 800a5bc:	78fb      	ldrb	r3, [r7, #3]
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	2b04      	cmp	r3, #4
 800a5c2:	d819      	bhi.n	800a5f8 <USBH_UserProcess+0x48>
 800a5c4:	a201      	add	r2, pc, #4	; (adr r2, 800a5cc <USBH_UserProcess+0x1c>)
 800a5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ca:	bf00      	nop
 800a5cc:	0800a5f9 	.word	0x0800a5f9
 800a5d0:	0800a5e9 	.word	0x0800a5e9
 800a5d4:	0800a5f9 	.word	0x0800a5f9
 800a5d8:	0800a5f1 	.word	0x0800a5f1
 800a5dc:	0800a5e1 	.word	0x0800a5e1
 800a5e0:	4b09      	ldr	r3, [pc, #36]	; (800a608 <USBH_UserProcess+0x58>)
 800a5e2:	2203      	movs	r2, #3
 800a5e4:	701a      	strb	r2, [r3, #0]
 800a5e6:	e008      	b.n	800a5fa <USBH_UserProcess+0x4a>
 800a5e8:	4b07      	ldr	r3, [pc, #28]	; (800a608 <USBH_UserProcess+0x58>)
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	701a      	strb	r2, [r3, #0]
 800a5ee:	e004      	b.n	800a5fa <USBH_UserProcess+0x4a>
 800a5f0:	4b05      	ldr	r3, [pc, #20]	; (800a608 <USBH_UserProcess+0x58>)
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	701a      	strb	r2, [r3, #0]
 800a5f6:	e000      	b.n	800a5fa <USBH_UserProcess+0x4a>
 800a5f8:	bf00      	nop
 800a5fa:	bf00      	nop
 800a5fc:	370c      	adds	r7, #12
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop
 800a608:	200004dc 	.word	0x200004dc

0800a60c <HAL_HCD_MspInit>:
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b08a      	sub	sp, #40	; 0x28
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	f107 0314 	add.w	r3, r7, #20
 800a618:	2200      	movs	r2, #0
 800a61a:	601a      	str	r2, [r3, #0]
 800a61c:	605a      	str	r2, [r3, #4]
 800a61e:	609a      	str	r2, [r3, #8]
 800a620:	60da      	str	r2, [r3, #12]
 800a622:	611a      	str	r2, [r3, #16]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a62c:	d14e      	bne.n	800a6cc <HAL_HCD_MspInit+0xc0>
 800a62e:	4b29      	ldr	r3, [pc, #164]	; (800a6d4 <HAL_HCD_MspInit+0xc8>)
 800a630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a632:	4a28      	ldr	r2, [pc, #160]	; (800a6d4 <HAL_HCD_MspInit+0xc8>)
 800a634:	f043 0301 	orr.w	r3, r3, #1
 800a638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a63a:	4b26      	ldr	r3, [pc, #152]	; (800a6d4 <HAL_HCD_MspInit+0xc8>)
 800a63c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a63e:	f003 0301 	and.w	r3, r3, #1
 800a642:	613b      	str	r3, [r7, #16]
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a64a:	617b      	str	r3, [r7, #20]
 800a64c:	2302      	movs	r3, #2
 800a64e:	61bb      	str	r3, [r7, #24]
 800a650:	2300      	movs	r3, #0
 800a652:	61fb      	str	r3, [r7, #28]
 800a654:	2303      	movs	r3, #3
 800a656:	623b      	str	r3, [r7, #32]
 800a658:	230a      	movs	r3, #10
 800a65a:	627b      	str	r3, [r7, #36]	; 0x24
 800a65c:	f107 0314 	add.w	r3, r7, #20
 800a660:	4619      	mov	r1, r3
 800a662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a666:	f7f7 fe15 	bl	8002294 <HAL_GPIO_Init>
 800a66a:	4b1a      	ldr	r3, [pc, #104]	; (800a6d4 <HAL_HCD_MspInit+0xc8>)
 800a66c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a66e:	4a19      	ldr	r2, [pc, #100]	; (800a6d4 <HAL_HCD_MspInit+0xc8>)
 800a670:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a674:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a676:	4b17      	ldr	r3, [pc, #92]	; (800a6d4 <HAL_HCD_MspInit+0xc8>)
 800a678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a67a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a67e:	60fb      	str	r3, [r7, #12]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	4b14      	ldr	r3, [pc, #80]	; (800a6d4 <HAL_HCD_MspInit+0xc8>)
 800a684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d114      	bne.n	800a6b8 <HAL_HCD_MspInit+0xac>
 800a68e:	4b11      	ldr	r3, [pc, #68]	; (800a6d4 <HAL_HCD_MspInit+0xc8>)
 800a690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a692:	4a10      	ldr	r2, [pc, #64]	; (800a6d4 <HAL_HCD_MspInit+0xc8>)
 800a694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a698:	6593      	str	r3, [r2, #88]	; 0x58
 800a69a:	4b0e      	ldr	r3, [pc, #56]	; (800a6d4 <HAL_HCD_MspInit+0xc8>)
 800a69c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a69e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6a2:	60bb      	str	r3, [r7, #8]
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	f7fa f947 	bl	8004938 <HAL_PWREx_EnableVddUSB>
 800a6aa:	4b0a      	ldr	r3, [pc, #40]	; (800a6d4 <HAL_HCD_MspInit+0xc8>)
 800a6ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ae:	4a09      	ldr	r2, [pc, #36]	; (800a6d4 <HAL_HCD_MspInit+0xc8>)
 800a6b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6b4:	6593      	str	r3, [r2, #88]	; 0x58
 800a6b6:	e001      	b.n	800a6bc <HAL_HCD_MspInit+0xb0>
 800a6b8:	f7fa f93e 	bl	8004938 <HAL_PWREx_EnableVddUSB>
 800a6bc:	2200      	movs	r2, #0
 800a6be:	2100      	movs	r1, #0
 800a6c0:	2043      	movs	r0, #67	; 0x43
 800a6c2:	f7f7 fdb0 	bl	8002226 <HAL_NVIC_SetPriority>
 800a6c6:	2043      	movs	r0, #67	; 0x43
 800a6c8:	f7f7 fdc9 	bl	800225e <HAL_NVIC_EnableIRQ>
 800a6cc:	bf00      	nop
 800a6ce:	3728      	adds	r7, #40	; 0x28
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	40021000 	.word	0x40021000

0800a6d8 <HAL_HCD_SOF_Callback>:
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7ff f8b5 	bl	8009856 <USBH_LL_IncTimer>
 800a6ec:	bf00      	nop
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <HAL_HCD_Connect_Callback>:
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a702:	4618      	mov	r0, r3
 800a704:	f7ff f8fa 	bl	80098fc <USBH_LL_Connect>
 800a708:	bf00      	nop
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <HAL_HCD_Disconnect_Callback>:
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a71e:	4618      	mov	r0, r3
 800a720:	f7ff f912 	bl	8009948 <USBH_LL_Disconnect>
 800a724:	bf00      	nop
 800a726:	3708      	adds	r7, #8
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <HAL_HCD_HC_NotifyURBChange_Callback>:
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	460b      	mov	r3, r1
 800a736:	70fb      	strb	r3, [r7, #3]
 800a738:	4613      	mov	r3, r2
 800a73a:	70bb      	strb	r3, [r7, #2]
 800a73c:	bf00      	nop
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <HAL_HCD_PortEnabled_Callback>:
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a756:	4618      	mov	r0, r3
 800a758:	f7ff f8a7 	bl	80098aa <USBH_LL_PortEnabled>
 800a75c:	bf00      	nop
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <HAL_HCD_PortDisabled_Callback>:
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a772:	4618      	mov	r0, r3
 800a774:	f7ff f8a7 	bl	80098c6 <USBH_LL_PortDisabled>
 800a778:	bf00      	nop
 800a77a:	3708      	adds	r7, #8
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <USBH_LL_Init>:
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d12a      	bne.n	800a7e8 <USBH_LL_Init+0x68>
 800a792:	4a18      	ldr	r2, [pc, #96]	; (800a7f4 <USBH_LL_Init+0x74>)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a15      	ldr	r2, [pc, #84]	; (800a7f4 <USBH_LL_Init+0x74>)
 800a79e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
 800a7a2:	4b14      	ldr	r3, [pc, #80]	; (800a7f4 <USBH_LL_Init+0x74>)
 800a7a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a7a8:	601a      	str	r2, [r3, #0]
 800a7aa:	4b12      	ldr	r3, [pc, #72]	; (800a7f4 <USBH_LL_Init+0x74>)
 800a7ac:	2208      	movs	r2, #8
 800a7ae:	609a      	str	r2, [r3, #8]
 800a7b0:	4b10      	ldr	r3, [pc, #64]	; (800a7f4 <USBH_LL_Init+0x74>)
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	60da      	str	r2, [r3, #12]
 800a7b6:	4b0f      	ldr	r3, [pc, #60]	; (800a7f4 <USBH_LL_Init+0x74>)
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	611a      	str	r2, [r3, #16]
 800a7bc:	4b0d      	ldr	r3, [pc, #52]	; (800a7f4 <USBH_LL_Init+0x74>)
 800a7be:	2202      	movs	r2, #2
 800a7c0:	619a      	str	r2, [r3, #24]
 800a7c2:	4b0c      	ldr	r3, [pc, #48]	; (800a7f4 <USBH_LL_Init+0x74>)
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	61da      	str	r2, [r3, #28]
 800a7c8:	480a      	ldr	r0, [pc, #40]	; (800a7f4 <USBH_LL_Init+0x74>)
 800a7ca:	f7f7 ff3b 	bl	8002644 <HAL_HCD_Init>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d001      	beq.n	800a7d8 <USBH_LL_Init+0x58>
 800a7d4:	f7f6 fcdc 	bl	8001190 <Error_Handler>
 800a7d8:	4806      	ldr	r0, [pc, #24]	; (800a7f4 <USBH_LL_Init+0x74>)
 800a7da:	f7f8 fb33 	bl	8002e44 <HAL_HCD_GetCurrentFrame>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7ff f828 	bl	8009838 <USBH_LL_SetTimer>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	20000be0 	.word	0x20000be0

0800a7f8 <USBH_LL_Start>:
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b084      	sub	sp, #16
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	2300      	movs	r3, #0
 800a802:	73fb      	strb	r3, [r7, #15]
 800a804:	2300      	movs	r3, #0
 800a806:	73bb      	strb	r3, [r7, #14]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a80e:	4618      	mov	r0, r3
 800a810:	f7f8 faa0 	bl	8002d54 <HAL_HCD_Start>
 800a814:	4603      	mov	r3, r0
 800a816:	73fb      	strb	r3, [r7, #15]
 800a818:	7bfb      	ldrb	r3, [r7, #15]
 800a81a:	4618      	mov	r0, r3
 800a81c:	f000 f95c 	bl	800aad8 <USBH_Get_USB_Status>
 800a820:	4603      	mov	r3, r0
 800a822:	73bb      	strb	r3, [r7, #14]
 800a824:	7bbb      	ldrb	r3, [r7, #14]
 800a826:	4618      	mov	r0, r3
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <USBH_LL_Stop>:
 800a82e:	b580      	push	{r7, lr}
 800a830:	b084      	sub	sp, #16
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
 800a836:	2300      	movs	r3, #0
 800a838:	73fb      	strb	r3, [r7, #15]
 800a83a:	2300      	movs	r3, #0
 800a83c:	73bb      	strb	r3, [r7, #14]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a844:	4618      	mov	r0, r3
 800a846:	f7f8 faa8 	bl	8002d9a <HAL_HCD_Stop>
 800a84a:	4603      	mov	r3, r0
 800a84c:	73fb      	strb	r3, [r7, #15]
 800a84e:	7bfb      	ldrb	r3, [r7, #15]
 800a850:	4618      	mov	r0, r3
 800a852:	f000 f941 	bl	800aad8 <USBH_Get_USB_Status>
 800a856:	4603      	mov	r3, r0
 800a858:	73bb      	strb	r3, [r7, #14]
 800a85a:	7bbb      	ldrb	r3, [r7, #14]
 800a85c:	4618      	mov	r0, r3
 800a85e:	3710      	adds	r7, #16
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <USBH_LL_GetSpeed>:
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	2301      	movs	r3, #1
 800a86e:	73fb      	strb	r3, [r7, #15]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a876:	4618      	mov	r0, r3
 800a878:	f7f8 faf2 	bl	8002e60 <HAL_HCD_GetCurrentSpeed>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d007      	beq.n	800a892 <USBH_LL_GetSpeed+0x2e>
 800a882:	2b01      	cmp	r3, #1
 800a884:	d302      	bcc.n	800a88c <USBH_LL_GetSpeed+0x28>
 800a886:	2b02      	cmp	r3, #2
 800a888:	d006      	beq.n	800a898 <USBH_LL_GetSpeed+0x34>
 800a88a:	e008      	b.n	800a89e <USBH_LL_GetSpeed+0x3a>
 800a88c:	2300      	movs	r3, #0
 800a88e:	73fb      	strb	r3, [r7, #15]
 800a890:	e008      	b.n	800a8a4 <USBH_LL_GetSpeed+0x40>
 800a892:	2301      	movs	r3, #1
 800a894:	73fb      	strb	r3, [r7, #15]
 800a896:	e005      	b.n	800a8a4 <USBH_LL_GetSpeed+0x40>
 800a898:	2302      	movs	r3, #2
 800a89a:	73fb      	strb	r3, [r7, #15]
 800a89c:	e002      	b.n	800a8a4 <USBH_LL_GetSpeed+0x40>
 800a89e:	2301      	movs	r3, #1
 800a8a0:	73fb      	strb	r3, [r7, #15]
 800a8a2:	bf00      	nop
 800a8a4:	7bfb      	ldrb	r3, [r7, #15]
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <USBH_LL_ResetPort>:
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b084      	sub	sp, #16
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	73fb      	strb	r3, [r7, #15]
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	73bb      	strb	r3, [r7, #14]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7f8 fa85 	bl	8002dd4 <HAL_HCD_ResetPort>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	73fb      	strb	r3, [r7, #15]
 800a8ce:	7bfb      	ldrb	r3, [r7, #15]
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f000 f901 	bl	800aad8 <USBH_Get_USB_Status>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	73bb      	strb	r3, [r7, #14]
 800a8da:	7bbb      	ldrb	r3, [r7, #14]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <USBH_LL_GetLastXferSize>:
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	70fb      	strb	r3, [r7, #3]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a8f6:	78fa      	ldrb	r2, [r7, #3]
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7f8 fa8d 	bl	8002e1a <HAL_HCD_HC_GetXferCount>
 800a900:	4603      	mov	r3, r0
 800a902:	4618      	mov	r0, r3
 800a904:	3708      	adds	r7, #8
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}

0800a90a <USBH_LL_OpenPipe>:
 800a90a:	b590      	push	{r4, r7, lr}
 800a90c:	b089      	sub	sp, #36	; 0x24
 800a90e:	af04      	add	r7, sp, #16
 800a910:	6078      	str	r0, [r7, #4]
 800a912:	4608      	mov	r0, r1
 800a914:	4611      	mov	r1, r2
 800a916:	461a      	mov	r2, r3
 800a918:	4603      	mov	r3, r0
 800a91a:	70fb      	strb	r3, [r7, #3]
 800a91c:	460b      	mov	r3, r1
 800a91e:	70bb      	strb	r3, [r7, #2]
 800a920:	4613      	mov	r3, r2
 800a922:	707b      	strb	r3, [r7, #1]
 800a924:	2300      	movs	r3, #0
 800a926:	73fb      	strb	r3, [r7, #15]
 800a928:	2300      	movs	r3, #0
 800a92a:	73bb      	strb	r3, [r7, #14]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800a932:	787c      	ldrb	r4, [r7, #1]
 800a934:	78ba      	ldrb	r2, [r7, #2]
 800a936:	78f9      	ldrb	r1, [r7, #3]
 800a938:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a93a:	9302      	str	r3, [sp, #8]
 800a93c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a940:	9301      	str	r3, [sp, #4]
 800a942:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	4623      	mov	r3, r4
 800a94a:	f7f7 fedd 	bl	8002708 <HAL_HCD_HC_Init>
 800a94e:	4603      	mov	r3, r0
 800a950:	73fb      	strb	r3, [r7, #15]
 800a952:	7bfb      	ldrb	r3, [r7, #15]
 800a954:	4618      	mov	r0, r3
 800a956:	f000 f8bf 	bl	800aad8 <USBH_Get_USB_Status>
 800a95a:	4603      	mov	r3, r0
 800a95c:	73bb      	strb	r3, [r7, #14]
 800a95e:	7bbb      	ldrb	r3, [r7, #14]
 800a960:	4618      	mov	r0, r3
 800a962:	3714      	adds	r7, #20
 800a964:	46bd      	mov	sp, r7
 800a966:	bd90      	pop	{r4, r7, pc}

0800a968 <USBH_LL_ClosePipe>:
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	460b      	mov	r3, r1
 800a972:	70fb      	strb	r3, [r7, #3]
 800a974:	2300      	movs	r3, #0
 800a976:	73fb      	strb	r3, [r7, #15]
 800a978:	2300      	movs	r3, #0
 800a97a:	73bb      	strb	r3, [r7, #14]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a982:	78fa      	ldrb	r2, [r7, #3]
 800a984:	4611      	mov	r1, r2
 800a986:	4618      	mov	r0, r3
 800a988:	f7f7 ff56 	bl	8002838 <HAL_HCD_HC_Halt>
 800a98c:	4603      	mov	r3, r0
 800a98e:	73fb      	strb	r3, [r7, #15]
 800a990:	7bfb      	ldrb	r3, [r7, #15]
 800a992:	4618      	mov	r0, r3
 800a994:	f000 f8a0 	bl	800aad8 <USBH_Get_USB_Status>
 800a998:	4603      	mov	r3, r0
 800a99a:	73bb      	strb	r3, [r7, #14]
 800a99c:	7bbb      	ldrb	r3, [r7, #14]
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <USBH_LL_SubmitURB>:
 800a9a6:	b590      	push	{r4, r7, lr}
 800a9a8:	b089      	sub	sp, #36	; 0x24
 800a9aa:	af04      	add	r7, sp, #16
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	4608      	mov	r0, r1
 800a9b0:	4611      	mov	r1, r2
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	70fb      	strb	r3, [r7, #3]
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	70bb      	strb	r3, [r7, #2]
 800a9bc:	4613      	mov	r3, r2
 800a9be:	707b      	strb	r3, [r7, #1]
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	73fb      	strb	r3, [r7, #15]
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	73bb      	strb	r3, [r7, #14]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800a9ce:	787c      	ldrb	r4, [r7, #1]
 800a9d0:	78ba      	ldrb	r2, [r7, #2]
 800a9d2:	78f9      	ldrb	r1, [r7, #3]
 800a9d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a9d8:	9303      	str	r3, [sp, #12]
 800a9da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a9dc:	9302      	str	r3, [sp, #8]
 800a9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e0:	9301      	str	r3, [sp, #4]
 800a9e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a9e6:	9300      	str	r3, [sp, #0]
 800a9e8:	4623      	mov	r3, r4
 800a9ea:	f7f7 ff49 	bl	8002880 <HAL_HCD_HC_SubmitRequest>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	73fb      	strb	r3, [r7, #15]
 800a9f2:	7bfb      	ldrb	r3, [r7, #15]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f000 f86f 	bl	800aad8 <USBH_Get_USB_Status>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	73bb      	strb	r3, [r7, #14]
 800a9fe:	7bbb      	ldrb	r3, [r7, #14]
 800aa00:	4618      	mov	r0, r3
 800aa02:	3714      	adds	r7, #20
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd90      	pop	{r4, r7, pc}

0800aa08 <USBH_LL_GetURBState>:
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	460b      	mov	r3, r1
 800aa12:	70fb      	strb	r3, [r7, #3]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aa1a:	78fa      	ldrb	r2, [r7, #3]
 800aa1c:	4611      	mov	r1, r2
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7f8 f9e6 	bl	8002df0 <HAL_HCD_HC_GetURBState>
 800aa24:	4603      	mov	r3, r0
 800aa26:	4618      	mov	r0, r3
 800aa28:	3708      	adds	r7, #8
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <USBH_LL_DriverVBUS>:
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b082      	sub	sp, #8
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
 800aa36:	460b      	mov	r3, r1
 800aa38:	70fb      	strb	r3, [r7, #3]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d103      	bne.n	800aa4c <USBH_LL_DriverVBUS+0x1e>
 800aa44:	78fb      	ldrb	r3, [r7, #3]
 800aa46:	4618      	mov	r0, r3
 800aa48:	f000 f872 	bl	800ab30 <MX_DriverVbusFS>
 800aa4c:	20c8      	movs	r0, #200	; 0xc8
 800aa4e:	f7f7 faed 	bl	800202c <HAL_Delay>
 800aa52:	2300      	movs	r3, #0
 800aa54:	4618      	mov	r0, r3
 800aa56:	3708      	adds	r7, #8
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <USBH_LL_SetToggle>:
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	460b      	mov	r3, r1
 800aa66:	70fb      	strb	r3, [r7, #3]
 800aa68:	4613      	mov	r3, r2
 800aa6a:	70bb      	strb	r3, [r7, #2]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aa72:	60fb      	str	r3, [r7, #12]
 800aa74:	78fa      	ldrb	r2, [r7, #3]
 800aa76:	68f9      	ldr	r1, [r7, #12]
 800aa78:	4613      	mov	r3, r2
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	4413      	add	r3, r2
 800aa7e:	00db      	lsls	r3, r3, #3
 800aa80:	440b      	add	r3, r1
 800aa82:	333b      	adds	r3, #59	; 0x3b
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d00a      	beq.n	800aaa0 <USBH_LL_SetToggle+0x44>
 800aa8a:	78fa      	ldrb	r2, [r7, #3]
 800aa8c:	68f9      	ldr	r1, [r7, #12]
 800aa8e:	4613      	mov	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	4413      	add	r3, r2
 800aa94:	00db      	lsls	r3, r3, #3
 800aa96:	440b      	add	r3, r1
 800aa98:	3350      	adds	r3, #80	; 0x50
 800aa9a:	78ba      	ldrb	r2, [r7, #2]
 800aa9c:	701a      	strb	r2, [r3, #0]
 800aa9e:	e009      	b.n	800aab4 <USBH_LL_SetToggle+0x58>
 800aaa0:	78fa      	ldrb	r2, [r7, #3]
 800aaa2:	68f9      	ldr	r1, [r7, #12]
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4413      	add	r3, r2
 800aaaa:	00db      	lsls	r3, r3, #3
 800aaac:	440b      	add	r3, r1
 800aaae:	3351      	adds	r3, #81	; 0x51
 800aab0:	78ba      	ldrb	r2, [r7, #2]
 800aab2:	701a      	strb	r2, [r3, #0]
 800aab4:	2300      	movs	r3, #0
 800aab6:	4618      	mov	r0, r3
 800aab8:	3714      	adds	r7, #20
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <USBH_Delay>:
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b082      	sub	sp, #8
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f7f7 faae 	bl	800202c <HAL_Delay>
 800aad0:	bf00      	nop
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <USBH_Get_USB_Status>:
 800aad8:	b480      	push	{r7}
 800aada:	b085      	sub	sp, #20
 800aadc:	af00      	add	r7, sp, #0
 800aade:	4603      	mov	r3, r0
 800aae0:	71fb      	strb	r3, [r7, #7]
 800aae2:	2300      	movs	r3, #0
 800aae4:	73fb      	strb	r3, [r7, #15]
 800aae6:	79fb      	ldrb	r3, [r7, #7]
 800aae8:	2b03      	cmp	r3, #3
 800aaea:	d817      	bhi.n	800ab1c <USBH_Get_USB_Status+0x44>
 800aaec:	a201      	add	r2, pc, #4	; (adr r2, 800aaf4 <USBH_Get_USB_Status+0x1c>)
 800aaee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf2:	bf00      	nop
 800aaf4:	0800ab05 	.word	0x0800ab05
 800aaf8:	0800ab0b 	.word	0x0800ab0b
 800aafc:	0800ab11 	.word	0x0800ab11
 800ab00:	0800ab17 	.word	0x0800ab17
 800ab04:	2300      	movs	r3, #0
 800ab06:	73fb      	strb	r3, [r7, #15]
 800ab08:	e00b      	b.n	800ab22 <USBH_Get_USB_Status+0x4a>
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	73fb      	strb	r3, [r7, #15]
 800ab0e:	e008      	b.n	800ab22 <USBH_Get_USB_Status+0x4a>
 800ab10:	2301      	movs	r3, #1
 800ab12:	73fb      	strb	r3, [r7, #15]
 800ab14:	e005      	b.n	800ab22 <USBH_Get_USB_Status+0x4a>
 800ab16:	2302      	movs	r3, #2
 800ab18:	73fb      	strb	r3, [r7, #15]
 800ab1a:	e002      	b.n	800ab22 <USBH_Get_USB_Status+0x4a>
 800ab1c:	2302      	movs	r3, #2
 800ab1e:	73fb      	strb	r3, [r7, #15]
 800ab20:	bf00      	nop
 800ab22:	7bfb      	ldrb	r3, [r7, #15]
 800ab24:	4618      	mov	r0, r3
 800ab26:	3714      	adds	r7, #20
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <MX_DriverVbusFS>:
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	4603      	mov	r3, r0
 800ab38:	71fb      	strb	r3, [r7, #7]
 800ab3a:	79fb      	ldrb	r3, [r7, #7]
 800ab3c:	73fb      	strb	r3, [r7, #15]
 800ab3e:	79fb      	ldrb	r3, [r7, #7]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d102      	bne.n	800ab4a <MX_DriverVbusFS+0x1a>
 800ab44:	2301      	movs	r3, #1
 800ab46:	73fb      	strb	r3, [r7, #15]
 800ab48:	e001      	b.n	800ab4e <MX_DriverVbusFS+0x1e>
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	73fb      	strb	r3, [r7, #15]
 800ab4e:	7bfb      	ldrb	r3, [r7, #15]
 800ab50:	461a      	mov	r2, r3
 800ab52:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab56:	4803      	ldr	r0, [pc, #12]	; (800ab64 <MX_DriverVbusFS+0x34>)
 800ab58:	f7f7 fd5c 	bl	8002614 <HAL_GPIO_WritePin>
 800ab5c:	bf00      	nop
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	48000800 	.word	0x48000800

0800ab68 <__errno>:
 800ab68:	4b01      	ldr	r3, [pc, #4]	; (800ab70 <__errno+0x8>)
 800ab6a:	6818      	ldr	r0, [r3, #0]
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	20000048 	.word	0x20000048

0800ab74 <__libc_init_array>:
 800ab74:	b570      	push	{r4, r5, r6, lr}
 800ab76:	4e0d      	ldr	r6, [pc, #52]	; (800abac <__libc_init_array+0x38>)
 800ab78:	4c0d      	ldr	r4, [pc, #52]	; (800abb0 <__libc_init_array+0x3c>)
 800ab7a:	1ba4      	subs	r4, r4, r6
 800ab7c:	10a4      	asrs	r4, r4, #2
 800ab7e:	2500      	movs	r5, #0
 800ab80:	42a5      	cmp	r5, r4
 800ab82:	d109      	bne.n	800ab98 <__libc_init_array+0x24>
 800ab84:	4e0b      	ldr	r6, [pc, #44]	; (800abb4 <__libc_init_array+0x40>)
 800ab86:	4c0c      	ldr	r4, [pc, #48]	; (800abb8 <__libc_init_array+0x44>)
 800ab88:	f000 f8ea 	bl	800ad60 <_init>
 800ab8c:	1ba4      	subs	r4, r4, r6
 800ab8e:	10a4      	asrs	r4, r4, #2
 800ab90:	2500      	movs	r5, #0
 800ab92:	42a5      	cmp	r5, r4
 800ab94:	d105      	bne.n	800aba2 <__libc_init_array+0x2e>
 800ab96:	bd70      	pop	{r4, r5, r6, pc}
 800ab98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ab9c:	4798      	blx	r3
 800ab9e:	3501      	adds	r5, #1
 800aba0:	e7ee      	b.n	800ab80 <__libc_init_array+0xc>
 800aba2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aba6:	4798      	blx	r3
 800aba8:	3501      	adds	r5, #1
 800abaa:	e7f2      	b.n	800ab92 <__libc_init_array+0x1e>
 800abac:	0800b8e8 	.word	0x0800b8e8
 800abb0:	0800b8e8 	.word	0x0800b8e8
 800abb4:	0800b8e8 	.word	0x0800b8e8
 800abb8:	0800b8ec 	.word	0x0800b8ec

0800abbc <malloc>:
 800abbc:	4b02      	ldr	r3, [pc, #8]	; (800abc8 <malloc+0xc>)
 800abbe:	4601      	mov	r1, r0
 800abc0:	6818      	ldr	r0, [r3, #0]
 800abc2:	f000 b861 	b.w	800ac88 <_malloc_r>
 800abc6:	bf00      	nop
 800abc8:	20000048 	.word	0x20000048

0800abcc <free>:
 800abcc:	4b02      	ldr	r3, [pc, #8]	; (800abd8 <free+0xc>)
 800abce:	4601      	mov	r1, r0
 800abd0:	6818      	ldr	r0, [r3, #0]
 800abd2:	f000 b80b 	b.w	800abec <_free_r>
 800abd6:	bf00      	nop
 800abd8:	20000048 	.word	0x20000048

0800abdc <memset>:
 800abdc:	4402      	add	r2, r0
 800abde:	4603      	mov	r3, r0
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d100      	bne.n	800abe6 <memset+0xa>
 800abe4:	4770      	bx	lr
 800abe6:	f803 1b01 	strb.w	r1, [r3], #1
 800abea:	e7f9      	b.n	800abe0 <memset+0x4>

0800abec <_free_r>:
 800abec:	b538      	push	{r3, r4, r5, lr}
 800abee:	4605      	mov	r5, r0
 800abf0:	2900      	cmp	r1, #0
 800abf2:	d045      	beq.n	800ac80 <_free_r+0x94>
 800abf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abf8:	1f0c      	subs	r4, r1, #4
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	bfb8      	it	lt
 800abfe:	18e4      	addlt	r4, r4, r3
 800ac00:	f000 f8ac 	bl	800ad5c <__malloc_lock>
 800ac04:	4a1f      	ldr	r2, [pc, #124]	; (800ac84 <_free_r+0x98>)
 800ac06:	6813      	ldr	r3, [r2, #0]
 800ac08:	4610      	mov	r0, r2
 800ac0a:	b933      	cbnz	r3, 800ac1a <_free_r+0x2e>
 800ac0c:	6063      	str	r3, [r4, #4]
 800ac0e:	6014      	str	r4, [r2, #0]
 800ac10:	4628      	mov	r0, r5
 800ac12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac16:	f000 b8a2 	b.w	800ad5e <__malloc_unlock>
 800ac1a:	42a3      	cmp	r3, r4
 800ac1c:	d90c      	bls.n	800ac38 <_free_r+0x4c>
 800ac1e:	6821      	ldr	r1, [r4, #0]
 800ac20:	1862      	adds	r2, r4, r1
 800ac22:	4293      	cmp	r3, r2
 800ac24:	bf04      	itt	eq
 800ac26:	681a      	ldreq	r2, [r3, #0]
 800ac28:	685b      	ldreq	r3, [r3, #4]
 800ac2a:	6063      	str	r3, [r4, #4]
 800ac2c:	bf04      	itt	eq
 800ac2e:	1852      	addeq	r2, r2, r1
 800ac30:	6022      	streq	r2, [r4, #0]
 800ac32:	6004      	str	r4, [r0, #0]
 800ac34:	e7ec      	b.n	800ac10 <_free_r+0x24>
 800ac36:	4613      	mov	r3, r2
 800ac38:	685a      	ldr	r2, [r3, #4]
 800ac3a:	b10a      	cbz	r2, 800ac40 <_free_r+0x54>
 800ac3c:	42a2      	cmp	r2, r4
 800ac3e:	d9fa      	bls.n	800ac36 <_free_r+0x4a>
 800ac40:	6819      	ldr	r1, [r3, #0]
 800ac42:	1858      	adds	r0, r3, r1
 800ac44:	42a0      	cmp	r0, r4
 800ac46:	d10b      	bne.n	800ac60 <_free_r+0x74>
 800ac48:	6820      	ldr	r0, [r4, #0]
 800ac4a:	4401      	add	r1, r0
 800ac4c:	1858      	adds	r0, r3, r1
 800ac4e:	4282      	cmp	r2, r0
 800ac50:	6019      	str	r1, [r3, #0]
 800ac52:	d1dd      	bne.n	800ac10 <_free_r+0x24>
 800ac54:	6810      	ldr	r0, [r2, #0]
 800ac56:	6852      	ldr	r2, [r2, #4]
 800ac58:	605a      	str	r2, [r3, #4]
 800ac5a:	4401      	add	r1, r0
 800ac5c:	6019      	str	r1, [r3, #0]
 800ac5e:	e7d7      	b.n	800ac10 <_free_r+0x24>
 800ac60:	d902      	bls.n	800ac68 <_free_r+0x7c>
 800ac62:	230c      	movs	r3, #12
 800ac64:	602b      	str	r3, [r5, #0]
 800ac66:	e7d3      	b.n	800ac10 <_free_r+0x24>
 800ac68:	6820      	ldr	r0, [r4, #0]
 800ac6a:	1821      	adds	r1, r4, r0
 800ac6c:	428a      	cmp	r2, r1
 800ac6e:	bf04      	itt	eq
 800ac70:	6811      	ldreq	r1, [r2, #0]
 800ac72:	6852      	ldreq	r2, [r2, #4]
 800ac74:	6062      	str	r2, [r4, #4]
 800ac76:	bf04      	itt	eq
 800ac78:	1809      	addeq	r1, r1, r0
 800ac7a:	6021      	streq	r1, [r4, #0]
 800ac7c:	605c      	str	r4, [r3, #4]
 800ac7e:	e7c7      	b.n	800ac10 <_free_r+0x24>
 800ac80:	bd38      	pop	{r3, r4, r5, pc}
 800ac82:	bf00      	nop
 800ac84:	200004e0 	.word	0x200004e0

0800ac88 <_malloc_r>:
 800ac88:	b570      	push	{r4, r5, r6, lr}
 800ac8a:	1ccd      	adds	r5, r1, #3
 800ac8c:	f025 0503 	bic.w	r5, r5, #3
 800ac90:	3508      	adds	r5, #8
 800ac92:	2d0c      	cmp	r5, #12
 800ac94:	bf38      	it	cc
 800ac96:	250c      	movcc	r5, #12
 800ac98:	2d00      	cmp	r5, #0
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	db01      	blt.n	800aca2 <_malloc_r+0x1a>
 800ac9e:	42a9      	cmp	r1, r5
 800aca0:	d903      	bls.n	800acaa <_malloc_r+0x22>
 800aca2:	230c      	movs	r3, #12
 800aca4:	6033      	str	r3, [r6, #0]
 800aca6:	2000      	movs	r0, #0
 800aca8:	bd70      	pop	{r4, r5, r6, pc}
 800acaa:	f000 f857 	bl	800ad5c <__malloc_lock>
 800acae:	4a21      	ldr	r2, [pc, #132]	; (800ad34 <_malloc_r+0xac>)
 800acb0:	6814      	ldr	r4, [r2, #0]
 800acb2:	4621      	mov	r1, r4
 800acb4:	b991      	cbnz	r1, 800acdc <_malloc_r+0x54>
 800acb6:	4c20      	ldr	r4, [pc, #128]	; (800ad38 <_malloc_r+0xb0>)
 800acb8:	6823      	ldr	r3, [r4, #0]
 800acba:	b91b      	cbnz	r3, 800acc4 <_malloc_r+0x3c>
 800acbc:	4630      	mov	r0, r6
 800acbe:	f000 f83d 	bl	800ad3c <_sbrk_r>
 800acc2:	6020      	str	r0, [r4, #0]
 800acc4:	4629      	mov	r1, r5
 800acc6:	4630      	mov	r0, r6
 800acc8:	f000 f838 	bl	800ad3c <_sbrk_r>
 800accc:	1c43      	adds	r3, r0, #1
 800acce:	d124      	bne.n	800ad1a <_malloc_r+0x92>
 800acd0:	230c      	movs	r3, #12
 800acd2:	6033      	str	r3, [r6, #0]
 800acd4:	4630      	mov	r0, r6
 800acd6:	f000 f842 	bl	800ad5e <__malloc_unlock>
 800acda:	e7e4      	b.n	800aca6 <_malloc_r+0x1e>
 800acdc:	680b      	ldr	r3, [r1, #0]
 800acde:	1b5b      	subs	r3, r3, r5
 800ace0:	d418      	bmi.n	800ad14 <_malloc_r+0x8c>
 800ace2:	2b0b      	cmp	r3, #11
 800ace4:	d90f      	bls.n	800ad06 <_malloc_r+0x7e>
 800ace6:	600b      	str	r3, [r1, #0]
 800ace8:	50cd      	str	r5, [r1, r3]
 800acea:	18cc      	adds	r4, r1, r3
 800acec:	4630      	mov	r0, r6
 800acee:	f000 f836 	bl	800ad5e <__malloc_unlock>
 800acf2:	f104 000b 	add.w	r0, r4, #11
 800acf6:	1d23      	adds	r3, r4, #4
 800acf8:	f020 0007 	bic.w	r0, r0, #7
 800acfc:	1ac3      	subs	r3, r0, r3
 800acfe:	d0d3      	beq.n	800aca8 <_malloc_r+0x20>
 800ad00:	425a      	negs	r2, r3
 800ad02:	50e2      	str	r2, [r4, r3]
 800ad04:	e7d0      	b.n	800aca8 <_malloc_r+0x20>
 800ad06:	428c      	cmp	r4, r1
 800ad08:	684b      	ldr	r3, [r1, #4]
 800ad0a:	bf16      	itet	ne
 800ad0c:	6063      	strne	r3, [r4, #4]
 800ad0e:	6013      	streq	r3, [r2, #0]
 800ad10:	460c      	movne	r4, r1
 800ad12:	e7eb      	b.n	800acec <_malloc_r+0x64>
 800ad14:	460c      	mov	r4, r1
 800ad16:	6849      	ldr	r1, [r1, #4]
 800ad18:	e7cc      	b.n	800acb4 <_malloc_r+0x2c>
 800ad1a:	1cc4      	adds	r4, r0, #3
 800ad1c:	f024 0403 	bic.w	r4, r4, #3
 800ad20:	42a0      	cmp	r0, r4
 800ad22:	d005      	beq.n	800ad30 <_malloc_r+0xa8>
 800ad24:	1a21      	subs	r1, r4, r0
 800ad26:	4630      	mov	r0, r6
 800ad28:	f000 f808 	bl	800ad3c <_sbrk_r>
 800ad2c:	3001      	adds	r0, #1
 800ad2e:	d0cf      	beq.n	800acd0 <_malloc_r+0x48>
 800ad30:	6025      	str	r5, [r4, #0]
 800ad32:	e7db      	b.n	800acec <_malloc_r+0x64>
 800ad34:	200004e0 	.word	0x200004e0
 800ad38:	200004e4 	.word	0x200004e4

0800ad3c <_sbrk_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4c06      	ldr	r4, [pc, #24]	; (800ad58 <_sbrk_r+0x1c>)
 800ad40:	2300      	movs	r3, #0
 800ad42:	4605      	mov	r5, r0
 800ad44:	4608      	mov	r0, r1
 800ad46:	6023      	str	r3, [r4, #0]
 800ad48:	f7f6 fffa 	bl	8001d40 <_sbrk>
 800ad4c:	1c43      	adds	r3, r0, #1
 800ad4e:	d102      	bne.n	800ad56 <_sbrk_r+0x1a>
 800ad50:	6823      	ldr	r3, [r4, #0]
 800ad52:	b103      	cbz	r3, 800ad56 <_sbrk_r+0x1a>
 800ad54:	602b      	str	r3, [r5, #0]
 800ad56:	bd38      	pop	{r3, r4, r5, pc}
 800ad58:	20000ea4 	.word	0x20000ea4

0800ad5c <__malloc_lock>:
 800ad5c:	4770      	bx	lr

0800ad5e <__malloc_unlock>:
 800ad5e:	4770      	bx	lr

0800ad60 <_init>:
 800ad60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad62:	bf00      	nop
 800ad64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad66:	bc08      	pop	{r3}
 800ad68:	469e      	mov	lr, r3
 800ad6a:	4770      	bx	lr

0800ad6c <_fini>:
 800ad6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6e:	bf00      	nop
 800ad70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad72:	bc08      	pop	{r3}
 800ad74:	469e      	mov	lr, r3
 800ad76:	4770      	bx	lr
