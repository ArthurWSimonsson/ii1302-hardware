
Door Kommunication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad0c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002370  0800ae94  0800ae94  0001ae94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d204  0800d204  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d204  0800d204  0001d204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d20c  0800d20c  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d20c  0800d20c  0001d20c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d210  0800d210  0001d210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800d214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e58  200000a0  0800d2b4  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ef8  0800d2b4  00020ef8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031440  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005e47  00000000  00000000  00051510  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001bb0  00000000  00000000  00057358  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018e8  00000000  00000000  00058f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f5f6  00000000  00000000  0005a7f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001fe14  00000000  00000000  00089de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00104289  00000000  00000000  000a9bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ade83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070a8  00000000  00000000  001adf00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a0 	.word	0x200000a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ae7c 	.word	0x0800ae7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	0800ae7c 	.word	0x0800ae7c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08c      	sub	sp, #48	; 0x30
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004de:	4b92      	ldr	r3, [pc, #584]	; (8000728 <MX_GPIO_Init+0x260>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	4a91      	ldr	r2, [pc, #580]	; (8000728 <MX_GPIO_Init+0x260>)
 80004e4:	f043 0310 	orr.w	r3, r3, #16
 80004e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ea:	4b8f      	ldr	r3, [pc, #572]	; (8000728 <MX_GPIO_Init+0x260>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	f003 0310 	and.w	r3, r3, #16
 80004f2:	61bb      	str	r3, [r7, #24]
 80004f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f6:	4b8c      	ldr	r3, [pc, #560]	; (8000728 <MX_GPIO_Init+0x260>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	4a8b      	ldr	r2, [pc, #556]	; (8000728 <MX_GPIO_Init+0x260>)
 80004fc:	f043 0304 	orr.w	r3, r3, #4
 8000500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000502:	4b89      	ldr	r3, [pc, #548]	; (8000728 <MX_GPIO_Init+0x260>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	f003 0304 	and.w	r3, r3, #4
 800050a:	617b      	str	r3, [r7, #20]
 800050c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050e:	4b86      	ldr	r3, [pc, #536]	; (8000728 <MX_GPIO_Init+0x260>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	4a85      	ldr	r2, [pc, #532]	; (8000728 <MX_GPIO_Init+0x260>)
 8000514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051a:	4b83      	ldr	r3, [pc, #524]	; (8000728 <MX_GPIO_Init+0x260>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000522:	613b      	str	r3, [r7, #16]
 8000524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	4b80      	ldr	r3, [pc, #512]	; (8000728 <MX_GPIO_Init+0x260>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	4a7f      	ldr	r2, [pc, #508]	; (8000728 <MX_GPIO_Init+0x260>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000532:	4b7d      	ldr	r3, [pc, #500]	; (8000728 <MX_GPIO_Init+0x260>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053e:	4b7a      	ldr	r3, [pc, #488]	; (8000728 <MX_GPIO_Init+0x260>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	4a79      	ldr	r2, [pc, #484]	; (8000728 <MX_GPIO_Init+0x260>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054a:	4b77      	ldr	r3, [pc, #476]	; (8000728 <MX_GPIO_Init+0x260>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000556:	4b74      	ldr	r3, [pc, #464]	; (8000728 <MX_GPIO_Init+0x260>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	4a73      	ldr	r2, [pc, #460]	; (8000728 <MX_GPIO_Init+0x260>)
 800055c:	f043 0308 	orr.w	r3, r3, #8
 8000560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000562:	4b71      	ldr	r3, [pc, #452]	; (8000728 <MX_GPIO_Init+0x260>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	f003 0308 	and.w	r3, r3, #8
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	f240 1109 	movw	r1, #265	; 0x109
 8000574:	486d      	ldr	r0, [pc, #436]	; (800072c <MX_GPIO_Init+0x264>)
 8000576:	f001 fea7 	bl	80022c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	210c      	movs	r1, #12
 800057e:	486c      	ldr	r0, [pc, #432]	; (8000730 <MX_GPIO_Init+0x268>)
 8000580:	f001 fea2 	bl	80022c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058a:	486a      	ldr	r0, [pc, #424]	; (8000734 <MX_GPIO_Init+0x26c>)
 800058c:	f001 fe9c 	bl	80022c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000596:	4867      	ldr	r0, [pc, #412]	; (8000734 <MX_GPIO_Init+0x26c>)
 8000598:	f001 fe96 	bl	80022c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	4865      	ldr	r0, [pc, #404]	; (8000738 <MX_GPIO_Init+0x270>)
 80005a2:	f001 fe91 	bl	80022c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 80005a6:	2308      	movs	r3, #8
 80005a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b2:	2302      	movs	r3, #2
 80005b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	4619      	mov	r1, r3
 80005bc:	485b      	ldr	r0, [pc, #364]	; (800072c <MX_GPIO_Init+0x264>)
 80005be:	f001 fcdb 	bl	8001f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 80005c2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80005c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005c8:	4b5c      	ldr	r3, [pc, #368]	; (800073c <MX_GPIO_Init+0x274>)
 80005ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d0:	f107 031c 	add.w	r3, r7, #28
 80005d4:	4619      	mov	r1, r3
 80005d6:	4857      	ldr	r0, [pc, #348]	; (8000734 <MX_GPIO_Init+0x26c>)
 80005d8:	f001 fcce 	bl	8001f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 80005dc:	2307      	movs	r3, #7
 80005de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e0:	2300      	movs	r3, #0
 80005e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	4619      	mov	r1, r3
 80005ee:	4851      	ldr	r0, [pc, #324]	; (8000734 <MX_GPIO_Init+0x26c>)
 80005f0:	f001 fcc2 	bl	8001f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 80005f4:	2310      	movs	r3, #16
 80005f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005f8:	4b50      	ldr	r3, [pc, #320]	; (800073c <MX_GPIO_Init+0x274>)
 80005fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000600:	f107 031c 	add.w	r3, r7, #28
 8000604:	4619      	mov	r1, r3
 8000606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060a:	f001 fcb5 	bl	8001f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin;
 800060e:	2320      	movs	r3, #32
 8000610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000612:	2300      	movs	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000616:	2302      	movs	r3, #2
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_DOWN_GPIO_Port, &GPIO_InitStruct);
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	4619      	mov	r1, r3
 8000620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000624:	f001 fca8 	bl	8001f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000628:	2304      	movs	r3, #4
 800062a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062c:	2301      	movs	r3, #1
 800062e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000630:	2301      	movs	r3, #1
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000634:	2303      	movs	r3, #3
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	4619      	mov	r1, r3
 800063e:	483c      	ldr	r0, [pc, #240]	; (8000730 <MX_GPIO_Init+0x268>)
 8000640:	f001 fc9a 	bl	8001f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	2301      	movs	r3, #1
 800064c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800064e:	2301      	movs	r3, #1
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000652:	2303      	movs	r3, #3
 8000654:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	4619      	mov	r1, r3
 800065c:	4833      	ldr	r0, [pc, #204]	; (800072c <MX_GPIO_Init+0x264>)
 800065e:	f001 fc8b 	bl	8001f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8000662:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	4619      	mov	r1, r3
 800067a:	482e      	ldr	r0, [pc, #184]	; (8000734 <MX_GPIO_Init+0x26c>)
 800067c:	f001 fc7c 	bl	8001f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8000680:	2305      	movs	r3, #5
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000684:	4b2d      	ldr	r3, [pc, #180]	; (800073c <MX_GPIO_Init+0x274>)
 8000686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4619      	mov	r1, r3
 8000692:	4829      	ldr	r0, [pc, #164]	; (8000738 <MX_GPIO_Init+0x270>)
 8000694:	f001 fc70 	bl	8001f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a4:	2303      	movs	r3, #3
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	4619      	mov	r1, r3
 80006ae:	4822      	ldr	r0, [pc, #136]	; (8000738 <MX_GPIO_Init+0x270>)
 80006b0:	f001 fc62 	bl	8001f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 80006b4:	2308      	movs	r3, #8
 80006b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2300      	movs	r3, #0
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	4819      	ldr	r0, [pc, #100]	; (8000730 <MX_GPIO_Init+0x268>)
 80006cc:	f001 fc54 	bl	8001f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 80006d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_GPIO_Init+0x274>)
 80006d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4619      	mov	r1, r3
 80006e4:	4812      	ldr	r0, [pc, #72]	; (8000730 <MX_GPIO_Init+0x268>)
 80006e6:	f001 fc47 	bl	8001f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 80006ea:	2301      	movs	r3, #1
 80006ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	480a      	ldr	r0, [pc, #40]	; (800072c <MX_GPIO_Init+0x264>)
 8000702:	f001 fc39 	bl	8001f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000706:	2302      	movs	r3, #2
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_GPIO_Init+0x274>)
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_GPIO_Init+0x264>)
 800071a:	f001 fc2d 	bl	8001f78 <HAL_GPIO_Init>

}
 800071e:	bf00      	nop
 8000720:	3730      	adds	r7, #48	; 0x30
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000
 800072c:	48001000 	.word	0x48001000
 8000730:	48000400 	.word	0x48000400
 8000734:	48000800 	.word	0x48000800
 8000738:	48000c00 	.word	0x48000c00
 800073c:	10120000 	.word	0x10120000

08000740 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000744:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <MX_I2C1_Init+0x74>)
 8000746:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <MX_I2C1_Init+0x78>)
 8000748:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 800074a:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_I2C1_Init+0x74>)
 800074c:	4a1b      	ldr	r2, [pc, #108]	; (80007bc <MX_I2C1_Init+0x7c>)
 800074e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000750:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_I2C1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000756:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_I2C1_Init+0x74>)
 8000758:	2201      	movs	r2, #1
 800075a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_I2C1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_I2C1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_I2C1_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_I2C1_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_I2C1_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800077a:	480e      	ldr	r0, [pc, #56]	; (80007b4 <MX_I2C1_Init+0x74>)
 800077c:	f003 f9dc 	bl	8003b38 <HAL_I2C_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000786:	f000 fa93 	bl	8000cb0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800078a:	2100      	movs	r1, #0
 800078c:	4809      	ldr	r0, [pc, #36]	; (80007b4 <MX_I2C1_Init+0x74>)
 800078e:	f003 fd3f 	bl	8004210 <HAL_I2CEx_ConfigAnalogFilter>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000798:	f000 fa8a 	bl	8000cb0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800079c:	2100      	movs	r1, #0
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_I2C1_Init+0x74>)
 80007a0:	f003 fd81 	bl	80042a6 <HAL_I2CEx_ConfigDigitalFilter>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007aa:	f000 fa81 	bl	8000cb0 <Error_Handler>
  }

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200004dc 	.word	0x200004dc
 80007b8:	40005400 	.word	0x40005400
 80007bc:	00404c74 	.word	0x00404c74

080007c0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <MX_I2C2_Init+0x74>)
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <MX_I2C2_Init+0x78>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00404C74;
 80007ca:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <MX_I2C2_Init+0x74>)
 80007cc:	4a1b      	ldr	r2, [pc, #108]	; (800083c <MX_I2C2_Init+0x7c>)
 80007ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007d0:	4b18      	ldr	r3, [pc, #96]	; (8000834 <MX_I2C2_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d6:	4b17      	ldr	r3, [pc, #92]	; (8000834 <MX_I2C2_Init+0x74>)
 80007d8:	2201      	movs	r2, #1
 80007da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007dc:	4b15      	ldr	r3, [pc, #84]	; (8000834 <MX_I2C2_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_I2C2_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_I2C2_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_I2C2_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_I2C2_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007fa:	480e      	ldr	r0, [pc, #56]	; (8000834 <MX_I2C2_Init+0x74>)
 80007fc:	f003 f99c 	bl	8003b38 <HAL_I2C_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000806:	f000 fa53 	bl	8000cb0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080a:	2100      	movs	r1, #0
 800080c:	4809      	ldr	r0, [pc, #36]	; (8000834 <MX_I2C2_Init+0x74>)
 800080e:	f003 fcff 	bl	8004210 <HAL_I2CEx_ConfigAnalogFilter>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000818:	f000 fa4a 	bl	8000cb0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800081c:	2100      	movs	r1, #0
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_I2C2_Init+0x74>)
 8000820:	f003 fd41 	bl	80042a6 <HAL_I2CEx_ConfigDigitalFilter>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800082a:	f000 fa41 	bl	8000cb0 <Error_Handler>
  }

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000528 	.word	0x20000528
 8000838:	40005800 	.word	0x40005800
 800083c:	00404c74 	.word	0x00404c74

08000840 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	; 0x30
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a2e      	ldr	r2, [pc, #184]	; (8000918 <HAL_I2C_MspInit+0xd8>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d128      	bne.n	80008b4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4b2e      	ldr	r3, [pc, #184]	; (800091c <HAL_I2C_MspInit+0xdc>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a2d      	ldr	r2, [pc, #180]	; (800091c <HAL_I2C_MspInit+0xdc>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b2b      	ldr	r3, [pc, #172]	; (800091c <HAL_I2C_MspInit+0xdc>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	61bb      	str	r3, [r7, #24]
 8000878:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800087a:	23c0      	movs	r3, #192	; 0xc0
 800087c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800087e:	2312      	movs	r3, #18
 8000880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000882:	2301      	movs	r3, #1
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800088a:	2304      	movs	r3, #4
 800088c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4822      	ldr	r0, [pc, #136]	; (8000920 <HAL_I2C_MspInit+0xe0>)
 8000896:	f001 fb6f 	bl	8001f78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <HAL_I2C_MspInit+0xdc>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089e:	4a1f      	ldr	r2, [pc, #124]	; (800091c <HAL_I2C_MspInit+0xdc>)
 80008a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008a4:	6593      	str	r3, [r2, #88]	; 0x58
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <HAL_I2C_MspInit+0xdc>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80008b2:	e02d      	b.n	8000910 <HAL_I2C_MspInit+0xd0>
  else if(i2cHandle->Instance==I2C2)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a1a      	ldr	r2, [pc, #104]	; (8000924 <HAL_I2C_MspInit+0xe4>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d128      	bne.n	8000910 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <HAL_I2C_MspInit+0xdc>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a16      	ldr	r2, [pc, #88]	; (800091c <HAL_I2C_MspInit+0xdc>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <HAL_I2C_MspInit+0xdc>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 80008d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008dc:	2312      	movs	r3, #18
 80008de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80008e8:	2304      	movs	r3, #4
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	480b      	ldr	r0, [pc, #44]	; (8000920 <HAL_I2C_MspInit+0xe0>)
 80008f4:	f001 fb40 	bl	8001f78 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <HAL_I2C_MspInit+0xdc>)
 80008fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fc:	4a07      	ldr	r2, [pc, #28]	; (800091c <HAL_I2C_MspInit+0xdc>)
 80008fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000902:	6593      	str	r3, [r2, #88]	; 0x58
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_I2C_MspInit+0xdc>)
 8000906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
}
 8000910:	bf00      	nop
 8000912:	3730      	adds	r7, #48	; 0x30
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40005400 	.word	0x40005400
 800091c:	40021000 	.word	0x40021000
 8000920:	48000400 	.word	0x48000400
 8000924:	40005800 	.word	0x40005800

08000928 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_IWDG_Init+0x34>)
 800092e:	4a0c      	ldr	r2, [pc, #48]	; (8000960 <MX_IWDG_Init+0x38>)
 8000930:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <MX_IWDG_Init+0x34>)
 8000934:	2205      	movs	r2, #5
 8000936:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_IWDG_Init+0x34>)
 800093a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800093e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_IWDG_Init+0x34>)
 8000942:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000946:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_IWDG_Init+0x34>)
 800094a:	f003 fcf8 	bl	800433e <HAL_IWDG_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000954:	f000 f9ac 	bl	8000cb0 <Error_Handler>
  }

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000574 	.word	0x20000574
 8000960:	40003000 	.word	0x40003000

08000964 <MX_LCD_Init>:

LCD_HandleTypeDef hlcd;

/* LCD init function */
void MX_LCD_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0

  hlcd.Instance = LCD;
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_LCD_Init+0x68>)
 800096a:	4a19      	ldr	r2, [pc, #100]	; (80009d0 <MX_LCD_Init+0x6c>)
 800096c:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_LCD_Init+0x68>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_LCD_Init+0x68>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_LCD_Init+0x68>)
 800097c:	220c      	movs	r2, #12
 800097e:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_LCD_Init+0x68>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_LCD_Init+0x68>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_LCD_Init+0x68>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_LCD_Init+0x68>)
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_LCD_Init+0x68>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_LCD_Init+0x68>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_LCD_Init+0x68>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_LCD_Init+0x68>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_LCD_Init+0x68>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_LCD_Init+0x68>)
 80009b8:	f003 fd08 	bl	80043cc <HAL_LCD_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_LCD_Init+0x62>
  {
    Error_Handler();
 80009c2:	f000 f975 	bl	8000cb0 <Error_Handler>
  }

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000584 	.word	0x20000584
 80009d0:	40002400 	.word	0x40002400

080009d4 <HAL_LCD_MspInit>:

void HAL_LCD_MspInit(LCD_HandleTypeDef* lcdHandle)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08c      	sub	sp, #48	; 0x30
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(lcdHandle->Instance==LCD)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a44      	ldr	r2, [pc, #272]	; (8000b04 <HAL_LCD_MspInit+0x130>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	f040 8081 	bne.w	8000afa <HAL_LCD_MspInit+0x126>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* LCD clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 80009f8:	4b43      	ldr	r3, [pc, #268]	; (8000b08 <HAL_LCD_MspInit+0x134>)
 80009fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fc:	4a42      	ldr	r2, [pc, #264]	; (8000b08 <HAL_LCD_MspInit+0x134>)
 80009fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a02:	6593      	str	r3, [r2, #88]	; 0x58
 8000a04:	4b40      	ldr	r3, [pc, #256]	; (8000b08 <HAL_LCD_MspInit+0x134>)
 8000a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a0c:	61bb      	str	r3, [r7, #24]
 8000a0e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a10:	4b3d      	ldr	r3, [pc, #244]	; (8000b08 <HAL_LCD_MspInit+0x134>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a14:	4a3c      	ldr	r2, [pc, #240]	; (8000b08 <HAL_LCD_MspInit+0x134>)
 8000a16:	f043 0304 	orr.w	r3, r3, #4
 8000a1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1c:	4b3a      	ldr	r3, [pc, #232]	; (8000b08 <HAL_LCD_MspInit+0x134>)
 8000a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a20:	f003 0304 	and.w	r3, r3, #4
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	4b37      	ldr	r3, [pc, #220]	; (8000b08 <HAL_LCD_MspInit+0x134>)
 8000a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2c:	4a36      	ldr	r2, [pc, #216]	; (8000b08 <HAL_LCD_MspInit+0x134>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a34:	4b34      	ldr	r3, [pc, #208]	; (8000b08 <HAL_LCD_MspInit+0x134>)
 8000a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a40:	4b31      	ldr	r3, [pc, #196]	; (8000b08 <HAL_LCD_MspInit+0x134>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a44:	4a30      	ldr	r2, [pc, #192]	; (8000b08 <HAL_LCD_MspInit+0x134>)
 8000a46:	f043 0302 	orr.w	r3, r3, #2
 8000a4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4c:	4b2e      	ldr	r3, [pc, #184]	; (8000b08 <HAL_LCD_MspInit+0x134>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a50:	f003 0302 	and.w	r3, r3, #2
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a58:	4b2b      	ldr	r3, [pc, #172]	; (8000b08 <HAL_LCD_MspInit+0x134>)
 8000a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5c:	4a2a      	ldr	r2, [pc, #168]	; (8000b08 <HAL_LCD_MspInit+0x134>)
 8000a5e:	f043 0308 	orr.w	r3, r3, #8
 8000a62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a64:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <HAL_LCD_MspInit+0x134>)
 8000a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a68:	f003 0308 	and.w	r3, r3, #8
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3 
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 8000a70:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000a74:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000a82:	230b      	movs	r3, #11
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	481f      	ldr	r0, [pc, #124]	; (8000b0c <HAL_LCD_MspInit+0x138>)
 8000a8e:	f001 fa73 	bl	8001f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 8000a92:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000a96:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000aa4:	230b      	movs	r3, #11
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab2:	f001 fa61 	bl	8001f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 8000ab6:	f24f 2333 	movw	r3, #62003	; 0xf233
 8000aba:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin 
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000ac8:	230b      	movs	r3, #11
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480f      	ldr	r0, [pc, #60]	; (8000b10 <HAL_LCD_MspInit+0x13c>)
 8000ad4:	f001 fa50 	bl	8001f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8000ad8:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000adc:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000aea:	230b      	movs	r3, #11
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4807      	ldr	r0, [pc, #28]	; (8000b14 <HAL_LCD_MspInit+0x140>)
 8000af6:	f001 fa3f 	bl	8001f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }
}
 8000afa:	bf00      	nop
 8000afc:	3730      	adds	r7, #48	; 0x30
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40002400 	.word	0x40002400
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	48000800 	.word	0x48000800
 8000b10:	48000400 	.word	0x48000400
 8000b14:	48000c00 	.word	0x48000c00

08000b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1c:	f001 f868 	bl	8001bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b20:	f000 f81c 	bl	8000b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b24:	f7ff fcd0 	bl	80004c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b28:	f7ff fe0a 	bl	8000740 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000b2c:	f7ff fe48 	bl	80007c0 <MX_I2C2_Init>
  MX_LCD_Init();
 8000b30:	f7ff ff18 	bl	8000964 <MX_LCD_Init>
  MX_QUADSPI_Init();
 8000b34:	f000 f920 	bl	8000d78 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000b38:	f000 fa00 	bl	8000f3c <MX_SAI1_Init>
  MX_SPI2_Init();
 8000b3c:	f000 fb1e 	bl	800117c <MX_SPI2_Init>
  MX_USB_HOST_Init();
 8000b40:	f009 fd94 	bl	800a66c <MX_USB_HOST_Init>
  MX_UART4_Init();
 8000b44:	f000 ffb8 	bl	8001ab8 <MX_UART4_Init>
  MX_IWDG_Init();
 8000b48:	f7ff feee 	bl	8000928 <MX_IWDG_Init>
  MX_RTC_Init();
 8000b4c:	f000 f97e 	bl	8000e4c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
#ifdef RUN_TEST_PROGRAM
  Test_program();
 8000b50:	f000 ff74 	bl	8001a3c <Test_program>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000b54:	f009 fdb0 	bl	800a6b8 <MX_USB_HOST_Process>
 8000b58:	e7fc      	b.n	8000b54 <main+0x3c>
	...

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b0b8      	sub	sp, #224	; 0xe0
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b66:	2244      	movs	r2, #68	; 0x44
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00a f8c4 	bl	800acf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b80:	463b      	mov	r3, r7
 8000b82:	2288      	movs	r2, #136	; 0x88
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f00a f8b6 	bl	800acf8 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000b8c:	f003 fd8e 	bl	80046ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b90:	4b45      	ldr	r3, [pc, #276]	; (8000ca8 <SystemClock_Config+0x14c>)
 8000b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b96:	4a44      	ldr	r2, [pc, #272]	; (8000ca8 <SystemClock_Config+0x14c>)
 8000b98:	f023 0318 	bic.w	r3, r3, #24
 8000b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000ba0:	231c      	movs	r3, #28
 8000ba2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bac:	2301      	movs	r3, #1
 8000bae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000bbe:	2360      	movs	r3, #96	; 0x60
 8000bc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000bd6:	2314      	movs	r3, #20
 8000bd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bdc:	2307      	movs	r3, #7
 8000bde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000be2:	2302      	movs	r3, #2
 8000be4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000be8:	2302      	movs	r3, #2
 8000bea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f003 fea6 	bl	8004944 <HAL_RCC_OscConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000bfe:	f000 f857 	bl	8000cb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c02:	230f      	movs	r3, #15
 8000c04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c20:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000c24:	2101      	movs	r1, #1
 8000c26:	4618      	mov	r0, r3
 8000c28:	f004 fa3c 	bl	80050a4 <HAL_RCC_ClockConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000c32:	f000 f83d 	bl	8000cb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8000c36:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <SystemClock_Config+0x150>)
 8000c38:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000c52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000c56:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000c60:	2318      	movs	r3, #24
 8000c62:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c64:	2307      	movs	r3, #7
 8000c66:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 8000c70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c74:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c76:	463b      	mov	r3, r7
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f004 fc17 	bl	80054ac <HAL_RCCEx_PeriphCLKConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8000c84:	f000 f814 	bl	8000cb0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c88:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c8c:	f003 fd2c 	bl	80046e8 <HAL_PWREx_ControlVoltageScaling>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0x13e>
  {
    Error_Handler();
 8000c96:	f000 f80b 	bl	8000cb0 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000c9a:	f005 fb65 	bl	8006368 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000c9e:	bf00      	nop
 8000ca0:	37e0      	adds	r7, #224	; 0xe0
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	000228c8 	.word	0x000228c8

08000cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <esp_ok>:

/** @brief esp_ok, check for ok status
@author  Daniel Gripenstedt
@return uint8_t RX_IP_OF */
bool esp_ok ()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0
	//uint8_t ok[] = "OK";
	//uint8_t not_ok[] = "ERROR";

	uint8_t TX_buffer [] = "AT\r\n";	//test if esp is working
 8000cc6:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <esp_ok+0x74>)
 8000cc8:	f107 0318 	add.w	r3, r7, #24
 8000ccc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cd0:	6018      	str	r0, [r3, #0]
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	7019      	strb	r1, [r3, #0]
	uint8_t RX_AT [20];
	HAL_UART_Transmit(&huart4, (uint8_t*)TX_buffer, (sizeof (TX_buffer) - 1), 100);
 8000cd6:	f107 0118 	add.w	r1, r7, #24
 8000cda:	2364      	movs	r3, #100	; 0x64
 8000cdc:	2204      	movs	r2, #4
 8000cde:	4816      	ldr	r0, [pc, #88]	; (8000d38 <esp_ok+0x78>)
 8000ce0:	f006 fac0 	bl	8007264 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart4, (uint8_t*)RX_AT, 11, 1000);
 8000ce4:	1d39      	adds	r1, r7, #4
 8000ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cea:	220b      	movs	r2, #11
 8000cec:	4812      	ldr	r0, [pc, #72]	; (8000d38 <esp_ok+0x78>)
 8000cee:	f006 fb4c 	bl	800738a <HAL_UART_Receive>

	for (uint8_t i = 0; i < (sizeof(RX_AT) - 1); i++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	77fb      	strb	r3, [r7, #31]
 8000cf6:	e015      	b.n	8000d24 <esp_ok+0x64>
	{
		if ((RX_AT[i] == 'O') && (RX_AT[i + 1] == 'K'))
 8000cf8:	7ffb      	ldrb	r3, [r7, #31]
 8000cfa:	f107 0220 	add.w	r2, r7, #32
 8000cfe:	4413      	add	r3, r2
 8000d00:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d04:	2b4f      	cmp	r3, #79	; 0x4f
 8000d06:	d10a      	bne.n	8000d1e <esp_ok+0x5e>
 8000d08:	7ffb      	ldrb	r3, [r7, #31]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	f107 0220 	add.w	r2, r7, #32
 8000d10:	4413      	add	r3, r2
 8000d12:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d16:	2b4b      	cmp	r3, #75	; 0x4b
 8000d18:	d101      	bne.n	8000d1e <esp_ok+0x5e>
		{
			/*BSP_LCD_GLASS_DisplayString(ok);
			HAL_Delay(1000);
			BSP_LCD_GLASS_Clear();*/
			return true;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e006      	b.n	8000d2c <esp_ok+0x6c>
	for (uint8_t i = 0; i < (sizeof(RX_AT) - 1); i++)
 8000d1e:	7ffb      	ldrb	r3, [r7, #31]
 8000d20:	3301      	adds	r3, #1
 8000d22:	77fb      	strb	r3, [r7, #31]
 8000d24:	7ffb      	ldrb	r3, [r7, #31]
 8000d26:	2b12      	cmp	r3, #18
 8000d28:	d9e6      	bls.n	8000cf8 <esp_ok+0x38>
		HAL_UART_Transmit(&huart4, (uint8_t*)TX_RST, (sizeof (TX_RST) - 1), 50);
		HAL_UART_Receive(&huart4, (uint8_t*)RX_RST, 20, 1000);
		//BSP_LCD_GLASS_DisplayString(not_ok);
		HAL_Delay(25000);
		//BSP_LCD_GLASS_Clear();*/
		return false;
 8000d2a:	2300      	movs	r3, #0
}/*End of function esp_ok*/
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3720      	adds	r7, #32
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	0800ae94 	.word	0x0800ae94
 8000d38:	200007e0 	.word	0x200007e0

08000d3c <esp_error_handler>:
/** @brief esp_error_handler, handle esp error
 * by writing ESP ERROR on the OLED and then reset the MCU
@author  Daniel Gripenstedt
@return uint8_t RX_IP_OF */
void esp_error_handler()
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8000d40:	2000      	movs	r0, #0
 8000d42:	f000 fb45 	bl	80013d0 <ssd1306_Fill>
	ssd1306_SetCursor(2, 26);
 8000d46:	211a      	movs	r1, #26
 8000d48:	2002      	movs	r0, #2
 8000d4a:	f000 fc97 	bl	800167c <ssd1306_SetCursor>
	ssd1306_WriteString("ESP ERROR", Font_11x18, White);
 8000d4e:	4a08      	ldr	r2, [pc, #32]	; (8000d70 <esp_error_handler+0x34>)
 8000d50:	2301      	movs	r3, #1
 8000d52:	ca06      	ldmia	r2, {r1, r2}
 8000d54:	4807      	ldr	r0, [pc, #28]	; (8000d74 <esp_error_handler+0x38>)
 8000d56:	f000 fc6b 	bl	8001630 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000d5a:	f000 fb5b 	bl	8001414 <ssd1306_UpdateScreen>

	HAL_Delay(1000);
 8000d5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d62:	f000 ffbd 	bl	8001ce0 <HAL_Delay>
	HAL_NVIC_SystemReset();
 8000d66:	f001 f8f6 	bl	8001f56 <HAL_NVIC_SystemReset>
}/*End of function esp_error_handler*/
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000000 	.word	0x20000000
 8000d74:	0800af8c 	.word	0x0800af8c

08000d78 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <MX_QUADSPI_Init+0x44>)
 8000d7e:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <MX_QUADSPI_Init+0x48>)
 8000d80:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_QUADSPI_Init+0x44>)
 8000d84:	22ff      	movs	r2, #255	; 0xff
 8000d86:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <MX_QUADSPI_Init+0x44>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <MX_QUADSPI_Init+0x44>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_QUADSPI_Init+0x44>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <MX_QUADSPI_Init+0x44>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_QUADSPI_Init+0x44>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <MX_QUADSPI_Init+0x44>)
 8000da8:	f003 fd04 	bl	80047b4 <HAL_QSPI_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000db2:	f7ff ff7d 	bl	8000cb0 <Error_Handler>
  }

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200005c0 	.word	0x200005c0
 8000dc0:	a0001000 	.word	0xa0001000

08000dc4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a17      	ldr	r2, [pc, #92]	; (8000e40 <HAL_QSPI_MspInit+0x7c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d128      	bne.n	8000e38 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <HAL_QSPI_MspInit+0x80>)
 8000de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dea:	4a16      	ldr	r2, [pc, #88]	; (8000e44 <HAL_QSPI_MspInit+0x80>)
 8000dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df0:	6513      	str	r3, [r2, #80]	; 0x50
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <HAL_QSPI_MspInit+0x80>)
 8000df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_QSPI_MspInit+0x80>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <HAL_QSPI_MspInit+0x80>)
 8000e04:	f043 0310 	orr.w	r3, r3, #16
 8000e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_QSPI_MspInit+0x80>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	f003 0310 	and.w	r3, r3, #16
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 8000e16:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000e1a:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e28:	230a      	movs	r3, #10
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <HAL_QSPI_MspInit+0x84>)
 8000e34:	f001 f8a0 	bl	8001f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000e38:	bf00      	nop
 8000e3a:	3728      	adds	r7, #40	; 0x28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	a0001000 	.word	0xa0001000
 8000e44:	40021000 	.word	0x40021000
 8000e48:	48001000 	.word	0x48001000

08000e4c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e60:	2300      	movs	r3, #0
 8000e62:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000e64:	4b25      	ldr	r3, [pc, #148]	; (8000efc <MX_RTC_Init+0xb0>)
 8000e66:	4a26      	ldr	r2, [pc, #152]	; (8000f00 <MX_RTC_Init+0xb4>)
 8000e68:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e6a:	4b24      	ldr	r3, [pc, #144]	; (8000efc <MX_RTC_Init+0xb0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <MX_RTC_Init+0xb0>)
 8000e72:	227f      	movs	r2, #127	; 0x7f
 8000e74:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <MX_RTC_Init+0xb0>)
 8000e78:	22ff      	movs	r2, #255	; 0xff
 8000e7a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_RTC_Init+0xb0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <MX_RTC_Init+0xb0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_RTC_Init+0xb0>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <MX_RTC_Init+0xb0>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e94:	4819      	ldr	r0, [pc, #100]	; (8000efc <MX_RTC_Init+0xb0>)
 8000e96:	f005 fd19 	bl	80068cc <HAL_RTC_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000ea0:	f7ff ff06 	bl	8000cb0 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480f      	ldr	r0, [pc, #60]	; (8000efc <MX_RTC_Init+0xb0>)
 8000ec0:	f005 fd82 	bl	80069c8 <HAL_RTC_SetTime>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000eca:	f7ff fef1 	bl	8000cb0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ede:	463b      	mov	r3, r7
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_RTC_Init+0xb0>)
 8000ee6:	f005 fe0c 	bl	8006b02 <HAL_RTC_SetDate>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000ef0:	f7ff fede 	bl	8000cb0 <Error_Handler>
  }

}
 8000ef4:	bf00      	nop
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000604 	.word	0x20000604
 8000f00:	40002800 	.word	0x40002800

08000f04 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <HAL_RTC_MspInit+0x30>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d107      	bne.n	8000f26 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_RTC_MspInit+0x34>)
 8000f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f1c:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <HAL_RTC_MspInit+0x34>)
 8000f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40002800 	.word	0x40002800
 8000f38:	40021000 	.word	0x40021000

08000f3c <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0

  hsai_BlockA1.Instance = SAI1_Block_A;
 8000f40:	4b4d      	ldr	r3, [pc, #308]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000f42:	4a4e      	ldr	r2, [pc, #312]	; (800107c <MX_SAI1_Init+0x140>)
 8000f44:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f46:	4b4c      	ldr	r3, [pc, #304]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000f4c:	4b4a      	ldr	r3, [pc, #296]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000f52:	4b49      	ldr	r3, [pc, #292]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000f54:	2240      	movs	r2, #64	; 0x40
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f58:	4b47      	ldr	r3, [pc, #284]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f5e:	4b46      	ldr	r3, [pc, #280]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f64:	4b44      	ldr	r3, [pc, #272]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f6a:	4b43      	ldr	r3, [pc, #268]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000f70:	4b41      	ldr	r3, [pc, #260]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f76:	4b40      	ldr	r3, [pc, #256]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000f7c:	4b3e      	ldr	r3, [pc, #248]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000f7e:	4a40      	ldr	r2, [pc, #256]	; (8001080 <MX_SAI1_Init+0x144>)
 8000f80:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f82:	4b3d      	ldr	r3, [pc, #244]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f88:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f8e:	4b3a      	ldr	r3, [pc, #232]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f94:	4b38      	ldr	r3, [pc, #224]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000f9a:	4b37      	ldr	r3, [pc, #220]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000f9c:	2208      	movs	r2, #8
 8000f9e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000fa0:	4b35      	ldr	r3, [pc, #212]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000fa6:	4b34      	ldr	r3, [pc, #208]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000fac:	4b32      	ldr	r3, [pc, #200]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000fb2:	4b31      	ldr	r3, [pc, #196]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000fb8:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000fbe:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000fc4:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000fca:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000fd0:	4829      	ldr	r0, [pc, #164]	; (8001078 <MX_SAI1_Init+0x13c>)
 8000fd2:	f005 fed5 	bl	8006d80 <HAL_SAI_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8000fdc:	f7ff fe68 	bl	8000cb0 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8000fe0:	4b28      	ldr	r3, [pc, #160]	; (8001084 <MX_SAI1_Init+0x148>)
 8000fe2:	4a29      	ldr	r2, [pc, #164]	; (8001088 <MX_SAI1_Init+0x14c>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000fe6:	4b27      	ldr	r3, [pc, #156]	; (8001084 <MX_SAI1_Init+0x148>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000fec:	4b25      	ldr	r3, [pc, #148]	; (8001084 <MX_SAI1_Init+0x148>)
 8000fee:	2203      	movs	r2, #3
 8000ff0:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000ff2:	4b24      	ldr	r3, [pc, #144]	; (8001084 <MX_SAI1_Init+0x148>)
 8000ff4:	2240      	movs	r2, #64	; 0x40
 8000ff6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000ff8:	4b22      	ldr	r3, [pc, #136]	; (8001084 <MX_SAI1_Init+0x148>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000ffe:	4b21      	ldr	r3, [pc, #132]	; (8001084 <MX_SAI1_Init+0x148>)
 8001000:	2200      	movs	r2, #0
 8001002:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <MX_SAI1_Init+0x148>)
 8001006:	2201      	movs	r2, #1
 8001008:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800100a:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <MX_SAI1_Init+0x148>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <MX_SAI1_Init+0x148>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001016:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_SAI1_Init+0x148>)
 8001018:	2200      	movs	r2, #0
 800101a:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800101c:	4b19      	ldr	r3, [pc, #100]	; (8001084 <MX_SAI1_Init+0x148>)
 800101e:	2200      	movs	r2, #0
 8001020:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001022:	4b18      	ldr	r3, [pc, #96]	; (8001084 <MX_SAI1_Init+0x148>)
 8001024:	2200      	movs	r2, #0
 8001026:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001028:	4b16      	ldr	r3, [pc, #88]	; (8001084 <MX_SAI1_Init+0x148>)
 800102a:	2200      	movs	r2, #0
 800102c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <MX_SAI1_Init+0x148>)
 8001030:	2208      	movs	r2, #8
 8001032:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <MX_SAI1_Init+0x148>)
 8001036:	2201      	movs	r2, #1
 8001038:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <MX_SAI1_Init+0x148>)
 800103c:	2200      	movs	r2, #0
 800103e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <MX_SAI1_Init+0x148>)
 8001042:	2200      	movs	r2, #0
 8001044:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_SAI1_Init+0x148>)
 8001048:	2200      	movs	r2, #0
 800104a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 800104c:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <MX_SAI1_Init+0x148>)
 800104e:	2200      	movs	r2, #0
 8001050:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_SAI1_Init+0x148>)
 8001054:	2200      	movs	r2, #0
 8001056:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <MX_SAI1_Init+0x148>)
 800105a:	2201      	movs	r2, #1
 800105c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_SAI1_Init+0x148>)
 8001060:	2200      	movs	r2, #0
 8001062:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001064:	4807      	ldr	r0, [pc, #28]	; (8001084 <MX_SAI1_Init+0x148>)
 8001066:	f005 fe8b 	bl	8006d80 <HAL_SAI_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8001070:	f7ff fe1e 	bl	8000cb0 <Error_Handler>
  }

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200006ac 	.word	0x200006ac
 800107c:	40015404 	.word	0x40015404
 8001080:	0002ee00 	.word	0x0002ee00
 8001084:	20000628 	.word	0x20000628
 8001088:	40015424 	.word	0x40015424

0800108c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a33      	ldr	r2, [pc, #204]	; (8001168 <HAL_SAI_MspInit+0xdc>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d135      	bne.n	800110a <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 800109e:	4b33      	ldr	r3, [pc, #204]	; (800116c <HAL_SAI_MspInit+0xe0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10b      	bne.n	80010be <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80010a6:	4b32      	ldr	r3, [pc, #200]	; (8001170 <HAL_SAI_MspInit+0xe4>)
 80010a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010aa:	4a31      	ldr	r2, [pc, #196]	; (8001170 <HAL_SAI_MspInit+0xe4>)
 80010ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010b0:	6613      	str	r3, [r2, #96]	; 0x60
 80010b2:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <HAL_SAI_MspInit+0xe4>)
 80010b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80010be:	4b2b      	ldr	r3, [pc, #172]	; (800116c <HAL_SAI_MspInit+0xe0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	3301      	adds	r3, #1
 80010c4:	4a29      	ldr	r2, [pc, #164]	; (800116c <HAL_SAI_MspInit+0xe0>)
 80010c6:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B 
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 80010c8:	2374      	movs	r3, #116	; 0x74
 80010ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80010d8:	230d      	movs	r3, #13
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	4824      	ldr	r0, [pc, #144]	; (8001174 <HAL_SAI_MspInit+0xe8>)
 80010e4:	f000 ff48 	bl	8001f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 80010e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80010fa:	230d      	movs	r3, #13
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	481b      	ldr	r0, [pc, #108]	; (8001174 <HAL_SAI_MspInit+0xe8>)
 8001106:	f000 ff37 	bl	8001f78 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a1a      	ldr	r2, [pc, #104]	; (8001178 <HAL_SAI_MspInit+0xec>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d124      	bne.n	800115e <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_SAI_MspInit+0xe0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10b      	bne.n	8001134 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <HAL_SAI_MspInit+0xe4>)
 800111e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001120:	4a13      	ldr	r2, [pc, #76]	; (8001170 <HAL_SAI_MspInit+0xe4>)
 8001122:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001126:	6613      	str	r3, [r2, #96]	; 0x60
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_SAI_MspInit+0xe4>)
 800112a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <HAL_SAI_MspInit+0xe0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	4a0c      	ldr	r2, [pc, #48]	; (800116c <HAL_SAI_MspInit+0xe0>)
 800113c:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE7     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800114e:	230d      	movs	r3, #13
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	4806      	ldr	r0, [pc, #24]	; (8001174 <HAL_SAI_MspInit+0xe8>)
 800115a:	f000 ff0d 	bl	8001f78 <HAL_GPIO_Init>

    }
}
 800115e:	bf00      	nop
 8001160:	3728      	adds	r7, #40	; 0x28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40015404 	.word	0x40015404
 800116c:	200000bc 	.word	0x200000bc
 8001170:	40021000 	.word	0x40021000
 8001174:	48001000 	.word	0x48001000
 8001178:	40015424 	.word	0x40015424

0800117c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <MX_SPI2_Init+0x74>)
 8001182:	4a1c      	ldr	r2, [pc, #112]	; (80011f4 <MX_SPI2_Init+0x78>)
 8001184:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <MX_SPI2_Init+0x74>)
 8001188:	f44f 7282 	mov.w	r2, #260	; 0x104
 800118c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MX_SPI2_Init+0x74>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <MX_SPI2_Init+0x74>)
 8001196:	f44f 7240 	mov.w	r2, #768	; 0x300
 800119a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_SPI2_Init+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <MX_SPI2_Init+0x74>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_SPI2_Init+0x74>)
 80011aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_SPI2_Init+0x74>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_SPI2_Init+0x74>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <MX_SPI2_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <MX_SPI2_Init+0x74>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_SPI2_Init+0x74>)
 80011ca:	2207      	movs	r2, #7
 80011cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <MX_SPI2_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_SPI2_Init+0x74>)
 80011d6:	2208      	movs	r2, #8
 80011d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_SPI2_Init+0x74>)
 80011dc:	f005 ff6a 	bl	80070b4 <HAL_SPI_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80011e6:	f7ff fd63 	bl	8000cb0 <Error_Handler>
  }

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000730 	.word	0x20000730
 80011f4:	40003800 	.word	0x40003800

080011f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a17      	ldr	r2, [pc, #92]	; (8001274 <HAL_SPI_MspInit+0x7c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d127      	bne.n	800126a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <HAL_SPI_MspInit+0x80>)
 800121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121e:	4a16      	ldr	r2, [pc, #88]	; (8001278 <HAL_SPI_MspInit+0x80>)
 8001220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001224:	6593      	str	r3, [r2, #88]	; 0x58
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <HAL_SPI_MspInit+0x80>)
 8001228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <HAL_SPI_MspInit+0x80>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	4a10      	ldr	r2, [pc, #64]	; (8001278 <HAL_SPI_MspInit+0x80>)
 8001238:	f043 0308 	orr.w	r3, r3, #8
 800123c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <HAL_SPI_MspInit+0x80>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 800124a:	231a      	movs	r3, #26
 800124c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001256:	2303      	movs	r3, #3
 8001258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800125a:	2305      	movs	r3, #5
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <HAL_SPI_MspInit+0x84>)
 8001266:	f000 fe87 	bl	8001f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40003800 	.word	0x40003800
 8001278:	40021000 	.word	0x40021000
 800127c:	48000c00 	.word	0x48000c00

08001280 <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af04      	add	r7, sp, #16
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	1dfb      	adds	r3, r7, #7
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2301      	movs	r3, #1
 80012aa:	2200      	movs	r2, #0
 80012ac:	2178      	movs	r1, #120	; 0x78
 80012ae:	4803      	ldr	r0, [pc, #12]	; (80012bc <ssd1306_WriteCommand+0x2c>)
 80012b0:	f002 fcd2 	bl	8003c58 <HAL_I2C_Mem_Write>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200004dc 	.word	0x200004dc

080012c0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af04      	add	r7, sp, #16
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	f04f 32ff 	mov.w	r2, #4294967295
 80012d2:	9202      	str	r2, [sp, #8]
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2301      	movs	r3, #1
 80012dc:	2240      	movs	r2, #64	; 0x40
 80012de:	2178      	movs	r1, #120	; 0x78
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <ssd1306_WriteData+0x30>)
 80012e2:	f002 fcb9 	bl	8003c58 <HAL_I2C_Mem_Write>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200004dc 	.word	0x200004dc

080012f4 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 80012f8:	f7ff ffc2 	bl	8001280 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80012fc:	2064      	movs	r0, #100	; 0x64
 80012fe:	f000 fcef 	bl	8001ce0 <HAL_Delay>

    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8001302:	20ae      	movs	r0, #174	; 0xae
 8001304:	f7ff ffc4 	bl	8001290 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001308:	2020      	movs	r0, #32
 800130a:	f7ff ffc1 	bl	8001290 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800130e:	2000      	movs	r0, #0
 8001310:	f7ff ffbe 	bl	8001290 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001314:	20b0      	movs	r0, #176	; 0xb0
 8001316:	f7ff ffbb 	bl	8001290 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800131a:	20c8      	movs	r0, #200	; 0xc8
 800131c:	f7ff ffb8 	bl	8001290 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001320:	2000      	movs	r0, #0
 8001322:	f7ff ffb5 	bl	8001290 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001326:	2010      	movs	r0, #16
 8001328:	f7ff ffb2 	bl	8001290 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800132c:	2040      	movs	r0, #64	; 0x40
 800132e:	f7ff ffaf 	bl	8001290 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8001332:	2081      	movs	r0, #129	; 0x81
 8001334:	f7ff ffac 	bl	8001290 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8001338:	20ff      	movs	r0, #255	; 0xff
 800133a:	f7ff ffa9 	bl	8001290 <ssd1306_WriteCommand>


#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800133e:	20a1      	movs	r0, #161	; 0xa1
 8001340:	f7ff ffa6 	bl	8001290 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001344:	20a6      	movs	r0, #166	; 0xa6
 8001346:	f7ff ffa3 	bl	8001290 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800134a:	20a8      	movs	r0, #168	; 0xa8
 800134c:	f7ff ffa0 	bl	8001290 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001350:	203f      	movs	r0, #63	; 0x3f
 8001352:	f7ff ff9d 	bl	8001290 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001356:	20a4      	movs	r0, #164	; 0xa4
 8001358:	f7ff ff9a 	bl	8001290 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800135c:	20d3      	movs	r0, #211	; 0xd3
 800135e:	f7ff ff97 	bl	8001290 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001362:	2000      	movs	r0, #0
 8001364:	f7ff ff94 	bl	8001290 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001368:	20d5      	movs	r0, #213	; 0xd5
 800136a:	f7ff ff91 	bl	8001290 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800136e:	20f0      	movs	r0, #240	; 0xf0
 8001370:	f7ff ff8e 	bl	8001290 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001374:	20d9      	movs	r0, #217	; 0xd9
 8001376:	f7ff ff8b 	bl	8001290 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800137a:	2022      	movs	r0, #34	; 0x22
 800137c:	f7ff ff88 	bl	8001290 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001380:	20da      	movs	r0, #218	; 0xda
 8001382:	f7ff ff85 	bl	8001290 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001386:	2012      	movs	r0, #18
 8001388:	f7ff ff82 	bl	8001290 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800138c:	20db      	movs	r0, #219	; 0xdb
 800138e:	f7ff ff7f 	bl	8001290 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001392:	2020      	movs	r0, #32
 8001394:	f7ff ff7c 	bl	8001290 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001398:	208d      	movs	r0, #141	; 0x8d
 800139a:	f7ff ff79 	bl	8001290 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800139e:	2014      	movs	r0, #20
 80013a0:	f7ff ff76 	bl	8001290 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80013a4:	20af      	movs	r0, #175	; 0xaf
 80013a6:	f7ff ff73 	bl	8001290 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f000 f810 	bl	80013d0 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80013b0:	f000 f830 	bl	8001414 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <ssd1306_Init+0xd8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80013ba:	4b04      	ldr	r3, [pc, #16]	; (80013cc <ssd1306_Init+0xd8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80013c0:	4b02      	ldr	r3, [pc, #8]	; (80013cc <ssd1306_Init+0xd8>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	715a      	strb	r2, [r3, #5]
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200004c0 	.word	0x200004c0

080013d0 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	e00d      	b.n	80013fc <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <ssd1306_Fill+0x1a>
 80013e6:	2100      	movs	r1, #0
 80013e8:	e000      	b.n	80013ec <ssd1306_Fill+0x1c>
 80013ea:	21ff      	movs	r1, #255	; 0xff
 80013ec:	4a08      	ldr	r2, [pc, #32]	; (8001410 <ssd1306_Fill+0x40>)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4413      	add	r3, r2
 80013f2:	460a      	mov	r2, r1
 80013f4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	3301      	adds	r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001402:	d3ed      	bcc.n	80013e0 <ssd1306_Fill+0x10>
    }
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	200000c0 	.word	0x200000c0

08001414 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800141a:	2300      	movs	r3, #0
 800141c:	71fb      	strb	r3, [r7, #7]
 800141e:	e016      	b.n	800144e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	3b50      	subs	r3, #80	; 0x50
 8001424:	b2db      	uxtb	r3, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff32 	bl	8001290 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff ff2f 	bl	8001290 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001432:	2010      	movs	r0, #16
 8001434:	f7ff ff2c 	bl	8001290 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	01db      	lsls	r3, r3, #7
 800143c:	4a07      	ldr	r2, [pc, #28]	; (800145c <ssd1306_UpdateScreen+0x48>)
 800143e:	4413      	add	r3, r2
 8001440:	2180      	movs	r1, #128	; 0x80
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ff3c 	bl	80012c0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	3301      	adds	r3, #1
 800144c:	71fb      	strb	r3, [r7, #7]
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b07      	cmp	r3, #7
 8001452:	d9e5      	bls.n	8001420 <ssd1306_UpdateScreen+0xc>
    }
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	200000c0 	.word	0x200000c0

08001460 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
 800146a:	460b      	mov	r3, r1
 800146c:	71bb      	strb	r3, [r7, #6]
 800146e:	4613      	mov	r3, r2
 8001470:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	2b00      	cmp	r3, #0
 8001478:	db48      	blt.n	800150c <ssd1306_DrawPixel+0xac>
 800147a:	79bb      	ldrb	r3, [r7, #6]
 800147c:	2b3f      	cmp	r3, #63	; 0x3f
 800147e:	d845      	bhi.n	800150c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8001480:	4b25      	ldr	r3, [pc, #148]	; (8001518 <ssd1306_DrawPixel+0xb8>)
 8001482:	791b      	ldrb	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8001488:	797b      	ldrb	r3, [r7, #5]
 800148a:	2b00      	cmp	r3, #0
 800148c:	bf0c      	ite	eq
 800148e:	2301      	moveq	r3, #1
 8001490:	2300      	movne	r3, #0
 8001492:	b2db      	uxtb	r3, r3
 8001494:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the right color
    if(color == White) {
 8001496:	797b      	ldrb	r3, [r7, #5]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d11a      	bne.n	80014d2 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800149c:	79fa      	ldrb	r2, [r7, #7]
 800149e:	79bb      	ldrb	r3, [r7, #6]
 80014a0:	08db      	lsrs	r3, r3, #3
 80014a2:	b2d8      	uxtb	r0, r3
 80014a4:	4603      	mov	r3, r0
 80014a6:	01db      	lsls	r3, r3, #7
 80014a8:	4413      	add	r3, r2
 80014aa:	4a1c      	ldr	r2, [pc, #112]	; (800151c <ssd1306_DrawPixel+0xbc>)
 80014ac:	5cd3      	ldrb	r3, [r2, r3]
 80014ae:	b25a      	sxtb	r2, r3
 80014b0:	79bb      	ldrb	r3, [r7, #6]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	2101      	movs	r1, #1
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	4313      	orrs	r3, r2
 80014c0:	b259      	sxtb	r1, r3
 80014c2:	79fa      	ldrb	r2, [r7, #7]
 80014c4:	4603      	mov	r3, r0
 80014c6:	01db      	lsls	r3, r3, #7
 80014c8:	4413      	add	r3, r2
 80014ca:	b2c9      	uxtb	r1, r1
 80014cc:	4a13      	ldr	r2, [pc, #76]	; (800151c <ssd1306_DrawPixel+0xbc>)
 80014ce:	54d1      	strb	r1, [r2, r3]
 80014d0:	e01d      	b.n	800150e <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80014d2:	79fa      	ldrb	r2, [r7, #7]
 80014d4:	79bb      	ldrb	r3, [r7, #6]
 80014d6:	08db      	lsrs	r3, r3, #3
 80014d8:	b2d8      	uxtb	r0, r3
 80014da:	4603      	mov	r3, r0
 80014dc:	01db      	lsls	r3, r3, #7
 80014de:	4413      	add	r3, r2
 80014e0:	4a0e      	ldr	r2, [pc, #56]	; (800151c <ssd1306_DrawPixel+0xbc>)
 80014e2:	5cd3      	ldrb	r3, [r2, r3]
 80014e4:	b25a      	sxtb	r2, r3
 80014e6:	79bb      	ldrb	r3, [r7, #6]
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	2101      	movs	r1, #1
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	b25b      	sxtb	r3, r3
 80014f8:	4013      	ands	r3, r2
 80014fa:	b259      	sxtb	r1, r3
 80014fc:	79fa      	ldrb	r2, [r7, #7]
 80014fe:	4603      	mov	r3, r0
 8001500:	01db      	lsls	r3, r3, #7
 8001502:	4413      	add	r3, r2
 8001504:	b2c9      	uxtb	r1, r1
 8001506:	4a05      	ldr	r2, [pc, #20]	; (800151c <ssd1306_DrawPixel+0xbc>)
 8001508:	54d1      	strb	r1, [r2, r3]
 800150a:	e000      	b.n	800150e <ssd1306_DrawPixel+0xae>
        return;
 800150c:	bf00      	nop
    }
}
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	200004c0 	.word	0x200004c0
 800151c:	200000c0 	.word	0x200000c0

08001520 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b089      	sub	sp, #36	; 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	4604      	mov	r4, r0
 8001528:	1d38      	adds	r0, r7, #4
 800152a:	e880 0006 	stmia.w	r0, {r1, r2}
 800152e:	461a      	mov	r2, r3
 8001530:	4623      	mov	r3, r4
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	4613      	mov	r3, r2
 8001536:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	2b1f      	cmp	r3, #31
 800153c:	d902      	bls.n	8001544 <ssd1306_WriteChar+0x24>
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	2b7e      	cmp	r3, #126	; 0x7e
 8001542:	d901      	bls.n	8001548 <ssd1306_WriteChar+0x28>
        return 0;
 8001544:	2300      	movs	r3, #0
 8001546:	e06d      	b.n	8001624 <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001548:	4b38      	ldr	r3, [pc, #224]	; (800162c <ssd1306_WriteChar+0x10c>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	793b      	ldrb	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	2b80      	cmp	r3, #128	; 0x80
 8001554:	dc06      	bgt.n	8001564 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001556:	4b35      	ldr	r3, [pc, #212]	; (800162c <ssd1306_WriteChar+0x10c>)
 8001558:	885b      	ldrh	r3, [r3, #2]
 800155a:	461a      	mov	r2, r3
 800155c:	797b      	ldrb	r3, [r7, #5]
 800155e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001560:	2b40      	cmp	r3, #64	; 0x40
 8001562:	dd01      	ble.n	8001568 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001564:	2300      	movs	r3, #0
 8001566:	e05d      	b.n	8001624 <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
 800156c:	e04c      	b.n	8001608 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	3b20      	subs	r3, #32
 8001574:	7979      	ldrb	r1, [r7, #5]
 8001576:	fb01 f303 	mul.w	r3, r1, r3
 800157a:	4619      	mov	r1, r3
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	440b      	add	r3, r1
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	4413      	add	r3, r2
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001588:	2300      	movs	r3, #0
 800158a:	61bb      	str	r3, [r7, #24]
 800158c:	e034      	b.n	80015f8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d012      	beq.n	80015c4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800159e:	4b23      	ldr	r3, [pc, #140]	; (800162c <ssd1306_WriteChar+0x10c>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	4413      	add	r3, r2
 80015aa:	b2d8      	uxtb	r0, r3
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <ssd1306_WriteChar+0x10c>)
 80015ae:	885b      	ldrh	r3, [r3, #2]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	4413      	add	r3, r2
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	7bba      	ldrb	r2, [r7, #14]
 80015bc:	4619      	mov	r1, r3
 80015be:	f7ff ff4f 	bl	8001460 <ssd1306_DrawPixel>
 80015c2:	e016      	b.n	80015f2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <ssd1306_WriteChar+0x10c>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	b2d8      	uxtb	r0, r3
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <ssd1306_WriteChar+0x10c>)
 80015d4:	885b      	ldrh	r3, [r3, #2]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	4413      	add	r3, r2
 80015de:	b2d9      	uxtb	r1, r3
 80015e0:	7bbb      	ldrb	r3, [r7, #14]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	bf0c      	ite	eq
 80015e6:	2301      	moveq	r3, #1
 80015e8:	2300      	movne	r3, #0
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	f7ff ff37 	bl	8001460 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	3301      	adds	r3, #1
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	793b      	ldrb	r3, [r7, #4]
 80015fa:	461a      	mov	r2, r3
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	4293      	cmp	r3, r2
 8001600:	d3c5      	bcc.n	800158e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3301      	adds	r3, #1
 8001606:	61fb      	str	r3, [r7, #28]
 8001608:	797b      	ldrb	r3, [r7, #5]
 800160a:	461a      	mov	r2, r3
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	4293      	cmp	r3, r2
 8001610:	d3ad      	bcc.n	800156e <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <ssd1306_WriteChar+0x10c>)
 8001614:	881a      	ldrh	r2, [r3, #0]
 8001616:	793b      	ldrb	r3, [r7, #4]
 8001618:	b29b      	uxth	r3, r3
 800161a:	4413      	add	r3, r2
 800161c:	b29a      	uxth	r2, r3
 800161e:	4b03      	ldr	r3, [pc, #12]	; (800162c <ssd1306_WriteChar+0x10c>)
 8001620:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3724      	adds	r7, #36	; 0x24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd90      	pop	{r4, r7, pc}
 800162c:	200004c0 	.word	0x200004c0

08001630 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	1d38      	adds	r0, r7, #4
 800163a:	e880 0006 	stmia.w	r0, {r1, r2}
 800163e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001640:	e012      	b.n	8001668 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	7818      	ldrb	r0, [r3, #0]
 8001646:	78fb      	ldrb	r3, [r7, #3]
 8001648:	1d3a      	adds	r2, r7, #4
 800164a:	ca06      	ldmia	r2, {r1, r2}
 800164c:	f7ff ff68 	bl	8001520 <ssd1306_WriteChar>
 8001650:	4603      	mov	r3, r0
 8001652:	461a      	mov	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d002      	beq.n	8001662 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	e008      	b.n	8001674 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3301      	adds	r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1e8      	bne.n	8001642 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	781b      	ldrb	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	460a      	mov	r2, r1
 8001686:	71fb      	strb	r3, [r7, #7]
 8001688:	4613      	mov	r3, r2
 800168a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	b29a      	uxth	r2, r3
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <ssd1306_SetCursor+0x2c>)
 8001692:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	b29a      	uxth	r2, r3
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <ssd1306_SetCursor+0x2c>)
 800169a:	805a      	strh	r2, [r3, #2]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	200004c0 	.word	0x200004c0

080016ac <BSP_LCD_GLASS_Init>:
/**
  * @brief  Initialize the LCD GLASS relative GPIO port IOs and LCD peripheral.
  * @retval None
  */
void BSP_LCD_GLASS_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  LCDHandle.Instance              = LCD;
 80016b0:	4b19      	ldr	r3, [pc, #100]	; (8001718 <BSP_LCD_GLASS_Init+0x6c>)
 80016b2:	4a1a      	ldr	r2, [pc, #104]	; (800171c <BSP_LCD_GLASS_Init+0x70>)
 80016b4:	601a      	str	r2, [r3, #0]
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <BSP_LCD_GLASS_Init+0x6c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	605a      	str	r2, [r3, #4]
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <BSP_LCD_GLASS_Init+0x6c>)
 80016be:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80016c2:	609a      	str	r2, [r3, #8]
#if defined (USE_STM32L476G_DISCO_REVC) || defined (USE_STM32L476G_DISCO_REVB)
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <BSP_LCD_GLASS_Init+0x6c>)
 80016c6:	220c      	movs	r2, #12
 80016c8:	60da      	str	r2, [r3, #12]
#elif defined (USE_STM32L476G_DISCO_REVA)
  LCDHandle.Init.Duty             = LCD_DUTY_1_8;
#endif
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 80016ca:	4b13      	ldr	r3, [pc, #76]	; (8001718 <BSP_LCD_GLASS_Init+0x6c>)
 80016cc:	2240      	movs	r2, #64	; 0x40
 80016ce:	611a      	str	r2, [r3, #16]
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <BSP_LCD_GLASS_Init+0x6c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	615a      	str	r2, [r3, #20]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <BSP_LCD_GLASS_Init+0x6c>)
 80016d8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80016dc:	619a      	str	r2, [r3, #24]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <BSP_LCD_GLASS_Init+0x6c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	61da      	str	r2, [r3, #28]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <BSP_LCD_GLASS_Init+0x6c>)
 80016e6:	2240      	movs	r2, #64	; 0x40
 80016e8:	621a      	str	r2, [r3, #32]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <BSP_LCD_GLASS_Init+0x6c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	625a      	str	r2, [r3, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <BSP_LCD_GLASS_Init+0x6c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	629a      	str	r2, [r3, #40]	; 0x28
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <BSP_LCD_GLASS_Init+0x6c>)
 80016f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016fc:	62da      	str	r2, [r3, #44]	; 0x2c
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <BSP_LCD_GLASS_Init+0x6c>)
 8001700:	2200      	movs	r2, #0
 8001702:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the LCD */
  LCD_MspInit(&LCDHandle);
 8001704:	4804      	ldr	r0, [pc, #16]	; (8001718 <BSP_LCD_GLASS_Init+0x6c>)
 8001706:	f000 f815 	bl	8001734 <LCD_MspInit>
  HAL_LCD_Init(&LCDHandle);
 800170a:	4803      	ldr	r0, [pc, #12]	; (8001718 <BSP_LCD_GLASS_Init+0x6c>)
 800170c:	f002 fe5e 	bl	80043cc <HAL_LCD_Init>

  BSP_LCD_GLASS_Clear();
 8001710:	f000 f806 	bl	8001720 <BSP_LCD_GLASS_Clear>
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200007a4 	.word	0x200007a4
 800171c:	40002400 	.word	0x40002400

08001720 <BSP_LCD_GLASS_Clear>:
/**
  * @brief  Clear the whole LCD RAM buffer.
  * @retval None
  */
void BSP_LCD_GLASS_Clear(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  HAL_LCD_Clear(&LCDHandle);
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <BSP_LCD_GLASS_Clear+0x10>)
 8001726:	f002 ff11 	bl	800454c <HAL_LCD_Clear>
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200007a4 	.word	0x200007a4

08001734 <LCD_MspInit>:
  * @brief  Initialize the LCD MSP.
  * @param  hlcd: LCD handle
  * @retval None
  */
static void LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b0c0      	sub	sp, #256	; 0x100
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800173c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 800174c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001750:	2244      	movs	r2, #68	; 0x44
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f009 facf 	bl	800acf8 <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 800175a:	f107 0320 	add.w	r3, r7, #32
 800175e:	2288      	movs	r2, #136	; 0x88
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f009 fac8 	bl	800acf8 <memset>

  /*##-1- Enable PWR  peripheral Clock #######################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8001768:	4b51      	ldr	r3, [pc, #324]	; (80018b0 <LCD_MspInit+0x17c>)
 800176a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176c:	4a50      	ldr	r2, [pc, #320]	; (80018b0 <LCD_MspInit+0x17c>)
 800176e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001772:	6593      	str	r3, [r2, #88]	; 0x58
 8001774:	4b4e      	ldr	r3, [pc, #312]	; (80018b0 <LCD_MspInit+0x17c>)
 8001776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177c:	61fb      	str	r3, [r7, #28]
 800177e:	69fb      	ldr	r3, [r7, #28]

  /*##-2- Configure LSE as RTC clock soucre ###################################*/
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 8001780:	2304      	movs	r3, #4
 8001782:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  oscinitstruct.PLL.PLLState    = RCC_PLL_NONE;
 8001786:	2300      	movs	r3, #0
 8001788:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  oscinitstruct.LSEState        = RCC_LSE_ON;
 800178c:	2301      	movs	r3, #1
 800178e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 8001792:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001796:	4618      	mov	r0, r3
 8001798:	f003 f8d4 	bl	8004944 <HAL_RCC_OscConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d000      	beq.n	80017a4 <LCD_MspInit+0x70>
  {
    while (1);
 80017a2:	e7fe      	b.n	80017a2 <LCD_MspInit+0x6e>
  }

  /*##-3- Select LSE as RTC clock source.##########################*/
  /* Backup domain management is done in RCC function */
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017a8:	623b      	str	r3, [r7, #32]
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80017aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 80017b2:	f107 0320 	add.w	r3, r7, #32
 80017b6:	4618      	mov	r0, r3
 80017b8:	f003 fe78 	bl	80054ac <HAL_RCCEx_PeriphCLKConfig>

  /*##-4- Enable LCD GPIO Clocks #############################################*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017bc:	4b3c      	ldr	r3, [pc, #240]	; (80018b0 <LCD_MspInit+0x17c>)
 80017be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c0:	4a3b      	ldr	r2, [pc, #236]	; (80018b0 <LCD_MspInit+0x17c>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c8:	4b39      	ldr	r3, [pc, #228]	; (80018b0 <LCD_MspInit+0x17c>)
 80017ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	61bb      	str	r3, [r7, #24]
 80017d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d4:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <LCD_MspInit+0x17c>)
 80017d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d8:	4a35      	ldr	r2, [pc, #212]	; (80018b0 <LCD_MspInit+0x17c>)
 80017da:	f043 0302 	orr.w	r3, r3, #2
 80017de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e0:	4b33      	ldr	r3, [pc, #204]	; (80018b0 <LCD_MspInit+0x17c>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ec:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <LCD_MspInit+0x17c>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f0:	4a2f      	ldr	r2, [pc, #188]	; (80018b0 <LCD_MspInit+0x17c>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f8:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <LCD_MspInit+0x17c>)
 80017fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001804:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <LCD_MspInit+0x17c>)
 8001806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001808:	4a29      	ldr	r2, [pc, #164]	; (80018b0 <LCD_MspInit+0x17c>)
 800180a:	f043 0308 	orr.w	r3, r3, #8
 800180e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001810:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <LCD_MspInit+0x17c>)
 8001812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]


  /*##-5- Configure peripheral GPIO ##########################################*/
  /* Configure Output for LCD */
  /* Port A */
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 800181c:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8001820:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  gpioinitstruct.Pull       = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  gpioinitstruct.Speed      = GPIO_SPEED_FREQ_VERY_HIGH;
 8001830:	2303      	movs	r3, #3
 8001832:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 8001836:	230b      	movs	r3, #11
 8001838:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 800183c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001840:	4619      	mov	r1, r3
 8001842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001846:	f000 fb97 	bl	8001f78 <HAL_GPIO_Init>

  /* Port B */
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 800184a:	f24f 2333 	movw	r3, #62003	; 0xf233
 800184e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 8001852:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001856:	4619      	mov	r1, r3
 8001858:	4816      	ldr	r0, [pc, #88]	; (80018b4 <LCD_MspInit+0x180>)
 800185a:	f000 fb8d 	bl	8001f78 <HAL_GPIO_Init>

  /* Port C*/
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 800185e:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001862:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8001866:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800186a:	4619      	mov	r1, r3
 800186c:	4812      	ldr	r0, [pc, #72]	; (80018b8 <LCD_MspInit+0x184>)
 800186e:	f000 fb83 	bl	8001f78 <HAL_GPIO_Init>

  /* Port D */
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 8001872:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001876:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 800187a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800187e:	4619      	mov	r1, r3
 8001880:	480e      	ldr	r0, [pc, #56]	; (80018bc <LCD_MspInit+0x188>)
 8001882:	f000 fb79 	bl	8001f78 <HAL_GPIO_Init>

  /* Wait for the external capacitor Cext which is connected to the VLCD pin is charged
  (approximately 2ms for Cext=1uF) */
  HAL_Delay(2);
 8001886:	2002      	movs	r0, #2
 8001888:	f000 fa2a 	bl	8001ce0 <HAL_Delay>

  /*##-6- Enable LCD peripheral Clock ########################################*/
  __HAL_RCC_LCD_CLK_ENABLE();
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <LCD_MspInit+0x17c>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001890:	4a07      	ldr	r2, [pc, #28]	; (80018b0 <LCD_MspInit+0x17c>)
 8001892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001896:	6593      	str	r3, [r2, #88]	; 0x58
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <LCD_MspInit+0x17c>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
}
 80018a4:	bf00      	nop
 80018a6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	48000400 	.word	0x48000400
 80018b8:	48000800 	.word	0x48000800
 80018bc:	48000c00 	.word	0x48000c00

080018c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <HAL_MspInit+0x44>)
 80018c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ca:	4a0e      	ldr	r2, [pc, #56]	; (8001904 <HAL_MspInit+0x44>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6613      	str	r3, [r2, #96]	; 0x60
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <HAL_MspInit+0x44>)
 80018d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <HAL_MspInit+0x44>)
 80018e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e2:	4a08      	ldr	r2, [pc, #32]	; (8001904 <HAL_MspInit+0x44>)
 80018e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e8:	6593      	str	r3, [r2, #88]	; 0x58
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_MspInit+0x44>)
 80018ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <HardFault_Handler+0x4>

0800191c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <MemManage_Handler+0x4>

08001922 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <BusFault_Handler+0x4>

08001928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <UsageFault_Handler+0x4>

0800192e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800195c:	f000 f9a2 	bl	8001ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}

08001964 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001968:	4802      	ldr	r0, [pc, #8]	; (8001974 <OTG_FS_IRQHandler+0x10>)
 800196a:	f000 ff47 	bl	80027fc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000c30 	.word	0x20000c30

08001978 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <_sbrk+0x50>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <_sbrk+0x16>
		heap_end = &end;
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <_sbrk+0x50>)
 800198a:	4a10      	ldr	r2, [pc, #64]	; (80019cc <_sbrk+0x54>)
 800198c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <_sbrk+0x50>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <_sbrk+0x50>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4413      	add	r3, r2
 800199c:	466a      	mov	r2, sp
 800199e:	4293      	cmp	r3, r2
 80019a0:	d907      	bls.n	80019b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80019a2:	f009 f96f 	bl	800ac84 <__errno>
 80019a6:	4602      	mov	r2, r0
 80019a8:	230c      	movs	r3, #12
 80019aa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
 80019b0:	e006      	b.n	80019c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <_sbrk+0x50>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	4a03      	ldr	r2, [pc, #12]	; (80019c8 <_sbrk+0x50>)
 80019bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80019be:	68fb      	ldr	r3, [r7, #12]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200004c8 	.word	0x200004c8
 80019cc:	20000ef8 	.word	0x20000ef8

080019d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <SystemInit+0x64>)
 80019d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019da:	4a16      	ldr	r2, [pc, #88]	; (8001a34 <SystemInit+0x64>)
 80019dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80019e4:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <SystemInit+0x68>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a13      	ldr	r2, [pc, #76]	; (8001a38 <SystemInit+0x68>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <SystemInit+0x68>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <SystemInit+0x68>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a0f      	ldr	r2, [pc, #60]	; (8001a38 <SystemInit+0x68>)
 80019fc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a00:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a04:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <SystemInit+0x68>)
 8001a08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a0c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <SystemInit+0x68>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a09      	ldr	r2, [pc, #36]	; (8001a38 <SystemInit+0x68>)
 8001a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a18:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <SystemInit+0x68>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <SystemInit+0x64>)
 8001a22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a26:	609a      	str	r2, [r3, #8]
#endif
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000ed00 	.word	0xe000ed00
 8001a38:	40021000 	.word	0x40021000

08001a3c <Test_program>:
 * and some extra functions to better understand how different commands
 * and hardware works.
@author  Daniel Gripenstedt
@return void */
void Test_program(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
	//test_UART();
	//test_wifi();
	//test_tcp();
	//test_clock();
	//test_print_oled_message();
	test_esp_ok();
 8001a40:	f000 f802 	bl	8001a48 <test_esp_ok>
	//test_oled();
	//test_message_timer();
	//test_watchdog();
	//test_systemReset();
	//test_esp_error_handler();
}/*End of function Test_program*/
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <test_esp_ok>:
/** @brief test_esp_ok, print OK if a string has OK
 * otherwise print ERROR
@author  Daniel Gripenstedt
@return void */
void test_esp_ok()
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	BSP_LCD_GLASS_Init();
 8001a4c:	f7ff fe2e 	bl	80016ac <BSP_LCD_GLASS_Init>
	HAL_Delay(1000);	//wait for ESP to start
 8001a50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a54:	f000 f944 	bl	8001ce0 <HAL_Delay>
	ssd1306_Init();
 8001a58:	f7ff fc4c 	bl	80012f4 <ssd1306_Init>
	ssd1306_Fill(Black);
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7ff fcb7 	bl	80013d0 <ssd1306_Fill>
	while(1)
	{
		if (esp_ok() == true)
 8001a62:	f7ff f92d 	bl	8000cc0 <esp_ok>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d110      	bne.n	8001a8e <test_esp_ok+0x46>
		{
			ssd1306_Fill(Black);
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f7ff fcaf 	bl	80013d0 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8001a72:	f7ff fccf 	bl	8001414 <ssd1306_UpdateScreen>
			ssd1306_SetCursor(2, 26);
 8001a76:	211a      	movs	r1, #26
 8001a78:	2002      	movs	r0, #2
 8001a7a:	f7ff fdff 	bl	800167c <ssd1306_SetCursor>
			ssd1306_WriteString("OK", Font_16x26, White);
 8001a7e:	4a0c      	ldr	r2, [pc, #48]	; (8001ab0 <test_esp_ok+0x68>)
 8001a80:	2301      	movs	r3, #1
 8001a82:	ca06      	ldmia	r2, {r1, r2}
 8001a84:	480b      	ldr	r0, [pc, #44]	; (8001ab4 <test_esp_ok+0x6c>)
 8001a86:	f7ff fdd3 	bl	8001630 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8001a8a:	f7ff fcc3 	bl	8001414 <ssd1306_UpdateScreen>
		}

		HAL_Delay(20000);
 8001a8e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001a92:	f000 f925 	bl	8001ce0 <HAL_Delay>

		if(esp_ok() == false)
 8001a96:	f7ff f913 	bl	8000cc0 <esp_ok>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <test_esp_ok+0x5c>
		{
			esp_error_handler();
 8001aa0:	f7ff f94c 	bl	8000d3c <esp_error_handler>
		}

		HAL_Delay(20000);
 8001aa4:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001aa8:	f000 f91a 	bl	8001ce0 <HAL_Delay>
		if (esp_ok() == true)
 8001aac:	e7d9      	b.n	8001a62 <test_esp_ok+0x1a>
 8001aae:	bf00      	nop
 8001ab0:	20000008 	.word	0x20000008
 8001ab4:	0800b100 	.word	0x0800b100

08001ab8 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001abc:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <MX_UART4_Init+0x58>)
 8001abe:	4a15      	ldr	r2, [pc, #84]	; (8001b14 <MX_UART4_Init+0x5c>)
 8001ac0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <MX_UART4_Init+0x58>)
 8001ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <MX_UART4_Init+0x58>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <MX_UART4_Init+0x58>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <MX_UART4_Init+0x58>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <MX_UART4_Init+0x58>)
 8001ade:	220c      	movs	r2, #12
 8001ae0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <MX_UART4_Init+0x58>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <MX_UART4_Init+0x58>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <MX_UART4_Init+0x58>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <MX_UART4_Init+0x58>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001afa:	4805      	ldr	r0, [pc, #20]	; (8001b10 <MX_UART4_Init+0x58>)
 8001afc:	f005 fb64 	bl	80071c8 <HAL_UART_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001b06:	f7ff f8d3 	bl	8000cb0 <Error_Handler>
  }

}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200007e0 	.word	0x200007e0
 8001b14:	40004c00 	.word	0x40004c00

08001b18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08a      	sub	sp, #40	; 0x28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a17      	ldr	r2, [pc, #92]	; (8001b94 <HAL_UART_MspInit+0x7c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d128      	bne.n	8001b8c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b3a:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <HAL_UART_MspInit+0x80>)
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3e:	4a16      	ldr	r2, [pc, #88]	; (8001b98 <HAL_UART_MspInit+0x80>)
 8001b40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b44:	6593      	str	r3, [r2, #88]	; 0x58
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <HAL_UART_MspInit+0x80>)
 8001b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <HAL_UART_MspInit+0x80>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	4a10      	ldr	r2, [pc, #64]	; (8001b98 <HAL_UART_MspInit+0x80>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <HAL_UART_MspInit+0x80>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b76:	2303      	movs	r3, #3
 8001b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b7a:	2308      	movs	r3, #8
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b88:	f000 f9f6 	bl	8001f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	3728      	adds	r7, #40	; 0x28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40004c00 	.word	0x40004c00
 8001b98:	40021000 	.word	0x40021000

08001b9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bd4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ba0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ba2:	e003      	b.n	8001bac <LoopCopyDataInit>

08001ba4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ba6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ba8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001baa:	3104      	adds	r1, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001bac:	480b      	ldr	r0, [pc, #44]	; (8001bdc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001bb0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bb2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001bb4:	d3f6      	bcc.n	8001ba4 <CopyDataInit>
	ldr	r2, =_sbss
 8001bb6:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001bb8:	e002      	b.n	8001bc0 <LoopFillZerobss>

08001bba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001bbc:	f842 3b04 	str.w	r3, [r2], #4

08001bc0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <LoopForever+0x16>)
	cmp	r2, r3
 8001bc2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001bc4:	d3f9      	bcc.n	8001bba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bc6:	f7ff ff03 	bl	80019d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bca:	f009 f861 	bl	800ac90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bce:	f7fe ffa3 	bl	8000b18 <main>

08001bd2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bd2:	e7fe      	b.n	8001bd2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bd4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001bd8:	0800d214 	.word	0x0800d214
	ldr	r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001be0:	200000a0 	.word	0x200000a0
	ldr	r2, =_sbss
 8001be4:	200000a0 	.word	0x200000a0
	ldr	r3, = _ebss
 8001be8:	20000ef8 	.word	0x20000ef8

08001bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bec:	e7fe      	b.n	8001bec <ADC1_2_IRQHandler>
	...

08001bf0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <HAL_Init+0x3c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a0b      	ldr	r2, [pc, #44]	; (8001c2c <HAL_Init+0x3c>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c04:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c06:	2003      	movs	r0, #3
 8001c08:	f000 f970 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f000 f80f 	bl	8001c30 <HAL_InitTick>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	71fb      	strb	r3, [r7, #7]
 8001c1c:	e001      	b.n	8001c22 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c1e:	f7ff fe4f 	bl	80018c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c22:	79fb      	ldrb	r3, [r7, #7]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40022000 	.word	0x40022000

08001c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c3c:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <HAL_InitTick+0x68>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d022      	beq.n	8001c8a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c44:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <HAL_InitTick+0x6c>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <HAL_InitTick+0x68>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c50:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 f980 	bl	8001f5e <HAL_SYSTICK_Config>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10f      	bne.n	8001c84 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b0f      	cmp	r3, #15
 8001c68:	d809      	bhi.n	8001c7e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c72:	f000 f946 	bl	8001f02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c76:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <HAL_InitTick+0x70>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	e007      	b.n	8001c8e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	73fb      	strb	r3, [r7, #15]
 8001c82:	e004      	b.n	8001c8e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	e001      	b.n	8001c8e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000018 	.word	0x20000018
 8001c9c:	20000010 	.word	0x20000010
 8001ca0:	20000014 	.word	0x20000014

08001ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_IncTick+0x1c>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_IncTick+0x20>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <HAL_IncTick+0x1c>)
 8001cb4:	6013      	str	r3, [r2, #0]
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	20000860 	.word	0x20000860
 8001cc4:	20000018 	.word	0x20000018

08001cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <HAL_GetTick+0x14>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000860 	.word	0x20000860

08001ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce8:	f7ff ffee 	bl	8001cc8 <HAL_GetTick>
 8001cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf8:	d004      	beq.n	8001d04 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_Delay+0x40>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4413      	add	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d04:	bf00      	nop
 8001d06:	f7ff ffdf 	bl	8001cc8 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d8f7      	bhi.n	8001d06 <HAL_Delay+0x26>
  {
  }
}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000018 	.word	0x20000018

08001d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d40:	4013      	ands	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d56:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	60d3      	str	r3, [r2, #12]
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <__NVIC_GetPriorityGrouping+0x18>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	f003 0307 	and.w	r3, r3, #7
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	db0b      	blt.n	8001db2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	f003 021f 	and.w	r2, r3, #31
 8001da0:	4907      	ldr	r1, [pc, #28]	; (8001dc0 <__NVIC_EnableIRQ+0x38>)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	2001      	movs	r0, #1
 8001daa:	fa00 f202 	lsl.w	r2, r0, r2
 8001dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000e100 	.word	0xe000e100

08001dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	db0a      	blt.n	8001dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	490c      	ldr	r1, [pc, #48]	; (8001e10 <__NVIC_SetPriority+0x4c>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	0112      	lsls	r2, r2, #4
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	440b      	add	r3, r1
 8001de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dec:	e00a      	b.n	8001e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4908      	ldr	r1, [pc, #32]	; (8001e14 <__NVIC_SetPriority+0x50>)
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	3b04      	subs	r3, #4
 8001dfc:	0112      	lsls	r2, r2, #4
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	440b      	add	r3, r1
 8001e02:	761a      	strb	r2, [r3, #24]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000e100 	.word	0xe000e100
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f1c3 0307 	rsb	r3, r3, #7
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	bf28      	it	cs
 8001e36:	2304      	movcs	r3, #4
 8001e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d902      	bls.n	8001e48 <NVIC_EncodePriority+0x30>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3b03      	subs	r3, #3
 8001e46:	e000      	b.n	8001e4a <NVIC_EncodePriority+0x32>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43da      	mvns	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e60:	f04f 31ff 	mov.w	r1, #4294967295
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43d9      	mvns	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	4313      	orrs	r3, r2
         );
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3724      	adds	r7, #36	; 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e84:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <__NVIC_SystemReset+0x20>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001e90:	4903      	ldr	r1, [pc, #12]	; (8001ea0 <__NVIC_SystemReset+0x20>)
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <__NVIC_SystemReset+0x24>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	60cb      	str	r3, [r1, #12]
 8001e98:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001e9c:	bf00      	nop
 8001e9e:	e7fd      	b.n	8001e9c <__NVIC_SystemReset+0x1c>
 8001ea0:	e000ed00 	.word	0xe000ed00
 8001ea4:	05fa0004 	.word	0x05fa0004

08001ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb8:	d301      	bcc.n	8001ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00f      	b.n	8001ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <SysTick_Config+0x40>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec6:	210f      	movs	r1, #15
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f7ff ff7a 	bl	8001dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed6:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed8:	2207      	movs	r2, #7
 8001eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	e000e010 	.word	0xe000e010

08001eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff15 	bl	8001d24 <__NVIC_SetPriorityGrouping>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f14:	f7ff ff2a 	bl	8001d6c <__NVIC_GetPriorityGrouping>
 8001f18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	6978      	ldr	r0, [r7, #20]
 8001f20:	f7ff ff7a 	bl	8001e18 <NVIC_EncodePriority>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff49 	bl	8001dc4 <__NVIC_SetPriority>
}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff1d 	bl	8001d88 <__NVIC_EnableIRQ>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001f5a:	f7ff ff91 	bl	8001e80 <__NVIC_SystemReset>

08001f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff ff9e 	bl	8001ea8 <SysTick_Config>
 8001f6c:	4603      	mov	r3, r0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f86:	e17f      	b.n	8002288 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	4013      	ands	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 8171 	beq.w	8002282 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x38>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b12      	cmp	r3, #18
 8001fae:	d123      	bne.n	8001ff8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	08da      	lsrs	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3208      	adds	r2, #8
 8001fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	220f      	movs	r2, #15
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	6939      	ldr	r1, [r7, #16]
 8001ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	2203      	movs	r2, #3
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0203 	and.w	r2, r3, #3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d00b      	beq.n	800204c <HAL_GPIO_Init+0xd4>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d007      	beq.n	800204c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002040:	2b11      	cmp	r3, #17
 8002042:	d003      	beq.n	800204c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b12      	cmp	r3, #18
 800204a:	d130      	bne.n	80020ae <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002082:	2201      	movs	r2, #1
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	091b      	lsrs	r3, r3, #4
 8002098:	f003 0201 	and.w	r2, r3, #1
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d118      	bne.n	80020ec <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80020c0:	2201      	movs	r2, #1
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	08db      	lsrs	r3, r3, #3
 80020d6:	f003 0201 	and.w	r2, r3, #1
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	2203      	movs	r2, #3
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80ac 	beq.w	8002282 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212a:	4b5e      	ldr	r3, [pc, #376]	; (80022a4 <HAL_GPIO_Init+0x32c>)
 800212c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212e:	4a5d      	ldr	r2, [pc, #372]	; (80022a4 <HAL_GPIO_Init+0x32c>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6613      	str	r3, [r2, #96]	; 0x60
 8002136:	4b5b      	ldr	r3, [pc, #364]	; (80022a4 <HAL_GPIO_Init+0x32c>)
 8002138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002142:	4a59      	ldr	r2, [pc, #356]	; (80022a8 <HAL_GPIO_Init+0x330>)
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4013      	ands	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800216c:	d025      	beq.n	80021ba <HAL_GPIO_Init+0x242>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a4e      	ldr	r2, [pc, #312]	; (80022ac <HAL_GPIO_Init+0x334>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d01f      	beq.n	80021b6 <HAL_GPIO_Init+0x23e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4d      	ldr	r2, [pc, #308]	; (80022b0 <HAL_GPIO_Init+0x338>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d019      	beq.n	80021b2 <HAL_GPIO_Init+0x23a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4c      	ldr	r2, [pc, #304]	; (80022b4 <HAL_GPIO_Init+0x33c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d013      	beq.n	80021ae <HAL_GPIO_Init+0x236>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4b      	ldr	r2, [pc, #300]	; (80022b8 <HAL_GPIO_Init+0x340>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00d      	beq.n	80021aa <HAL_GPIO_Init+0x232>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4a      	ldr	r2, [pc, #296]	; (80022bc <HAL_GPIO_Init+0x344>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d007      	beq.n	80021a6 <HAL_GPIO_Init+0x22e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a49      	ldr	r2, [pc, #292]	; (80022c0 <HAL_GPIO_Init+0x348>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d101      	bne.n	80021a2 <HAL_GPIO_Init+0x22a>
 800219e:	2306      	movs	r3, #6
 80021a0:	e00c      	b.n	80021bc <HAL_GPIO_Init+0x244>
 80021a2:	2307      	movs	r3, #7
 80021a4:	e00a      	b.n	80021bc <HAL_GPIO_Init+0x244>
 80021a6:	2305      	movs	r3, #5
 80021a8:	e008      	b.n	80021bc <HAL_GPIO_Init+0x244>
 80021aa:	2304      	movs	r3, #4
 80021ac:	e006      	b.n	80021bc <HAL_GPIO_Init+0x244>
 80021ae:	2303      	movs	r3, #3
 80021b0:	e004      	b.n	80021bc <HAL_GPIO_Init+0x244>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e002      	b.n	80021bc <HAL_GPIO_Init+0x244>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_GPIO_Init+0x244>
 80021ba:	2300      	movs	r3, #0
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	f002 0203 	and.w	r2, r2, #3
 80021c2:	0092      	lsls	r2, r2, #2
 80021c4:	4093      	lsls	r3, r2
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021cc:	4936      	ldr	r1, [pc, #216]	; (80022a8 <HAL_GPIO_Init+0x330>)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	3302      	adds	r3, #2
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021da:	4b3a      	ldr	r3, [pc, #232]	; (80022c4 <HAL_GPIO_Init+0x34c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4013      	ands	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021fe:	4a31      	ldr	r2, [pc, #196]	; (80022c4 <HAL_GPIO_Init+0x34c>)
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002204:	4b2f      	ldr	r3, [pc, #188]	; (80022c4 <HAL_GPIO_Init+0x34c>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	43db      	mvns	r3, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002228:	4a26      	ldr	r2, [pc, #152]	; (80022c4 <HAL_GPIO_Init+0x34c>)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800222e:	4b25      	ldr	r3, [pc, #148]	; (80022c4 <HAL_GPIO_Init+0x34c>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002252:	4a1c      	ldr	r2, [pc, #112]	; (80022c4 <HAL_GPIO_Init+0x34c>)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002258:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <HAL_GPIO_Init+0x34c>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	43db      	mvns	r3, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800227c:	4a11      	ldr	r2, [pc, #68]	; (80022c4 <HAL_GPIO_Init+0x34c>)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	3301      	adds	r3, #1
 8002286:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	f47f ae78 	bne.w	8001f88 <HAL_GPIO_Init+0x10>
  }
}
 8002298:	bf00      	nop
 800229a:	371c      	adds	r7, #28
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40010000 	.word	0x40010000
 80022ac:	48000400 	.word	0x48000400
 80022b0:	48000800 	.word	0x48000800
 80022b4:	48000c00 	.word	0x48000c00
 80022b8:	48001000 	.word	0x48001000
 80022bc:	48001400 	.word	0x48001400
 80022c0:	48001800 	.word	0x48001800
 80022c4:	40010400 	.word	0x40010400

080022c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	807b      	strh	r3, [r7, #2]
 80022d4:	4613      	mov	r3, r2
 80022d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022d8:	787b      	ldrb	r3, [r7, #1]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022de:	887a      	ldrh	r2, [r7, #2]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022e4:	e002      	b.n	80022ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022e6:	887a      	ldrh	r2, [r7, #2]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80022f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022fa:	b08f      	sub	sp, #60	; 0x3c
 80022fc:	af0a      	add	r7, sp, #40	; 0x28
 80022fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e054      	b.n	80023b4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d106      	bne.n	800232a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f008 f9ff 	bl	800a728 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2203      	movs	r2, #3
 800232e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	2b00      	cmp	r3, #0
 800233c:	d102      	bne.n	8002344 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f005 fdc5 	bl	8007ed8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	687e      	ldr	r6, [r7, #4]
 8002356:	466d      	mov	r5, sp
 8002358:	f106 0410 	add.w	r4, r6, #16
 800235c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800235e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002364:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002368:	e885 0003 	stmia.w	r5, {r0, r1}
 800236c:	1d33      	adds	r3, r6, #4
 800236e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002370:	6838      	ldr	r0, [r7, #0]
 8002372:	f005 fd4e 	bl	8007e12 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2101      	movs	r1, #1
 800237c:	4618      	mov	r0, r3
 800237e:	f005 fdbc 	bl	8007efa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	687e      	ldr	r6, [r7, #4]
 800238a:	466d      	mov	r5, sp
 800238c:	f106 0410 	add.w	r4, r6, #16
 8002390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002392:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002398:	e894 0003 	ldmia.w	r4, {r0, r1}
 800239c:	e885 0003 	stmia.w	r5, {r0, r1}
 80023a0:	1d33      	adds	r3, r6, #4
 80023a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a4:	6838      	ldr	r0, [r7, #0]
 80023a6:	f005 fecb 	bl	8008140 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023bc <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b089      	sub	sp, #36	; 0x24
 80023c0:	af04      	add	r7, sp, #16
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	4608      	mov	r0, r1
 80023c6:	4611      	mov	r1, r2
 80023c8:	461a      	mov	r2, r3
 80023ca:	4603      	mov	r3, r0
 80023cc:	70fb      	strb	r3, [r7, #3]
 80023ce:	460b      	mov	r3, r1
 80023d0:	70bb      	strb	r3, [r7, #2]
 80023d2:	4613      	mov	r3, r2
 80023d4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_HCD_HC_Init+0x28>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e07f      	b.n	80024e4 <HAL_HCD_HC_Init+0x128>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	440b      	add	r3, r1
 80023fa:	333d      	adds	r3, #61	; 0x3d
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	440b      	add	r3, r1
 800240e:	3338      	adds	r3, #56	; 0x38
 8002410:	787a      	ldrb	r2, [r7, #1]
 8002412:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	440b      	add	r3, r1
 8002422:	3340      	adds	r3, #64	; 0x40
 8002424:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002426:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	440b      	add	r3, r1
 8002436:	3339      	adds	r3, #57	; 0x39
 8002438:	78fa      	ldrb	r2, [r7, #3]
 800243a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	440b      	add	r3, r1
 800244a:	333f      	adds	r3, #63	; 0x3f
 800244c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002450:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002452:	78fa      	ldrb	r2, [r7, #3]
 8002454:	78bb      	ldrb	r3, [r7, #2]
 8002456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800245a:	b2d8      	uxtb	r0, r3
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	440b      	add	r3, r1
 8002468:	333a      	adds	r3, #58	; 0x3a
 800246a:	4602      	mov	r2, r0
 800246c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800246e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002472:	2b00      	cmp	r3, #0
 8002474:	da0a      	bge.n	800248c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002476:	78fa      	ldrb	r2, [r7, #3]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	440b      	add	r3, r1
 8002484:	333b      	adds	r3, #59	; 0x3b
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	e009      	b.n	80024a0 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800248c:	78fa      	ldrb	r2, [r7, #3]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	440b      	add	r3, r1
 800249a:	333b      	adds	r3, #59	; 0x3b
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80024a0:	78fa      	ldrb	r2, [r7, #3]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	440b      	add	r3, r1
 80024ae:	333c      	adds	r3, #60	; 0x3c
 80024b0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80024b4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	787c      	ldrb	r4, [r7, #1]
 80024bc:	78ba      	ldrb	r2, [r7, #2]
 80024be:	78f9      	ldrb	r1, [r7, #3]
 80024c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80024c2:	9302      	str	r3, [sp, #8]
 80024c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	4623      	mov	r3, r4
 80024d2:	f005 ff79 	bl	80083c8 <USB_HC_Init>
 80024d6:	4603      	mov	r3, r0
 80024d8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd90      	pop	{r4, r7, pc}

080024ec <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_HCD_HC_Halt+0x1e>
 8002506:	2302      	movs	r3, #2
 8002508:	e00f      	b.n	800252a <HAL_HCD_HC_Halt+0x3e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	78fa      	ldrb	r2, [r7, #3]
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f006 f957 	bl	80087ce <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002528:	7bfb      	ldrb	r3, [r7, #15]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	4608      	mov	r0, r1
 800253e:	4611      	mov	r1, r2
 8002540:	461a      	mov	r2, r3
 8002542:	4603      	mov	r3, r0
 8002544:	70fb      	strb	r3, [r7, #3]
 8002546:	460b      	mov	r3, r1
 8002548:	70bb      	strb	r3, [r7, #2]
 800254a:	4613      	mov	r3, r2
 800254c:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800254e:	78fa      	ldrb	r2, [r7, #3]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	440b      	add	r3, r1
 800255c:	333b      	adds	r3, #59	; 0x3b
 800255e:	78ba      	ldrb	r2, [r7, #2]
 8002560:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002562:	78fa      	ldrb	r2, [r7, #3]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	440b      	add	r3, r1
 8002570:	333f      	adds	r3, #63	; 0x3f
 8002572:	787a      	ldrb	r2, [r7, #1]
 8002574:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002576:	7c3b      	ldrb	r3, [r7, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10a      	bne.n	8002592 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	440b      	add	r3, r1
 800258a:	3342      	adds	r3, #66	; 0x42
 800258c:	2203      	movs	r2, #3
 800258e:	701a      	strb	r2, [r3, #0]
 8002590:	e009      	b.n	80025a6 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002592:	78fa      	ldrb	r2, [r7, #3]
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	440b      	add	r3, r1
 80025a0:	3342      	adds	r3, #66	; 0x42
 80025a2:	2202      	movs	r2, #2
 80025a4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80025a6:	787b      	ldrb	r3, [r7, #1]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	f200 80d6 	bhi.w	800275a <HAL_HCD_HC_SubmitRequest+0x226>
 80025ae:	a201      	add	r2, pc, #4	; (adr r2, 80025b4 <HAL_HCD_HC_SubmitRequest+0x80>)
 80025b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b4:	080025c5 	.word	0x080025c5
 80025b8:	08002745 	.word	0x08002745
 80025bc:	08002631 	.word	0x08002631
 80025c0:	080026bb 	.word	0x080026bb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80025c4:	7c3b      	ldrb	r3, [r7, #16]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	f040 80c9 	bne.w	800275e <HAL_HCD_HC_SubmitRequest+0x22a>
 80025cc:	78bb      	ldrb	r3, [r7, #2]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f040 80c5 	bne.w	800275e <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 80025d4:	8b3b      	ldrh	r3, [r7, #24]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80025da:	78fa      	ldrb	r2, [r7, #3]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	440b      	add	r3, r1
 80025e8:	3351      	adds	r3, #81	; 0x51
 80025ea:	2201      	movs	r2, #1
 80025ec:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025ee:	78fa      	ldrb	r2, [r7, #3]
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	440b      	add	r3, r1
 80025fc:	3351      	adds	r3, #81	; 0x51
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10a      	bne.n	800261a <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	440b      	add	r3, r1
 8002612:	3342      	adds	r3, #66	; 0x42
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002618:	e0a1      	b.n	800275e <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	440b      	add	r3, r1
 8002628:	3342      	adds	r3, #66	; 0x42
 800262a:	2202      	movs	r2, #2
 800262c:	701a      	strb	r2, [r3, #0]
      break;
 800262e:	e096      	b.n	800275e <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002630:	78bb      	ldrb	r3, [r7, #2]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d120      	bne.n	8002678 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002636:	78fa      	ldrb	r2, [r7, #3]
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	440b      	add	r3, r1
 8002644:	3351      	adds	r3, #81	; 0x51
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	440b      	add	r3, r1
 800265a:	3342      	adds	r3, #66	; 0x42
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002660:	e07e      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002662:	78fa      	ldrb	r2, [r7, #3]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	440b      	add	r3, r1
 8002670:	3342      	adds	r3, #66	; 0x42
 8002672:	2202      	movs	r2, #2
 8002674:	701a      	strb	r2, [r3, #0]
      break;
 8002676:	e073      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	440b      	add	r3, r1
 8002686:	3350      	adds	r3, #80	; 0x50
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10a      	bne.n	80026a4 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800268e:	78fa      	ldrb	r2, [r7, #3]
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	440b      	add	r3, r1
 800269c:	3342      	adds	r3, #66	; 0x42
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
      break;
 80026a2:	e05d      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	440b      	add	r3, r1
 80026b2:	3342      	adds	r3, #66	; 0x42
 80026b4:	2202      	movs	r2, #2
 80026b6:	701a      	strb	r2, [r3, #0]
      break;
 80026b8:	e052      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80026ba:	78bb      	ldrb	r3, [r7, #2]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d120      	bne.n	8002702 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80026c0:	78fa      	ldrb	r2, [r7, #3]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	440b      	add	r3, r1
 80026ce:	3351      	adds	r3, #81	; 0x51
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10a      	bne.n	80026ec <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	440b      	add	r3, r1
 80026e4:	3342      	adds	r3, #66	; 0x42
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80026ea:	e039      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	440b      	add	r3, r1
 80026fa:	3342      	adds	r3, #66	; 0x42
 80026fc:	2202      	movs	r2, #2
 80026fe:	701a      	strb	r2, [r3, #0]
      break;
 8002700:	e02e      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	440b      	add	r3, r1
 8002710:	3350      	adds	r3, #80	; 0x50
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10a      	bne.n	800272e <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	440b      	add	r3, r1
 8002726:	3342      	adds	r3, #66	; 0x42
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
      break;
 800272c:	e018      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	440b      	add	r3, r1
 800273c:	3342      	adds	r3, #66	; 0x42
 800273e:	2202      	movs	r2, #2
 8002740:	701a      	strb	r2, [r3, #0]
      break;
 8002742:	e00d      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	440b      	add	r3, r1
 8002752:	3342      	adds	r3, #66	; 0x42
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
      break;
 8002758:	e002      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800275a:	bf00      	nop
 800275c:	e000      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800275e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	440b      	add	r3, r1
 800276e:	3344      	adds	r3, #68	; 0x44
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	8b39      	ldrh	r1, [r7, #24]
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4403      	add	r3, r0
 8002784:	3348      	adds	r3, #72	; 0x48
 8002786:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	440b      	add	r3, r1
 8002796:	335c      	adds	r3, #92	; 0x5c
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	440b      	add	r3, r1
 80027aa:	334c      	adds	r3, #76	; 0x4c
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	440b      	add	r3, r1
 80027be:	3339      	adds	r3, #57	; 0x39
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	440b      	add	r3, r1
 80027d2:	335d      	adds	r3, #93	; 0x5d
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	4613      	mov	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	3338      	adds	r3, #56	; 0x38
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	4413      	add	r3, r2
 80027ec:	4619      	mov	r1, r3
 80027ee:	f005 fedd 	bl	80085ac <USB_HC_StartXfer>
 80027f2:	4603      	mov	r3, r0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f005 fc51 	bl	80080ba <USB_GetMode>
 8002818:	4603      	mov	r3, r0
 800281a:	2b01      	cmp	r3, #1
 800281c:	f040 80f1 	bne.w	8002a02 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f005 fc35 	bl	8008094 <USB_ReadInterrupts>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80e7 	beq.w	8002a00 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f005 fc2c 	bl	8008094 <USB_ReadInterrupts>
 800283c:	4603      	mov	r3, r0
 800283e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002842:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002846:	d104      	bne.n	8002852 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002850:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f005 fc1c 	bl	8008094 <USB_ReadInterrupts>
 800285c:	4603      	mov	r3, r0
 800285e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002866:	d104      	bne.n	8002872 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002870:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f005 fc0c 	bl	8008094 <USB_ReadInterrupts>
 800287c:	4603      	mov	r3, r0
 800287e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002882:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002886:	d104      	bne.n	8002892 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002890:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f005 fbfc 	bl	8008094 <USB_ReadInterrupts>
 800289c:	4603      	mov	r3, r0
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d103      	bne.n	80028ae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2202      	movs	r2, #2
 80028ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f005 fbee 	bl	8008094 <USB_ReadInterrupts>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028c2:	d117      	bne.n	80028f4 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80028d2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80028d6:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f007 ffa7 	bl	800a82c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2101      	movs	r1, #1
 80028e4:	4618      	mov	r0, r3
 80028e6:	f005 fca9 	bl	800823c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80028f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f005 fbcb 	bl	8008094 <USB_ReadInterrupts>
 80028fe:	4603      	mov	r3, r0
 8002900:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002908:	d102      	bne.n	8002910 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f001 f884 	bl	8003a18 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f005 fbbd 	bl	8008094 <USB_ReadInterrupts>
 800291a:	4603      	mov	r3, r0
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b08      	cmp	r3, #8
 8002922:	d106      	bne.n	8002932 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f007 ff65 	bl	800a7f4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2208      	movs	r2, #8
 8002930:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f005 fbac 	bl	8008094 <USB_ReadInterrupts>
 800293c:	4603      	mov	r3, r0
 800293e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002942:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002946:	d138      	bne.n	80029ba <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f005 ff2d 	bl	80087ac <USB_HC_ReadInterrupt>
 8002952:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	e025      	b.n	80029a6 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	fa22 f303 	lsr.w	r3, r2, r3
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d018      	beq.n	80029a0 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002984:	d106      	bne.n	8002994 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	4619      	mov	r1, r3
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f8cf 	bl	8002b30 <HCD_HC_IN_IRQHandler>
 8002992:	e005      	b.n	80029a0 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	4619      	mov	r1, r3
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fc3b 	bl	8003216 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	3301      	adds	r3, #1
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d3d4      	bcc.n	800295a <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f005 fb68 	bl	8008094 <USB_ReadInterrupts>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b10      	cmp	r3, #16
 80029cc:	d101      	bne.n	80029d2 <HAL_HCD_IRQHandler+0x1d6>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <HAL_HCD_IRQHandler+0x1d8>
 80029d2:	2300      	movs	r3, #0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d014      	beq.n	8002a02 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699a      	ldr	r2, [r3, #24]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0210 	bic.w	r2, r2, #16
 80029e6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 ff69 	bl	80038c0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	699a      	ldr	r2, [r3, #24]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0210 	orr.w	r2, r2, #16
 80029fc:	619a      	str	r2, [r3, #24]
 80029fe:	e000      	b.n	8002a02 <HAL_HCD_IRQHandler+0x206>
      return;
 8002a00:	bf00      	nop
    }
  }
}
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_HCD_Start+0x16>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e013      	b.n	8002a46 <HAL_HCD_Start+0x3e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f005 fa43 	bl	8007eb6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2101      	movs	r1, #1
 8002a36:	4618      	mov	r0, r3
 8002a38:	f005 fc64 	bl	8008304 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_HCD_Stop+0x16>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e00d      	b.n	8002a80 <HAL_HCD_Stop+0x32>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f005 ffab 	bl	80089cc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f005 fc0b 	bl	80082b0 <USB_ResetPort>
 8002a9a:	4603      	mov	r3, r0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	440b      	add	r3, r1
 8002abe:	335c      	adds	r3, #92	; 0x5c
 8002ac0:	781b      	ldrb	r3, [r3, #0]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	440b      	add	r3, r1
 8002ae8:	334c      	adds	r3, #76	; 0x4c
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f005 fc4d 	bl	80083a4 <USB_GetCurrentFrame>
 8002b0a:	4603      	mov	r3, r0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f005 fc28 	bl	8008376 <USB_GetHostSpeed>
 8002b26:	4603      	mov	r3, r0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002b46:	78fb      	ldrb	r3, [r7, #3]
 8002b48:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	015a      	lsls	r2, r3, #5
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d119      	bne.n	8002b94 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	2304      	movs	r3, #4
 8002b70:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	0151      	lsls	r1, r2, #5
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	440a      	add	r2, r1
 8002b88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b8c:	f043 0302 	orr.w	r3, r3, #2
 8002b90:	60d3      	str	r3, [r2, #12]
 8002b92:	e095      	b.n	8002cc0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	d109      	bne.n	8002bbe <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2320      	movs	r3, #32
 8002bba:	6093      	str	r3, [r2, #8]
 8002bbc:	e080      	b.n	8002cc0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d134      	bne.n	8002c3e <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	0151      	lsls	r1, r2, #5
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	440a      	add	r2, r1
 8002bea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bee:	f043 0302 	orr.w	r3, r3, #2
 8002bf2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	335d      	adds	r3, #93	; 0x5d
 8002c04:	2205      	movs	r2, #5
 8002c06:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c14:	461a      	mov	r2, r3
 8002c16:	2310      	movs	r3, #16
 8002c18:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c26:	461a      	mov	r2, r3
 8002c28:	2308      	movs	r3, #8
 8002c2a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	4611      	mov	r1, r2
 8002c36:	4618      	mov	r0, r3
 8002c38:	f005 fdc9 	bl	80087ce <USB_HC_Halt>
 8002c3c:	e040      	b.n	8002cc0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c54:	d134      	bne.n	8002cc0 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	0151      	lsls	r1, r2, #5
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	440a      	add	r2, r1
 8002c6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c70:	f043 0302 	orr.w	r3, r3, #2
 8002c74:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f005 fda4 	bl	80087ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c92:	461a      	mov	r2, r3
 8002c94:	2310      	movs	r3, #16
 8002c96:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	440b      	add	r3, r1
 8002ca6:	335d      	adds	r3, #93	; 0x5d
 8002ca8:	2208      	movs	r2, #8
 8002caa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb8:	461a      	mov	r2, r3
 8002cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cbe:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	015a      	lsls	r2, r3, #5
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd6:	d122      	bne.n	8002d1e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	0151      	lsls	r1, r2, #5
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	440a      	add	r2, r1
 8002cee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cf2:	f043 0302 	orr.w	r3, r3, #2
 8002cf6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	4611      	mov	r1, r2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f005 fd63 	bl	80087ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d14:	461a      	mov	r2, r3
 8002d16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d1a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002d1c:	e277      	b.n	800320e <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	f040 80a1 	bne.w	8002e78 <HCD_HC_IN_IRQHandler+0x348>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	440b      	add	r3, r1
 8002d44:	335d      	adds	r3, #93	; 0x5d
 8002d46:	2201      	movs	r2, #1
 8002d48:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	440b      	add	r3, r1
 8002d58:	3358      	adds	r3, #88	; 0x58
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	440b      	add	r3, r1
 8002d7e:	333f      	adds	r3, #63	; 0x3f
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <HCD_HC_IN_IRQHandler+0x26c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	440b      	add	r3, r1
 8002d94:	333f      	adds	r3, #63	; 0x3f
 8002d96:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d121      	bne.n	8002de0 <HCD_HC_IN_IRQHandler+0x2b0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	015a      	lsls	r2, r3, #5
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	0151      	lsls	r1, r2, #5
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	440a      	add	r2, r1
 8002db2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002db6:	f043 0302 	orr.w	r3, r3, #2
 8002dba:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f005 fd01 	bl	80087ce <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd8:	461a      	mov	r2, r3
 8002dda:	2310      	movs	r3, #16
 8002ddc:	6093      	str	r3, [r2, #8]
 8002dde:	e034      	b.n	8002e4a <HCD_HC_IN_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	440b      	add	r3, r1
 8002dee:	333f      	adds	r3, #63	; 0x3f
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d129      	bne.n	8002e4a <HCD_HC_IN_IRQHandler+0x31a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	0151      	lsls	r1, r2, #5
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	440a      	add	r2, r1
 8002e0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e14:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	440b      	add	r3, r1
 8002e24:	335c      	adds	r3, #92	; 0x5c
 8002e26:	2201      	movs	r2, #1
 8002e28:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	b2d8      	uxtb	r0, r3
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	440b      	add	r3, r1
 8002e3c:	335c      	adds	r3, #92	; 0x5c
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	4601      	mov	r1, r0
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f007 fcff 	bl	800a848 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	440b      	add	r3, r1
 8002e58:	3350      	adds	r3, #80	; 0x50
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	f083 0301 	eor.w	r3, r3, #1
 8002e60:	b2d8      	uxtb	r0, r3
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	440b      	add	r3, r1
 8002e70:	3350      	adds	r3, #80	; 0x50
 8002e72:	4602      	mov	r2, r0
 8002e74:	701a      	strb	r2, [r3, #0]
}
 8002e76:	e1ca      	b.n	800320e <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	f040 80f1 	bne.w	8003072 <HCD_HC_IN_IRQHandler+0x542>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	0151      	lsls	r1, r2, #5
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	440a      	add	r2, r1
 8002ea6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002eaa:	f023 0302 	bic.w	r3, r3, #2
 8002eae:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	440b      	add	r3, r1
 8002ebe:	335d      	adds	r3, #93	; 0x5d
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d10a      	bne.n	8002edc <HCD_HC_IN_IRQHandler+0x3ac>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	440b      	add	r3, r1
 8002ed4:	335c      	adds	r3, #92	; 0x5c
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	701a      	strb	r2, [r3, #0]
 8002eda:	e0b0      	b.n	800303e <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	440b      	add	r3, r1
 8002eea:	335d      	adds	r3, #93	; 0x5d
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b05      	cmp	r3, #5
 8002ef0:	d10a      	bne.n	8002f08 <HCD_HC_IN_IRQHandler+0x3d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	440b      	add	r3, r1
 8002f00:	335c      	adds	r3, #92	; 0x5c
 8002f02:	2205      	movs	r2, #5
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	e09a      	b.n	800303e <HCD_HC_IN_IRQHandler+0x50e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	440b      	add	r3, r1
 8002f16:	335d      	adds	r3, #93	; 0x5d
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b06      	cmp	r3, #6
 8002f1c:	d00a      	beq.n	8002f34 <HCD_HC_IN_IRQHandler+0x404>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	440b      	add	r3, r1
 8002f2c:	335d      	adds	r3, #93	; 0x5d
 8002f2e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d156      	bne.n	8002fe2 <HCD_HC_IN_IRQHandler+0x4b2>
      hhcd->hc[ch_num].ErrCnt++;
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	440b      	add	r3, r1
 8002f42:	3358      	adds	r3, #88	; 0x58
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	1c59      	adds	r1, r3, #1
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4403      	add	r3, r0
 8002f56:	3358      	adds	r3, #88	; 0x58
 8002f58:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	440b      	add	r3, r1
 8002f68:	3358      	adds	r3, #88	; 0x58
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d914      	bls.n	8002f9a <HCD_HC_IN_IRQHandler+0x46a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3358      	adds	r3, #88	; 0x58
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	440b      	add	r3, r1
 8002f92:	335c      	adds	r3, #92	; 0x5c
 8002f94:	2204      	movs	r2, #4
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	e009      	b.n	8002fae <HCD_HC_IN_IRQHandler+0x47e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	440b      	add	r3, r1
 8002fa8:	335c      	adds	r3, #92	; 0x5c
 8002faa:	2202      	movs	r2, #2
 8002fac:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fc4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fcc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	6013      	str	r3, [r2, #0]
 8002fe0:	e02d      	b.n	800303e <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	440b      	add	r3, r1
 8002ff0:	335d      	adds	r3, #93	; 0x5d
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d122      	bne.n	800303e <HCD_HC_IN_IRQHandler+0x50e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	440b      	add	r3, r1
 8003006:	335c      	adds	r3, #92	; 0x5c
 8003008:	2202      	movs	r2, #2
 800300a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4413      	add	r3, r2
 8003014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003022:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800302a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4413      	add	r3, r2
 8003034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003038:	461a      	mov	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4413      	add	r3, r2
 8003046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304a:	461a      	mov	r2, r3
 800304c:	2302      	movs	r3, #2
 800304e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	b2d8      	uxtb	r0, r3
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	440b      	add	r3, r1
 8003062:	335c      	adds	r3, #92	; 0x5c
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	4601      	mov	r1, r0
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f007 fbec 	bl	800a848 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003070:	e0cd      	b.n	800320e <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4413      	add	r3, r2
 800307a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003084:	2b80      	cmp	r3, #128	; 0x80
 8003086:	d13e      	bne.n	8003106 <HCD_HC_IN_IRQHandler+0x5d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4413      	add	r3, r2
 8003090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	0151      	lsls	r1, r2, #5
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	440a      	add	r2, r1
 800309e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030a2:	f043 0302 	orr.w	r3, r3, #2
 80030a6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	440b      	add	r3, r1
 80030b6:	3358      	adds	r3, #88	; 0x58
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	1c59      	adds	r1, r3, #1
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4403      	add	r3, r0
 80030ca:	3358      	adds	r3, #88	; 0x58
 80030cc:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	440b      	add	r3, r1
 80030dc:	335d      	adds	r3, #93	; 0x5d
 80030de:	2206      	movs	r2, #6
 80030e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f005 fb6e 	bl	80087ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fe:	461a      	mov	r2, r3
 8003100:	2380      	movs	r3, #128	; 0x80
 8003102:	6093      	str	r3, [r2, #8]
}
 8003104:	e083      	b.n	800320e <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4413      	add	r3, r2
 800310e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b10      	cmp	r3, #16
 800311a:	d178      	bne.n	800320e <HCD_HC_IN_IRQHandler+0x6de>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	440b      	add	r3, r1
 800312a:	333f      	adds	r3, #63	; 0x3f
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b03      	cmp	r3, #3
 8003130:	d122      	bne.n	8003178 <HCD_HC_IN_IRQHandler+0x648>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	440b      	add	r3, r1
 8003140:	3358      	adds	r3, #88	; 0x58
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	015a      	lsls	r2, r3, #5
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4413      	add	r3, r2
 800314e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	0151      	lsls	r1, r2, #5
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	440a      	add	r2, r1
 800315c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003160:	f043 0302 	orr.w	r3, r3, #2
 8003164:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	f005 fb2c 	bl	80087ce <USB_HC_Halt>
 8003176:	e041      	b.n	80031fc <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	440b      	add	r3, r1
 8003186:	333f      	adds	r3, #63	; 0x3f
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <HCD_HC_IN_IRQHandler+0x674>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	440b      	add	r3, r1
 800319c:	333f      	adds	r3, #63	; 0x3f
 800319e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d12b      	bne.n	80031fc <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	440b      	add	r3, r1
 80031b2:	3358      	adds	r3, #88	; 0x58
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	440b      	add	r3, r1
 80031c6:	335d      	adds	r3, #93	; 0x5d
 80031c8:	2203      	movs	r2, #3
 80031ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	0151      	lsls	r1, r2, #5
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	440a      	add	r2, r1
 80031e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031e6:	f043 0302 	orr.w	r3, r3, #2
 80031ea:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	4611      	mov	r1, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f005 fae9 	bl	80087ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4413      	add	r3, r2
 8003204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003208:	461a      	mov	r2, r3
 800320a:	2310      	movs	r3, #16
 800320c:	6093      	str	r3, [r2, #8]
}
 800320e:	bf00      	nop
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b086      	sub	sp, #24
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	460b      	mov	r3, r1
 8003220:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4413      	add	r3, r2
 8003238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b04      	cmp	r3, #4
 8003244:	d119      	bne.n	800327a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	015a      	lsls	r2, r3, #5
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4413      	add	r3, r2
 800324e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003252:	461a      	mov	r2, r3
 8003254:	2304      	movs	r3, #4
 8003256:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4413      	add	r3, r2
 8003260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	0151      	lsls	r1, r2, #5
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	440a      	add	r2, r1
 800326e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003272:	f043 0302 	orr.w	r3, r3, #2
 8003276:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003278:	e31e      	b.n	80038b8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4413      	add	r3, r2
 8003282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b20      	cmp	r3, #32
 800328e:	d141      	bne.n	8003314 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4413      	add	r3, r2
 8003298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329c:	461a      	mov	r2, r3
 800329e:	2320      	movs	r3, #32
 80032a0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	440b      	add	r3, r1
 80032b0:	333d      	adds	r3, #61	; 0x3d
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	f040 82ff 	bne.w	80038b8 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	440b      	add	r3, r1
 80032c8:	333d      	adds	r3, #61	; 0x3d
 80032ca:	2200      	movs	r2, #0
 80032cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	440b      	add	r3, r1
 80032dc:	335c      	adds	r3, #92	; 0x5c
 80032de:	2202      	movs	r2, #2
 80032e0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	0151      	lsls	r1, r2, #5
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	440a      	add	r2, r1
 80032f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032fc:	f043 0302 	orr.w	r3, r3, #2
 8003300:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	4611      	mov	r1, r2
 800330c:	4618      	mov	r0, r3
 800330e:	f005 fa5e 	bl	80087ce <USB_HC_Halt>
}
 8003312:	e2d1      	b.n	80038b8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4413      	add	r3, r2
 800331c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003326:	2b40      	cmp	r3, #64	; 0x40
 8003328:	d13f      	bne.n	80033aa <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	440b      	add	r3, r1
 8003338:	335d      	adds	r3, #93	; 0x5d
 800333a:	2204      	movs	r2, #4
 800333c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	440b      	add	r3, r1
 800334c:	333d      	adds	r3, #61	; 0x3d
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4613      	mov	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	440b      	add	r3, r1
 8003360:	3358      	adds	r3, #88	; 0x58
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	015a      	lsls	r2, r3, #5
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4413      	add	r3, r2
 800336e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	0151      	lsls	r1, r2, #5
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	440a      	add	r2, r1
 800337c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003380:	f043 0302 	orr.w	r3, r3, #2
 8003384:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	4611      	mov	r1, r2
 8003390:	4618      	mov	r0, r3
 8003392:	f005 fa1c 	bl	80087ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4413      	add	r3, r2
 800339e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a2:	461a      	mov	r2, r3
 80033a4:	2340      	movs	r3, #64	; 0x40
 80033a6:	6093      	str	r3, [r2, #8]
}
 80033a8:	e286      	b.n	80038b8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033c0:	d122      	bne.n	8003408 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	0151      	lsls	r1, r2, #5
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	440a      	add	r2, r1
 80033d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033dc:	f043 0302 	orr.w	r3, r3, #2
 80033e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f005 f9ee 	bl	80087ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fe:	461a      	mov	r2, r3
 8003400:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003404:	6093      	str	r3, [r2, #8]
}
 8003406:	e257      	b.n	80038b8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4413      	add	r3, r2
 8003410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b01      	cmp	r3, #1
 800341c:	d135      	bne.n	800348a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	440b      	add	r3, r1
 800342c:	3358      	adds	r3, #88	; 0x58
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4413      	add	r3, r2
 800343a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	0151      	lsls	r1, r2, #5
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	440a      	add	r2, r1
 8003448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800344c:	f043 0302 	orr.w	r3, r3, #2
 8003450:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	4611      	mov	r1, r2
 800345c:	4618      	mov	r0, r3
 800345e:	f005 f9b6 	bl	80087ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4413      	add	r3, r2
 800346a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346e:	461a      	mov	r2, r3
 8003470:	2301      	movs	r3, #1
 8003472:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	440b      	add	r3, r1
 8003482:	335d      	adds	r3, #93	; 0x5d
 8003484:	2201      	movs	r2, #1
 8003486:	701a      	strb	r2, [r3, #0]
}
 8003488:	e216      	b.n	80038b8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	015a      	lsls	r2, r3, #5
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4413      	add	r3, r2
 8003492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b08      	cmp	r3, #8
 800349e:	d12b      	bne.n	80034f8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ac:	461a      	mov	r2, r3
 80034ae:	2308      	movs	r3, #8
 80034b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	0151      	lsls	r1, r2, #5
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	440a      	add	r2, r1
 80034c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034cc:	f043 0302 	orr.w	r3, r3, #2
 80034d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f005 f976 	bl	80087ce <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	440b      	add	r3, r1
 80034f0:	335d      	adds	r3, #93	; 0x5d
 80034f2:	2205      	movs	r2, #5
 80034f4:	701a      	strb	r2, [r3, #0]
}
 80034f6:	e1df      	b.n	80038b8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	2b10      	cmp	r3, #16
 800350c:	d135      	bne.n	800357a <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	440b      	add	r3, r1
 800351c:	3358      	adds	r3, #88	; 0x58
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4613      	mov	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	440b      	add	r3, r1
 8003530:	335d      	adds	r3, #93	; 0x5d
 8003532:	2203      	movs	r2, #3
 8003534:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	4413      	add	r3, r2
 800353e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	0151      	lsls	r1, r2, #5
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	440a      	add	r2, r1
 800354c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003550:	f043 0302 	orr.w	r3, r3, #2
 8003554:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	4611      	mov	r1, r2
 8003560:	4618      	mov	r0, r3
 8003562:	f005 f934 	bl	80087ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4413      	add	r3, r2
 800356e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003572:	461a      	mov	r2, r3
 8003574:	2310      	movs	r3, #16
 8003576:	6093      	str	r3, [r2, #8]
}
 8003578:	e19e      	b.n	80038b8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4413      	add	r3, r2
 8003582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	2b80      	cmp	r3, #128	; 0x80
 800358e:	d12b      	bne.n	80035e8 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4413      	add	r3, r2
 8003598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	0151      	lsls	r1, r2, #5
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	440a      	add	r2, r1
 80035a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035aa:	f043 0302 	orr.w	r3, r3, #2
 80035ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	4611      	mov	r1, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f005 f907 	bl	80087ce <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	440b      	add	r3, r1
 80035ce:	335d      	adds	r3, #93	; 0x5d
 80035d0:	2206      	movs	r2, #6
 80035d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e0:	461a      	mov	r2, r3
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	6093      	str	r3, [r2, #8]
}
 80035e6:	e167      	b.n	80038b8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fe:	d135      	bne.n	800366c <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4413      	add	r3, r2
 8003608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	0151      	lsls	r1, r2, #5
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	440a      	add	r2, r1
 8003616:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800361a:	f043 0302 	orr.w	r3, r3, #2
 800361e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	4611      	mov	r1, r2
 800362a:	4618      	mov	r0, r3
 800362c:	f005 f8cf 	bl	80087ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4413      	add	r3, r2
 8003638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363c:	461a      	mov	r2, r3
 800363e:	2310      	movs	r3, #16
 8003640:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4413      	add	r3, r2
 800364a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800364e:	461a      	mov	r2, r3
 8003650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003654:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4613      	mov	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	440b      	add	r3, r1
 8003664:	335d      	adds	r3, #93	; 0x5d
 8003666:	2208      	movs	r2, #8
 8003668:	701a      	strb	r2, [r3, #0]
}
 800366a:	e125      	b.n	80038b8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	4413      	add	r3, r2
 8003674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b02      	cmp	r3, #2
 8003680:	f040 811a 	bne.w	80038b8 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	4413      	add	r3, r2
 800368c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	0151      	lsls	r1, r2, #5
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	440a      	add	r2, r1
 800369a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800369e:	f023 0302 	bic.w	r3, r3, #2
 80036a2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	440b      	add	r3, r1
 80036b2:	335d      	adds	r3, #93	; 0x5d
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d137      	bne.n	800372a <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	440b      	add	r3, r1
 80036c8:	335c      	adds	r3, #92	; 0x5c
 80036ca:	2201      	movs	r2, #1
 80036cc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	440b      	add	r3, r1
 80036dc:	333f      	adds	r3, #63	; 0x3f
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d00b      	beq.n	80036fc <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	440b      	add	r3, r1
 80036f2:	333f      	adds	r3, #63	; 0x3f
 80036f4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	f040 80c5 	bne.w	8003886 <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	440b      	add	r3, r1
 800370a:	3351      	adds	r3, #81	; 0x51
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	f083 0301 	eor.w	r3, r3, #1
 8003712:	b2d8      	uxtb	r0, r3
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	440b      	add	r3, r1
 8003722:	3351      	adds	r3, #81	; 0x51
 8003724:	4602      	mov	r2, r0
 8003726:	701a      	strb	r2, [r3, #0]
 8003728:	e0ad      	b.n	8003886 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	440b      	add	r3, r1
 8003738:	335d      	adds	r3, #93	; 0x5d
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d10a      	bne.n	8003756 <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	440b      	add	r3, r1
 800374e:	335c      	adds	r3, #92	; 0x5c
 8003750:	2202      	movs	r2, #2
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	e097      	b.n	8003886 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	440b      	add	r3, r1
 8003764:	335d      	adds	r3, #93	; 0x5d
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b04      	cmp	r3, #4
 800376a:	d10a      	bne.n	8003782 <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	440b      	add	r3, r1
 800377a:	335c      	adds	r3, #92	; 0x5c
 800377c:	2202      	movs	r2, #2
 800377e:	701a      	strb	r2, [r3, #0]
 8003780:	e081      	b.n	8003886 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4613      	mov	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	440b      	add	r3, r1
 8003790:	335d      	adds	r3, #93	; 0x5d
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b05      	cmp	r3, #5
 8003796:	d10a      	bne.n	80037ae <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4613      	mov	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	440b      	add	r3, r1
 80037a6:	335c      	adds	r3, #92	; 0x5c
 80037a8:	2205      	movs	r2, #5
 80037aa:	701a      	strb	r2, [r3, #0]
 80037ac:	e06b      	b.n	8003886 <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	440b      	add	r3, r1
 80037bc:	335d      	adds	r3, #93	; 0x5d
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b06      	cmp	r3, #6
 80037c2:	d00a      	beq.n	80037da <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	440b      	add	r3, r1
 80037d2:	335d      	adds	r3, #93	; 0x5d
 80037d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d155      	bne.n	8003886 <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4613      	mov	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	440b      	add	r3, r1
 80037e8:	3358      	adds	r3, #88	; 0x58
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	1c59      	adds	r1, r3, #1
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4403      	add	r3, r0
 80037fc:	3358      	adds	r3, #88	; 0x58
 80037fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4613      	mov	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	440b      	add	r3, r1
 800380e:	3358      	adds	r3, #88	; 0x58
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b03      	cmp	r3, #3
 8003814:	d914      	bls.n	8003840 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	4613      	mov	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	440b      	add	r3, r1
 8003824:	3358      	adds	r3, #88	; 0x58
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	440b      	add	r3, r1
 8003838:	335c      	adds	r3, #92	; 0x5c
 800383a:	2204      	movs	r2, #4
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	e009      	b.n	8003854 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4613      	mov	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	440b      	add	r3, r1
 800384e:	335c      	adds	r3, #92	; 0x5c
 8003850:	2202      	movs	r2, #2
 8003852:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4413      	add	r3, r2
 800385c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800386a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003872:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	4413      	add	r3, r2
 800387c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003880:	461a      	mov	r2, r3
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	4413      	add	r3, r2
 800388e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003892:	461a      	mov	r2, r3
 8003894:	2302      	movs	r3, #2
 8003896:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	b2d8      	uxtb	r0, r3
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	440b      	add	r3, r1
 80038aa:	335c      	adds	r3, #92	; 0x5c
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	4601      	mov	r1, r0
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f006 ffc8 	bl	800a848 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80038b8:	bf00      	nop
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08a      	sub	sp, #40	; 0x28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	f003 030f 	and.w	r3, r3, #15
 80038e0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	0c5b      	lsrs	r3, r3, #17
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	091b      	lsrs	r3, r3, #4
 80038f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038f4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d003      	beq.n	8003904 <HCD_RXQLVL_IRQHandler+0x44>
 80038fc:	2b05      	cmp	r3, #5
 80038fe:	f000 8082 	beq.w	8003a06 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003902:	e083      	b.n	8003a0c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d07f      	beq.n	8003a0a <HCD_RXQLVL_IRQHandler+0x14a>
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	440b      	add	r3, r1
 8003918:	3344      	adds	r3, #68	; 0x44
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d074      	beq.n	8003a0a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	440b      	add	r3, r1
 8003932:	3344      	adds	r3, #68	; 0x44
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	b292      	uxth	r2, r2
 800393a:	4619      	mov	r1, r3
 800393c:	f004 fb81 	bl	8008042 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	440b      	add	r3, r1
 800394e:	3344      	adds	r3, #68	; 0x44
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	18d1      	adds	r1, r2, r3
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4613      	mov	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	4403      	add	r3, r0
 8003964:	3344      	adds	r3, #68	; 0x44
 8003966:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4613      	mov	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	440b      	add	r3, r1
 8003976:	334c      	adds	r3, #76	; 0x4c
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	18d1      	adds	r1, r2, r3
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4403      	add	r3, r0
 800398c:	334c      	adds	r3, #76	; 0x4c
 800398e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	4413      	add	r3, r2
 8003998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399c:	691a      	ldr	r2, [r3, #16]
 800399e:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <HCD_RXQLVL_IRQHandler+0x154>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d031      	beq.n	8003a0a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039bc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039c4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d2:	461a      	mov	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4613      	mov	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	440b      	add	r3, r1
 80039e6:	3350      	adds	r3, #80	; 0x50
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	f083 0301 	eor.w	r3, r3, #1
 80039ee:	b2d8      	uxtb	r0, r3
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	440b      	add	r3, r1
 80039fe:	3350      	adds	r3, #80	; 0x50
 8003a00:	4602      	mov	r2, r0
 8003a02:	701a      	strb	r2, [r3, #0]
      break;
 8003a04:	e001      	b.n	8003a0a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003a06:	bf00      	nop
 8003a08:	e000      	b.n	8003a0c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003a0a:	bf00      	nop
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	3728      	adds	r7, #40	; 0x28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	1ff80000 	.word	0x1ff80000

08003a18 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003a44:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d113      	bne.n	8003a78 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d10a      	bne.n	8003a70 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	699a      	ldr	r2, [r3, #24]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003a68:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f006 fed0 	bl	800a810 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f043 0302 	orr.w	r3, r3, #2
 8003a76:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d147      	bne.n	8003b12 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f043 0308 	orr.w	r3, r3, #8
 8003a88:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d129      	bne.n	8003ae8 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d113      	bne.n	8003ac4 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003aa2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003aa6:	d106      	bne.n	8003ab6 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2102      	movs	r1, #2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f004 fbc4 	bl	800823c <USB_InitFSLSPClkSel>
 8003ab4:	e011      	b.n	8003ada <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2101      	movs	r1, #1
 8003abc:	4618      	mov	r0, r3
 8003abe:	f004 fbbd 	bl	800823c <USB_InitFSLSPClkSel>
 8003ac2:	e00a      	b.n	8003ada <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d106      	bne.n	8003ada <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003ad8:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f006 fec2 	bl	800a864 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f006 fe95 	bl	800a810 <HAL_HCD_Connect_Callback>
 8003ae6:	e014      	b.n	8003b12 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f006 fec9 	bl	800a880 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003afc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003b00:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699a      	ldr	r2, [r3, #24]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003b10:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d103      	bne.n	8003b24 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f043 0320 	orr.w	r3, r3, #32
 8003b22:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	6013      	str	r3, [r2, #0]
}
 8003b30:	bf00      	nop
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e081      	b.n	8003c4e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fc fe6e 	bl	8000840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2224      	movs	r2, #36	; 0x24
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0201 	bic.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d107      	bne.n	8003bb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689a      	ldr	r2, [r3, #8]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bae:	609a      	str	r2, [r3, #8]
 8003bb0:	e006      	b.n	8003bc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003bbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d104      	bne.n	8003bd2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bf4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	ea42 0103 	orr.w	r1, r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	021a      	lsls	r2, r3, #8
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69d9      	ldr	r1, [r3, #28]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1a      	ldr	r2, [r3, #32]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	4608      	mov	r0, r1
 8003c62:	4611      	mov	r1, r2
 8003c64:	461a      	mov	r2, r3
 8003c66:	4603      	mov	r3, r0
 8003c68:	817b      	strh	r3, [r7, #10]
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	813b      	strh	r3, [r7, #8]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	f040 80f9 	bne.w	8003e72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_I2C_Mem_Write+0x34>
 8003c86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d105      	bne.n	8003c98 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0ed      	b.n	8003e74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_I2C_Mem_Write+0x4e>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e0e6      	b.n	8003e74 <HAL_I2C_Mem_Write+0x21c>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cae:	f7fe f80b 	bl	8001cc8 <HAL_GetTick>
 8003cb2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	2319      	movs	r3, #25
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f955 	bl	8003f70 <I2C_WaitOnFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e0d1      	b.n	8003e74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2221      	movs	r2, #33	; 0x21
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2240      	movs	r2, #64	; 0x40
 8003cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a3a      	ldr	r2, [r7, #32]
 8003cea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cf8:	88f8      	ldrh	r0, [r7, #6]
 8003cfa:	893a      	ldrh	r2, [r7, #8]
 8003cfc:	8979      	ldrh	r1, [r7, #10]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	9301      	str	r3, [sp, #4]
 8003d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	4603      	mov	r3, r0
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 f8b9 	bl	8003e80 <I2C_RequestMemoryWrite>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e0a9      	b.n	8003e74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2bff      	cmp	r3, #255	; 0xff
 8003d28:	d90e      	bls.n	8003d48 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	22ff      	movs	r2, #255	; 0xff
 8003d2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	8979      	ldrh	r1, [r7, #10]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 fa37 	bl	80041b4 <I2C_TransferConfig>
 8003d46:	e00f      	b.n	8003d68 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	8979      	ldrh	r1, [r7, #10]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 fa26 	bl	80041b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f93f 	bl	8003ff0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e07b      	b.n	8003e74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	781a      	ldrb	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d034      	beq.n	8003e20 <HAL_I2C_Mem_Write+0x1c8>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d130      	bne.n	8003e20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	2180      	movs	r1, #128	; 0x80
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f8d1 	bl	8003f70 <I2C_WaitOnFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e04d      	b.n	8003e74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2bff      	cmp	r3, #255	; 0xff
 8003de0:	d90e      	bls.n	8003e00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	22ff      	movs	r2, #255	; 0xff
 8003de6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	8979      	ldrh	r1, [r7, #10]
 8003df0:	2300      	movs	r3, #0
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 f9db 	bl	80041b4 <I2C_TransferConfig>
 8003dfe:	e00f      	b.n	8003e20 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	8979      	ldrh	r1, [r7, #10]
 8003e12:	2300      	movs	r3, #0
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f9ca 	bl	80041b4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d19e      	bne.n	8003d68 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f91e 	bl	8004070 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e01a      	b.n	8003e74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2220      	movs	r2, #32
 8003e44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6859      	ldr	r1, [r3, #4]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <HAL_I2C_Mem_Write+0x224>)
 8003e52:	400b      	ands	r3, r1
 8003e54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	e000      	b.n	8003e74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003e72:	2302      	movs	r3, #2
  }
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	fe00e800 	.word	0xfe00e800

08003e80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af02      	add	r7, sp, #8
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	4608      	mov	r0, r1
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4603      	mov	r3, r0
 8003e90:	817b      	strh	r3, [r7, #10]
 8003e92:	460b      	mov	r3, r1
 8003e94:	813b      	strh	r3, [r7, #8]
 8003e96:	4613      	mov	r3, r2
 8003e98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	8979      	ldrh	r1, [r7, #10]
 8003ea0:	4b20      	ldr	r3, [pc, #128]	; (8003f24 <I2C_RequestMemoryWrite+0xa4>)
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 f983 	bl	80041b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	69b9      	ldr	r1, [r7, #24]
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 f89c 	bl	8003ff0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e02c      	b.n	8003f1c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d105      	bne.n	8003ed4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ec8:	893b      	ldrh	r3, [r7, #8]
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	629a      	str	r2, [r3, #40]	; 0x28
 8003ed2:	e015      	b.n	8003f00 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ed4:	893b      	ldrh	r3, [r7, #8]
 8003ed6:	0a1b      	lsrs	r3, r3, #8
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ee2:	69fa      	ldr	r2, [r7, #28]
 8003ee4:	69b9      	ldr	r1, [r7, #24]
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 f882 	bl	8003ff0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e012      	b.n	8003f1c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ef6:	893b      	ldrh	r3, [r7, #8]
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	2200      	movs	r2, #0
 8003f08:	2180      	movs	r1, #128	; 0x80
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 f830 	bl	8003f70 <I2C_WaitOnFlagUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	80002000 	.word	0x80002000

08003f28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d103      	bne.n	8003f46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2200      	movs	r2, #0
 8003f44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d007      	beq.n	8003f64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699a      	ldr	r2, [r3, #24]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	619a      	str	r2, [r3, #24]
  }
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f80:	e022      	b.n	8003fc8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f88:	d01e      	beq.n	8003fc8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8a:	f7fd fe9d 	bl	8001cc8 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d302      	bcc.n	8003fa0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d113      	bne.n	8003fc8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa4:	f043 0220 	orr.w	r2, r3, #32
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e00f      	b.n	8003fe8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	bf0c      	ite	eq
 8003fd8:	2301      	moveq	r3, #1
 8003fda:	2300      	movne	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	461a      	mov	r2, r3
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d0cd      	beq.n	8003f82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ffc:	e02c      	b.n	8004058 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	68b9      	ldr	r1, [r7, #8]
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f870 	bl	80040e8 <I2C_IsAcknowledgeFailed>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e02a      	b.n	8004068 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004018:	d01e      	beq.n	8004058 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401a:	f7fd fe55 	bl	8001cc8 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	429a      	cmp	r2, r3
 8004028:	d302      	bcc.n	8004030 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d113      	bne.n	8004058 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004034:	f043 0220 	orr.w	r2, r3, #32
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e007      	b.n	8004068 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b02      	cmp	r3, #2
 8004064:	d1cb      	bne.n	8003ffe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800407c:	e028      	b.n	80040d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68b9      	ldr	r1, [r7, #8]
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 f830 	bl	80040e8 <I2C_IsAcknowledgeFailed>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e026      	b.n	80040e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004092:	f7fd fe19 	bl	8001cc8 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d302      	bcc.n	80040a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d113      	bne.n	80040d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ac:	f043 0220 	orr.w	r2, r3, #32
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e007      	b.n	80040e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b20      	cmp	r3, #32
 80040dc:	d1cf      	bne.n	800407e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	f003 0310 	and.w	r3, r3, #16
 80040fe:	2b10      	cmp	r3, #16
 8004100:	d151      	bne.n	80041a6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004102:	e022      	b.n	800414a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410a:	d01e      	beq.n	800414a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410c:	f7fd fddc 	bl	8001cc8 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	429a      	cmp	r2, r3
 800411a:	d302      	bcc.n	8004122 <I2C_IsAcknowledgeFailed+0x3a>
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d113      	bne.n	800414a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	f043 0220 	orr.w	r2, r3, #32
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e02e      	b.n	80041a8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b20      	cmp	r3, #32
 8004156:	d1d5      	bne.n	8004104 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2210      	movs	r2, #16
 800415e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2220      	movs	r2, #32
 8004166:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f7ff fedd 	bl	8003f28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6859      	ldr	r1, [r3, #4]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	4b0d      	ldr	r3, [pc, #52]	; (80041b0 <I2C_IsAcknowledgeFailed+0xc8>)
 800417a:	400b      	ands	r3, r1
 800417c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004182:	f043 0204 	orr.w	r2, r3, #4
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e000      	b.n	80041a8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	fe00e800 	.word	0xfe00e800

080041b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	607b      	str	r3, [r7, #4]
 80041be:	460b      	mov	r3, r1
 80041c0:	817b      	strh	r3, [r7, #10]
 80041c2:	4613      	mov	r3, r2
 80041c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	0d5b      	lsrs	r3, r3, #21
 80041d0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80041d4:	4b0d      	ldr	r3, [pc, #52]	; (800420c <I2C_TransferConfig+0x58>)
 80041d6:	430b      	orrs	r3, r1
 80041d8:	43db      	mvns	r3, r3
 80041da:	ea02 0103 	and.w	r1, r2, r3
 80041de:	897b      	ldrh	r3, [r7, #10]
 80041e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80041e4:	7a7b      	ldrb	r3, [r7, #9]
 80041e6:	041b      	lsls	r3, r3, #16
 80041e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	431a      	orrs	r2, r3
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	431a      	orrs	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80041fe:	bf00      	nop
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	03ff63ff 	.word	0x03ff63ff

08004210 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b20      	cmp	r3, #32
 8004224:	d138      	bne.n	8004298 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004230:	2302      	movs	r3, #2
 8004232:	e032      	b.n	800429a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2224      	movs	r2, #36	; 0x24
 8004240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0201 	bic.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004262:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6819      	ldr	r1, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0201 	orr.w	r2, r2, #1
 8004282:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2220      	movs	r2, #32
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004294:	2300      	movs	r3, #0
 8004296:	e000      	b.n	800429a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004298:	2302      	movs	r3, #2
  }
}
 800429a:	4618      	mov	r0, r3
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b085      	sub	sp, #20
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d139      	bne.n	8004330 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d101      	bne.n	80042ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042c6:	2302      	movs	r3, #2
 80042c8:	e033      	b.n	8004332 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2224      	movs	r2, #36	; 0x24
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0201 	bic.w	r2, r2, #1
 80042e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	021b      	lsls	r3, r3, #8
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4313      	orrs	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	e000      	b.n	8004332 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004330:	2302      	movs	r3, #2
  }
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b084      	sub	sp, #16
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e038      	b.n	80043c2 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004358:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f245 5255 	movw	r2, #21845	; 0x5555
 8004362:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6852      	ldr	r2, [r2, #4]
 800436c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6892      	ldr	r2, [r2, #8]
 8004376:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004378:	f7fd fca6 	bl	8001cc8 <HAL_GetTick>
 800437c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800437e:	e008      	b.n	8004392 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004380:	f7fd fca2 	bl	8001cc8 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b30      	cmp	r3, #48	; 0x30
 800438c:	d901      	bls.n	8004392 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e017      	b.n	80043c2 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f1      	bne.n	8004380 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691a      	ldr	r2, [r3, #16]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d005      	beq.n	80043b6 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	68d2      	ldr	r2, [r2, #12]
 80043b2:	611a      	str	r2, [r3, #16]
 80043b4:	e004      	b.n	80043c0 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80043be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e0af      	b.n	800453e <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fc faee 	bl	80009d4 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0201 	bic.w	r2, r2, #1
 800440e:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	e00a      	b.n	800442c <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	3304      	adds	r3, #4
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	2200      	movs	r2, #0
 8004424:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	3301      	adds	r3, #1
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	2b0f      	cmp	r3, #15
 8004430:	d9f1      	bls.n	8004416 <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0204 	orr.w	r2, r2, #4
 8004440:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	4b3f      	ldr	r3, [pc, #252]	; (8004548 <HAL_LCD_Init+0x17c>)
 800444a:	4013      	ands	r3, r2
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6851      	ldr	r1, [r2, #4]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6892      	ldr	r2, [r2, #8]
 8004454:	4311      	orrs	r1, r2
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800445a:	4311      	orrs	r1, r2
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004460:	4311      	orrs	r1, r2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	69d2      	ldr	r2, [r2, #28]
 8004466:	4311      	orrs	r1, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6a12      	ldr	r2, [r2, #32]
 800446c:	4311      	orrs	r1, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6992      	ldr	r2, [r2, #24]
 8004472:	4311      	orrs	r1, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004478:	4311      	orrs	r1, r2
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6812      	ldr	r2, [r2, #0]
 800447e:	430b      	orrs	r3, r1
 8004480:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f8f1 	bl	800466a <LCD_WaitForSynchro>
 8004488:	4603      	mov	r3, r0
 800448a:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 800448c:	7cfb      	ldrb	r3, [r7, #19]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_LCD_Init+0xca>
  {
    return status;
 8004492:	7cfb      	ldrb	r3, [r7, #19]
 8004494:	e053      	b.n	800453e <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0201 	orr.w	r2, r2, #1
 80044cc:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80044ce:	f7fd fbfb 	bl	8001cc8 <HAL_GetTick>
 80044d2:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80044d4:	e00c      	b.n	80044f0 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80044d6:	f7fd fbf7 	bl	8001cc8 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044e4:	d904      	bls.n	80044f0 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2208      	movs	r2, #8
 80044ea:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e026      	b.n	800453e <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d1eb      	bne.n	80044d6 <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 80044fe:	f7fd fbe3 	bl	8001cc8 <HAL_GetTick>
 8004502:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8004504:	e00c      	b.n	8004520 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8004506:	f7fd fbdf 	bl	8001cc8 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004514:	d904      	bls.n	8004520 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2210      	movs	r2, #16
 800451a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e00e      	b.n	800453e <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	2b10      	cmp	r3, #16
 800452c:	d1eb      	bne.n	8004506 <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 800453c:	7cfb      	ldrb	r3, [r7, #19]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	fc00000e 	.word	0xfc00000e

0800454c <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800455e:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8004560:	7cbb      	ldrb	r3, [r7, #18]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d002      	beq.n	800456c <HAL_LCD_Clear+0x20>
 8004566:	7cbb      	ldrb	r3, [r7, #18]
 8004568:	2b02      	cmp	r3, #2
 800456a:	d140      	bne.n	80045ee <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_LCD_Clear+0x2e>
 8004576:	2302      	movs	r3, #2
 8004578:	e03a      	b.n	80045f0 <HAL_LCD_Clear+0xa4>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2202      	movs	r2, #2
 8004586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 800458a:	f7fd fb9d 	bl	8001cc8 <HAL_GetTick>
 800458e:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8004590:	e010      	b.n	80045b4 <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8004592:	f7fd fb99 	bl	8001cc8 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045a0:	d908      	bls.n	80045b4 <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2202      	movs	r2, #2
 80045a6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e01d      	b.n	80045f0 <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d0e7      	beq.n	8004592 <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80045c2:	2300      	movs	r3, #0
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	e00a      	b.n	80045de <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	3304      	adds	r3, #4
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	2200      	movs	r2, #0
 80045d6:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	3301      	adds	r3, #1
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2b0f      	cmp	r3, #15
 80045e2:	d9f1      	bls.n	80045c8 <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f807 	bl	80045f8 <HAL_LCD_UpdateDisplayRequest>
 80045ea:	4603      	mov	r3, r0
 80045ec:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 80045ee:	7cfb      	ldrb	r3, [r7, #19]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2208      	movs	r2, #8
 8004606:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0204 	orr.w	r2, r2, #4
 8004616:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8004618:	f7fd fb56 	bl	8001cc8 <HAL_GetTick>
 800461c:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 800461e:	e010      	b.n	8004642 <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8004620:	f7fd fb52 	bl	8001cc8 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800462e:	d908      	bls.n	8004642 <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2204      	movs	r2, #4
 8004634:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e00f      	b.n	8004662 <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b08      	cmp	r3, #8
 800464e:	d1e7      	bne.n	8004620 <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b084      	sub	sp, #16
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8004672:	f7fd fb29 	bl	8001cc8 <HAL_GetTick>
 8004676:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8004678:	e00c      	b.n	8004694 <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800467a:	f7fd fb25 	bl	8001cc8 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004688:	d904      	bls.n	8004694 <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e007      	b.n	80046a4 <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d1eb      	bne.n	800467a <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046b0:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a04      	ldr	r2, [pc, #16]	; (80046c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80046b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ba:	6013      	str	r3, [r2, #0]
}
 80046bc:	bf00      	nop
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40007000 	.word	0x40007000

080046cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80046d0:	4b04      	ldr	r3, [pc, #16]	; (80046e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40007000 	.word	0x40007000

080046e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f6:	d130      	bne.n	800475a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80046f8:	4b23      	ldr	r3, [pc, #140]	; (8004788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004704:	d038      	beq.n	8004778 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004706:	4b20      	ldr	r3, [pc, #128]	; (8004788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800470e:	4a1e      	ldr	r2, [pc, #120]	; (8004788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004710:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004714:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004716:	4b1d      	ldr	r3, [pc, #116]	; (800478c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2232      	movs	r2, #50	; 0x32
 800471c:	fb02 f303 	mul.w	r3, r2, r3
 8004720:	4a1b      	ldr	r2, [pc, #108]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	0c9b      	lsrs	r3, r3, #18
 8004728:	3301      	adds	r3, #1
 800472a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800472c:	e002      	b.n	8004734 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3b01      	subs	r3, #1
 8004732:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004734:	4b14      	ldr	r3, [pc, #80]	; (8004788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800473c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004740:	d102      	bne.n	8004748 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1f2      	bne.n	800472e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004748:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004754:	d110      	bne.n	8004778 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e00f      	b.n	800477a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800475a:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004766:	d007      	beq.n	8004778 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004768:	4b07      	ldr	r3, [pc, #28]	; (8004788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004770:	4a05      	ldr	r2, [pc, #20]	; (8004788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004776:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40007000 	.word	0x40007000
 800478c:	20000010 	.word	0x20000010
 8004790:	431bde83 	.word	0x431bde83

08004794 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800479e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047a2:	6053      	str	r3, [r2, #4]
}
 80047a4:	bf00      	nop
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40007000 	.word	0x40007000

080047b4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af02      	add	r7, sp, #8
 80047ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80047bc:	f7fd fa84 	bl	8001cc8 <HAL_GetTick>
 80047c0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e06f      	b.n	80048ac <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_QSPI_Init+0x28>
 80047d8:	2302      	movs	r3, #2
 80047da:	e067      	b.n	80048ac <HAL_QSPI_Init+0xf8>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10b      	bne.n	8004808 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7fc fae3 	bl	8000dc4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80047fe:	f241 3188 	movw	r1, #5000	; 0x1388
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f858 	bl	80048b8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	3b01      	subs	r3, #1
 8004818:	021a      	lsls	r2, r3, #8
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	2120      	movs	r1, #32
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f850 	bl	80048d4 <QSPI_WaitFlagStateUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004838:	7afb      	ldrb	r3, [r7, #11]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d131      	bne.n	80048a2 <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004848:	f023 0310 	bic.w	r3, r3, #16
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6852      	ldr	r2, [r2, #4]
 8004850:	0611      	lsls	r1, r2, #24
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	68d2      	ldr	r2, [r2, #12]
 8004856:	4311      	orrs	r1, r2
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6812      	ldr	r2, [r2, #0]
 800485c:	430b      	orrs	r3, r1
 800485e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	4b13      	ldr	r3, [pc, #76]	; (80048b4 <HAL_QSPI_Init+0x100>)
 8004868:	4013      	ands	r3, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6912      	ldr	r2, [r2, #16]
 800486e:	0411      	lsls	r1, r2, #16
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6952      	ldr	r2, [r2, #20]
 8004874:	4311      	orrs	r1, r2
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6992      	ldr	r2, [r2, #24]
 800487a:	4311      	orrs	r1, r2
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6812      	ldr	r2, [r2, #0]
 8004880:	430b      	orrs	r3, r1
 8004882:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0201 	orr.w	r2, r2, #1
 8004892:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80048aa:	7afb      	ldrb	r3, [r7, #11]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	ffe0f8fe 	.word	0xffe0f8fe

080048b8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	4613      	mov	r3, r2
 80048e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80048e4:	e01a      	b.n	800491c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d016      	beq.n	800491c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ee:	f7fd f9eb 	bl	8001cc8 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d302      	bcc.n	8004904 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10b      	bne.n	800491c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2204      	movs	r2, #4
 8004908:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004910:	f043 0201 	orr.w	r2, r3, #1
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e00e      	b.n	800493a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	4013      	ands	r3, r2
 8004926:	2b00      	cmp	r3, #0
 8004928:	bf14      	ite	ne
 800492a:	2301      	movne	r3, #1
 800492c:	2300      	moveq	r3, #0
 800492e:	b2db      	uxtb	r3, r3
 8004930:	461a      	mov	r2, r3
 8004932:	79fb      	ldrb	r3, [r7, #7]
 8004934:	429a      	cmp	r2, r3
 8004936:	d1d6      	bne.n	80048e6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e39d      	b.n	8005092 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004956:	4ba4      	ldr	r3, [pc, #656]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 030c 	and.w	r3, r3, #12
 800495e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004960:	4ba1      	ldr	r3, [pc, #644]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0310 	and.w	r3, r3, #16
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 80e1 	beq.w	8004b3a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d007      	beq.n	800498e <HAL_RCC_OscConfig+0x4a>
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b0c      	cmp	r3, #12
 8004982:	f040 8088 	bne.w	8004a96 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b01      	cmp	r3, #1
 800498a:	f040 8084 	bne.w	8004a96 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800498e:	4b96      	ldr	r3, [pc, #600]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d005      	beq.n	80049a6 <HAL_RCC_OscConfig+0x62>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e375      	b.n	8005092 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1a      	ldr	r2, [r3, #32]
 80049aa:	4b8f      	ldr	r3, [pc, #572]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d004      	beq.n	80049c0 <HAL_RCC_OscConfig+0x7c>
 80049b6:	4b8c      	ldr	r3, [pc, #560]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049be:	e005      	b.n	80049cc <HAL_RCC_OscConfig+0x88>
 80049c0:	4b89      	ldr	r3, [pc, #548]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 80049c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049c6:	091b      	lsrs	r3, r3, #4
 80049c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d223      	bcs.n	8004a18 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 fd09 	bl	80053ec <RCC_SetFlashLatencyFromMSIRange>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e356      	b.n	8005092 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049e4:	4b80      	ldr	r3, [pc, #512]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a7f      	ldr	r2, [pc, #508]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 80049ea:	f043 0308 	orr.w	r3, r3, #8
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	4b7d      	ldr	r3, [pc, #500]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	497a      	ldr	r1, [pc, #488]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a02:	4b79      	ldr	r3, [pc, #484]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	4975      	ldr	r1, [pc, #468]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	604b      	str	r3, [r1, #4]
 8004a16:	e022      	b.n	8004a5e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a18:	4b73      	ldr	r3, [pc, #460]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a72      	ldr	r2, [pc, #456]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004a1e:	f043 0308 	orr.w	r3, r3, #8
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	4b70      	ldr	r3, [pc, #448]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	496d      	ldr	r1, [pc, #436]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a36:	4b6c      	ldr	r3, [pc, #432]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	4968      	ldr	r1, [pc, #416]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fccc 	bl	80053ec <RCC_SetFlashLatencyFromMSIRange>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e319      	b.n	8005092 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a5e:	f000 fc03 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8004a62:	4601      	mov	r1, r0
 8004a64:	4b60      	ldr	r3, [pc, #384]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	091b      	lsrs	r3, r3, #4
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	4a5f      	ldr	r2, [pc, #380]	; (8004bec <HAL_RCC_OscConfig+0x2a8>)
 8004a70:	5cd3      	ldrb	r3, [r2, r3]
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	fa21 f303 	lsr.w	r3, r1, r3
 8004a7a:	4a5d      	ldr	r2, [pc, #372]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004a7c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a7e:	4b5d      	ldr	r3, [pc, #372]	; (8004bf4 <HAL_RCC_OscConfig+0x2b0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fd f8d4 	bl	8001c30 <HAL_InitTick>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d052      	beq.n	8004b38 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
 8004a94:	e2fd      	b.n	8005092 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d032      	beq.n	8004b04 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a9e:	4b52      	ldr	r3, [pc, #328]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a51      	ldr	r2, [pc, #324]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004aa4:	f043 0301 	orr.w	r3, r3, #1
 8004aa8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004aaa:	f7fd f90d 	bl	8001cc8 <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ab2:	f7fd f909 	bl	8001cc8 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e2e6      	b.n	8005092 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ac4:	4b48      	ldr	r3, [pc, #288]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0f0      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ad0:	4b45      	ldr	r3, [pc, #276]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a44      	ldr	r2, [pc, #272]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004ad6:	f043 0308 	orr.w	r3, r3, #8
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	4b42      	ldr	r3, [pc, #264]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	493f      	ldr	r1, [pc, #252]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004aee:	4b3e      	ldr	r3, [pc, #248]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	021b      	lsls	r3, r3, #8
 8004afc:	493a      	ldr	r1, [pc, #232]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	604b      	str	r3, [r1, #4]
 8004b02:	e01a      	b.n	8004b3a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b04:	4b38      	ldr	r3, [pc, #224]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a37      	ldr	r2, [pc, #220]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004b0a:	f023 0301 	bic.w	r3, r3, #1
 8004b0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b10:	f7fd f8da 	bl	8001cc8 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b18:	f7fd f8d6 	bl	8001cc8 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e2b3      	b.n	8005092 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b2a:	4b2f      	ldr	r3, [pc, #188]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f0      	bne.n	8004b18 <HAL_RCC_OscConfig+0x1d4>
 8004b36:	e000      	b.n	8004b3a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d074      	beq.n	8004c30 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d005      	beq.n	8004b58 <HAL_RCC_OscConfig+0x214>
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	2b0c      	cmp	r3, #12
 8004b50:	d10e      	bne.n	8004b70 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d10b      	bne.n	8004b70 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b58:	4b23      	ldr	r3, [pc, #140]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d064      	beq.n	8004c2e <HAL_RCC_OscConfig+0x2ea>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d160      	bne.n	8004c2e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e290      	b.n	8005092 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b78:	d106      	bne.n	8004b88 <HAL_RCC_OscConfig+0x244>
 8004b7a:	4b1b      	ldr	r3, [pc, #108]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1a      	ldr	r2, [pc, #104]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	e01d      	b.n	8004bc4 <HAL_RCC_OscConfig+0x280>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b90:	d10c      	bne.n	8004bac <HAL_RCC_OscConfig+0x268>
 8004b92:	4b15      	ldr	r3, [pc, #84]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a14      	ldr	r2, [pc, #80]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a11      	ldr	r2, [pc, #68]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	e00b      	b.n	8004bc4 <HAL_RCC_OscConfig+0x280>
 8004bac:	4b0e      	ldr	r3, [pc, #56]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a0d      	ldr	r2, [pc, #52]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a0a      	ldr	r2, [pc, #40]	; (8004be8 <HAL_RCC_OscConfig+0x2a4>)
 8004bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d01c      	beq.n	8004c06 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bcc:	f7fd f87c 	bl	8001cc8 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bd2:	e011      	b.n	8004bf8 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bd4:	f7fd f878 	bl	8001cc8 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b64      	cmp	r3, #100	; 0x64
 8004be0:	d90a      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e255      	b.n	8005092 <HAL_RCC_OscConfig+0x74e>
 8004be6:	bf00      	nop
 8004be8:	40021000 	.word	0x40021000
 8004bec:	0800d1bc 	.word	0x0800d1bc
 8004bf0:	20000010 	.word	0x20000010
 8004bf4:	20000014 	.word	0x20000014
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bf8:	4bae      	ldr	r3, [pc, #696]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0e7      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x290>
 8004c04:	e014      	b.n	8004c30 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c06:	f7fd f85f 	bl	8001cc8 <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c0e:	f7fd f85b 	bl	8001cc8 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b64      	cmp	r3, #100	; 0x64
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e238      	b.n	8005092 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c20:	4ba4      	ldr	r3, [pc, #656]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1f0      	bne.n	8004c0e <HAL_RCC_OscConfig+0x2ca>
 8004c2c:	e000      	b.n	8004c30 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c2e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d060      	beq.n	8004cfe <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d005      	beq.n	8004c4e <HAL_RCC_OscConfig+0x30a>
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	2b0c      	cmp	r3, #12
 8004c46:	d119      	bne.n	8004c7c <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d116      	bne.n	8004c7c <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c4e:	4b99      	ldr	r3, [pc, #612]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d005      	beq.n	8004c66 <HAL_RCC_OscConfig+0x322>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e215      	b.n	8005092 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c66:	4b93      	ldr	r3, [pc, #588]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	061b      	lsls	r3, r3, #24
 8004c74:	498f      	ldr	r1, [pc, #572]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c7a:	e040      	b.n	8004cfe <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d023      	beq.n	8004ccc <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c84:	4b8b      	ldr	r3, [pc, #556]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a8a      	ldr	r2, [pc, #552]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c90:	f7fd f81a 	bl	8001cc8 <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c98:	f7fd f816 	bl	8001cc8 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e1f3      	b.n	8005092 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004caa:	4b82      	ldr	r3, [pc, #520]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0f0      	beq.n	8004c98 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb6:	4b7f      	ldr	r3, [pc, #508]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	061b      	lsls	r3, r3, #24
 8004cc4:	497b      	ldr	r1, [pc, #492]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	604b      	str	r3, [r1, #4]
 8004cca:	e018      	b.n	8004cfe <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ccc:	4b79      	ldr	r3, [pc, #484]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a78      	ldr	r2, [pc, #480]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004cd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd8:	f7fc fff6 	bl	8001cc8 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ce0:	f7fc fff2 	bl	8001cc8 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e1cf      	b.n	8005092 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cf2:	4b70      	ldr	r3, [pc, #448]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f0      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d03c      	beq.n	8004d84 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d01c      	beq.n	8004d4c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d12:	4b68      	ldr	r3, [pc, #416]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d18:	4a66      	ldr	r2, [pc, #408]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004d1a:	f043 0301 	orr.w	r3, r3, #1
 8004d1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d22:	f7fc ffd1 	bl	8001cc8 <HAL_GetTick>
 8004d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d2a:	f7fc ffcd 	bl	8001cc8 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e1aa      	b.n	8005092 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d3c:	4b5d      	ldr	r3, [pc, #372]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0ef      	beq.n	8004d2a <HAL_RCC_OscConfig+0x3e6>
 8004d4a:	e01b      	b.n	8004d84 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d4c:	4b59      	ldr	r3, [pc, #356]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d52:	4a58      	ldr	r2, [pc, #352]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004d54:	f023 0301 	bic.w	r3, r3, #1
 8004d58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5c:	f7fc ffb4 	bl	8001cc8 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d64:	f7fc ffb0 	bl	8001cc8 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e18d      	b.n	8005092 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d76:	4b4f      	ldr	r3, [pc, #316]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1ef      	bne.n	8004d64 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 80a5 	beq.w	8004edc <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d92:	2300      	movs	r3, #0
 8004d94:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d96:	4b47      	ldr	r3, [pc, #284]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10d      	bne.n	8004dbe <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004da2:	4b44      	ldr	r3, [pc, #272]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da6:	4a43      	ldr	r2, [pc, #268]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dac:	6593      	str	r3, [r2, #88]	; 0x58
 8004dae:	4b41      	ldr	r3, [pc, #260]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db6:	60bb      	str	r3, [r7, #8]
 8004db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dbe:	4b3e      	ldr	r3, [pc, #248]	; (8004eb8 <HAL_RCC_OscConfig+0x574>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d118      	bne.n	8004dfc <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dca:	4b3b      	ldr	r3, [pc, #236]	; (8004eb8 <HAL_RCC_OscConfig+0x574>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a3a      	ldr	r2, [pc, #232]	; (8004eb8 <HAL_RCC_OscConfig+0x574>)
 8004dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dd6:	f7fc ff77 	bl	8001cc8 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dde:	f7fc ff73 	bl	8001cc8 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e150      	b.n	8005092 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004df0:	4b31      	ldr	r3, [pc, #196]	; (8004eb8 <HAL_RCC_OscConfig+0x574>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0f0      	beq.n	8004dde <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d108      	bne.n	8004e16 <HAL_RCC_OscConfig+0x4d2>
 8004e04:	4b2b      	ldr	r3, [pc, #172]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0a:	4a2a      	ldr	r2, [pc, #168]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004e0c:	f043 0301 	orr.w	r3, r3, #1
 8004e10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e14:	e024      	b.n	8004e60 <HAL_RCC_OscConfig+0x51c>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b05      	cmp	r3, #5
 8004e1c:	d110      	bne.n	8004e40 <HAL_RCC_OscConfig+0x4fc>
 8004e1e:	4b25      	ldr	r3, [pc, #148]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e24:	4a23      	ldr	r2, [pc, #140]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004e26:	f043 0304 	orr.w	r3, r3, #4
 8004e2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e2e:	4b21      	ldr	r3, [pc, #132]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e34:	4a1f      	ldr	r2, [pc, #124]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004e36:	f043 0301 	orr.w	r3, r3, #1
 8004e3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e3e:	e00f      	b.n	8004e60 <HAL_RCC_OscConfig+0x51c>
 8004e40:	4b1c      	ldr	r3, [pc, #112]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e46:	4a1b      	ldr	r2, [pc, #108]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004e48:	f023 0301 	bic.w	r3, r3, #1
 8004e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e50:	4b18      	ldr	r3, [pc, #96]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e56:	4a17      	ldr	r2, [pc, #92]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004e58:	f023 0304 	bic.w	r3, r3, #4
 8004e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d016      	beq.n	8004e96 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e68:	f7fc ff2e 	bl	8001cc8 <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e6e:	e00a      	b.n	8004e86 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e70:	f7fc ff2a 	bl	8001cc8 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e105      	b.n	8005092 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e86:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <HAL_RCC_OscConfig+0x570>)
 8004e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0ed      	beq.n	8004e70 <HAL_RCC_OscConfig+0x52c>
 8004e94:	e019      	b.n	8004eca <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e96:	f7fc ff17 	bl	8001cc8 <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e9c:	e00e      	b.n	8004ebc <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e9e:	f7fc ff13 	bl	8001cc8 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d905      	bls.n	8004ebc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e0ee      	b.n	8005092 <HAL_RCC_OscConfig+0x74e>
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ebc:	4b77      	ldr	r3, [pc, #476]	; (800509c <HAL_RCC_OscConfig+0x758>)
 8004ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1e9      	bne.n	8004e9e <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004eca:	7ffb      	ldrb	r3, [r7, #31]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d105      	bne.n	8004edc <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ed0:	4b72      	ldr	r3, [pc, #456]	; (800509c <HAL_RCC_OscConfig+0x758>)
 8004ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed4:	4a71      	ldr	r2, [pc, #452]	; (800509c <HAL_RCC_OscConfig+0x758>)
 8004ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eda:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 80d5 	beq.w	8005090 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	2b0c      	cmp	r3, #12
 8004eea:	f000 808e 	beq.w	800500a <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d15b      	bne.n	8004fae <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ef6:	4b69      	ldr	r3, [pc, #420]	; (800509c <HAL_RCC_OscConfig+0x758>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a68      	ldr	r2, [pc, #416]	; (800509c <HAL_RCC_OscConfig+0x758>)
 8004efc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f02:	f7fc fee1 	bl	8001cc8 <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f08:	e008      	b.n	8004f1c <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0a:	f7fc fedd 	bl	8001cc8 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e0ba      	b.n	8005092 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f1c:	4b5f      	ldr	r3, [pc, #380]	; (800509c <HAL_RCC_OscConfig+0x758>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1f0      	bne.n	8004f0a <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f28:	4b5c      	ldr	r3, [pc, #368]	; (800509c <HAL_RCC_OscConfig+0x758>)
 8004f2a:	68da      	ldr	r2, [r3, #12]
 8004f2c:	4b5c      	ldr	r3, [pc, #368]	; (80050a0 <HAL_RCC_OscConfig+0x75c>)
 8004f2e:	4013      	ands	r3, r2
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f38:	3a01      	subs	r2, #1
 8004f3a:	0112      	lsls	r2, r2, #4
 8004f3c:	4311      	orrs	r1, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f42:	0212      	lsls	r2, r2, #8
 8004f44:	4311      	orrs	r1, r2
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f4a:	0852      	lsrs	r2, r2, #1
 8004f4c:	3a01      	subs	r2, #1
 8004f4e:	0552      	lsls	r2, r2, #21
 8004f50:	4311      	orrs	r1, r2
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f56:	0852      	lsrs	r2, r2, #1
 8004f58:	3a01      	subs	r2, #1
 8004f5a:	0652      	lsls	r2, r2, #25
 8004f5c:	4311      	orrs	r1, r2
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f62:	0912      	lsrs	r2, r2, #4
 8004f64:	0452      	lsls	r2, r2, #17
 8004f66:	430a      	orrs	r2, r1
 8004f68:	494c      	ldr	r1, [pc, #304]	; (800509c <HAL_RCC_OscConfig+0x758>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f6e:	4b4b      	ldr	r3, [pc, #300]	; (800509c <HAL_RCC_OscConfig+0x758>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a4a      	ldr	r2, [pc, #296]	; (800509c <HAL_RCC_OscConfig+0x758>)
 8004f74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f78:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f7a:	4b48      	ldr	r3, [pc, #288]	; (800509c <HAL_RCC_OscConfig+0x758>)
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	4a47      	ldr	r2, [pc, #284]	; (800509c <HAL_RCC_OscConfig+0x758>)
 8004f80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f84:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f86:	f7fc fe9f 	bl	8001cc8 <HAL_GetTick>
 8004f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f8c:	e008      	b.n	8004fa0 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f8e:	f7fc fe9b 	bl	8001cc8 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e078      	b.n	8005092 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fa0:	4b3e      	ldr	r3, [pc, #248]	; (800509c <HAL_RCC_OscConfig+0x758>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0f0      	beq.n	8004f8e <HAL_RCC_OscConfig+0x64a>
 8004fac:	e070      	b.n	8005090 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fae:	4b3b      	ldr	r3, [pc, #236]	; (800509c <HAL_RCC_OscConfig+0x758>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a3a      	ldr	r2, [pc, #232]	; (800509c <HAL_RCC_OscConfig+0x758>)
 8004fb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fb8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004fba:	4b38      	ldr	r3, [pc, #224]	; (800509c <HAL_RCC_OscConfig+0x758>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d105      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004fc6:	4b35      	ldr	r3, [pc, #212]	; (800509c <HAL_RCC_OscConfig+0x758>)
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	4a34      	ldr	r2, [pc, #208]	; (800509c <HAL_RCC_OscConfig+0x758>)
 8004fcc:	f023 0303 	bic.w	r3, r3, #3
 8004fd0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004fd2:	4b32      	ldr	r3, [pc, #200]	; (800509c <HAL_RCC_OscConfig+0x758>)
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	4a31      	ldr	r2, [pc, #196]	; (800509c <HAL_RCC_OscConfig+0x758>)
 8004fd8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe2:	f7fc fe71 	bl	8001cc8 <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fe8:	e008      	b.n	8004ffc <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fea:	f7fc fe6d 	bl	8001cc8 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e04a      	b.n	8005092 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ffc:	4b27      	ldr	r3, [pc, #156]	; (800509c <HAL_RCC_OscConfig+0x758>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1f0      	bne.n	8004fea <HAL_RCC_OscConfig+0x6a6>
 8005008:	e042      	b.n	8005090 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e03d      	b.n	8005092 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8005016:	4b21      	ldr	r3, [pc, #132]	; (800509c <HAL_RCC_OscConfig+0x758>)
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f003 0203 	and.w	r2, r3, #3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	429a      	cmp	r2, r3
 8005028:	d130      	bne.n	800508c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005034:	3b01      	subs	r3, #1
 8005036:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005038:	429a      	cmp	r2, r3
 800503a:	d127      	bne.n	800508c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005046:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005048:	429a      	cmp	r2, r3
 800504a:	d11f      	bne.n	800508c <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005056:	2a07      	cmp	r2, #7
 8005058:	bf14      	ite	ne
 800505a:	2201      	movne	r2, #1
 800505c:	2200      	moveq	r2, #0
 800505e:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005060:	4293      	cmp	r3, r2
 8005062:	d113      	bne.n	800508c <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506e:	085b      	lsrs	r3, r3, #1
 8005070:	3b01      	subs	r3, #1
 8005072:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005074:	429a      	cmp	r2, r3
 8005076:	d109      	bne.n	800508c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	085b      	lsrs	r3, r3, #1
 8005084:	3b01      	subs	r3, #1
 8005086:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005088:	429a      	cmp	r2, r3
 800508a:	d001      	beq.n	8005090 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e000      	b.n	8005092 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3720      	adds	r7, #32
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40021000 	.word	0x40021000
 80050a0:	f99d808c 	.word	0xf99d808c

080050a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e0c8      	b.n	800524a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050b8:	4b66      	ldr	r3, [pc, #408]	; (8005254 <HAL_RCC_ClockConfig+0x1b0>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d910      	bls.n	80050e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c6:	4b63      	ldr	r3, [pc, #396]	; (8005254 <HAL_RCC_ClockConfig+0x1b0>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f023 0207 	bic.w	r2, r3, #7
 80050ce:	4961      	ldr	r1, [pc, #388]	; (8005254 <HAL_RCC_ClockConfig+0x1b0>)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d6:	4b5f      	ldr	r3, [pc, #380]	; (8005254 <HAL_RCC_ClockConfig+0x1b0>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d001      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e0b0      	b.n	800524a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d04c      	beq.n	800518e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	d107      	bne.n	800510c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050fc:	4b56      	ldr	r3, [pc, #344]	; (8005258 <HAL_RCC_ClockConfig+0x1b4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d121      	bne.n	800514c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e09e      	b.n	800524a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b02      	cmp	r3, #2
 8005112:	d107      	bne.n	8005124 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005114:	4b50      	ldr	r3, [pc, #320]	; (8005258 <HAL_RCC_ClockConfig+0x1b4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d115      	bne.n	800514c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e092      	b.n	800524a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d107      	bne.n	800513c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800512c:	4b4a      	ldr	r3, [pc, #296]	; (8005258 <HAL_RCC_ClockConfig+0x1b4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d109      	bne.n	800514c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e086      	b.n	800524a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800513c:	4b46      	ldr	r3, [pc, #280]	; (8005258 <HAL_RCC_ClockConfig+0x1b4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e07e      	b.n	800524a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800514c:	4b42      	ldr	r3, [pc, #264]	; (8005258 <HAL_RCC_ClockConfig+0x1b4>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f023 0203 	bic.w	r2, r3, #3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	493f      	ldr	r1, [pc, #252]	; (8005258 <HAL_RCC_ClockConfig+0x1b4>)
 800515a:	4313      	orrs	r3, r2
 800515c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800515e:	f7fc fdb3 	bl	8001cc8 <HAL_GetTick>
 8005162:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005164:	e00a      	b.n	800517c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005166:	f7fc fdaf 	bl	8001cc8 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	f241 3288 	movw	r2, #5000	; 0x1388
 8005174:	4293      	cmp	r3, r2
 8005176:	d901      	bls.n	800517c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e066      	b.n	800524a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800517c:	4b36      	ldr	r3, [pc, #216]	; (8005258 <HAL_RCC_ClockConfig+0x1b4>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f003 020c 	and.w	r2, r3, #12
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	429a      	cmp	r2, r3
 800518c:	d1eb      	bne.n	8005166 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d008      	beq.n	80051ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800519a:	4b2f      	ldr	r3, [pc, #188]	; (8005258 <HAL_RCC_ClockConfig+0x1b4>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	492c      	ldr	r1, [pc, #176]	; (8005258 <HAL_RCC_ClockConfig+0x1b4>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051ac:	4b29      	ldr	r3, [pc, #164]	; (8005254 <HAL_RCC_ClockConfig+0x1b0>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d210      	bcs.n	80051dc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ba:	4b26      	ldr	r3, [pc, #152]	; (8005254 <HAL_RCC_ClockConfig+0x1b0>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f023 0207 	bic.w	r2, r3, #7
 80051c2:	4924      	ldr	r1, [pc, #144]	; (8005254 <HAL_RCC_ClockConfig+0x1b0>)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ca:	4b22      	ldr	r3, [pc, #136]	; (8005254 <HAL_RCC_ClockConfig+0x1b0>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d001      	beq.n	80051dc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e036      	b.n	800524a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d008      	beq.n	80051fa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051e8:	4b1b      	ldr	r3, [pc, #108]	; (8005258 <HAL_RCC_ClockConfig+0x1b4>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	4918      	ldr	r1, [pc, #96]	; (8005258 <HAL_RCC_ClockConfig+0x1b4>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0308 	and.w	r3, r3, #8
 8005202:	2b00      	cmp	r3, #0
 8005204:	d009      	beq.n	800521a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005206:	4b14      	ldr	r3, [pc, #80]	; (8005258 <HAL_RCC_ClockConfig+0x1b4>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	4910      	ldr	r1, [pc, #64]	; (8005258 <HAL_RCC_ClockConfig+0x1b4>)
 8005216:	4313      	orrs	r3, r2
 8005218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800521a:	f000 f825 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 800521e:	4601      	mov	r1, r0
 8005220:	4b0d      	ldr	r3, [pc, #52]	; (8005258 <HAL_RCC_ClockConfig+0x1b4>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	091b      	lsrs	r3, r3, #4
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	4a0c      	ldr	r2, [pc, #48]	; (800525c <HAL_RCC_ClockConfig+0x1b8>)
 800522c:	5cd3      	ldrb	r3, [r2, r3]
 800522e:	f003 031f 	and.w	r3, r3, #31
 8005232:	fa21 f303 	lsr.w	r3, r1, r3
 8005236:	4a0a      	ldr	r2, [pc, #40]	; (8005260 <HAL_RCC_ClockConfig+0x1bc>)
 8005238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800523a:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <HAL_RCC_ClockConfig+0x1c0>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4618      	mov	r0, r3
 8005240:	f7fc fcf6 	bl	8001c30 <HAL_InitTick>
 8005244:	4603      	mov	r3, r0
 8005246:	72fb      	strb	r3, [r7, #11]

  return status;
 8005248:	7afb      	ldrb	r3, [r7, #11]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40022000 	.word	0x40022000
 8005258:	40021000 	.word	0x40021000
 800525c:	0800d1bc 	.word	0x0800d1bc
 8005260:	20000010 	.word	0x20000010
 8005264:	20000014 	.word	0x20000014

08005268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005268:	b480      	push	{r7}
 800526a:	b089      	sub	sp, #36	; 0x24
 800526c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	61fb      	str	r3, [r7, #28]
 8005272:	2300      	movs	r3, #0
 8005274:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005276:	4b3d      	ldr	r3, [pc, #244]	; (800536c <HAL_RCC_GetSysClockFreq+0x104>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 030c 	and.w	r3, r3, #12
 800527e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005280:	4b3a      	ldr	r3, [pc, #232]	; (800536c <HAL_RCC_GetSysClockFreq+0x104>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f003 0303 	and.w	r3, r3, #3
 8005288:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d005      	beq.n	800529c <HAL_RCC_GetSysClockFreq+0x34>
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2b0c      	cmp	r3, #12
 8005294:	d121      	bne.n	80052da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d11e      	bne.n	80052da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800529c:	4b33      	ldr	r3, [pc, #204]	; (800536c <HAL_RCC_GetSysClockFreq+0x104>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d107      	bne.n	80052b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80052a8:	4b30      	ldr	r3, [pc, #192]	; (800536c <HAL_RCC_GetSysClockFreq+0x104>)
 80052aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ae:	0a1b      	lsrs	r3, r3, #8
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	e005      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052b8:	4b2c      	ldr	r3, [pc, #176]	; (800536c <HAL_RCC_GetSysClockFreq+0x104>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	091b      	lsrs	r3, r3, #4
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052c4:	4a2a      	ldr	r2, [pc, #168]	; (8005370 <HAL_RCC_GetSysClockFreq+0x108>)
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10d      	bne.n	80052f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052d8:	e00a      	b.n	80052f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d102      	bne.n	80052e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052e0:	4b24      	ldr	r3, [pc, #144]	; (8005374 <HAL_RCC_GetSysClockFreq+0x10c>)
 80052e2:	61bb      	str	r3, [r7, #24]
 80052e4:	e004      	b.n	80052f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	2b08      	cmp	r3, #8
 80052ea:	d101      	bne.n	80052f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052ec:	4b22      	ldr	r3, [pc, #136]	; (8005378 <HAL_RCC_GetSysClockFreq+0x110>)
 80052ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	2b0c      	cmp	r3, #12
 80052f4:	d133      	bne.n	800535e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052f6:	4b1d      	ldr	r3, [pc, #116]	; (800536c <HAL_RCC_GetSysClockFreq+0x104>)
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d002      	beq.n	800530c <HAL_RCC_GetSysClockFreq+0xa4>
 8005306:	2b03      	cmp	r3, #3
 8005308:	d003      	beq.n	8005312 <HAL_RCC_GetSysClockFreq+0xaa>
 800530a:	e005      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800530c:	4b19      	ldr	r3, [pc, #100]	; (8005374 <HAL_RCC_GetSysClockFreq+0x10c>)
 800530e:	617b      	str	r3, [r7, #20]
      break;
 8005310:	e005      	b.n	800531e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005312:	4b19      	ldr	r3, [pc, #100]	; (8005378 <HAL_RCC_GetSysClockFreq+0x110>)
 8005314:	617b      	str	r3, [r7, #20]
      break;
 8005316:	e002      	b.n	800531e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	617b      	str	r3, [r7, #20]
      break;
 800531c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800531e:	4b13      	ldr	r3, [pc, #76]	; (800536c <HAL_RCC_GetSysClockFreq+0x104>)
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	091b      	lsrs	r3, r3, #4
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	3301      	adds	r3, #1
 800532a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800532c:	4b0f      	ldr	r3, [pc, #60]	; (800536c <HAL_RCC_GetSysClockFreq+0x104>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	0a1b      	lsrs	r3, r3, #8
 8005332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	fb02 f203 	mul.w	r2, r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005342:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005344:	4b09      	ldr	r3, [pc, #36]	; (800536c <HAL_RCC_GetSysClockFreq+0x104>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	0e5b      	lsrs	r3, r3, #25
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	3301      	adds	r3, #1
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	fbb2 f3f3 	udiv	r3, r2, r3
 800535c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800535e:	69bb      	ldr	r3, [r7, #24]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3724      	adds	r7, #36	; 0x24
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	40021000 	.word	0x40021000
 8005370:	0800d1d4 	.word	0x0800d1d4
 8005374:	00f42400 	.word	0x00f42400
 8005378:	007a1200 	.word	0x007a1200

0800537c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005380:	4b03      	ldr	r3, [pc, #12]	; (8005390 <HAL_RCC_GetHCLKFreq+0x14>)
 8005382:	681b      	ldr	r3, [r3, #0]
}
 8005384:	4618      	mov	r0, r3
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	20000010 	.word	0x20000010

08005394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005398:	f7ff fff0 	bl	800537c <HAL_RCC_GetHCLKFreq>
 800539c:	4601      	mov	r1, r0
 800539e:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	0a1b      	lsrs	r3, r3, #8
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	4a04      	ldr	r2, [pc, #16]	; (80053bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80053aa:	5cd3      	ldrb	r3, [r2, r3]
 80053ac:	f003 031f 	and.w	r3, r3, #31
 80053b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40021000 	.word	0x40021000
 80053bc:	0800d1cc 	.word	0x0800d1cc

080053c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053c4:	f7ff ffda 	bl	800537c <HAL_RCC_GetHCLKFreq>
 80053c8:	4601      	mov	r1, r0
 80053ca:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	0adb      	lsrs	r3, r3, #11
 80053d0:	f003 0307 	and.w	r3, r3, #7
 80053d4:	4a04      	ldr	r2, [pc, #16]	; (80053e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053d6:	5cd3      	ldrb	r3, [r2, r3]
 80053d8:	f003 031f 	and.w	r3, r3, #31
 80053dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40021000 	.word	0x40021000
 80053e8:	0800d1cc 	.word	0x0800d1cc

080053ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053f4:	2300      	movs	r3, #0
 80053f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053f8:	4b2a      	ldr	r3, [pc, #168]	; (80054a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005404:	f7ff f962 	bl	80046cc <HAL_PWREx_GetVoltageRange>
 8005408:	6178      	str	r0, [r7, #20]
 800540a:	e014      	b.n	8005436 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800540c:	4b25      	ldr	r3, [pc, #148]	; (80054a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800540e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005410:	4a24      	ldr	r2, [pc, #144]	; (80054a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005416:	6593      	str	r3, [r2, #88]	; 0x58
 8005418:	4b22      	ldr	r3, [pc, #136]	; (80054a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800541a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005424:	f7ff f952 	bl	80046cc <HAL_PWREx_GetVoltageRange>
 8005428:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800542a:	4b1e      	ldr	r3, [pc, #120]	; (80054a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800542c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542e:	4a1d      	ldr	r2, [pc, #116]	; (80054a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005434:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800543c:	d10b      	bne.n	8005456 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b80      	cmp	r3, #128	; 0x80
 8005442:	d919      	bls.n	8005478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2ba0      	cmp	r3, #160	; 0xa0
 8005448:	d902      	bls.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800544a:	2302      	movs	r3, #2
 800544c:	613b      	str	r3, [r7, #16]
 800544e:	e013      	b.n	8005478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005450:	2301      	movs	r3, #1
 8005452:	613b      	str	r3, [r7, #16]
 8005454:	e010      	b.n	8005478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b80      	cmp	r3, #128	; 0x80
 800545a:	d902      	bls.n	8005462 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800545c:	2303      	movs	r3, #3
 800545e:	613b      	str	r3, [r7, #16]
 8005460:	e00a      	b.n	8005478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b80      	cmp	r3, #128	; 0x80
 8005466:	d102      	bne.n	800546e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005468:	2302      	movs	r3, #2
 800546a:	613b      	str	r3, [r7, #16]
 800546c:	e004      	b.n	8005478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b70      	cmp	r3, #112	; 0x70
 8005472:	d101      	bne.n	8005478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005474:	2301      	movs	r3, #1
 8005476:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005478:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f023 0207 	bic.w	r2, r3, #7
 8005480:	4909      	ldr	r1, [pc, #36]	; (80054a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	4313      	orrs	r3, r2
 8005486:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005488:	4b07      	ldr	r3, [pc, #28]	; (80054a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	429a      	cmp	r2, r3
 8005494:	d001      	beq.n	800549a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e000      	b.n	800549c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40021000 	.word	0x40021000
 80054a8:	40022000 	.word	0x40022000

080054ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054b4:	2300      	movs	r3, #0
 80054b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054b8:	2300      	movs	r3, #0
 80054ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d03f      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054d0:	d01c      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x60>
 80054d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054d6:	d802      	bhi.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x32>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00e      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80054dc:	e01f      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80054de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054e2:	d003      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x40>
 80054e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054e8:	d01c      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80054ea:	e018      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054ec:	4b85      	ldr	r3, [pc, #532]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	4a84      	ldr	r2, [pc, #528]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054f8:	e015      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	3304      	adds	r3, #4
 80054fe:	2100      	movs	r1, #0
 8005500:	4618      	mov	r0, r3
 8005502:	f000 ff41 	bl	8006388 <RCCEx_PLLSAI1_Config>
 8005506:	4603      	mov	r3, r0
 8005508:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800550a:	e00c      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3320      	adds	r3, #32
 8005510:	2100      	movs	r1, #0
 8005512:	4618      	mov	r0, r3
 8005514:	f001 f828 	bl	8006568 <RCCEx_PLLSAI2_Config>
 8005518:	4603      	mov	r3, r0
 800551a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800551c:	e003      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	74fb      	strb	r3, [r7, #19]
      break;
 8005522:	e000      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005524:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005526:	7cfb      	ldrb	r3, [r7, #19]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10b      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800552c:	4b75      	ldr	r3, [pc, #468]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005532:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800553a:	4972      	ldr	r1, [pc, #456]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005542:	e001      	b.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005544:	7cfb      	ldrb	r3, [r7, #19]
 8005546:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d03f      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800555c:	d01c      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800555e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005562:	d802      	bhi.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00e      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005568:	e01f      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800556a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800556e:	d003      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005570:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005574:	d01c      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8005576:	e018      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005578:	4b62      	ldr	r3, [pc, #392]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	4a61      	ldr	r2, [pc, #388]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800557e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005582:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005584:	e015      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3304      	adds	r3, #4
 800558a:	2100      	movs	r1, #0
 800558c:	4618      	mov	r0, r3
 800558e:	f000 fefb 	bl	8006388 <RCCEx_PLLSAI1_Config>
 8005592:	4603      	mov	r3, r0
 8005594:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005596:	e00c      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3320      	adds	r3, #32
 800559c:	2100      	movs	r1, #0
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 ffe2 	bl	8006568 <RCCEx_PLLSAI2_Config>
 80055a4:	4603      	mov	r3, r0
 80055a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055a8:	e003      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	74fb      	strb	r3, [r7, #19]
      break;
 80055ae:	e000      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80055b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055b2:	7cfb      	ldrb	r3, [r7, #19]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10b      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055b8:	4b52      	ldr	r3, [pc, #328]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055c6:	494f      	ldr	r1, [pc, #316]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80055ce:	e001      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d0:	7cfb      	ldrb	r3, [r7, #19]
 80055d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 80a0 	beq.w	8005722 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055e2:	2300      	movs	r3, #0
 80055e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055e6:	4b47      	ldr	r3, [pc, #284]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80055f2:	2301      	movs	r3, #1
 80055f4:	e000      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80055f6:	2300      	movs	r3, #0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00d      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055fc:	4b41      	ldr	r3, [pc, #260]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005600:	4a40      	ldr	r2, [pc, #256]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005606:	6593      	str	r3, [r2, #88]	; 0x58
 8005608:	4b3e      	ldr	r3, [pc, #248]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800560a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005610:	60bb      	str	r3, [r7, #8]
 8005612:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005614:	2301      	movs	r3, #1
 8005616:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005618:	4b3b      	ldr	r3, [pc, #236]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a3a      	ldr	r2, [pc, #232]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800561e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005622:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005624:	f7fc fb50 	bl	8001cc8 <HAL_GetTick>
 8005628:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800562a:	e009      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800562c:	f7fc fb4c 	bl	8001cc8 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d902      	bls.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	74fb      	strb	r3, [r7, #19]
        break;
 800563e:	e005      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005640:	4b31      	ldr	r3, [pc, #196]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0ef      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800564c:	7cfb      	ldrb	r3, [r7, #19]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d15c      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005652:	4b2c      	ldr	r3, [pc, #176]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005658:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800565c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d01f      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	429a      	cmp	r2, r3
 800566e:	d019      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005670:	4b24      	ldr	r3, [pc, #144]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800567a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800567c:	4b21      	ldr	r3, [pc, #132]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800567e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005682:	4a20      	ldr	r2, [pc, #128]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800568c:	4b1d      	ldr	r3, [pc, #116]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800568e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005692:	4a1c      	ldr	r2, [pc, #112]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800569c:	4a19      	ldr	r2, [pc, #100]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d016      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ae:	f7fc fb0b 	bl	8001cc8 <HAL_GetTick>
 80056b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056b4:	e00b      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056b6:	f7fc fb07 	bl	8001cc8 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d902      	bls.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	74fb      	strb	r3, [r7, #19]
            break;
 80056cc:	e006      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056ce:	4b0d      	ldr	r3, [pc, #52]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0ec      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80056dc:	7cfb      	ldrb	r3, [r7, #19]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10c      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056e2:	4b08      	ldr	r3, [pc, #32]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056f2:	4904      	ldr	r1, [pc, #16]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80056fa:	e009      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056fc:	7cfb      	ldrb	r3, [r7, #19]
 80056fe:	74bb      	strb	r3, [r7, #18]
 8005700:	e006      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005702:	bf00      	nop
 8005704:	40021000 	.word	0x40021000
 8005708:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570c:	7cfb      	ldrb	r3, [r7, #19]
 800570e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005710:	7c7b      	ldrb	r3, [r7, #17]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d105      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005716:	4b9e      	ldr	r3, [pc, #632]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571a:	4a9d      	ldr	r2, [pc, #628]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800571c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005720:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800572e:	4b98      	ldr	r3, [pc, #608]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005734:	f023 0203 	bic.w	r2, r3, #3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573c:	4994      	ldr	r1, [pc, #592]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800573e:	4313      	orrs	r3, r2
 8005740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00a      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005750:	4b8f      	ldr	r3, [pc, #572]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005756:	f023 020c 	bic.w	r2, r3, #12
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575e:	498c      	ldr	r1, [pc, #560]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005760:	4313      	orrs	r3, r2
 8005762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0304 	and.w	r3, r3, #4
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00a      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005772:	4b87      	ldr	r3, [pc, #540]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005778:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005780:	4983      	ldr	r1, [pc, #524]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005782:	4313      	orrs	r3, r2
 8005784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00a      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005794:	4b7e      	ldr	r3, [pc, #504]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a2:	497b      	ldr	r1, [pc, #492]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0310 	and.w	r3, r3, #16
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00a      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80057b6:	4b76      	ldr	r3, [pc, #472]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057c4:	4972      	ldr	r1, [pc, #456]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0320 	and.w	r3, r3, #32
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00a      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057d8:	4b6d      	ldr	r3, [pc, #436]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e6:	496a      	ldr	r1, [pc, #424]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057fa:	4b65      	ldr	r3, [pc, #404]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005800:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005808:	4961      	ldr	r1, [pc, #388]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800580a:	4313      	orrs	r3, r2
 800580c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00a      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800581c:	4b5c      	ldr	r3, [pc, #368]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800581e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005822:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800582a:	4959      	ldr	r1, [pc, #356]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00a      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800583e:	4b54      	ldr	r3, [pc, #336]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005844:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800584c:	4950      	ldr	r1, [pc, #320]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800584e:	4313      	orrs	r3, r2
 8005850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005860:	4b4b      	ldr	r3, [pc, #300]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005866:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586e:	4948      	ldr	r1, [pc, #288]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005870:	4313      	orrs	r3, r2
 8005872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005882:	4b43      	ldr	r3, [pc, #268]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005888:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005890:	493f      	ldr	r1, [pc, #252]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005892:	4313      	orrs	r3, r2
 8005894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d028      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058a4:	4b3a      	ldr	r3, [pc, #232]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058b2:	4937      	ldr	r1, [pc, #220]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058c2:	d106      	bne.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058c4:	4b32      	ldr	r3, [pc, #200]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	4a31      	ldr	r2, [pc, #196]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058ce:	60d3      	str	r3, [r2, #12]
 80058d0:	e011      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058da:	d10c      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3304      	adds	r3, #4
 80058e0:	2101      	movs	r1, #1
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fd50 	bl	8006388 <RCCEx_PLLSAI1_Config>
 80058e8:	4603      	mov	r3, r0
 80058ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80058ec:	7cfb      	ldrb	r3, [r7, #19]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80058f2:	7cfb      	ldrb	r3, [r7, #19]
 80058f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d028      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005902:	4b23      	ldr	r3, [pc, #140]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005908:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005910:	491f      	ldr	r1, [pc, #124]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005920:	d106      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005922:	4b1b      	ldr	r3, [pc, #108]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	4a1a      	ldr	r2, [pc, #104]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005928:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800592c:	60d3      	str	r3, [r2, #12]
 800592e:	e011      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005934:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005938:	d10c      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3304      	adds	r3, #4
 800593e:	2101      	movs	r1, #1
 8005940:	4618      	mov	r0, r3
 8005942:	f000 fd21 	bl	8006388 <RCCEx_PLLSAI1_Config>
 8005946:	4603      	mov	r3, r0
 8005948:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800594a:	7cfb      	ldrb	r3, [r7, #19]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8005950:	7cfb      	ldrb	r3, [r7, #19]
 8005952:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d02b      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005960:	4b0b      	ldr	r3, [pc, #44]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005966:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800596e:	4908      	ldr	r1, [pc, #32]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800597a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800597e:	d109      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005980:	4b03      	ldr	r3, [pc, #12]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	4a02      	ldr	r2, [pc, #8]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800598a:	60d3      	str	r3, [r2, #12]
 800598c:	e014      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800598e:	bf00      	nop
 8005990:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005998:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800599c:	d10c      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	3304      	adds	r3, #4
 80059a2:	2101      	movs	r1, #1
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 fcef 	bl	8006388 <RCCEx_PLLSAI1_Config>
 80059aa:	4603      	mov	r3, r0
 80059ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059ae:	7cfb      	ldrb	r3, [r7, #19]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80059b4:	7cfb      	ldrb	r3, [r7, #19]
 80059b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d02f      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059c4:	4b2b      	ldr	r3, [pc, #172]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059d2:	4928      	ldr	r1, [pc, #160]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059e2:	d10d      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	3304      	adds	r3, #4
 80059e8:	2102      	movs	r1, #2
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fccc 	bl	8006388 <RCCEx_PLLSAI1_Config>
 80059f0:	4603      	mov	r3, r0
 80059f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059f4:	7cfb      	ldrb	r3, [r7, #19]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d014      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80059fa:	7cfb      	ldrb	r3, [r7, #19]
 80059fc:	74bb      	strb	r3, [r7, #18]
 80059fe:	e011      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a08:	d10c      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	3320      	adds	r3, #32
 8005a0e:	2102      	movs	r1, #2
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 fda9 	bl	8006568 <RCCEx_PLLSAI2_Config>
 8005a16:	4603      	mov	r3, r0
 8005a18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a1a:	7cfb      	ldrb	r3, [r7, #19]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005a20:	7cfb      	ldrb	r3, [r7, #19]
 8005a22:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a30:	4b10      	ldr	r3, [pc, #64]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a36:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a3e:	490d      	ldr	r1, [pc, #52]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00b      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a52:	4b08      	ldr	r3, [pc, #32]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a62:	4904      	ldr	r1, [pc, #16]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005a6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3718      	adds	r7, #24
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	40021000 	.word	0x40021000

08005a78 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b088      	sub	sp, #32
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a8a:	d137      	bne.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005a8c:	4bb8      	ldr	r3, [pc, #736]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a96:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a9e:	d014      	beq.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8005aa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aa4:	d01e      	beq.n	8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8005aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aaa:	d001      	beq.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005aac:	f000 bc53 	b.w	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005ab0:	4baf      	ldr	r3, [pc, #700]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	f040 8446 	bne.w	800634c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        frequency = LSE_VALUE;
 8005ac0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ac4:	61fb      	str	r3, [r7, #28]
      break;
 8005ac6:	f000 bc41 	b.w	800634c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005aca:	4ba9      	ldr	r3, [pc, #676]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	f040 843b 	bne.w	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          frequency = LSI_VALUE;
 8005ada:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005ade:	61fb      	str	r3, [r7, #28]
      break;
 8005ae0:	f000 bc36 	b.w	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ae4:	4ba2      	ldr	r3, [pc, #648]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005af0:	f040 8430 	bne.w	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        frequency = HSE_VALUE / 32U;
 8005af4:	4b9f      	ldr	r3, [pc, #636]	; (8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005af6:	61fb      	str	r3, [r7, #28]
      break;
 8005af8:	f000 bc2c 	b.w	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005afc:	4b9c      	ldr	r3, [pc, #624]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0303 	and.w	r3, r3, #3
 8005b04:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d023      	beq.n	8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005b0c:	2b03      	cmp	r3, #3
 8005b0e:	d02e      	beq.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d139      	bne.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005b14:	4b96      	ldr	r3, [pc, #600]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d116      	bne.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005b20:	4b93      	ldr	r3, [pc, #588]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0308 	and.w	r3, r3, #8
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d005      	beq.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8005b2c:	4b90      	ldr	r3, [pc, #576]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	091b      	lsrs	r3, r3, #4
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	e005      	b.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8005b38:	4b8d      	ldr	r3, [pc, #564]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b3e:	0a1b      	lsrs	r3, r3, #8
 8005b40:	f003 030f 	and.w	r3, r3, #15
 8005b44:	4a8c      	ldr	r2, [pc, #560]	; (8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b4a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005b4c:	e01f      	b.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61bb      	str	r3, [r7, #24]
      break;
 8005b52:	e01c      	b.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b54:	4b86      	ldr	r3, [pc, #536]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b60:	d102      	bne.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8005b62:	4b86      	ldr	r3, [pc, #536]	; (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005b64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005b66:	e012      	b.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	61bb      	str	r3, [r7, #24]
      break;
 8005b6c:	e00f      	b.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b6e:	4b80      	ldr	r3, [pc, #512]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b7a:	d102      	bne.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8005b7c:	4b80      	ldr	r3, [pc, #512]	; (8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8005b7e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005b80:	e005      	b.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	61bb      	str	r3, [r7, #24]
      break;
 8005b86:	e002      	b.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	61bb      	str	r3, [r7, #24]
      break;
 8005b8c:	bf00      	nop
    }

    switch(PeriphClk)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b94:	f000 8337 	beq.w	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 8005b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b9c:	d825      	bhi.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8005b9e:	2b10      	cmp	r3, #16
 8005ba0:	f000 81df 	beq.w	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005ba4:	2b10      	cmp	r3, #16
 8005ba6:	d80f      	bhi.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	f000 8128 	beq.w	8005dfe <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d803      	bhi.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	f000 80ec 	beq.w	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005bb8:	e3cd      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	f000 8169 	beq.w	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	f000 819a 	beq.w	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 8005bc6:	e3c6      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005bc8:	2b40      	cmp	r3, #64	; 0x40
 8005bca:	f000 82b3 	beq.w	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
 8005bce:	2b40      	cmp	r3, #64	; 0x40
 8005bd0:	d803      	bhi.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8005bd2:	2b20      	cmp	r3, #32
 8005bd4:	f000 81fd 	beq.w	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 8005bd8:	e3bd      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005bda:	2b80      	cmp	r3, #128	; 0x80
 8005bdc:	f000 82cd 	beq.w	800617a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8005be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be4:	f000 82ec 	beq.w	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
      break;
 8005be8:	e3b5      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005bea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bee:	f000 822d 	beq.w	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8005bf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bf6:	d811      	bhi.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8005bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bfc:	d021      	beq.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8005bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c02:	d804      	bhi.n	8005c0e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c08:	f000 833e 	beq.w	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
      break;
 8005c0c:	e3a3      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c12:	d01d      	beq.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8005c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c18:	d021      	beq.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8005c1a:	e39c      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c20:	f000 8277 	beq.w	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 8005c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c28:	d804      	bhi.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c2e:	f000 8371 	beq.w	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
      break;
 8005c32:	e390      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005c34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c38:	d011      	beq.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005c3a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c3e:	d00e      	beq.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8005c40:	e389      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005c42:	69b9      	ldr	r1, [r7, #24]
 8005c44:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005c48:	f000 fd68 	bl	800671c <RCCEx_GetSAIxPeriphCLKFreq>
 8005c4c:	61f8      	str	r0, [r7, #28]
      break;
 8005c4e:	e382      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005c50:	69b9      	ldr	r1, [r7, #24]
 8005c52:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005c56:	f000 fd61 	bl	800671c <RCCEx_GetSAIxPeriphCLKFreq>
 8005c5a:	61f8      	str	r0, [r7, #28]
      break;
 8005c5c:	e37b      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005c5e:	4b44      	ldr	r3, [pc, #272]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c64:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005c68:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c70:	d023      	beq.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 8005c72:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005c76:	d003      	beq.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005c78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c7c:	d04a      	beq.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 8005c7e:	e086      	b.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005c80:	4b3b      	ldr	r3, [pc, #236]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0302 	and.w	r3, r3, #2
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d17b      	bne.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005c8c:	4b38      	ldr	r3, [pc, #224]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0308 	and.w	r3, r3, #8
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d005      	beq.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8005c98:	4b35      	ldr	r3, [pc, #212]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	091b      	lsrs	r3, r3, #4
 8005c9e:	f003 030f 	and.w	r3, r3, #15
 8005ca2:	e005      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8005ca4:	4b32      	ldr	r3, [pc, #200]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005caa:	0a1b      	lsrs	r3, r3, #8
 8005cac:	f003 030f 	and.w	r3, r3, #15
 8005cb0:	4a31      	ldr	r2, [pc, #196]	; (8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cb6:	61fb      	str	r3, [r7, #28]
          break;
 8005cb8:	e064      	b.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005cba:	4b2d      	ldr	r3, [pc, #180]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cc6:	d15f      	bne.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005cc8:	4b29      	ldr	r3, [pc, #164]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cd4:	d158      	bne.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005cd6:	4b26      	ldr	r3, [pc, #152]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	0a1b      	lsrs	r3, r3, #8
 8005cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ce0:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	fb02 f203 	mul.w	r2, r2, r3
 8005cea:	4b21      	ldr	r3, [pc, #132]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	091b      	lsrs	r3, r3, #4
 8005cf0:	f003 0307 	and.w	r3, r3, #7
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfa:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005cfc:	4b1c      	ldr	r3, [pc, #112]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	0d5b      	lsrs	r3, r3, #21
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	3301      	adds	r3, #1
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d10:	61fb      	str	r3, [r7, #28]
          break;
 8005d12:	e039      	b.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005d14:	4b16      	ldr	r3, [pc, #88]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d20:	d134      	bne.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005d22:	4b13      	ldr	r3, [pc, #76]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d2e:	d12d      	bne.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005d30:	4b0f      	ldr	r3, [pc, #60]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	0a1b      	lsrs	r3, r3, #8
 8005d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d3a:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	fb02 f203 	mul.w	r2, r2, r3
 8005d44:	4b0a      	ldr	r3, [pc, #40]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	091b      	lsrs	r3, r3, #4
 8005d4a:	f003 0307 	and.w	r3, r3, #7
 8005d4e:	3301      	adds	r3, #1
 8005d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d54:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005d56:	4b06      	ldr	r3, [pc, #24]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	0d5b      	lsrs	r3, r3, #21
 8005d5c:	f003 0303 	and.w	r3, r3, #3
 8005d60:	3301      	adds	r3, #1
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6a:	61fb      	str	r3, [r7, #28]
          break;
 8005d6c:	e00e      	b.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005d6e:	bf00      	nop
 8005d70:	40021000 	.word	0x40021000
 8005d74:	0003d090 	.word	0x0003d090
 8005d78:	0800d1d4 	.word	0x0800d1d4
 8005d7c:	00f42400 	.word	0x00f42400
 8005d80:	007a1200 	.word	0x007a1200
          break;
 8005d84:	bf00      	nop
 8005d86:	e2e6      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005d88:	bf00      	nop
 8005d8a:	e2e4      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005d8c:	bf00      	nop
        break;
 8005d8e:	e2e2      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005d90:	4bac      	ldr	r3, [pc, #688]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d827      	bhi.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8005da2:	a201      	add	r2, pc, #4	; (adr r2, 8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da8:	08005db9 	.word	0x08005db9
 8005dac:	08005dc1 	.word	0x08005dc1
 8005db0:	08005dc9 	.word	0x08005dc9
 8005db4:	08005ddd 	.word	0x08005ddd
          frequency = HAL_RCC_GetPCLK2Freq();
 8005db8:	f7ff fb02 	bl	80053c0 <HAL_RCC_GetPCLK2Freq>
 8005dbc:	61f8      	str	r0, [r7, #28]
          break;
 8005dbe:	e01d      	b.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 8005dc0:	f7ff fa52 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8005dc4:	61f8      	str	r0, [r7, #28]
          break;
 8005dc6:	e019      	b.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005dc8:	4b9e      	ldr	r3, [pc, #632]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd4:	d10f      	bne.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 8005dd6:	4b9c      	ldr	r3, [pc, #624]	; (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005dd8:	61fb      	str	r3, [r7, #28]
          break;
 8005dda:	e00c      	b.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005ddc:	4b99      	ldr	r3, [pc, #612]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d107      	bne.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 8005dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dee:	61fb      	str	r3, [r7, #28]
          break;
 8005df0:	e003      	b.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 8005df2:	bf00      	nop
 8005df4:	e2af      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005df6:	bf00      	nop
 8005df8:	e2ad      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005dfa:	bf00      	nop
        break;
 8005dfc:	e2ab      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005dfe:	4b91      	ldr	r3, [pc, #580]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e04:	f003 030c 	and.w	r3, r3, #12
 8005e08:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	2b0c      	cmp	r3, #12
 8005e0e:	d83a      	bhi.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8005e10:	a201      	add	r2, pc, #4	; (adr r2, 8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8005e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e16:	bf00      	nop
 8005e18:	08005e4d 	.word	0x08005e4d
 8005e1c:	08005e87 	.word	0x08005e87
 8005e20:	08005e87 	.word	0x08005e87
 8005e24:	08005e87 	.word	0x08005e87
 8005e28:	08005e55 	.word	0x08005e55
 8005e2c:	08005e87 	.word	0x08005e87
 8005e30:	08005e87 	.word	0x08005e87
 8005e34:	08005e87 	.word	0x08005e87
 8005e38:	08005e5d 	.word	0x08005e5d
 8005e3c:	08005e87 	.word	0x08005e87
 8005e40:	08005e87 	.word	0x08005e87
 8005e44:	08005e87 	.word	0x08005e87
 8005e48:	08005e71 	.word	0x08005e71
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e4c:	f7ff faa2 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 8005e50:	61f8      	str	r0, [r7, #28]
          break;
 8005e52:	e01d      	b.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e54:	f7ff fa08 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8005e58:	61f8      	str	r0, [r7, #28]
          break;
 8005e5a:	e019      	b.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e5c:	4b79      	ldr	r3, [pc, #484]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e68:	d10f      	bne.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 8005e6a:	4b77      	ldr	r3, [pc, #476]	; (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005e6c:	61fb      	str	r3, [r7, #28]
          break;
 8005e6e:	e00c      	b.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e70:	4b74      	ldr	r3, [pc, #464]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d107      	bne.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 8005e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e82:	61fb      	str	r3, [r7, #28]
          break;
 8005e84:	e003      	b.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 8005e86:	bf00      	nop
 8005e88:	e265      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005e8a:	bf00      	nop
 8005e8c:	e263      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005e8e:	bf00      	nop
        break;
 8005e90:	e261      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005e92:	4b6c      	ldr	r3, [pc, #432]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e9c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	2b10      	cmp	r3, #16
 8005ea2:	d00d      	beq.n	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8005ea4:	2b10      	cmp	r3, #16
 8005ea6:	d802      	bhi.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d005      	beq.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 8005eac:	e024      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 8005eae:	2b20      	cmp	r3, #32
 8005eb0:	d00a      	beq.n	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8005eb2:	2b30      	cmp	r3, #48	; 0x30
 8005eb4:	d012      	beq.n	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 8005eb6:	e01f      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005eb8:	f7ff fa6c 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 8005ebc:	61f8      	str	r0, [r7, #28]
          break;
 8005ebe:	e01b      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ec0:	f7ff f9d2 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8005ec4:	61f8      	str	r0, [r7, #28]
          break;
 8005ec6:	e017      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ec8:	4b5e      	ldr	r3, [pc, #376]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed4:	d10d      	bne.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 8005ed6:	4b5c      	ldr	r3, [pc, #368]	; (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005ed8:	61fb      	str	r3, [r7, #28]
          break;
 8005eda:	e00a      	b.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005edc:	4b59      	ldr	r3, [pc, #356]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d105      	bne.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 8005eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eee:	61fb      	str	r3, [r7, #28]
          break;
 8005ef0:	e001      	b.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8005ef2:	bf00      	nop
 8005ef4:	e22f      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005ef6:	bf00      	nop
        break;
 8005ef8:	e22d      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005efa:	4b52      	ldr	r3, [pc, #328]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f00:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f04:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	2b40      	cmp	r3, #64	; 0x40
 8005f0a:	d00d      	beq.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 8005f0c:	2b40      	cmp	r3, #64	; 0x40
 8005f0e:	d802      	bhi.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 8005f14:	e024      	b.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 8005f16:	2b80      	cmp	r3, #128	; 0x80
 8005f18:	d00a      	beq.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8005f1a:	2bc0      	cmp	r3, #192	; 0xc0
 8005f1c:	d012      	beq.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 8005f1e:	e01f      	b.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f20:	f7ff fa38 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 8005f24:	61f8      	str	r0, [r7, #28]
          break;
 8005f26:	e01b      	b.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f28:	f7ff f99e 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8005f2c:	61f8      	str	r0, [r7, #28]
          break;
 8005f2e:	e017      	b.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f30:	4b44      	ldr	r3, [pc, #272]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f3c:	d10d      	bne.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 8005f3e:	4b42      	ldr	r3, [pc, #264]	; (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005f40:	61fb      	str	r3, [r7, #28]
          break;
 8005f42:	e00a      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005f44:	4b3f      	ldr	r3, [pc, #252]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d105      	bne.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 8005f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f56:	61fb      	str	r3, [r7, #28]
          break;
 8005f58:	e001      	b.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 8005f5a:	bf00      	nop
 8005f5c:	e1fb      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005f5e:	bf00      	nop
        break;
 8005f60:	e1f9      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005f62:	4b38      	ldr	r3, [pc, #224]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f6c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f74:	d010      	beq.n	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8005f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f7a:	d802      	bhi.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d007      	beq.n	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 8005f80:	e026      	b.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 8005f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f86:	d00b      	beq.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005f88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f8c:	d012      	beq.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 8005f8e:	e01f      	b.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f90:	f7ff fa00 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 8005f94:	61f8      	str	r0, [r7, #28]
          break;
 8005f96:	e01b      	b.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f98:	f7ff f966 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8005f9c:	61f8      	str	r0, [r7, #28]
          break;
 8005f9e:	e017      	b.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fa0:	4b28      	ldr	r3, [pc, #160]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fac:	d10d      	bne.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 8005fae:	4b26      	ldr	r3, [pc, #152]	; (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005fb0:	61fb      	str	r3, [r7, #28]
          break;
 8005fb2:	e00a      	b.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005fb4:	4b23      	ldr	r3, [pc, #140]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d105      	bne.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 8005fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fc6:	61fb      	str	r3, [r7, #28]
          break;
 8005fc8:	e001      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 8005fca:	bf00      	nop
 8005fcc:	e1c3      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005fce:	bf00      	nop
        break;
 8005fd0:	e1c1      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005fd2:	4b1c      	ldr	r3, [pc, #112]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fdc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe4:	d010      	beq.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8005fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fea:	d802      	bhi.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d007      	beq.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 8005ff0:	e026      	b.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 8005ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ff6:	d00b      	beq.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8005ff8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ffc:	d012      	beq.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 8005ffe:	e01f      	b.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006000:	f7ff f9c8 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 8006004:	61f8      	str	r0, [r7, #28]
          break;
 8006006:	e01b      	b.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 8006008:	f7ff f92e 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 800600c:	61f8      	str	r0, [r7, #28]
          break;
 800600e:	e017      	b.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006010:	4b0c      	ldr	r3, [pc, #48]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800601c:	d10d      	bne.n	800603a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 800601e:	4b0a      	ldr	r3, [pc, #40]	; (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8006020:	61fb      	str	r3, [r7, #28]
          break;
 8006022:	e00a      	b.n	800603a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006024:	4b07      	ldr	r3, [pc, #28]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b02      	cmp	r3, #2
 8006030:	d105      	bne.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 8006032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006036:	61fb      	str	r3, [r7, #28]
          break;
 8006038:	e001      	b.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 800603a:	bf00      	nop
 800603c:	e18b      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800603e:	bf00      	nop
        break;
 8006040:	e189      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006042:	bf00      	nop
 8006044:	40021000 	.word	0x40021000
 8006048:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800604c:	4bae      	ldr	r3, [pc, #696]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800604e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006052:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006056:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800605e:	d02f      	beq.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8006060:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006064:	d003      	beq.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006066:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800606a:	d004      	beq.n	8006076 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 800606c:	e050      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetSysClockFreq();
 800606e:	f7ff f8fb 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8006072:	61f8      	str	r0, [r7, #28]
          break;
 8006074:	e04c      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8006076:	4ba4      	ldr	r3, [pc, #656]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d043      	beq.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006082:	4ba1      	ldr	r3, [pc, #644]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	0a1b      	lsrs	r3, r3, #8
 8006088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800608c:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	fb02 f203 	mul.w	r2, r2, r3
 8006096:	4b9c      	ldr	r3, [pc, #624]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	091b      	lsrs	r3, r3, #4
 800609c:	f003 0307 	and.w	r3, r3, #7
 80060a0:	3301      	adds	r3, #1
 80060a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a6:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80060a8:	4b97      	ldr	r3, [pc, #604]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	0e5b      	lsrs	r3, r3, #25
 80060ae:	f003 0303 	and.w	r3, r3, #3
 80060b2:	3301      	adds	r3, #1
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060bc:	61fb      	str	r3, [r7, #28]
          break;
 80060be:	e024      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 80060c0:	4b91      	ldr	r3, [pc, #580]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d020      	beq.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80060cc:	4b8e      	ldr	r3, [pc, #568]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	0a1b      	lsrs	r3, r3, #8
 80060d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060d6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	fb02 f203 	mul.w	r2, r2, r3
 80060e0:	4b89      	ldr	r3, [pc, #548]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	091b      	lsrs	r3, r3, #4
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	3301      	adds	r3, #1
 80060ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80060f2:	4b85      	ldr	r3, [pc, #532]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	0e5b      	lsrs	r3, r3, #25
 80060f8:	f003 0303 	and.w	r3, r3, #3
 80060fc:	3301      	adds	r3, #1
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	fbb2 f3f3 	udiv	r3, r2, r3
 8006106:	61fb      	str	r3, [r7, #28]
          break;
 8006108:	e001      	b.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          break;
 800610a:	bf00      	nop
 800610c:	e123      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800610e:	bf00      	nop
        break;
 8006110:	e121      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006112:	4b7d      	ldr	r3, [pc, #500]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006118:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800611c:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d103      	bne.n	800612c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006124:	f7ff f94c 	bl	80053c0 <HAL_RCC_GetPCLK2Freq>
 8006128:	61f8      	str	r0, [r7, #28]
        break;
 800612a:	e114      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 800612c:	f7ff f89c 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8006130:	61f8      	str	r0, [r7, #28]
        break;
 8006132:	e110      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006134:	4b74      	ldr	r3, [pc, #464]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800613e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006146:	d009      	beq.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8006148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800614c:	d00a      	beq.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 800614e:	2b00      	cmp	r3, #0
 8006150:	d000      	beq.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          break;
 8006152:	e011      	b.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006154:	f7ff f91e 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 8006158:	61f8      	str	r0, [r7, #28]
          break;
 800615a:	e00d      	b.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetSysClockFreq();
 800615c:	f7ff f884 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8006160:	61f8      	str	r0, [r7, #28]
          break;
 8006162:	e009      	b.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006164:	4b68      	ldr	r3, [pc, #416]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800616c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006170:	d101      	bne.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
            frequency = HSI_VALUE;
 8006172:	4b66      	ldr	r3, [pc, #408]	; (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006174:	61fb      	str	r3, [r7, #28]
          break;
 8006176:	bf00      	nop
        break;
 8006178:	e0ed      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800617a:	4b63      	ldr	r3, [pc, #396]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800617c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006180:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006184:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800618c:	d009      	beq.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800618e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006192:	d00a      	beq.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 8006194:	2b00      	cmp	r3, #0
 8006196:	d000      	beq.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 8006198:	e011      	b.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetPCLK1Freq();
 800619a:	f7ff f8fb 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 800619e:	61f8      	str	r0, [r7, #28]
          break;
 80061a0:	e00d      	b.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetSysClockFreq();
 80061a2:	f7ff f861 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 80061a6:	61f8      	str	r0, [r7, #28]
          break;
 80061a8:	e009      	b.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061aa:	4b57      	ldr	r3, [pc, #348]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b6:	d101      	bne.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
            frequency = HSI_VALUE;
 80061b8:	4b54      	ldr	r3, [pc, #336]	; (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80061ba:	61fb      	str	r3, [r7, #28]
          break;
 80061bc:	bf00      	nop
        break;
 80061be:	e0ca      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80061c0:	4b51      	ldr	r3, [pc, #324]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80061c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061ca:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061d2:	d009      	beq.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80061d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061d8:	d00a      	beq.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d000      	beq.n	80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 80061de:	e011      	b.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80061e0:	f7ff f8d8 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 80061e4:	61f8      	str	r0, [r7, #28]
          break;
 80061e6:	e00d      	b.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetSysClockFreq();
 80061e8:	f7ff f83e 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 80061ec:	61f8      	str	r0, [r7, #28]
          break;
 80061ee:	e009      	b.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061f0:	4b45      	ldr	r3, [pc, #276]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061fc:	d101      	bne.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            frequency = HSI_VALUE;
 80061fe:	4b43      	ldr	r3, [pc, #268]	; (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006200:	61fb      	str	r3, [r7, #28]
          break;
 8006202:	bf00      	nop
        break;
 8006204:	e0a7      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006206:	4b40      	ldr	r3, [pc, #256]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800620c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006210:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006218:	d010      	beq.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 800621a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800621e:	d802      	bhi.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 8006220:	2b00      	cmp	r3, #0
 8006222:	d007      	beq.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
          break;
 8006224:	e02f      	b.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
        switch(srcclk)
 8006226:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800622a:	d012      	beq.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 800622c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006230:	d019      	beq.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8006232:	e028      	b.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006234:	f7ff f8ae 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 8006238:	61f8      	str	r0, [r7, #28]
          break;
 800623a:	e024      	b.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800623c:	4b32      	ldr	r3, [pc, #200]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800623e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b02      	cmp	r3, #2
 8006248:	d118      	bne.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
              frequency = LSI_VALUE;
 800624a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800624e:	61fb      	str	r3, [r7, #28]
          break;
 8006250:	e014      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006252:	4b2d      	ldr	r3, [pc, #180]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800625a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800625e:	d10f      	bne.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
            frequency = HSI_VALUE;
 8006260:	4b2a      	ldr	r3, [pc, #168]	; (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006262:	61fb      	str	r3, [r7, #28]
          break;
 8006264:	e00c      	b.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006266:	4b28      	ldr	r3, [pc, #160]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b02      	cmp	r3, #2
 8006272:	d107      	bne.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
            frequency = LSE_VALUE;
 8006274:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006278:	61fb      	str	r3, [r7, #28]
          break;
 800627a:	e003      	b.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          break;
 800627c:	bf00      	nop
 800627e:	e06a      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006280:	bf00      	nop
 8006282:	e068      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006284:	bf00      	nop
        break;
 8006286:	e066      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006288:	4b1f      	ldr	r3, [pc, #124]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800628a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006292:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800629a:	d010      	beq.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800629c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062a0:	d802      	bhi.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d007      	beq.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          break;
 80062a6:	e034      	b.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
        switch(srcclk)
 80062a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062ac:	d012      	beq.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 80062ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062b2:	d019      	beq.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          break;
 80062b4:	e02d      	b.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80062b6:	f7ff f86d 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 80062ba:	61f8      	str	r0, [r7, #28]
          break;
 80062bc:	e029      	b.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80062be:	4b12      	ldr	r3, [pc, #72]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80062c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d118      	bne.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = LSI_VALUE;
 80062cc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80062d0:	61fb      	str	r3, [r7, #28]
          break;
 80062d2:	e014      	b.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062d4:	4b0c      	ldr	r3, [pc, #48]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062e0:	d10f      	bne.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
            frequency = HSI_VALUE;
 80062e2:	4b0a      	ldr	r3, [pc, #40]	; (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80062e4:	61fb      	str	r3, [r7, #28]
          break;
 80062e6:	e00c      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80062e8:	4b07      	ldr	r3, [pc, #28]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80062ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d10c      	bne.n	8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
            frequency = LSE_VALUE;
 80062f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062fa:	61fb      	str	r3, [r7, #28]
          break;
 80062fc:	e008      	b.n	8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          break;
 80062fe:	bf00      	nop
 8006300:	e029      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006302:	bf00      	nop
 8006304:	e027      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006306:	bf00      	nop
 8006308:	40021000 	.word	0x40021000
 800630c:	00f42400 	.word	0x00f42400
          break;
 8006310:	bf00      	nop
        break;
 8006312:	e020      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8006314:	4b12      	ldr	r3, [pc, #72]	; (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800631a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800631e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
 8006326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800632a:	d004      	beq.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          break;
 800632c:	e00d      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800632e:	f7ff f831 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 8006332:	61f8      	str	r0, [r7, #28]
          break;
 8006334:	e009      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006336:	4b0a      	ldr	r3, [pc, #40]	; (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800633e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006342:	d101      	bne.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
            frequency = HSI_VALUE;
 8006344:	4b07      	ldr	r3, [pc, #28]	; (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
 8006346:	61fb      	str	r3, [r7, #28]
          break;
 8006348:	bf00      	nop
        break;
 800634a:	e004      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 800634c:	bf00      	nop
 800634e:	e002      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8006350:	bf00      	nop
 8006352:	e000      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8006354:	bf00      	nop
    }
  }

  return(frequency);
 8006356:	69fb      	ldr	r3, [r7, #28]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3720      	adds	r7, #32
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	40021000 	.word	0x40021000
 8006364:	00f42400 	.word	0x00f42400

08006368 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800636c:	4b05      	ldr	r3, [pc, #20]	; (8006384 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a04      	ldr	r2, [pc, #16]	; (8006384 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006372:	f043 0304 	orr.w	r3, r3, #4
 8006376:	6013      	str	r3, [r2, #0]
}
 8006378:	bf00      	nop
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	40021000 	.word	0x40021000

08006388 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006396:	4b73      	ldr	r3, [pc, #460]	; (8006564 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	f003 0303 	and.w	r3, r3, #3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d018      	beq.n	80063d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80063a2:	4b70      	ldr	r3, [pc, #448]	; (8006564 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f003 0203 	and.w	r2, r3, #3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d10d      	bne.n	80063ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
       ||
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d009      	beq.n	80063ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80063ba:	4b6a      	ldr	r3, [pc, #424]	; (8006564 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	091b      	lsrs	r3, r3, #4
 80063c0:	f003 0307 	and.w	r3, r3, #7
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
       ||
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d044      	beq.n	8006458 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	73fb      	strb	r3, [r7, #15]
 80063d2:	e041      	b.n	8006458 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d00c      	beq.n	80063f6 <RCCEx_PLLSAI1_Config+0x6e>
 80063dc:	2b03      	cmp	r3, #3
 80063de:	d013      	beq.n	8006408 <RCCEx_PLLSAI1_Config+0x80>
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d120      	bne.n	8006426 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80063e4:	4b5f      	ldr	r3, [pc, #380]	; (8006564 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d11d      	bne.n	800642c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063f4:	e01a      	b.n	800642c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80063f6:	4b5b      	ldr	r3, [pc, #364]	; (8006564 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d116      	bne.n	8006430 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006406:	e013      	b.n	8006430 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006408:	4b56      	ldr	r3, [pc, #344]	; (8006564 <RCCEx_PLLSAI1_Config+0x1dc>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10f      	bne.n	8006434 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006414:	4b53      	ldr	r3, [pc, #332]	; (8006564 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d109      	bne.n	8006434 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006424:	e006      	b.n	8006434 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	73fb      	strb	r3, [r7, #15]
      break;
 800642a:	e004      	b.n	8006436 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800642c:	bf00      	nop
 800642e:	e002      	b.n	8006436 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006430:	bf00      	nop
 8006432:	e000      	b.n	8006436 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006434:	bf00      	nop
    }

    if(status == HAL_OK)
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10d      	bne.n	8006458 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800643c:	4b49      	ldr	r3, [pc, #292]	; (8006564 <RCCEx_PLLSAI1_Config+0x1dc>)
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6819      	ldr	r1, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	3b01      	subs	r3, #1
 800644e:	011b      	lsls	r3, r3, #4
 8006450:	430b      	orrs	r3, r1
 8006452:	4944      	ldr	r1, [pc, #272]	; (8006564 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006454:	4313      	orrs	r3, r2
 8006456:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006458:	7bfb      	ldrb	r3, [r7, #15]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d17d      	bne.n	800655a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800645e:	4b41      	ldr	r3, [pc, #260]	; (8006564 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a40      	ldr	r2, [pc, #256]	; (8006564 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006464:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800646a:	f7fb fc2d 	bl	8001cc8 <HAL_GetTick>
 800646e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006470:	e009      	b.n	8006486 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006472:	f7fb fc29 	bl	8001cc8 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b02      	cmp	r3, #2
 800647e:	d902      	bls.n	8006486 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	73fb      	strb	r3, [r7, #15]
        break;
 8006484:	e005      	b.n	8006492 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006486:	4b37      	ldr	r3, [pc, #220]	; (8006564 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1ef      	bne.n	8006472 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006492:	7bfb      	ldrb	r3, [r7, #15]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d160      	bne.n	800655a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d111      	bne.n	80064c2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800649e:	4b31      	ldr	r3, [pc, #196]	; (8006564 <RCCEx_PLLSAI1_Config+0x1dc>)
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80064a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	6892      	ldr	r2, [r2, #8]
 80064ae:	0211      	lsls	r1, r2, #8
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	68d2      	ldr	r2, [r2, #12]
 80064b4:	0912      	lsrs	r2, r2, #4
 80064b6:	0452      	lsls	r2, r2, #17
 80064b8:	430a      	orrs	r2, r1
 80064ba:	492a      	ldr	r1, [pc, #168]	; (8006564 <RCCEx_PLLSAI1_Config+0x1dc>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	610b      	str	r3, [r1, #16]
 80064c0:	e027      	b.n	8006512 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d112      	bne.n	80064ee <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064c8:	4b26      	ldr	r3, [pc, #152]	; (8006564 <RCCEx_PLLSAI1_Config+0x1dc>)
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80064d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	6892      	ldr	r2, [r2, #8]
 80064d8:	0211      	lsls	r1, r2, #8
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	6912      	ldr	r2, [r2, #16]
 80064de:	0852      	lsrs	r2, r2, #1
 80064e0:	3a01      	subs	r2, #1
 80064e2:	0552      	lsls	r2, r2, #21
 80064e4:	430a      	orrs	r2, r1
 80064e6:	491f      	ldr	r1, [pc, #124]	; (8006564 <RCCEx_PLLSAI1_Config+0x1dc>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	610b      	str	r3, [r1, #16]
 80064ec:	e011      	b.n	8006512 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064ee:	4b1d      	ldr	r3, [pc, #116]	; (8006564 <RCCEx_PLLSAI1_Config+0x1dc>)
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80064f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6892      	ldr	r2, [r2, #8]
 80064fe:	0211      	lsls	r1, r2, #8
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6952      	ldr	r2, [r2, #20]
 8006504:	0852      	lsrs	r2, r2, #1
 8006506:	3a01      	subs	r2, #1
 8006508:	0652      	lsls	r2, r2, #25
 800650a:	430a      	orrs	r2, r1
 800650c:	4915      	ldr	r1, [pc, #84]	; (8006564 <RCCEx_PLLSAI1_Config+0x1dc>)
 800650e:	4313      	orrs	r3, r2
 8006510:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006512:	4b14      	ldr	r3, [pc, #80]	; (8006564 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a13      	ldr	r2, [pc, #76]	; (8006564 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006518:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800651c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800651e:	f7fb fbd3 	bl	8001cc8 <HAL_GetTick>
 8006522:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006524:	e009      	b.n	800653a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006526:	f7fb fbcf 	bl	8001cc8 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	2b02      	cmp	r3, #2
 8006532:	d902      	bls.n	800653a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	73fb      	strb	r3, [r7, #15]
          break;
 8006538:	e005      	b.n	8006546 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800653a:	4b0a      	ldr	r3, [pc, #40]	; (8006564 <RCCEx_PLLSAI1_Config+0x1dc>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d0ef      	beq.n	8006526 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8006546:	7bfb      	ldrb	r3, [r7, #15]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d106      	bne.n	800655a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800654c:	4b05      	ldr	r3, [pc, #20]	; (8006564 <RCCEx_PLLSAI1_Config+0x1dc>)
 800654e:	691a      	ldr	r2, [r3, #16]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	4903      	ldr	r1, [pc, #12]	; (8006564 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006556:	4313      	orrs	r3, r2
 8006558:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800655a:	7bfb      	ldrb	r3, [r7, #15]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	40021000 	.word	0x40021000

08006568 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006576:	4b68      	ldr	r3, [pc, #416]	; (8006718 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d018      	beq.n	80065b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006582:	4b65      	ldr	r3, [pc, #404]	; (8006718 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	f003 0203 	and.w	r2, r3, #3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d10d      	bne.n	80065ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
       ||
 8006596:	2b00      	cmp	r3, #0
 8006598:	d009      	beq.n	80065ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800659a:	4b5f      	ldr	r3, [pc, #380]	; (8006718 <RCCEx_PLLSAI2_Config+0x1b0>)
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	091b      	lsrs	r3, r3, #4
 80065a0:	f003 0307 	and.w	r3, r3, #7
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
       ||
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d044      	beq.n	8006638 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	73fb      	strb	r3, [r7, #15]
 80065b2:	e041      	b.n	8006638 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d00c      	beq.n	80065d6 <RCCEx_PLLSAI2_Config+0x6e>
 80065bc:	2b03      	cmp	r3, #3
 80065be:	d013      	beq.n	80065e8 <RCCEx_PLLSAI2_Config+0x80>
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d120      	bne.n	8006606 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065c4:	4b54      	ldr	r3, [pc, #336]	; (8006718 <RCCEx_PLLSAI2_Config+0x1b0>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d11d      	bne.n	800660c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065d4:	e01a      	b.n	800660c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80065d6:	4b50      	ldr	r3, [pc, #320]	; (8006718 <RCCEx_PLLSAI2_Config+0x1b0>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d116      	bne.n	8006610 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065e6:	e013      	b.n	8006610 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80065e8:	4b4b      	ldr	r3, [pc, #300]	; (8006718 <RCCEx_PLLSAI2_Config+0x1b0>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10f      	bne.n	8006614 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80065f4:	4b48      	ldr	r3, [pc, #288]	; (8006718 <RCCEx_PLLSAI2_Config+0x1b0>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d109      	bne.n	8006614 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006604:	e006      	b.n	8006614 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	73fb      	strb	r3, [r7, #15]
      break;
 800660a:	e004      	b.n	8006616 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800660c:	bf00      	nop
 800660e:	e002      	b.n	8006616 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006610:	bf00      	nop
 8006612:	e000      	b.n	8006616 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006614:	bf00      	nop
    }

    if(status == HAL_OK)
 8006616:	7bfb      	ldrb	r3, [r7, #15]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10d      	bne.n	8006638 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800661c:	4b3e      	ldr	r3, [pc, #248]	; (8006718 <RCCEx_PLLSAI2_Config+0x1b0>)
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6819      	ldr	r1, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	3b01      	subs	r3, #1
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	430b      	orrs	r3, r1
 8006632:	4939      	ldr	r1, [pc, #228]	; (8006718 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006634:	4313      	orrs	r3, r2
 8006636:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d167      	bne.n	800670e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800663e:	4b36      	ldr	r3, [pc, #216]	; (8006718 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a35      	ldr	r2, [pc, #212]	; (8006718 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006648:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800664a:	f7fb fb3d 	bl	8001cc8 <HAL_GetTick>
 800664e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006650:	e009      	b.n	8006666 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006652:	f7fb fb39 	bl	8001cc8 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	2b02      	cmp	r3, #2
 800665e:	d902      	bls.n	8006666 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	73fb      	strb	r3, [r7, #15]
        break;
 8006664:	e005      	b.n	8006672 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006666:	4b2c      	ldr	r3, [pc, #176]	; (8006718 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1ef      	bne.n	8006652 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006672:	7bfb      	ldrb	r3, [r7, #15]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d14a      	bne.n	800670e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d111      	bne.n	80066a2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800667e:	4b26      	ldr	r3, [pc, #152]	; (8006718 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6892      	ldr	r2, [r2, #8]
 800668e:	0211      	lsls	r1, r2, #8
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	68d2      	ldr	r2, [r2, #12]
 8006694:	0912      	lsrs	r2, r2, #4
 8006696:	0452      	lsls	r2, r2, #17
 8006698:	430a      	orrs	r2, r1
 800669a:	491f      	ldr	r1, [pc, #124]	; (8006718 <RCCEx_PLLSAI2_Config+0x1b0>)
 800669c:	4313      	orrs	r3, r2
 800669e:	614b      	str	r3, [r1, #20]
 80066a0:	e011      	b.n	80066c6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066a2:	4b1d      	ldr	r3, [pc, #116]	; (8006718 <RCCEx_PLLSAI2_Config+0x1b0>)
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80066aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	6892      	ldr	r2, [r2, #8]
 80066b2:	0211      	lsls	r1, r2, #8
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	6912      	ldr	r2, [r2, #16]
 80066b8:	0852      	lsrs	r2, r2, #1
 80066ba:	3a01      	subs	r2, #1
 80066bc:	0652      	lsls	r2, r2, #25
 80066be:	430a      	orrs	r2, r1
 80066c0:	4915      	ldr	r1, [pc, #84]	; (8006718 <RCCEx_PLLSAI2_Config+0x1b0>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80066c6:	4b14      	ldr	r3, [pc, #80]	; (8006718 <RCCEx_PLLSAI2_Config+0x1b0>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a13      	ldr	r2, [pc, #76]	; (8006718 <RCCEx_PLLSAI2_Config+0x1b0>)
 80066cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066d2:	f7fb faf9 	bl	8001cc8 <HAL_GetTick>
 80066d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80066d8:	e009      	b.n	80066ee <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80066da:	f7fb faf5 	bl	8001cc8 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d902      	bls.n	80066ee <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	73fb      	strb	r3, [r7, #15]
          break;
 80066ec:	e005      	b.n	80066fa <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80066ee:	4b0a      	ldr	r3, [pc, #40]	; (8006718 <RCCEx_PLLSAI2_Config+0x1b0>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d0ef      	beq.n	80066da <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d106      	bne.n	800670e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006700:	4b05      	ldr	r3, [pc, #20]	; (8006718 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006702:	695a      	ldr	r2, [r3, #20]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	4903      	ldr	r1, [pc, #12]	; (8006718 <RCCEx_PLLSAI2_Config+0x1b0>)
 800670a:	4313      	orrs	r3, r2
 800670c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800670e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	40021000 	.word	0x40021000

0800671c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800671c:	b480      	push	{r7}
 800671e:	b089      	sub	sp, #36	; 0x24
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006726:	2300      	movs	r3, #0
 8006728:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006738:	d10c      	bne.n	8006754 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800673a:	4b62      	ldr	r3, [pc, #392]	; (80068c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800673c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006740:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006744:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800674c:	d112      	bne.n	8006774 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800674e:	4b5e      	ldr	r3, [pc, #376]	; (80068c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8006750:	61fb      	str	r3, [r7, #28]
 8006752:	e00f      	b.n	8006774 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800675a:	d10b      	bne.n	8006774 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800675c:	4b59      	ldr	r3, [pc, #356]	; (80068c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800675e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006762:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006766:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800676e:	d101      	bne.n	8006774 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006770:	4b55      	ldr	r3, [pc, #340]	; (80068c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8006772:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	2b00      	cmp	r3, #0
 8006778:	f040 809c 	bne.w	80068b4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
  {
    pllvco = InputFrequency;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006786:	d003      	beq.n	8006790 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800678e:	d12d      	bne.n	80067ec <RCCEx_GetSAIxPeriphCLKFreq+0xd0>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8006790:	4b4c      	ldr	r3, [pc, #304]	; (80068c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 808b 	beq.w	80068b4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800679e:	4b49      	ldr	r3, [pc, #292]	; (80068c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	091b      	lsrs	r3, r3, #4
 80067a4:	f003 0307 	and.w	r3, r3, #7
 80067a8:	3301      	adds	r3, #1
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80067b2:	4b44      	ldr	r3, [pc, #272]	; (80068c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	0a1b      	lsrs	r3, r3, #8
 80067b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067bc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10a      	bne.n	80067da <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80067c4:	4b3f      	ldr	r3, [pc, #252]	; (80068c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <RCCEx_GetSAIxPeriphCLKFreq+0xba>
          {
            pllp = 17U;
 80067d0:	2311      	movs	r3, #17
 80067d2:	617b      	str	r3, [r7, #20]
 80067d4:	e001      	b.n	80067da <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
          }
          else
          {
            pllp = 7U;
 80067d6:	2307      	movs	r3, #7
 80067d8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	fb02 f203 	mul.w	r2, r2, r3
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e8:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 80067ea:	e063      	b.n	80068b4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d12c      	bne.n	800684c <RCCEx_GetSAIxPeriphCLKFreq+0x130>
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 80067f2:	4b34      	ldr	r3, [pc, #208]	; (80068c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d05a      	beq.n	80068b4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80067fe:	4b31      	ldr	r3, [pc, #196]	; (80068c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	091b      	lsrs	r3, r3, #4
 8006804:	f003 0307 	and.w	r3, r3, #7
 8006808:	3301      	adds	r3, #1
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006810:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006812:	4b2c      	ldr	r3, [pc, #176]	; (80068c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	0a1b      	lsrs	r3, r3, #8
 8006818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800681c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10a      	bne.n	800683a <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006824:	4b27      	ldr	r3, [pc, #156]	; (80068c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <RCCEx_GetSAIxPeriphCLKFreq+0x11a>
          {
            pllp = 17U;
 8006830:	2311      	movs	r3, #17
 8006832:	617b      	str	r3, [r7, #20]
 8006834:	e001      	b.n	800683a <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
          }
          else
          {
            pllp = 7U;
 8006836:	2307      	movs	r3, #7
 8006838:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	fb02 f203 	mul.w	r2, r2, r3
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	fbb2 f3f3 	udiv	r3, r2, r3
 8006848:	61fb      	str	r3, [r7, #28]
 800684a:	e033      	b.n	80068b4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006852:	d003      	beq.n	800685c <RCCEx_GetSAIxPeriphCLKFreq+0x140>
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800685a:	d12b      	bne.n	80068b4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 800685c:	4b19      	ldr	r3, [pc, #100]	; (80068c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d025      	beq.n	80068b4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006868:	4b16      	ldr	r3, [pc, #88]	; (80068c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	091b      	lsrs	r3, r3, #4
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	3301      	adds	r3, #1
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	fbb2 f3f3 	udiv	r3, r2, r3
 800687a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800687c:	4b11      	ldr	r3, [pc, #68]	; (80068c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	0a1b      	lsrs	r3, r3, #8
 8006882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006886:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10a      	bne.n	80068a4 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800688e:	4b0d      	ldr	r3, [pc, #52]	; (80068c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d002      	beq.n	80068a0 <RCCEx_GetSAIxPeriphCLKFreq+0x184>
          {
            pllp = 17U;
 800689a:	2311      	movs	r3, #17
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	e001      	b.n	80068a4 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
          }
          else
          {
            pllp = 7U;
 80068a0:	2307      	movs	r3, #7
 80068a2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	fb02 f203 	mul.w	r2, r2, r3
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b2:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80068b4:	69fb      	ldr	r3, [r7, #28]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3724      	adds	r7, #36	; 0x24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	40021000 	.word	0x40021000
 80068c8:	001fff68 	.word	0x001fff68

080068cc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d06f      	beq.n	80069be <HAL_RTC_Init+0xf2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d106      	bne.n	80068f8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7fa fb06 	bl	8000f04 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	22ca      	movs	r2, #202	; 0xca
 8006906:	625a      	str	r2, [r3, #36]	; 0x24
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2253      	movs	r2, #83	; 0x53
 800690e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f9a3 	bl	8006c5c <RTC_EnterInitMode>
 8006916:	4603      	mov	r3, r0
 8006918:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800691a:	7bfb      	ldrb	r3, [r7, #15]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d14e      	bne.n	80069be <HAL_RTC_Init+0xf2>
#if defined(STM32L412xx) || defined(STM32L422xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	6812      	ldr	r2, [r2, #0]
 800692a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800692e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006932:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6899      	ldr	r1, [r3, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	431a      	orrs	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	431a      	orrs	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	68d2      	ldr	r2, [r2, #12]
 800695a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6919      	ldr	r1, [r3, #16]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	041a      	lsls	r2, r3, #16
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f9a7 	bl	8006cc4 <RTC_ExitInitMode>
 8006976:	4603      	mov	r3, r0
 8006978:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800697a:	7bfb      	ldrb	r3, [r7, #15]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d11e      	bne.n	80069be <HAL_RTC_Init+0xf2>
      {
#if defined(STM32L412xx) || defined(STM32L422xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0203 	bic.w	r2, r2, #3
 800698e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	69da      	ldr	r2, [r3, #28]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	22ff      	movs	r2, #255	; 0xff
 80069ae:	625a      	str	r2, [r3, #36]	; 0x24

        if (status == HAL_OK)
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d103      	bne.n	80069be <HAL_RTC_Init+0xf2>
        {
          hrtc->State = HAL_RTC_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
      }
    }
  }

  return status;
 80069be:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80069c8:	b590      	push	{r4, r7, lr}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d101      	bne.n	80069e2 <HAL_RTC_SetTime+0x1a>
 80069de:	2302      	movs	r3, #2
 80069e0:	e08b      	b.n	8006afa <HAL_RTC_SetTime+0x132>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2202      	movs	r2, #2
 80069ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	22ca      	movs	r2, #202	; 0xca
 80069f8:	625a      	str	r2, [r3, #36]	; 0x24
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2253      	movs	r2, #83	; 0x53
 8006a00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 f92a 	bl	8006c5c <RTC_EnterInitMode>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006a0c:	7cfb      	ldrb	r3, [r7, #19]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d163      	bne.n	8006ada <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d126      	bne.n	8006a66 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d102      	bne.n	8006a2c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 f985 	bl	8006d40 <RTC_ByteToBcd2>
 8006a36:	4603      	mov	r3, r0
 8006a38:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	785b      	ldrb	r3, [r3, #1]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 f97e 	bl	8006d40 <RTC_ByteToBcd2>
 8006a44:	4603      	mov	r3, r0
 8006a46:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a48:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	789b      	ldrb	r3, [r3, #2]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 f976 	bl	8006d40 <RTC_ByteToBcd2>
 8006a54:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a56:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	78db      	ldrb	r3, [r3, #3]
 8006a5e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a60:	4313      	orrs	r3, r2
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	e018      	b.n	8006a98 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d102      	bne.n	8006a7a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2200      	movs	r2, #0
 8006a78:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	785b      	ldrb	r3, [r3, #1]
 8006a84:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a86:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a8c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	78db      	ldrb	r3, [r3, #3]
 8006a92:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a94:	4313      	orrs	r3, r2
 8006a96:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006aa2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006aa6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689a      	ldr	r2, [r3, #8]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ab6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6899      	ldr	r1, [r3, #8]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 f8f7 	bl	8006cc4 <RTC_ExitInitMode>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	22ff      	movs	r2, #255	; 0xff
 8006ae0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006ae2:	7cfb      	ldrb	r3, [r7, #19]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d103      	bne.n	8006af0 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006af8:	7cfb      	ldrb	r3, [r7, #19]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	371c      	adds	r7, #28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd90      	pop	{r4, r7, pc}

08006b02 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006b02:	b590      	push	{r4, r7, lr}
 8006b04:	b087      	sub	sp, #28
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d101      	bne.n	8006b1c <HAL_RTC_SetDate+0x1a>
 8006b18:	2302      	movs	r3, #2
 8006b1a:	e075      	b.n	8006c08 <HAL_RTC_SetDate+0x106>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10e      	bne.n	8006b50 <HAL_RTC_SetDate+0x4e>
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	785b      	ldrb	r3, [r3, #1]
 8006b36:	f003 0310 	and.w	r3, r3, #16
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d008      	beq.n	8006b50 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	785b      	ldrb	r3, [r3, #1]
 8006b42:	f023 0310 	bic.w	r3, r3, #16
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	330a      	adds	r3, #10
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d11c      	bne.n	8006b90 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	78db      	ldrb	r3, [r3, #3]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 f8f0 	bl	8006d40 <RTC_ByteToBcd2>
 8006b60:	4603      	mov	r3, r0
 8006b62:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	785b      	ldrb	r3, [r3, #1]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 f8e9 	bl	8006d40 <RTC_ByteToBcd2>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006b72:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	789b      	ldrb	r3, [r3, #2]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 f8e1 	bl	8006d40 <RTC_ByteToBcd2>
 8006b7e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006b80:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	617b      	str	r3, [r7, #20]
 8006b8e:	e00e      	b.n	8006bae <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	78db      	ldrb	r3, [r3, #3]
 8006b94:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	785b      	ldrb	r3, [r3, #1]
 8006b9a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006b9c:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006ba2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006baa:	4313      	orrs	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	22ca      	movs	r2, #202	; 0xca
 8006bb4:	625a      	str	r2, [r3, #36]	; 0x24
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2253      	movs	r2, #83	; 0x53
 8006bbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 f84c 	bl	8006c5c <RTC_EnterInitMode>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006bc8:	7cfb      	ldrb	r3, [r7, #19]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10c      	bne.n	8006be8 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006bd8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006bdc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f000 f870 	bl	8006cc4 <RTC_ExitInitMode>
 8006be4:	4603      	mov	r3, r0
 8006be6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	22ff      	movs	r2, #255	; 0xff
 8006bee:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006bf0:	7cfb      	ldrb	r3, [r7, #19]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d103      	bne.n	8006bfe <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006c06:	7cfb      	ldrb	r3, [r7, #19]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	371c      	adds	r7, #28
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd90      	pop	{r4, r7, pc}

08006c10 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68da      	ldr	r2, [r3, #12]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c26:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006c28:	f7fb f84e 	bl	8001cc8 <HAL_GetTick>
 8006c2c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006c2e:	e009      	b.n	8006c44 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c30:	f7fb f84a 	bl	8001cc8 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c3e:	d901      	bls.n	8006c44 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e007      	b.n	8006c54 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f003 0320 	and.w	r3, r3, #32
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d0ee      	beq.n	8006c30 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c64:	2300      	movs	r3, #0
 8006c66:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d120      	bne.n	8006cb8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c7e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006c80:	f7fb f822 	bl	8001cc8 <HAL_GetTick>
 8006c84:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006c86:	e00d      	b.n	8006ca4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006c88:	f7fb f81e 	bl	8001cc8 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c96:	d905      	bls.n	8006ca4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2203      	movs	r2, #3
 8006ca0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d102      	bne.n	8006cb8 <RTC_EnterInitMode+0x5c>
 8006cb2:	7bfb      	ldrb	r3, [r7, #15]
 8006cb4:	2b03      	cmp	r3, #3
 8006cb6:	d1e7      	bne.n	8006c88 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return status;
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
	...

08006cc4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006cd0:	4b1a      	ldr	r3, [pc, #104]	; (8006d3c <RTC_ExitInitMode+0x78>)
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	4a19      	ldr	r2, [pc, #100]	; (8006d3c <RTC_ExitInitMode+0x78>)
 8006cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cda:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006cdc:	4b17      	ldr	r3, [pc, #92]	; (8006d3c <RTC_ExitInitMode+0x78>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f003 0320 	and.w	r3, r3, #32
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10c      	bne.n	8006d02 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7ff ff91 	bl	8006c10 <HAL_RTC_WaitForSynchro>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d01e      	beq.n	8006d32 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2203      	movs	r2, #3
 8006cf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	73fb      	strb	r3, [r7, #15]
 8006d00:	e017      	b.n	8006d32 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006d02:	4b0e      	ldr	r3, [pc, #56]	; (8006d3c <RTC_ExitInitMode+0x78>)
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	4a0d      	ldr	r2, [pc, #52]	; (8006d3c <RTC_ExitInitMode+0x78>)
 8006d08:	f023 0320 	bic.w	r3, r3, #32
 8006d0c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7ff ff7e 	bl	8006c10 <HAL_RTC_WaitForSynchro>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d005      	beq.n	8006d26 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2203      	movs	r2, #3
 8006d1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006d26:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <RTC_ExitInitMode+0x78>)
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	4a04      	ldr	r2, [pc, #16]	; (8006d3c <RTC_ExitInitMode+0x78>)
 8006d2c:	f043 0320 	orr.w	r3, r3, #32
 8006d30:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	40002800 	.word	0x40002800

08006d40 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	4603      	mov	r3, r0
 8006d48:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8006d4e:	79fb      	ldrb	r3, [r7, #7]
 8006d50:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8006d52:	e005      	b.n	8006d60 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	3301      	adds	r3, #1
 8006d58:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8006d5a:	7afb      	ldrb	r3, [r7, #11]
 8006d5c:	3b0a      	subs	r3, #10
 8006d5e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006d60:	7afb      	ldrb	r3, [r7, #11]
 8006d62:	2b09      	cmp	r3, #9
 8006d64:	d8f6      	bhi.n	8006d54 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	011b      	lsls	r3, r3, #4
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	7afb      	ldrb	r3, [r7, #11]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	b2db      	uxtb	r3, r3
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b088      	sub	sp, #32
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e14a      	b.n	8007028 <HAL_SAI_Init+0x2a8>
      return HAL_ERROR;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d106      	bne.n	8006dac <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7fa f970 	bl	800108c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f94d 	bl	800704c <SAI_Disable>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e135      	b.n	8007028 <HAL_SAI_Init+0x2a8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d007      	beq.n	8006ddc <HAL_SAI_Init+0x5c>
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d302      	bcc.n	8006dd6 <HAL_SAI_Init+0x56>
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d006      	beq.n	8006de2 <HAL_SAI_Init+0x62>
 8006dd4:	e008      	b.n	8006de8 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	61fb      	str	r3, [r7, #28]
      break;
 8006dda:	e008      	b.n	8006dee <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006ddc:	2310      	movs	r3, #16
 8006dde:	61fb      	str	r3, [r7, #28]
      break;
 8006de0:	e005      	b.n	8006dee <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006de2:	2320      	movs	r3, #32
 8006de4:	61fb      	str	r3, [r7, #28]
      break;
 8006de6:	e002      	b.n	8006dee <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8006de8:	2300      	movs	r3, #0
 8006dea:	61fb      	str	r3, [r7, #28]
      break;
 8006dec:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	2b03      	cmp	r3, #3
 8006df4:	d81d      	bhi.n	8006e32 <HAL_SAI_Init+0xb2>
 8006df6:	a201      	add	r2, pc, #4	; (adr r2, 8006dfc <HAL_SAI_Init+0x7c>)
 8006df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfc:	08006e0d 	.word	0x08006e0d
 8006e00:	08006e13 	.word	0x08006e13
 8006e04:	08006e1b 	.word	0x08006e1b
 8006e08:	08006e23 	.word	0x08006e23
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	617b      	str	r3, [r7, #20]
      break;
 8006e10:	e012      	b.n	8006e38 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e16:	617b      	str	r3, [r7, #20]
      break;
 8006e18:	e00e      	b.n	8006e38 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006e1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e1e:	617b      	str	r3, [r7, #20]
      break;
 8006e20:	e00a      	b.n	8006e38 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006e22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e26:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	f043 0301 	orr.w	r3, r3, #1
 8006e2e:	61fb      	str	r3, [r7, #28]
      break;
 8006e30:	e002      	b.n	8006e38 <HAL_SAI_Init+0xb8>
    default :
      syncen_bits = 0;
 8006e32:	2300      	movs	r3, #0
 8006e34:	617b      	str	r3, [r7, #20]
      break;
 8006e36:	bf00      	nop

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a7c      	ldr	r2, [pc, #496]	; (8007030 <HAL_SAI_Init+0x2b0>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d004      	beq.n	8006e4c <HAL_SAI_Init+0xcc>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a7b      	ldr	r2, [pc, #492]	; (8007034 <HAL_SAI_Init+0x2b4>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d103      	bne.n	8006e54 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8006e4c:	4a7a      	ldr	r2, [pc, #488]	; (8007038 <HAL_SAI_Init+0x2b8>)
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	6013      	str	r3, [r2, #0]
 8006e52:	e002      	b.n	8006e5a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006e54:	4a79      	ldr	r2, [pc, #484]	; (800703c <HAL_SAI_Init+0x2bc>)
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	6013      	str	r3, [r2, #0]

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || */
  /* STM32L496xx || STM32L4A6xx || */
  /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d038      	beq.n	8006ed4 <HAL_SAI_Init+0x154>
    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a72      	ldr	r2, [pc, #456]	; (8007030 <HAL_SAI_Init+0x2b0>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d004      	beq.n	8006e76 <HAL_SAI_Init+0xf6>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a70      	ldr	r2, [pc, #448]	; (8007034 <HAL_SAI_Init+0x2b4>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d105      	bne.n	8006e82 <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006e76:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006e7a:	f7fe fdfd 	bl	8005a78 <HAL_RCCEx_GetPeriphCLKFreq>
 8006e7e:	6138      	str	r0, [r7, #16]
 8006e80:	e004      	b.n	8006e8c <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006e82:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006e86:	f7fe fdf7 	bl	8005a78 <HAL_RCCEx_GetPeriphCLKFreq>
 8006e8a:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	005b      	lsls	r3, r3, #1
 8006e96:	461a      	mov	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	69db      	ldr	r3, [r3, #28]
 8006e9c:	025b      	lsls	r3, r3, #9
 8006e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea2:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4a66      	ldr	r2, [pc, #408]	; (8007040 <HAL_SAI_Init+0x2c0>)
 8006ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8006eac:	08da      	lsrs	r2, r3, #3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006eb2:	68f9      	ldr	r1, [r7, #12]
 8006eb4:	4b62      	ldr	r3, [pc, #392]	; (8007040 <HAL_SAI_Init+0x2c0>)
 8006eb6:	fba3 2301 	umull	r2, r3, r3, r1
 8006eba:	08da      	lsrs	r2, r3, #3
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	005b      	lsls	r3, r3, #1
 8006ec4:	1aca      	subs	r2, r1, r3
 8006ec6:	2a08      	cmp	r2, #8
 8006ec8:	d904      	bls.n	8006ed4 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <HAL_SAI_Init+0x164>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d109      	bne.n	8006ef8 <HAL_SAI_Init+0x178>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d101      	bne.n	8006ef0 <HAL_SAI_Init+0x170>
 8006eec:	2300      	movs	r3, #0
 8006eee:	e001      	b.n	8006ef4 <HAL_SAI_Init+0x174>
 8006ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ef4:	61bb      	str	r3, [r7, #24]
 8006ef6:	e008      	b.n	8006f0a <HAL_SAI_Init+0x18a>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d102      	bne.n	8006f06 <HAL_SAI_Init+0x186>
 8006f00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f04:	e000      	b.n	8006f08 <HAL_SAI_Init+0x188>
 8006f06:	2300      	movs	r3, #0
 8006f08:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	6819      	ldr	r1, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	4b4b      	ldr	r3, [pc, #300]	; (8007044 <HAL_SAI_Init+0x2c4>)
 8006f16:	400b      	ands	r3, r1
 8006f18:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	6819      	ldr	r1, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f28:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006f2e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f34:	431a      	orrs	r2, r3
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8006f42:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006f4e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a1b      	ldr	r3, [r3, #32]
 8006f54:	051b      	lsls	r3, r3, #20
 8006f56:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	6812      	ldr	r2, [r2, #0]
 8006f6a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006f6e:	f023 030f 	bic.w	r3, r3, #15
 8006f72:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6859      	ldr	r1, [r3, #4]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	699a      	ldr	r2, [r3, #24]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f82:	431a      	orrs	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6899      	ldr	r1, [r3, #8]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	4b2a      	ldr	r3, [pc, #168]	; (8007048 <HAL_SAI_Init+0x2c8>)
 8006f9e:	400b      	ands	r3, r1
 8006fa0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6899      	ldr	r1, [r3, #8]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fac:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006fb2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8006fb8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8006fbe:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006fc8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68d9      	ldr	r1, [r3, #12]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006fe0:	400b      	ands	r3, r1
 8006fe2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68d9      	ldr	r1, [r3, #12]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ff8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006ffa:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007000:	3b01      	subs	r3, #1
 8007002:	021b      	lsls	r3, r3, #8
 8007004:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3720      	adds	r7, #32
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	40015404 	.word	0x40015404
 8007034:	40015424 	.word	0x40015424
 8007038:	40015400 	.word	0x40015400
 800703c:	40015800 	.word	0x40015800
 8007040:	cccccccd 	.word	0xcccccccd
 8007044:	ff05c010 	.word	0xff05c010
 8007048:	fff88000 	.word	0xfff88000

0800704c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800704c:	b490      	push	{r4, r7}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007054:	4b15      	ldr	r3, [pc, #84]	; (80070ac <SAI_Disable+0x60>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a15      	ldr	r2, [pc, #84]	; (80070b0 <SAI_Disable+0x64>)
 800705a:	fba2 2303 	umull	r2, r3, r2, r3
 800705e:	0b1b      	lsrs	r3, r3, #12
 8007060:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007074:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007076:	2c00      	cmp	r4, #0
 8007078:	d10a      	bne.n	8007090 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007080:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	73fb      	strb	r3, [r7, #15]
      break;
 800708e:	e007      	b.n	80070a0 <SAI_Disable+0x54>
    }
    count--;
 8007090:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1ea      	bne.n	8007076 <SAI_Disable+0x2a>

  return status;
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bc90      	pop	{r4, r7}
 80070aa:	4770      	bx	lr
 80070ac:	20000010 	.word	0x20000010
 80070b0:	95cbec1b 	.word	0x95cbec1b

080070b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e07c      	b.n	80071c0 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d106      	bne.n	80070e6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7fa f889 	bl	80011f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2202      	movs	r2, #2
 80070ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070fc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007106:	d902      	bls.n	800710e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007108:	2300      	movs	r3, #0
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	e002      	b.n	8007114 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800710e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007112:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800711c:	d007      	beq.n	800712e <HAL_SPI_Init+0x7a>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007126:	d002      	beq.n	800712e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10b      	bne.n	800714e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800713e:	d903      	bls.n	8007148 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2202      	movs	r2, #2
 8007144:	631a      	str	r2, [r3, #48]	; 0x30
 8007146:	e002      	b.n	800714e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	431a      	orrs	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	431a      	orrs	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	431a      	orrs	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800716c:	431a      	orrs	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	431a      	orrs	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	ea42 0103 	orr.w	r1, r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	430a      	orrs	r2, r1
 8007186:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	0c1b      	lsrs	r3, r3, #16
 800718e:	f003 0204 	and.w	r2, r3, #4
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007196:	431a      	orrs	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719c:	431a      	orrs	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	ea42 0103 	orr.w	r1, r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	430a      	orrs	r2, r1
 80071ae:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d101      	bne.n	80071da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e040      	b.n	800725c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d106      	bne.n	80071f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7fa fc94 	bl	8001b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2224      	movs	r2, #36	; 0x24
 80071f4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0201 	bic.w	r2, r2, #1
 8007204:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f98c 	bl	8007524 <UART_SetConfig>
 800720c:	4603      	mov	r3, r0
 800720e:	2b01      	cmp	r3, #1
 8007210:	d101      	bne.n	8007216 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e022      	b.n	800725c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721a:	2b00      	cmp	r3, #0
 800721c:	d002      	beq.n	8007224 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fcc8 	bl	8007bb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007232:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689a      	ldr	r2, [r3, #8]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007242:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f042 0201 	orr.w	r2, r2, #1
 8007252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fd4f 	bl	8007cf8 <UART_CheckIdleState>
 800725a:	4603      	mov	r3, r0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b08a      	sub	sp, #40	; 0x28
 8007268:	af02      	add	r7, sp, #8
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	603b      	str	r3, [r7, #0]
 8007270:	4613      	mov	r3, r2
 8007272:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007278:	2b20      	cmp	r3, #32
 800727a:	f040 8081 	bne.w	8007380 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <HAL_UART_Transmit+0x26>
 8007284:	88fb      	ldrh	r3, [r7, #6]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e079      	b.n	8007382 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007294:	2b01      	cmp	r3, #1
 8007296:	d101      	bne.n	800729c <HAL_UART_Transmit+0x38>
 8007298:	2302      	movs	r3, #2
 800729a:	e072      	b.n	8007382 <HAL_UART_Transmit+0x11e>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2221      	movs	r2, #33	; 0x21
 80072ae:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80072b0:	f7fa fd0a 	bl	8001cc8 <HAL_GetTick>
 80072b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	88fa      	ldrh	r2, [r7, #6]
 80072ba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	88fa      	ldrh	r2, [r7, #6]
 80072c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ce:	d108      	bne.n	80072e2 <HAL_UART_Transmit+0x7e>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d104      	bne.n	80072e2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80072d8:	2300      	movs	r3, #0
 80072da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	61bb      	str	r3, [r7, #24]
 80072e0:	e003      	b.n	80072ea <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072e6:	2300      	movs	r3, #0
 80072e8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072ea:	e02d      	b.n	8007348 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2200      	movs	r2, #0
 80072f4:	2180      	movs	r1, #128	; 0x80
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 fd43 	bl	8007d82 <UART_WaitOnFlagUntilTimeout>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e03d      	b.n	8007382 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10b      	bne.n	8007324 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	881a      	ldrh	r2, [r3, #0]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007318:	b292      	uxth	r2, r2
 800731a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	3302      	adds	r3, #2
 8007320:	61bb      	str	r3, [r7, #24]
 8007322:	e008      	b.n	8007336 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	781a      	ldrb	r2, [r3, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	b292      	uxth	r2, r2
 800732e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	3301      	adds	r3, #1
 8007334:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800733c:	b29b      	uxth	r3, r3
 800733e:	3b01      	subs	r3, #1
 8007340:	b29a      	uxth	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800734e:	b29b      	uxth	r3, r3
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1cb      	bne.n	80072ec <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	2200      	movs	r2, #0
 800735c:	2140      	movs	r1, #64	; 0x40
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f000 fd0f 	bl	8007d82 <UART_WaitOnFlagUntilTimeout>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e009      	b.n	8007382 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2220      	movs	r2, #32
 8007372:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800737c:	2300      	movs	r3, #0
 800737e:	e000      	b.n	8007382 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007380:	2302      	movs	r3, #2
  }
}
 8007382:	4618      	mov	r0, r3
 8007384:	3720      	adds	r7, #32
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b08a      	sub	sp, #40	; 0x28
 800738e:	af02      	add	r7, sp, #8
 8007390:	60f8      	str	r0, [r7, #12]
 8007392:	60b9      	str	r1, [r7, #8]
 8007394:	603b      	str	r3, [r7, #0]
 8007396:	4613      	mov	r3, r2
 8007398:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800739e:	2b20      	cmp	r3, #32
 80073a0:	f040 80bb 	bne.w	800751a <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d002      	beq.n	80073b0 <HAL_UART_Receive+0x26>
 80073aa:	88fb      	ldrh	r3, [r7, #6]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e0b3      	b.n	800751c <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d101      	bne.n	80073c2 <HAL_UART_Receive+0x38>
 80073be:	2302      	movs	r3, #2
 80073c0:	e0ac      	b.n	800751c <HAL_UART_Receive+0x192>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2222      	movs	r2, #34	; 0x22
 80073d4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80073d6:	f7fa fc77 	bl	8001cc8 <HAL_GetTick>
 80073da:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	88fa      	ldrh	r2, [r7, #6]
 80073e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	88fa      	ldrh	r2, [r7, #6]
 80073e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073f4:	d10e      	bne.n	8007414 <HAL_UART_Receive+0x8a>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d105      	bne.n	800740a <HAL_UART_Receive+0x80>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007404:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007408:	e02d      	b.n	8007466 <HAL_UART_Receive+0xdc>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	22ff      	movs	r2, #255	; 0xff
 800740e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007412:	e028      	b.n	8007466 <HAL_UART_Receive+0xdc>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10d      	bne.n	8007438 <HAL_UART_Receive+0xae>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d104      	bne.n	800742e <HAL_UART_Receive+0xa4>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	22ff      	movs	r2, #255	; 0xff
 8007428:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800742c:	e01b      	b.n	8007466 <HAL_UART_Receive+0xdc>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	227f      	movs	r2, #127	; 0x7f
 8007432:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007436:	e016      	b.n	8007466 <HAL_UART_Receive+0xdc>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007440:	d10d      	bne.n	800745e <HAL_UART_Receive+0xd4>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d104      	bne.n	8007454 <HAL_UART_Receive+0xca>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	227f      	movs	r2, #127	; 0x7f
 800744e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007452:	e008      	b.n	8007466 <HAL_UART_Receive+0xdc>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	223f      	movs	r2, #63	; 0x3f
 8007458:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800745c:	e003      	b.n	8007466 <HAL_UART_Receive+0xdc>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800746c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007476:	d108      	bne.n	800748a <HAL_UART_Receive+0x100>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d104      	bne.n	800748a <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8007480:	2300      	movs	r3, #0
 8007482:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	61bb      	str	r3, [r7, #24]
 8007488:	e003      	b.n	8007492 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800748e:	2300      	movs	r3, #0
 8007490:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007492:	e033      	b.n	80074fc <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	9300      	str	r3, [sp, #0]
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	2200      	movs	r2, #0
 800749c:	2120      	movs	r1, #32
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 fc6f 	bl	8007d82 <UART_WaitOnFlagUntilTimeout>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e036      	b.n	800751c <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10c      	bne.n	80074ce <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	8a7b      	ldrh	r3, [r7, #18]
 80074be:	4013      	ands	r3, r2
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	3302      	adds	r3, #2
 80074ca:	61bb      	str	r3, [r7, #24]
 80074cc:	e00d      	b.n	80074ea <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	8a7b      	ldrh	r3, [r7, #18]
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	4013      	ands	r3, r2
 80074de:	b2da      	uxtb	r2, r3
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	3301      	adds	r3, #1
 80074e8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	3b01      	subs	r3, #1
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007502:	b29b      	uxth	r3, r3
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1c5      	bne.n	8007494 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2220      	movs	r2, #32
 800750c:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	e000      	b.n	800751c <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 800751a:	2302      	movs	r3, #2
  }
}
 800751c:	4618      	mov	r0, r3
 800751e:	3720      	adds	r7, #32
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007524:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007528:	b088      	sub	sp, #32
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800752e:	2300      	movs	r3, #0
 8007530:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007536:	2300      	movs	r3, #0
 8007538:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689a      	ldr	r2, [r3, #8]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	431a      	orrs	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	695b      	ldr	r3, [r3, #20]
 8007548:	431a      	orrs	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	4313      	orrs	r3, r2
 8007550:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	4bac      	ldr	r3, [pc, #688]	; (800780c <UART_SetConfig+0x2e8>)
 800755a:	4013      	ands	r3, r2
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	6812      	ldr	r2, [r2, #0]
 8007560:	69f9      	ldr	r1, [r7, #28]
 8007562:	430b      	orrs	r3, r1
 8007564:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	68da      	ldr	r2, [r3, #12]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	430a      	orrs	r2, r1
 800757a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4aa2      	ldr	r2, [pc, #648]	; (8007810 <UART_SetConfig+0x2ec>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d004      	beq.n	8007596 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a1b      	ldr	r3, [r3, #32]
 8007590:	69fa      	ldr	r2, [r7, #28]
 8007592:	4313      	orrs	r3, r2
 8007594:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	69fa      	ldr	r2, [r7, #28]
 80075a6:	430a      	orrs	r2, r1
 80075a8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a99      	ldr	r2, [pc, #612]	; (8007814 <UART_SetConfig+0x2f0>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d121      	bne.n	80075f8 <UART_SetConfig+0xd4>
 80075b4:	4b98      	ldr	r3, [pc, #608]	; (8007818 <UART_SetConfig+0x2f4>)
 80075b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ba:	f003 0303 	and.w	r3, r3, #3
 80075be:	2b03      	cmp	r3, #3
 80075c0:	d816      	bhi.n	80075f0 <UART_SetConfig+0xcc>
 80075c2:	a201      	add	r2, pc, #4	; (adr r2, 80075c8 <UART_SetConfig+0xa4>)
 80075c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c8:	080075d9 	.word	0x080075d9
 80075cc:	080075e5 	.word	0x080075e5
 80075d0:	080075df 	.word	0x080075df
 80075d4:	080075eb 	.word	0x080075eb
 80075d8:	2301      	movs	r3, #1
 80075da:	76fb      	strb	r3, [r7, #27]
 80075dc:	e0e8      	b.n	80077b0 <UART_SetConfig+0x28c>
 80075de:	2302      	movs	r3, #2
 80075e0:	76fb      	strb	r3, [r7, #27]
 80075e2:	e0e5      	b.n	80077b0 <UART_SetConfig+0x28c>
 80075e4:	2304      	movs	r3, #4
 80075e6:	76fb      	strb	r3, [r7, #27]
 80075e8:	e0e2      	b.n	80077b0 <UART_SetConfig+0x28c>
 80075ea:	2308      	movs	r3, #8
 80075ec:	76fb      	strb	r3, [r7, #27]
 80075ee:	e0df      	b.n	80077b0 <UART_SetConfig+0x28c>
 80075f0:	2310      	movs	r3, #16
 80075f2:	76fb      	strb	r3, [r7, #27]
 80075f4:	bf00      	nop
 80075f6:	e0db      	b.n	80077b0 <UART_SetConfig+0x28c>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a87      	ldr	r2, [pc, #540]	; (800781c <UART_SetConfig+0x2f8>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d134      	bne.n	800766c <UART_SetConfig+0x148>
 8007602:	4b85      	ldr	r3, [pc, #532]	; (8007818 <UART_SetConfig+0x2f4>)
 8007604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007608:	f003 030c 	and.w	r3, r3, #12
 800760c:	2b0c      	cmp	r3, #12
 800760e:	d829      	bhi.n	8007664 <UART_SetConfig+0x140>
 8007610:	a201      	add	r2, pc, #4	; (adr r2, 8007618 <UART_SetConfig+0xf4>)
 8007612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007616:	bf00      	nop
 8007618:	0800764d 	.word	0x0800764d
 800761c:	08007665 	.word	0x08007665
 8007620:	08007665 	.word	0x08007665
 8007624:	08007665 	.word	0x08007665
 8007628:	08007659 	.word	0x08007659
 800762c:	08007665 	.word	0x08007665
 8007630:	08007665 	.word	0x08007665
 8007634:	08007665 	.word	0x08007665
 8007638:	08007653 	.word	0x08007653
 800763c:	08007665 	.word	0x08007665
 8007640:	08007665 	.word	0x08007665
 8007644:	08007665 	.word	0x08007665
 8007648:	0800765f 	.word	0x0800765f
 800764c:	2300      	movs	r3, #0
 800764e:	76fb      	strb	r3, [r7, #27]
 8007650:	e0ae      	b.n	80077b0 <UART_SetConfig+0x28c>
 8007652:	2302      	movs	r3, #2
 8007654:	76fb      	strb	r3, [r7, #27]
 8007656:	e0ab      	b.n	80077b0 <UART_SetConfig+0x28c>
 8007658:	2304      	movs	r3, #4
 800765a:	76fb      	strb	r3, [r7, #27]
 800765c:	e0a8      	b.n	80077b0 <UART_SetConfig+0x28c>
 800765e:	2308      	movs	r3, #8
 8007660:	76fb      	strb	r3, [r7, #27]
 8007662:	e0a5      	b.n	80077b0 <UART_SetConfig+0x28c>
 8007664:	2310      	movs	r3, #16
 8007666:	76fb      	strb	r3, [r7, #27]
 8007668:	bf00      	nop
 800766a:	e0a1      	b.n	80077b0 <UART_SetConfig+0x28c>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a6b      	ldr	r2, [pc, #428]	; (8007820 <UART_SetConfig+0x2fc>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d120      	bne.n	80076b8 <UART_SetConfig+0x194>
 8007676:	4b68      	ldr	r3, [pc, #416]	; (8007818 <UART_SetConfig+0x2f4>)
 8007678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800767c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007680:	2b10      	cmp	r3, #16
 8007682:	d00f      	beq.n	80076a4 <UART_SetConfig+0x180>
 8007684:	2b10      	cmp	r3, #16
 8007686:	d802      	bhi.n	800768e <UART_SetConfig+0x16a>
 8007688:	2b00      	cmp	r3, #0
 800768a:	d005      	beq.n	8007698 <UART_SetConfig+0x174>
 800768c:	e010      	b.n	80076b0 <UART_SetConfig+0x18c>
 800768e:	2b20      	cmp	r3, #32
 8007690:	d005      	beq.n	800769e <UART_SetConfig+0x17a>
 8007692:	2b30      	cmp	r3, #48	; 0x30
 8007694:	d009      	beq.n	80076aa <UART_SetConfig+0x186>
 8007696:	e00b      	b.n	80076b0 <UART_SetConfig+0x18c>
 8007698:	2300      	movs	r3, #0
 800769a:	76fb      	strb	r3, [r7, #27]
 800769c:	e088      	b.n	80077b0 <UART_SetConfig+0x28c>
 800769e:	2302      	movs	r3, #2
 80076a0:	76fb      	strb	r3, [r7, #27]
 80076a2:	e085      	b.n	80077b0 <UART_SetConfig+0x28c>
 80076a4:	2304      	movs	r3, #4
 80076a6:	76fb      	strb	r3, [r7, #27]
 80076a8:	e082      	b.n	80077b0 <UART_SetConfig+0x28c>
 80076aa:	2308      	movs	r3, #8
 80076ac:	76fb      	strb	r3, [r7, #27]
 80076ae:	e07f      	b.n	80077b0 <UART_SetConfig+0x28c>
 80076b0:	2310      	movs	r3, #16
 80076b2:	76fb      	strb	r3, [r7, #27]
 80076b4:	bf00      	nop
 80076b6:	e07b      	b.n	80077b0 <UART_SetConfig+0x28c>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a59      	ldr	r2, [pc, #356]	; (8007824 <UART_SetConfig+0x300>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d120      	bne.n	8007704 <UART_SetConfig+0x1e0>
 80076c2:	4b55      	ldr	r3, [pc, #340]	; (8007818 <UART_SetConfig+0x2f4>)
 80076c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80076cc:	2b40      	cmp	r3, #64	; 0x40
 80076ce:	d00f      	beq.n	80076f0 <UART_SetConfig+0x1cc>
 80076d0:	2b40      	cmp	r3, #64	; 0x40
 80076d2:	d802      	bhi.n	80076da <UART_SetConfig+0x1b6>
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d005      	beq.n	80076e4 <UART_SetConfig+0x1c0>
 80076d8:	e010      	b.n	80076fc <UART_SetConfig+0x1d8>
 80076da:	2b80      	cmp	r3, #128	; 0x80
 80076dc:	d005      	beq.n	80076ea <UART_SetConfig+0x1c6>
 80076de:	2bc0      	cmp	r3, #192	; 0xc0
 80076e0:	d009      	beq.n	80076f6 <UART_SetConfig+0x1d2>
 80076e2:	e00b      	b.n	80076fc <UART_SetConfig+0x1d8>
 80076e4:	2300      	movs	r3, #0
 80076e6:	76fb      	strb	r3, [r7, #27]
 80076e8:	e062      	b.n	80077b0 <UART_SetConfig+0x28c>
 80076ea:	2302      	movs	r3, #2
 80076ec:	76fb      	strb	r3, [r7, #27]
 80076ee:	e05f      	b.n	80077b0 <UART_SetConfig+0x28c>
 80076f0:	2304      	movs	r3, #4
 80076f2:	76fb      	strb	r3, [r7, #27]
 80076f4:	e05c      	b.n	80077b0 <UART_SetConfig+0x28c>
 80076f6:	2308      	movs	r3, #8
 80076f8:	76fb      	strb	r3, [r7, #27]
 80076fa:	e059      	b.n	80077b0 <UART_SetConfig+0x28c>
 80076fc:	2310      	movs	r3, #16
 80076fe:	76fb      	strb	r3, [r7, #27]
 8007700:	bf00      	nop
 8007702:	e055      	b.n	80077b0 <UART_SetConfig+0x28c>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a47      	ldr	r2, [pc, #284]	; (8007828 <UART_SetConfig+0x304>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d124      	bne.n	8007758 <UART_SetConfig+0x234>
 800770e:	4b42      	ldr	r3, [pc, #264]	; (8007818 <UART_SetConfig+0x2f4>)
 8007710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800771c:	d012      	beq.n	8007744 <UART_SetConfig+0x220>
 800771e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007722:	d802      	bhi.n	800772a <UART_SetConfig+0x206>
 8007724:	2b00      	cmp	r3, #0
 8007726:	d007      	beq.n	8007738 <UART_SetConfig+0x214>
 8007728:	e012      	b.n	8007750 <UART_SetConfig+0x22c>
 800772a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800772e:	d006      	beq.n	800773e <UART_SetConfig+0x21a>
 8007730:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007734:	d009      	beq.n	800774a <UART_SetConfig+0x226>
 8007736:	e00b      	b.n	8007750 <UART_SetConfig+0x22c>
 8007738:	2300      	movs	r3, #0
 800773a:	76fb      	strb	r3, [r7, #27]
 800773c:	e038      	b.n	80077b0 <UART_SetConfig+0x28c>
 800773e:	2302      	movs	r3, #2
 8007740:	76fb      	strb	r3, [r7, #27]
 8007742:	e035      	b.n	80077b0 <UART_SetConfig+0x28c>
 8007744:	2304      	movs	r3, #4
 8007746:	76fb      	strb	r3, [r7, #27]
 8007748:	e032      	b.n	80077b0 <UART_SetConfig+0x28c>
 800774a:	2308      	movs	r3, #8
 800774c:	76fb      	strb	r3, [r7, #27]
 800774e:	e02f      	b.n	80077b0 <UART_SetConfig+0x28c>
 8007750:	2310      	movs	r3, #16
 8007752:	76fb      	strb	r3, [r7, #27]
 8007754:	bf00      	nop
 8007756:	e02b      	b.n	80077b0 <UART_SetConfig+0x28c>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a2c      	ldr	r2, [pc, #176]	; (8007810 <UART_SetConfig+0x2ec>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d124      	bne.n	80077ac <UART_SetConfig+0x288>
 8007762:	4b2d      	ldr	r3, [pc, #180]	; (8007818 <UART_SetConfig+0x2f4>)
 8007764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007768:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800776c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007770:	d012      	beq.n	8007798 <UART_SetConfig+0x274>
 8007772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007776:	d802      	bhi.n	800777e <UART_SetConfig+0x25a>
 8007778:	2b00      	cmp	r3, #0
 800777a:	d007      	beq.n	800778c <UART_SetConfig+0x268>
 800777c:	e012      	b.n	80077a4 <UART_SetConfig+0x280>
 800777e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007782:	d006      	beq.n	8007792 <UART_SetConfig+0x26e>
 8007784:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007788:	d009      	beq.n	800779e <UART_SetConfig+0x27a>
 800778a:	e00b      	b.n	80077a4 <UART_SetConfig+0x280>
 800778c:	2300      	movs	r3, #0
 800778e:	76fb      	strb	r3, [r7, #27]
 8007790:	e00e      	b.n	80077b0 <UART_SetConfig+0x28c>
 8007792:	2302      	movs	r3, #2
 8007794:	76fb      	strb	r3, [r7, #27]
 8007796:	e00b      	b.n	80077b0 <UART_SetConfig+0x28c>
 8007798:	2304      	movs	r3, #4
 800779a:	76fb      	strb	r3, [r7, #27]
 800779c:	e008      	b.n	80077b0 <UART_SetConfig+0x28c>
 800779e:	2308      	movs	r3, #8
 80077a0:	76fb      	strb	r3, [r7, #27]
 80077a2:	e005      	b.n	80077b0 <UART_SetConfig+0x28c>
 80077a4:	2310      	movs	r3, #16
 80077a6:	76fb      	strb	r3, [r7, #27]
 80077a8:	bf00      	nop
 80077aa:	e001      	b.n	80077b0 <UART_SetConfig+0x28c>
 80077ac:	2310      	movs	r3, #16
 80077ae:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a16      	ldr	r2, [pc, #88]	; (8007810 <UART_SetConfig+0x2ec>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	f040 80fa 	bne.w	80079b0 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077bc:	7efb      	ldrb	r3, [r7, #27]
 80077be:	2b08      	cmp	r3, #8
 80077c0:	d836      	bhi.n	8007830 <UART_SetConfig+0x30c>
 80077c2:	a201      	add	r2, pc, #4	; (adr r2, 80077c8 <UART_SetConfig+0x2a4>)
 80077c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c8:	080077ed 	.word	0x080077ed
 80077cc:	08007831 	.word	0x08007831
 80077d0:	080077f5 	.word	0x080077f5
 80077d4:	08007831 	.word	0x08007831
 80077d8:	080077fb 	.word	0x080077fb
 80077dc:	08007831 	.word	0x08007831
 80077e0:	08007831 	.word	0x08007831
 80077e4:	08007831 	.word	0x08007831
 80077e8:	08007803 	.word	0x08007803
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80077ec:	f7fd fdd2 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 80077f0:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80077f2:	e020      	b.n	8007836 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80077f4:	4b0d      	ldr	r3, [pc, #52]	; (800782c <UART_SetConfig+0x308>)
 80077f6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80077f8:	e01d      	b.n	8007836 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80077fa:	f7fd fd35 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 80077fe:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007800:	e019      	b.n	8007836 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8007802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007806:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007808:	e015      	b.n	8007836 <UART_SetConfig+0x312>
 800780a:	bf00      	nop
 800780c:	efff69f3 	.word	0xefff69f3
 8007810:	40008000 	.word	0x40008000
 8007814:	40013800 	.word	0x40013800
 8007818:	40021000 	.word	0x40021000
 800781c:	40004400 	.word	0x40004400
 8007820:	40004800 	.word	0x40004800
 8007824:	40004c00 	.word	0x40004c00
 8007828:	40005000 	.word	0x40005000
 800782c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	74fb      	strb	r3, [r7, #19]
        break;
 8007834:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 81ac 	beq.w	8007b96 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685a      	ldr	r2, [r3, #4]
 8007842:	4613      	mov	r3, r2
 8007844:	005b      	lsls	r3, r3, #1
 8007846:	4413      	add	r3, r2
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	429a      	cmp	r2, r3
 800784c:	d305      	bcc.n	800785a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	429a      	cmp	r2, r3
 8007858:	d902      	bls.n	8007860 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	74fb      	strb	r3, [r7, #19]
 800785e:	e19a      	b.n	8007b96 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8007860:	7efb      	ldrb	r3, [r7, #27]
 8007862:	2b08      	cmp	r3, #8
 8007864:	f200 8091 	bhi.w	800798a <UART_SetConfig+0x466>
 8007868:	a201      	add	r2, pc, #4	; (adr r2, 8007870 <UART_SetConfig+0x34c>)
 800786a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786e:	bf00      	nop
 8007870:	08007895 	.word	0x08007895
 8007874:	0800798b 	.word	0x0800798b
 8007878:	080078e1 	.word	0x080078e1
 800787c:	0800798b 	.word	0x0800798b
 8007880:	08007915 	.word	0x08007915
 8007884:	0800798b 	.word	0x0800798b
 8007888:	0800798b 	.word	0x0800798b
 800788c:	0800798b 	.word	0x0800798b
 8007890:	08007961 	.word	0x08007961
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007894:	f7fd fd7e 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 8007898:	4603      	mov	r3, r0
 800789a:	4619      	mov	r1, r3
 800789c:	f04f 0200 	mov.w	r2, #0
 80078a0:	f04f 0300 	mov.w	r3, #0
 80078a4:	f04f 0400 	mov.w	r4, #0
 80078a8:	0214      	lsls	r4, r2, #8
 80078aa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80078ae:	020b      	lsls	r3, r1, #8
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	6852      	ldr	r2, [r2, #4]
 80078b4:	0852      	lsrs	r2, r2, #1
 80078b6:	4611      	mov	r1, r2
 80078b8:	f04f 0200 	mov.w	r2, #0
 80078bc:	eb13 0b01 	adds.w	fp, r3, r1
 80078c0:	eb44 0c02 	adc.w	ip, r4, r2
 80078c4:	4658      	mov	r0, fp
 80078c6:	4661      	mov	r1, ip
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	f04f 0400 	mov.w	r4, #0
 80078d0:	461a      	mov	r2, r3
 80078d2:	4623      	mov	r3, r4
 80078d4:	f7f8 fc78 	bl	80001c8 <__aeabi_uldivmod>
 80078d8:	4603      	mov	r3, r0
 80078da:	460c      	mov	r4, r1
 80078dc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80078de:	e057      	b.n	8007990 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	085b      	lsrs	r3, r3, #1
 80078e6:	f04f 0400 	mov.w	r4, #0
 80078ea:	49b1      	ldr	r1, [pc, #708]	; (8007bb0 <UART_SetConfig+0x68c>)
 80078ec:	f04f 0200 	mov.w	r2, #0
 80078f0:	eb13 0b01 	adds.w	fp, r3, r1
 80078f4:	eb44 0c02 	adc.w	ip, r4, r2
 80078f8:	4658      	mov	r0, fp
 80078fa:	4661      	mov	r1, ip
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f04f 0400 	mov.w	r4, #0
 8007904:	461a      	mov	r2, r3
 8007906:	4623      	mov	r3, r4
 8007908:	f7f8 fc5e 	bl	80001c8 <__aeabi_uldivmod>
 800790c:	4603      	mov	r3, r0
 800790e:	460c      	mov	r4, r1
 8007910:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007912:	e03d      	b.n	8007990 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007914:	f7fd fca8 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8007918:	4603      	mov	r3, r0
 800791a:	4619      	mov	r1, r3
 800791c:	f04f 0200 	mov.w	r2, #0
 8007920:	f04f 0300 	mov.w	r3, #0
 8007924:	f04f 0400 	mov.w	r4, #0
 8007928:	0214      	lsls	r4, r2, #8
 800792a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800792e:	020b      	lsls	r3, r1, #8
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	6852      	ldr	r2, [r2, #4]
 8007934:	0852      	lsrs	r2, r2, #1
 8007936:	4611      	mov	r1, r2
 8007938:	f04f 0200 	mov.w	r2, #0
 800793c:	eb13 0b01 	adds.w	fp, r3, r1
 8007940:	eb44 0c02 	adc.w	ip, r4, r2
 8007944:	4658      	mov	r0, fp
 8007946:	4661      	mov	r1, ip
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f04f 0400 	mov.w	r4, #0
 8007950:	461a      	mov	r2, r3
 8007952:	4623      	mov	r3, r4
 8007954:	f7f8 fc38 	bl	80001c8 <__aeabi_uldivmod>
 8007958:	4603      	mov	r3, r0
 800795a:	460c      	mov	r4, r1
 800795c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800795e:	e017      	b.n	8007990 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	085b      	lsrs	r3, r3, #1
 8007966:	f04f 0400 	mov.w	r4, #0
 800796a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800796e:	f144 0100 	adc.w	r1, r4, #0
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f04f 0400 	mov.w	r4, #0
 800797a:	461a      	mov	r2, r3
 800797c:	4623      	mov	r3, r4
 800797e:	f7f8 fc23 	bl	80001c8 <__aeabi_uldivmod>
 8007982:	4603      	mov	r3, r0
 8007984:	460c      	mov	r4, r1
 8007986:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007988:	e002      	b.n	8007990 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	74fb      	strb	r3, [r7, #19]
            break;
 800798e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007996:	d308      	bcc.n	80079aa <UART_SetConfig+0x486>
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800799e:	d204      	bcs.n	80079aa <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	697a      	ldr	r2, [r7, #20]
 80079a6:	60da      	str	r2, [r3, #12]
 80079a8:	e0f5      	b.n	8007b96 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	74fb      	strb	r3, [r7, #19]
 80079ae:	e0f2      	b.n	8007b96 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	69db      	ldr	r3, [r3, #28]
 80079b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079b8:	d17f      	bne.n	8007aba <UART_SetConfig+0x596>
  {
    switch (clocksource)
 80079ba:	7efb      	ldrb	r3, [r7, #27]
 80079bc:	2b08      	cmp	r3, #8
 80079be:	d85c      	bhi.n	8007a7a <UART_SetConfig+0x556>
 80079c0:	a201      	add	r2, pc, #4	; (adr r2, 80079c8 <UART_SetConfig+0x4a4>)
 80079c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c6:	bf00      	nop
 80079c8:	080079ed 	.word	0x080079ed
 80079cc:	08007a0b 	.word	0x08007a0b
 80079d0:	08007a29 	.word	0x08007a29
 80079d4:	08007a7b 	.word	0x08007a7b
 80079d8:	08007a45 	.word	0x08007a45
 80079dc:	08007a7b 	.word	0x08007a7b
 80079e0:	08007a7b 	.word	0x08007a7b
 80079e4:	08007a7b 	.word	0x08007a7b
 80079e8:	08007a63 	.word	0x08007a63
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80079ec:	f7fd fcd2 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 80079f0:	4603      	mov	r3, r0
 80079f2:	005a      	lsls	r2, r3, #1
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	085b      	lsrs	r3, r3, #1
 80079fa:	441a      	add	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007a08:	e03a      	b.n	8007a80 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007a0a:	f7fd fcd9 	bl	80053c0 <HAL_RCC_GetPCLK2Freq>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	005a      	lsls	r2, r3, #1
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	085b      	lsrs	r3, r3, #1
 8007a18:	441a      	add	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007a26:	e02b      	b.n	8007a80 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	085b      	lsrs	r3, r3, #1
 8007a2e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8007a32:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	6852      	ldr	r2, [r2, #4]
 8007a3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007a42:	e01d      	b.n	8007a80 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007a44:	f7fd fc10 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	005a      	lsls	r2, r3, #1
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	085b      	lsrs	r3, r3, #1
 8007a52:	441a      	add	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007a60:	e00e      	b.n	8007a80 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	085b      	lsrs	r3, r3, #1
 8007a68:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007a78:	e002      	b.n	8007a80 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	74fb      	strb	r3, [r7, #19]
        break;
 8007a7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	2b0f      	cmp	r3, #15
 8007a84:	d916      	bls.n	8007ab4 <UART_SetConfig+0x590>
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a8c:	d212      	bcs.n	8007ab4 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	f023 030f 	bic.w	r3, r3, #15
 8007a96:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	085b      	lsrs	r3, r3, #1
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	f003 0307 	and.w	r3, r3, #7
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	897b      	ldrh	r3, [r7, #10]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	897a      	ldrh	r2, [r7, #10]
 8007ab0:	60da      	str	r2, [r3, #12]
 8007ab2:	e070      	b.n	8007b96 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	74fb      	strb	r3, [r7, #19]
 8007ab8:	e06d      	b.n	8007b96 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8007aba:	7efb      	ldrb	r3, [r7, #27]
 8007abc:	2b08      	cmp	r3, #8
 8007abe:	d859      	bhi.n	8007b74 <UART_SetConfig+0x650>
 8007ac0:	a201      	add	r2, pc, #4	; (adr r2, 8007ac8 <UART_SetConfig+0x5a4>)
 8007ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac6:	bf00      	nop
 8007ac8:	08007aed 	.word	0x08007aed
 8007acc:	08007b09 	.word	0x08007b09
 8007ad0:	08007b25 	.word	0x08007b25
 8007ad4:	08007b75 	.word	0x08007b75
 8007ad8:	08007b41 	.word	0x08007b41
 8007adc:	08007b75 	.word	0x08007b75
 8007ae0:	08007b75 	.word	0x08007b75
 8007ae4:	08007b75 	.word	0x08007b75
 8007ae8:	08007b5d 	.word	0x08007b5d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007aec:	f7fd fc52 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 8007af0:	4602      	mov	r2, r0
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	085b      	lsrs	r3, r3, #1
 8007af8:	441a      	add	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007b06:	e038      	b.n	8007b7a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007b08:	f7fd fc5a 	bl	80053c0 <HAL_RCC_GetPCLK2Freq>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	085b      	lsrs	r3, r3, #1
 8007b14:	441a      	add	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007b22:	e02a      	b.n	8007b7a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	085b      	lsrs	r3, r3, #1
 8007b2a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8007b2e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	6852      	ldr	r2, [r2, #4]
 8007b36:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007b3e:	e01c      	b.n	8007b7a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007b40:	f7fd fb92 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8007b44:	4602      	mov	r2, r0
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	085b      	lsrs	r3, r3, #1
 8007b4c:	441a      	add	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007b5a:	e00e      	b.n	8007b7a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	085b      	lsrs	r3, r3, #1
 8007b62:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007b72:	e002      	b.n	8007b7a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	74fb      	strb	r3, [r7, #19]
        break;
 8007b78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	2b0f      	cmp	r3, #15
 8007b7e:	d908      	bls.n	8007b92 <UART_SetConfig+0x66e>
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b86:	d204      	bcs.n	8007b92 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	60da      	str	r2, [r3, #12]
 8007b90:	e001      	b.n	8007b96 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007ba2:	7cfb      	ldrb	r3, [r7, #19]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3720      	adds	r7, #32
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007bae:	bf00      	nop
 8007bb0:	f4240000 	.word	0xf4240000

08007bb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc0:	f003 0301 	and.w	r3, r3, #1
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00a      	beq.n	8007bde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be2:	f003 0302 	and.w	r3, r3, #2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00a      	beq.n	8007c00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c04:	f003 0304 	and.w	r3, r3, #4
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00a      	beq.n	8007c22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c26:	f003 0308 	and.w	r3, r3, #8
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00a      	beq.n	8007c44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	430a      	orrs	r2, r1
 8007c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c48:	f003 0310 	and.w	r3, r3, #16
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00a      	beq.n	8007c66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	430a      	orrs	r2, r1
 8007c64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6a:	f003 0320 	and.w	r3, r3, #32
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00a      	beq.n	8007c88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	430a      	orrs	r2, r1
 8007c86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d01a      	beq.n	8007cca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cb2:	d10a      	bne.n	8007cca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00a      	beq.n	8007cec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	605a      	str	r2, [r3, #4]
  }
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af02      	add	r7, sp, #8
 8007cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007d06:	f7f9 ffdf 	bl	8001cc8 <HAL_GetTick>
 8007d0a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0308 	and.w	r3, r3, #8
 8007d16:	2b08      	cmp	r3, #8
 8007d18:	d10e      	bne.n	8007d38 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f82a 	bl	8007d82 <UART_WaitOnFlagUntilTimeout>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e020      	b.n	8007d7a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0304 	and.w	r3, r3, #4
 8007d42:	2b04      	cmp	r3, #4
 8007d44:	d10e      	bne.n	8007d64 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f814 	bl	8007d82 <UART_WaitOnFlagUntilTimeout>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e00a      	b.n	8007d7a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2220      	movs	r2, #32
 8007d68:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b084      	sub	sp, #16
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	60f8      	str	r0, [r7, #12]
 8007d8a:	60b9      	str	r1, [r7, #8]
 8007d8c:	603b      	str	r3, [r7, #0]
 8007d8e:	4613      	mov	r3, r2
 8007d90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d92:	e02a      	b.n	8007dea <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9a:	d026      	beq.n	8007dea <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d9c:	f7f9 ff94 	bl	8001cc8 <HAL_GetTick>
 8007da0:	4602      	mov	r2, r0
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d302      	bcc.n	8007db2 <UART_WaitOnFlagUntilTimeout+0x30>
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d11b      	bne.n	8007dea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007dc0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	689a      	ldr	r2, [r3, #8]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 0201 	bic.w	r2, r2, #1
 8007dd0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e00f      	b.n	8007e0a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	69da      	ldr	r2, [r3, #28]
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	4013      	ands	r3, r2
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	bf0c      	ite	eq
 8007dfa:	2301      	moveq	r3, #1
 8007dfc:	2300      	movne	r3, #0
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	461a      	mov	r2, r3
 8007e02:	79fb      	ldrb	r3, [r7, #7]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d0c5      	beq.n	8007d94 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e12:	b084      	sub	sp, #16
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	f107 001c 	add.w	r0, r7, #28
 8007e20:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d122      	bne.n	8007e70 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d105      	bne.n	8007e64 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 f937 	bl	80080d8 <USB_CoreReset>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	73fb      	strb	r3, [r7, #15]
 8007e6e:	e01a      	b.n	8007ea6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f92b 	bl	80080d8 <USB_CoreReset>
 8007e82:	4603      	mov	r3, r0
 8007e84:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d106      	bne.n	8007e9a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e90:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	639a      	str	r2, [r3, #56]	; 0x38
 8007e98:	e005      	b.n	8007ea6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8007ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007eb2:	b004      	add	sp, #16
 8007eb4:	4770      	bx	lr

08007eb6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b083      	sub	sp, #12
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f043 0201 	orr.w	r2, r3, #1
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	f023 0201 	bic.w	r2, r3, #1
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b082      	sub	sp, #8
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	460b      	mov	r3, r1
 8007f04:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f12:	78fb      	ldrb	r3, [r7, #3]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d106      	bne.n	8007f26 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	60da      	str	r2, [r3, #12]
 8007f24:	e00b      	b.n	8007f3e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f26:	78fb      	ldrb	r3, [r7, #3]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d106      	bne.n	8007f3a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	60da      	str	r2, [r3, #12]
 8007f38:	e001      	b.n	8007f3e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e003      	b.n	8007f46 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007f3e:	2032      	movs	r0, #50	; 0x32
 8007f40:	f7f9 fece 	bl	8001ce0 <HAL_Delay>

  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
	...

08007f50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	019b      	lsls	r3, r3, #6
 8007f62:	f043 0220 	orr.w	r2, r3, #32
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4a09      	ldr	r2, [pc, #36]	; (8007f98 <USB_FlushTxFifo+0x48>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d901      	bls.n	8007f7c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e006      	b.n	8007f8a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	f003 0320 	and.w	r3, r3, #32
 8007f84:	2b20      	cmp	r3, #32
 8007f86:	d0f0      	beq.n	8007f6a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	00030d40 	.word	0x00030d40

08007f9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2210      	movs	r2, #16
 8007fac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	4a09      	ldr	r2, [pc, #36]	; (8007fdc <USB_FlushRxFifo+0x40>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d901      	bls.n	8007fc0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e006      	b.n	8007fce <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	f003 0310 	and.w	r3, r3, #16
 8007fc8:	2b10      	cmp	r3, #16
 8007fca:	d0f0      	beq.n	8007fae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	00030d40 	.word	0x00030d40

08007fe0 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b089      	sub	sp, #36	; 0x24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	4611      	mov	r1, r2
 8007fec:	461a      	mov	r2, r3
 8007fee:	460b      	mov	r3, r1
 8007ff0:	71fb      	strb	r3, [r7, #7]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8007ffe:	88bb      	ldrh	r3, [r7, #4]
 8008000:	3303      	adds	r3, #3
 8008002:	089b      	lsrs	r3, r3, #2
 8008004:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8008006:	2300      	movs	r3, #0
 8008008:	61bb      	str	r3, [r7, #24]
 800800a:	e00f      	b.n	800802c <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800800c:	79fb      	ldrb	r3, [r7, #7]
 800800e:	031a      	lsls	r2, r3, #12
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	4413      	add	r3, r2
 8008014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008018:	461a      	mov	r2, r3
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	3304      	adds	r3, #4
 8008024:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	3301      	adds	r3, #1
 800802a:	61bb      	str	r3, [r7, #24]
 800802c:	69ba      	ldr	r2, [r7, #24]
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	429a      	cmp	r2, r3
 8008032:	d3eb      	bcc.n	800800c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3724      	adds	r7, #36	; 0x24
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008042:	b480      	push	{r7}
 8008044:	b089      	sub	sp, #36	; 0x24
 8008046:	af00      	add	r7, sp, #0
 8008048:	60f8      	str	r0, [r7, #12]
 800804a:	60b9      	str	r1, [r7, #8]
 800804c:	4613      	mov	r3, r2
 800804e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008058:	88fb      	ldrh	r3, [r7, #6]
 800805a:	3303      	adds	r3, #3
 800805c:	089b      	lsrs	r3, r3, #2
 800805e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008060:	2300      	movs	r3, #0
 8008062:	61bb      	str	r3, [r7, #24]
 8008064:	e00b      	b.n	800807e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	601a      	str	r2, [r3, #0]
    pDest++;
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	3304      	adds	r3, #4
 8008076:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	3301      	adds	r3, #1
 800807c:	61bb      	str	r3, [r7, #24]
 800807e:	69ba      	ldr	r2, [r7, #24]
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	429a      	cmp	r2, r3
 8008084:	d3ef      	bcc.n	8008066 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008086:	69fb      	ldr	r3, [r7, #28]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3724      	adds	r7, #36	; 0x24
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	4013      	ands	r3, r2
 80080aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80080ac:	68fb      	ldr	r3, [r7, #12]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3714      	adds	r7, #20
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80080ba:	b480      	push	{r7}
 80080bc:	b083      	sub	sp, #12
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	f003 0301 	and.w	r3, r3, #1
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
	...

080080d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80080e0:	2300      	movs	r3, #0
 80080e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	3301      	adds	r3, #1
 80080e8:	60fb      	str	r3, [r7, #12]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	4a13      	ldr	r2, [pc, #76]	; (800813c <USB_CoreReset+0x64>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d901      	bls.n	80080f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e01b      	b.n	800812e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	daf2      	bge.n	80080e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80080fe:	2300      	movs	r3, #0
 8008100:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	f043 0201 	orr.w	r2, r3, #1
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	3301      	adds	r3, #1
 8008112:	60fb      	str	r3, [r7, #12]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	4a09      	ldr	r2, [pc, #36]	; (800813c <USB_CoreReset+0x64>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d901      	bls.n	8008120 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e006      	b.n	800812e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	2b01      	cmp	r3, #1
 800812a:	d0f0      	beq.n	800810e <USB_CoreReset+0x36>

  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3714      	adds	r7, #20
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	00030d40 	.word	0x00030d40

08008140 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008140:	b084      	sub	sp, #16
 8008142:	b580      	push	{r7, lr}
 8008144:	b084      	sub	sp, #16
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	f107 001c 	add.w	r0, r7, #28
 800814e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800815c:	461a      	mov	r2, r3
 800815e:	2300      	movs	r3, #0
 8008160:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008166:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008172:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008188:	f023 0304 	bic.w	r3, r3, #4
 800818c:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800818e:	2110      	movs	r1, #16
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7ff fedd 	bl	8007f50 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7ff ff00 	bl	8007f9c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800819c:	2300      	movs	r3, #0
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	e015      	b.n	80081ce <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	015a      	lsls	r2, r3, #5
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	4413      	add	r3, r2
 80081aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081ae:	461a      	mov	r2, r3
 80081b0:	f04f 33ff 	mov.w	r3, #4294967295
 80081b4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	015a      	lsls	r2, r3, #5
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	4413      	add	r3, r2
 80081be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081c2:	461a      	mov	r2, r3
 80081c4:	2300      	movs	r3, #0
 80081c6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	3301      	adds	r3, #1
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	6a3b      	ldr	r3, [r7, #32]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d3e5      	bcc.n	80081a2 <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80081d6:	2101      	movs	r1, #1
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f893 	bl	8008304 <USB_DriveVbus>

  HAL_Delay(200U);
 80081de:	20c8      	movs	r0, #200	; 0xc8
 80081e0:	f7f9 fd7e 	bl	8001ce0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f04f 32ff 	mov.w	r2, #4294967295
 80081f0:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2280      	movs	r2, #128	; 0x80
 80081f6:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a0d      	ldr	r2, [pc, #52]	; (8008230 <USB_HostInit+0xf0>)
 80081fc:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a0c      	ldr	r2, [pc, #48]	; (8008234 <USB_HostInit+0xf4>)
 8008202:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	f043 0210 	orr.w	r2, r3, #16
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	699a      	ldr	r2, [r3, #24]
 8008216:	4b08      	ldr	r3, [pc, #32]	; (8008238 <USB_HostInit+0xf8>)
 8008218:	4313      	orrs	r3, r2
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800822a:	b004      	add	sp, #16
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	00600080 	.word	0x00600080
 8008234:	004000e0 	.word	0x004000e0
 8008238:	a3200008 	.word	0xa3200008

0800823c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	460b      	mov	r3, r1
 8008246:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800825a:	f023 0303 	bic.w	r3, r3, #3
 800825e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	78fb      	ldrb	r3, [r7, #3]
 800826a:	f003 0303 	and.w	r3, r3, #3
 800826e:	68f9      	ldr	r1, [r7, #12]
 8008270:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008274:	4313      	orrs	r3, r2
 8008276:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008278:	78fb      	ldrb	r3, [r7, #3]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d107      	bne.n	800828e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008284:	461a      	mov	r2, r3
 8008286:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800828a:	6053      	str	r3, [r2, #4]
 800828c:	e009      	b.n	80082a2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800828e:	78fb      	ldrb	r3, [r7, #3]
 8008290:	2b02      	cmp	r3, #2
 8008292:	d106      	bne.n	80082a2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800829a:	461a      	mov	r2, r3
 800829c:	f241 7370 	movw	r3, #6000	; 0x1770
 80082a0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80082bc:	2300      	movs	r3, #0
 80082be:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80082d0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80082da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082de:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80082e0:	2064      	movs	r0, #100	; 0x64
 80082e2:	f7f9 fcfd 	bl	8001ce0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80082ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082f2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80082f4:	200a      	movs	r0, #10
 80082f6:	f7f9 fcf3 	bl	8001ce0 <HAL_Delay>

  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	460b      	mov	r3, r1
 800830e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008314:	2300      	movs	r3, #0
 8008316:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008328:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d109      	bne.n	8008348 <USB_DriveVbus+0x44>
 8008334:	78fb      	ldrb	r3, [r7, #3]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d106      	bne.n	8008348 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008342:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008346:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800834e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008352:	d109      	bne.n	8008368 <USB_DriveVbus+0x64>
 8008354:	78fb      	ldrb	r3, [r7, #3]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d106      	bne.n	8008368 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008362:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008366:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr

08008376 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008376:	b480      	push	{r7}
 8008378:	b085      	sub	sp, #20
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008382:	2300      	movs	r3, #0
 8008384:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	0c5b      	lsrs	r3, r3, #17
 8008394:	f003 0303 	and.w	r3, r3, #3
}
 8008398:	4618      	mov	r0, r3
 800839a:	3714      	adds	r7, #20
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	b29b      	uxth	r3, r3
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
	...

080083c8 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	4608      	mov	r0, r1
 80083d2:	4611      	mov	r1, r2
 80083d4:	461a      	mov	r2, r3
 80083d6:	4603      	mov	r3, r0
 80083d8:	70fb      	strb	r3, [r7, #3]
 80083da:	460b      	mov	r3, r1
 80083dc:	70bb      	strb	r3, [r7, #2]
 80083de:	4613      	mov	r3, r2
 80083e0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80083ea:	78fb      	ldrb	r3, [r7, #3]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083f6:	461a      	mov	r2, r3
 80083f8:	f04f 33ff 	mov.w	r3, #4294967295
 80083fc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80083fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008402:	2b03      	cmp	r3, #3
 8008404:	d867      	bhi.n	80084d6 <USB_HC_Init+0x10e>
 8008406:	a201      	add	r2, pc, #4	; (adr r2, 800840c <USB_HC_Init+0x44>)
 8008408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840c:	0800841d 	.word	0x0800841d
 8008410:	08008499 	.word	0x08008499
 8008414:	0800841d 	.word	0x0800841d
 8008418:	0800845b 	.word	0x0800845b
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800841c:	78fb      	ldrb	r3, [r7, #3]
 800841e:	015a      	lsls	r2, r3, #5
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	4413      	add	r3, r2
 8008424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008428:	461a      	mov	r2, r3
 800842a:	f240 439d 	movw	r3, #1181	; 0x49d
 800842e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008430:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008434:	2b00      	cmp	r3, #0
 8008436:	da51      	bge.n	80084dc <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008438:	78fb      	ldrb	r3, [r7, #3]
 800843a:	015a      	lsls	r2, r3, #5
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	4413      	add	r3, r2
 8008440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	78fa      	ldrb	r2, [r7, #3]
 8008448:	0151      	lsls	r1, r2, #5
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	440a      	add	r2, r1
 800844e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008456:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008458:	e040      	b.n	80084dc <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800845a:	78fb      	ldrb	r3, [r7, #3]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	4413      	add	r3, r2
 8008462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008466:	461a      	mov	r2, r3
 8008468:	f240 639d 	movw	r3, #1693	; 0x69d
 800846c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800846e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008472:	2b00      	cmp	r3, #0
 8008474:	da34      	bge.n	80084e0 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008476:	78fb      	ldrb	r3, [r7, #3]
 8008478:	015a      	lsls	r2, r3, #5
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	4413      	add	r3, r2
 800847e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	78fa      	ldrb	r2, [r7, #3]
 8008486:	0151      	lsls	r1, r2, #5
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	440a      	add	r2, r1
 800848c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008494:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008496:	e023      	b.n	80084e0 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008498:	78fb      	ldrb	r3, [r7, #3]
 800849a:	015a      	lsls	r2, r3, #5
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	4413      	add	r3, r2
 80084a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084a4:	461a      	mov	r2, r3
 80084a6:	f240 2325 	movw	r3, #549	; 0x225
 80084aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80084ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	da17      	bge.n	80084e4 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80084b4:	78fb      	ldrb	r3, [r7, #3]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	78fa      	ldrb	r2, [r7, #3]
 80084c4:	0151      	lsls	r1, r2, #5
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	440a      	add	r2, r1
 80084ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084ce:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80084d2:	60d3      	str	r3, [r2, #12]
      }
      break;
 80084d4:	e006      	b.n	80084e4 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	75fb      	strb	r3, [r7, #23]
      break;
 80084da:	e004      	b.n	80084e6 <USB_HC_Init+0x11e>
      break;
 80084dc:	bf00      	nop
 80084de:	e002      	b.n	80084e6 <USB_HC_Init+0x11e>
      break;
 80084e0:	bf00      	nop
 80084e2:	e000      	b.n	80084e6 <USB_HC_Init+0x11e>
      break;
 80084e4:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084ec:	699a      	ldr	r2, [r3, #24]
 80084ee:	78fb      	ldrb	r3, [r7, #3]
 80084f0:	f003 030f 	and.w	r3, r3, #15
 80084f4:	2101      	movs	r1, #1
 80084f6:	fa01 f303 	lsl.w	r3, r1, r3
 80084fa:	68b9      	ldr	r1, [r7, #8]
 80084fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008500:	4313      	orrs	r3, r2
 8008502:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008510:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008514:	2b00      	cmp	r3, #0
 8008516:	da03      	bge.n	8008520 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800851c:	613b      	str	r3, [r7, #16]
 800851e:	e001      	b.n	8008524 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8008520:	2300      	movs	r3, #0
 8008522:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8008524:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008528:	2b02      	cmp	r3, #2
 800852a:	d103      	bne.n	8008534 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800852c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008530:	60fb      	str	r3, [r7, #12]
 8008532:	e001      	b.n	8008538 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008534:	2300      	movs	r3, #0
 8008536:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008538:	787b      	ldrb	r3, [r7, #1]
 800853a:	059b      	lsls	r3, r3, #22
 800853c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008540:	78bb      	ldrb	r3, [r7, #2]
 8008542:	02db      	lsls	r3, r3, #11
 8008544:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008548:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800854a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800854e:	049b      	lsls	r3, r3, #18
 8008550:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008554:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008556:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008558:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800855c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008562:	78fb      	ldrb	r3, [r7, #3]
 8008564:	0159      	lsls	r1, r3, #5
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	440b      	add	r3, r1
 800856a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800856e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008574:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008576:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800857a:	2b03      	cmp	r3, #3
 800857c:	d10f      	bne.n	800859e <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800857e:	78fb      	ldrb	r3, [r7, #3]
 8008580:	015a      	lsls	r2, r3, #5
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	4413      	add	r3, r2
 8008586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	78fa      	ldrb	r2, [r7, #3]
 800858e:	0151      	lsls	r1, r2, #5
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	440a      	add	r2, r1
 8008594:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008598:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800859c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800859e:	7dfb      	ldrb	r3, [r7, #23]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	371c      	adds	r7, #28
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	785b      	ldrb	r3, [r3, #1]
 80085be:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80085c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085c4:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d018      	beq.n	8008600 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	8912      	ldrh	r2, [r2, #8]
 80085d6:	4413      	add	r3, r2
 80085d8:	3b01      	subs	r3, #1
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	8912      	ldrh	r2, [r2, #8]
 80085de:	fbb3 f3f2 	udiv	r3, r3, r2
 80085e2:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 80085e4:	8bfa      	ldrh	r2, [r7, #30]
 80085e6:	8a7b      	ldrh	r3, [r7, #18]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d90b      	bls.n	8008604 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 80085ec:	8a7b      	ldrh	r3, [r7, #18]
 80085ee:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80085f0:	8bfb      	ldrh	r3, [r7, #30]
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	8912      	ldrh	r2, [r2, #8]
 80085f6:	fb02 f203 	mul.w	r2, r2, r3
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	611a      	str	r2, [r3, #16]
 80085fe:	e001      	b.n	8008604 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8008600:	2301      	movs	r3, #1
 8008602:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	78db      	ldrb	r3, [r3, #3]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d006      	beq.n	800861a <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800860c:	8bfb      	ldrh	r3, [r7, #30]
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	8912      	ldrh	r2, [r2, #8]
 8008612:	fb02 f203 	mul.w	r2, r2, r3
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008622:	8bfb      	ldrh	r3, [r7, #30]
 8008624:	04d9      	lsls	r1, r3, #19
 8008626:	4b5f      	ldr	r3, [pc, #380]	; (80087a4 <USB_HC_StartXfer+0x1f8>)
 8008628:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800862a:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	7a9b      	ldrb	r3, [r3, #10]
 8008630:	075b      	lsls	r3, r3, #29
 8008632:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008636:	6979      	ldr	r1, [r7, #20]
 8008638:	0148      	lsls	r0, r1, #5
 800863a:	69b9      	ldr	r1, [r7, #24]
 800863c:	4401      	add	r1, r0
 800863e:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008642:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008644:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f003 0301 	and.w	r3, r3, #1
 8008652:	2b00      	cmp	r3, #0
 8008654:	bf0c      	ite	eq
 8008656:	2301      	moveq	r3, #1
 8008658:	2300      	movne	r3, #0
 800865a:	b2db      	uxtb	r3, r3
 800865c:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	015a      	lsls	r2, r3, #5
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	4413      	add	r3, r2
 8008666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	697a      	ldr	r2, [r7, #20]
 800866e:	0151      	lsls	r1, r2, #5
 8008670:	69ba      	ldr	r2, [r7, #24]
 8008672:	440a      	add	r2, r1
 8008674:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008678:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800867c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	015a      	lsls	r2, r3, #5
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	4413      	add	r3, r2
 8008686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	7c7b      	ldrb	r3, [r7, #17]
 800868e:	075b      	lsls	r3, r3, #29
 8008690:	6979      	ldr	r1, [r7, #20]
 8008692:	0148      	lsls	r0, r1, #5
 8008694:	69b9      	ldr	r1, [r7, #24]
 8008696:	4401      	add	r1, r0
 8008698:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800869c:	4313      	orrs	r3, r2
 800869e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	015a      	lsls	r2, r3, #5
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	4413      	add	r3, r2
 80086a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a3e      	ldr	r2, [pc, #248]	; (80087a8 <USB_HC_StartXfer+0x1fc>)
 80086b0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80086b2:	4b3d      	ldr	r3, [pc, #244]	; (80087a8 <USB_HC_StartXfer+0x1fc>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80086ba:	4a3b      	ldr	r2, [pc, #236]	; (80087a8 <USB_HC_StartXfer+0x1fc>)
 80086bc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	78db      	ldrb	r3, [r3, #3]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d006      	beq.n	80086d4 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80086c6:	4b38      	ldr	r3, [pc, #224]	; (80087a8 <USB_HC_StartXfer+0x1fc>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086ce:	4a36      	ldr	r2, [pc, #216]	; (80087a8 <USB_HC_StartXfer+0x1fc>)
 80086d0:	6013      	str	r3, [r2, #0]
 80086d2:	e005      	b.n	80086e0 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80086d4:	4b34      	ldr	r3, [pc, #208]	; (80087a8 <USB_HC_StartXfer+0x1fc>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086dc:	4a32      	ldr	r2, [pc, #200]	; (80087a8 <USB_HC_StartXfer+0x1fc>)
 80086de:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80086e0:	4b31      	ldr	r3, [pc, #196]	; (80087a8 <USB_HC_StartXfer+0x1fc>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086e8:	4a2f      	ldr	r2, [pc, #188]	; (80087a8 <USB_HC_StartXfer+0x1fc>)
 80086ea:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086f8:	461a      	mov	r2, r3
 80086fa:	4b2b      	ldr	r3, [pc, #172]	; (80087a8 <USB_HC_StartXfer+0x1fc>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	78db      	ldrb	r3, [r3, #3]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d148      	bne.n	800879a <USB_HC_StartXfer+0x1ee>
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d044      	beq.n	800879a <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	79db      	ldrb	r3, [r3, #7]
 8008714:	2b03      	cmp	r3, #3
 8008716:	d831      	bhi.n	800877c <USB_HC_StartXfer+0x1d0>
 8008718:	a201      	add	r2, pc, #4	; (adr r2, 8008720 <USB_HC_StartXfer+0x174>)
 800871a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871e:	bf00      	nop
 8008720:	08008731 	.word	0x08008731
 8008724:	08008755 	.word	0x08008755
 8008728:	08008731 	.word	0x08008731
 800872c:	08008755 	.word	0x08008755
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	3303      	adds	r3, #3
 8008736:	089b      	lsrs	r3, r3, #2
 8008738:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800873a:	89fa      	ldrh	r2, [r7, #14]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008740:	b29b      	uxth	r3, r3
 8008742:	429a      	cmp	r2, r3
 8008744:	d91c      	bls.n	8008780 <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	f043 0220 	orr.w	r2, r3, #32
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	619a      	str	r2, [r3, #24]
          }
          break;
 8008752:	e015      	b.n	8008780 <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	3303      	adds	r3, #3
 800875a:	089b      	lsrs	r3, r3, #2
 800875c:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800875e:	89fa      	ldrh	r2, [r7, #14]
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	b29b      	uxth	r3, r3
 800876a:	429a      	cmp	r2, r3
 800876c:	d90a      	bls.n	8008784 <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	619a      	str	r2, [r3, #24]
          }
          break;
 800877a:	e003      	b.n	8008784 <USB_HC_StartXfer+0x1d8>

        default:
          break;
 800877c:	bf00      	nop
 800877e:	e002      	b.n	8008786 <USB_HC_StartXfer+0x1da>
          break;
 8008780:	bf00      	nop
 8008782:	e000      	b.n	8008786 <USB_HC_StartXfer+0x1da>
          break;
 8008784:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	68d9      	ldr	r1, [r3, #12]
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	785a      	ldrb	r2, [r3, #1]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	b29b      	uxth	r3, r3
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7ff fc23 	bl	8007fe0 <USB_WritePacket>
    }

  return HAL_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3720      	adds	r7, #32
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	1ff80000 	.word	0x1ff80000
 80087a8:	200004cc 	.word	0x200004cc

080087ac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	b29b      	uxth	r3, r3
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3714      	adds	r7, #20
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80087ce:	b480      	push	{r7}
 80087d0:	b087      	sub	sp, #28
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
 80087d6:	460b      	mov	r3, r1
 80087d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80087de:	78fb      	ldrb	r3, [r7, #3]
 80087e0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80087e2:	2300      	movs	r3, #0
 80087e4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	0c9b      	lsrs	r3, r3, #18
 80087f6:	f003 0303 	and.w	r3, r3, #3
 80087fa:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d002      	beq.n	8008808 <USB_HC_Halt+0x3a>
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	2b02      	cmp	r3, #2
 8008806:	d16c      	bne.n	80088e2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	4413      	add	r3, r2
 8008810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	0151      	lsls	r1, r2, #5
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	440a      	add	r2, r1
 800881e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008822:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008826:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d143      	bne.n	80088bc <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	4413      	add	r3, r2
 800883c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	0151      	lsls	r1, r2, #5
 8008846:	693a      	ldr	r2, [r7, #16]
 8008848:	440a      	add	r2, r1
 800884a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800884e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008852:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	015a      	lsls	r2, r3, #5
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	4413      	add	r3, r2
 800885c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	0151      	lsls	r1, r2, #5
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	440a      	add	r2, r1
 800886a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800886e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008872:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	015a      	lsls	r2, r3, #5
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	4413      	add	r3, r2
 800887c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	0151      	lsls	r1, r2, #5
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	440a      	add	r2, r1
 800888a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800888e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008892:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	3301      	adds	r3, #1
 8008898:	617b      	str	r3, [r7, #20]
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088a0:	d81d      	bhi.n	80088de <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	015a      	lsls	r2, r3, #5
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	4413      	add	r3, r2
 80088aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088b8:	d0ec      	beq.n	8008894 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80088ba:	e080      	b.n	80089be <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	015a      	lsls	r2, r3, #5
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	4413      	add	r3, r2
 80088c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	0151      	lsls	r1, r2, #5
 80088ce:	693a      	ldr	r2, [r7, #16]
 80088d0:	440a      	add	r2, r1
 80088d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088da:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80088dc:	e06f      	b.n	80089be <USB_HC_Halt+0x1f0>
          break;
 80088de:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80088e0:	e06d      	b.n	80089be <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	015a      	lsls	r2, r3, #5
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	0151      	lsls	r1, r2, #5
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	440a      	add	r2, r1
 80088f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008900:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800890e:	2b00      	cmp	r3, #0
 8008910:	d143      	bne.n	800899a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	015a      	lsls	r2, r3, #5
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	4413      	add	r3, r2
 800891a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	0151      	lsls	r1, r2, #5
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	440a      	add	r2, r1
 8008928:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800892c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008930:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	015a      	lsls	r2, r3, #5
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	4413      	add	r3, r2
 800893a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	0151      	lsls	r1, r2, #5
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	440a      	add	r2, r1
 8008948:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800894c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008950:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	015a      	lsls	r2, r3, #5
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	4413      	add	r3, r2
 800895a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	0151      	lsls	r1, r2, #5
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	440a      	add	r2, r1
 8008968:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800896c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008970:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	3301      	adds	r3, #1
 8008976:	617b      	str	r3, [r7, #20]
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800897e:	d81d      	bhi.n	80089bc <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	4413      	add	r3, r2
 8008988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008992:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008996:	d0ec      	beq.n	8008972 <USB_HC_Halt+0x1a4>
 8008998:	e011      	b.n	80089be <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	015a      	lsls	r2, r3, #5
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	4413      	add	r3, r2
 80089a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	0151      	lsls	r1, r2, #5
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	440a      	add	r2, r1
 80089b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089b8:	6013      	str	r3, [r2, #0]
 80089ba:	e000      	b.n	80089be <USB_HC_Halt+0x1f0>
          break;
 80089bc:	bf00      	nop
    }
  }

  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	371c      	adds	r7, #28
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80089d8:	2300      	movs	r3, #0
 80089da:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7ff fa7b 	bl	8007ed8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80089e2:	2110      	movs	r1, #16
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f7ff fab3 	bl	8007f50 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f7ff fad6 	bl	8007f9c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80089f0:	2300      	movs	r3, #0
 80089f2:	613b      	str	r3, [r7, #16]
 80089f4:	e01f      	b.n	8008a36 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	015a      	lsls	r2, r3, #5
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	4413      	add	r3, r2
 80089fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a0c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a14:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a1c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	015a      	lsls	r2, r3, #5
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	4413      	add	r3, r2
 8008a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	3301      	adds	r3, #1
 8008a34:	613b      	str	r3, [r7, #16]
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	2b0f      	cmp	r3, #15
 8008a3a:	d9dc      	bls.n	80089f6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	613b      	str	r3, [r7, #16]
 8008a40:	e034      	b.n	8008aac <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	015a      	lsls	r2, r3, #5
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	4413      	add	r3, r2
 8008a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a58:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a60:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a68:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a76:	461a      	mov	r2, r3
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	617b      	str	r3, [r7, #20]
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a88:	d80c      	bhi.n	8008aa4 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	015a      	lsls	r2, r3, #5
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	4413      	add	r3, r2
 8008a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008aa0:	d0ec      	beq.n	8008a7c <USB_StopHost+0xb0>
 8008aa2:	e000      	b.n	8008aa6 <USB_StopHost+0xda>
        break;
 8008aa4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	613b      	str	r3, [r7, #16]
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	2b0f      	cmp	r3, #15
 8008ab0:	d9c7      	bls.n	8008a42 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ab8:	461a      	mov	r2, r3
 8008aba:	f04f 33ff 	mov.w	r3, #4294967295
 8008abe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac6:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f7ff f9f4 	bl	8007eb6 <USB_EnableGlobalInt>

  return HAL_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3718      	adds	r7, #24
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8008ad8:	b590      	push	{r4, r7, lr}
 8008ada:	b089      	sub	sp, #36	; 0x24
 8008adc:	af04      	add	r7, sp, #16
 8008ade:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	2102      	movs	r1, #2
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fc3a 	bl	8009364 <USBH_FindInterface>
 8008af0:	4603      	mov	r3, r0
 8008af2:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8008af4:	7bbb      	ldrb	r3, [r7, #14]
 8008af6:	2bff      	cmp	r3, #255	; 0xff
 8008af8:	f000 812a 	beq.w	8008d50 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8008afc:	7bbb      	ldrb	r3, [r7, #14]
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fc13 	bl	800932c <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8008b0c:	2050      	movs	r0, #80	; 0x50
 8008b0e:	f002 f8e3 	bl	800acd8 <malloc>
 8008b12:	4603      	mov	r3, r0
 8008b14:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008b1c:	69db      	ldr	r3, [r3, #28]
 8008b1e:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008b20:	7bbb      	ldrb	r3, [r7, #14]
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	211a      	movs	r1, #26
 8008b26:	fb01 f303 	mul.w	r3, r1, r3
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	b25b      	sxtb	r3, r3
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	da15      	bge.n	8008b64 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	211a      	movs	r1, #26
 8008b3e:	fb01 f303 	mul.w	r3, r1, r3
 8008b42:	4413      	add	r3, r2
 8008b44:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008b48:	781a      	ldrb	r2, [r3, #0]
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b4e:	7bbb      	ldrb	r3, [r7, #14]
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	211a      	movs	r1, #26
 8008b54:	fb01 f303 	mul.w	r3, r1, r3
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008b5e:	881a      	ldrh	r2, [r3, #0]
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	785b      	ldrb	r3, [r3, #1]
 8008b68:	4619      	mov	r1, r3
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f001 fd21 	bl	800a5b2 <USBH_AllocPipe>
 8008b70:	4603      	mov	r3, r0
 8008b72:	461a      	mov	r2, r3
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	7819      	ldrb	r1, [r3, #0]
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	7858      	ldrb	r0, [r3, #1]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	8952      	ldrh	r2, [r2, #10]
 8008b90:	9202      	str	r2, [sp, #8]
 8008b92:	2203      	movs	r2, #3
 8008b94:	9201      	str	r2, [sp, #4]
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	4623      	mov	r3, r4
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f001 fcd9 	bl	800a554 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	4619      	mov	r1, r3
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f001 ffe4 	bl	800ab78 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	210a      	movs	r1, #10
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fbd4 	bl	8009364 <USBH_FindInterface>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8008bc0:	7bbb      	ldrb	r3, [r7, #14]
 8008bc2:	2bff      	cmp	r3, #255	; 0xff
 8008bc4:	f000 80c4 	beq.w	8008d50 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008bc8:	7bbb      	ldrb	r3, [r7, #14]
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	211a      	movs	r1, #26
 8008bce:	fb01 f303 	mul.w	r3, r1, r3
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	b25b      	sxtb	r3, r3
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	da16      	bge.n	8008c0e <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008be0:	7bbb      	ldrb	r3, [r7, #14]
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	211a      	movs	r1, #26
 8008be6:	fb01 f303 	mul.w	r3, r1, r3
 8008bea:	4413      	add	r3, r2
 8008bec:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008bf0:	781a      	ldrb	r2, [r3, #0]
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008bf6:	7bbb      	ldrb	r3, [r7, #14]
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	211a      	movs	r1, #26
 8008bfc:	fb01 f303 	mul.w	r3, r1, r3
 8008c00:	4413      	add	r3, r2
 8008c02:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008c06:	881a      	ldrh	r2, [r3, #0]
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	835a      	strh	r2, [r3, #26]
 8008c0c:	e015      	b.n	8008c3a <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008c0e:	7bbb      	ldrb	r3, [r7, #14]
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	211a      	movs	r1, #26
 8008c14:	fb01 f303 	mul.w	r3, r1, r3
 8008c18:	4413      	add	r3, r2
 8008c1a:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008c1e:	781a      	ldrb	r2, [r3, #0]
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008c24:	7bbb      	ldrb	r3, [r7, #14]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	211a      	movs	r1, #26
 8008c2a:	fb01 f303 	mul.w	r3, r1, r3
 8008c2e:	4413      	add	r3, r2
 8008c30:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008c34:	881a      	ldrh	r2, [r3, #0]
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008c3a:	7bbb      	ldrb	r3, [r7, #14]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	211a      	movs	r1, #26
 8008c40:	fb01 f303 	mul.w	r3, r1, r3
 8008c44:	4413      	add	r3, r2
 8008c46:	f203 3352 	addw	r3, r3, #850	; 0x352
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	b25b      	sxtb	r3, r3
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	da16      	bge.n	8008c80 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008c52:	7bbb      	ldrb	r3, [r7, #14]
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	211a      	movs	r1, #26
 8008c58:	fb01 f303 	mul.w	r3, r1, r3
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8008c62:	781a      	ldrb	r2, [r3, #0]
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c68:	7bbb      	ldrb	r3, [r7, #14]
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	211a      	movs	r1, #26
 8008c6e:	fb01 f303 	mul.w	r3, r1, r3
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8008c78:	881a      	ldrh	r2, [r3, #0]
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	835a      	strh	r2, [r3, #26]
 8008c7e:	e015      	b.n	8008cac <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	211a      	movs	r1, #26
 8008c86:	fb01 f303 	mul.w	r3, r1, r3
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f203 3352 	addw	r3, r3, #850	; 0x352
 8008c90:	781a      	ldrb	r2, [r3, #0]
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c96:	7bbb      	ldrb	r3, [r7, #14]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	211a      	movs	r1, #26
 8008c9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8008ca6:	881a      	ldrh	r2, [r3, #0]
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	7b9b      	ldrb	r3, [r3, #14]
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f001 fc7d 	bl	800a5b2 <USBH_AllocPipe>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	461a      	mov	r2, r3
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	7bdb      	ldrb	r3, [r3, #15]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f001 fc73 	bl	800a5b2 <USBH_AllocPipe>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	461a      	mov	r2, r3
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	7b59      	ldrb	r1, [r3, #13]
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	7b98      	ldrb	r0, [r3, #14]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ce8:	68ba      	ldr	r2, [r7, #8]
 8008cea:	8b12      	ldrh	r2, [r2, #24]
 8008cec:	9202      	str	r2, [sp, #8]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	9201      	str	r2, [sp, #4]
 8008cf2:	9300      	str	r3, [sp, #0]
 8008cf4:	4623      	mov	r3, r4
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f001 fc2b 	bl	800a554 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	7b19      	ldrb	r1, [r3, #12]
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	7bd8      	ldrb	r0, [r3, #15]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	8b52      	ldrh	r2, [r2, #26]
 8008d16:	9202      	str	r2, [sp, #8]
 8008d18:	2202      	movs	r2, #2
 8008d1a:	9201      	str	r2, [sp, #4]
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	4623      	mov	r3, r4
 8008d20:	4602      	mov	r2, r0
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f001 fc16 	bl	800a554 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	7b5b      	ldrb	r3, [r3, #13]
 8008d34:	2200      	movs	r2, #0
 8008d36:	4619      	mov	r1, r3
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f001 ff1d 	bl	800ab78 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	7b1b      	ldrb	r3, [r3, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f001 ff16 	bl	800ab78 <USBH_LL_SetToggle>
      status = USBH_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3714      	adds	r7, #20
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd90      	pop	{r4, r7, pc}

08008d5a <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b084      	sub	sp, #16
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008d68:	69db      	ldr	r3, [r3, #28]
 8008d6a:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00e      	beq.n	8008d92 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	4619      	mov	r1, r3
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f001 fc09 	bl	800a592 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	4619      	mov	r1, r3
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f001 fc31 	bl	800a5ee <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	7b1b      	ldrb	r3, [r3, #12]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00e      	beq.n	8008db8 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	7b1b      	ldrb	r3, [r3, #12]
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f001 fbf6 	bl	800a592 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	7b1b      	ldrb	r3, [r3, #12]
 8008daa:	4619      	mov	r1, r3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f001 fc1e 	bl	800a5ee <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	7b5b      	ldrb	r3, [r3, #13]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00e      	beq.n	8008dde <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	7b5b      	ldrb	r3, [r3, #13]
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f001 fbe3 	bl	800a592 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	7b5b      	ldrb	r3, [r3, #13]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f001 fc0b 	bl	800a5ee <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008de4:	69db      	ldr	r3, [r3, #28]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00b      	beq.n	8008e02 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008df0:	69db      	ldr	r3, [r3, #28]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f001 ff78 	bl	800ace8 <free>
    phost->pActiveClass->pData = 0U;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008dfe:	2200      	movs	r2, #0
 8008e00:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8008e14:	2302      	movs	r3, #2
 8008e16:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008e1e:	69db      	ldr	r3, [r3, #28]
 8008e20:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	3340      	adds	r3, #64	; 0x40
 8008e26:	4619      	mov	r1, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 f8b2 	bl	8008f92 <GetLineCoding>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d105      	bne.n	8008e44 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008e3e:	2102      	movs	r1, #2
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	4798      	blx	r3
  }
  return status;
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
	...

08008e50 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008e66:	69db      	ldr	r3, [r3, #28]
 8008e68:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008e70:	2b04      	cmp	r3, #4
 8008e72:	d877      	bhi.n	8008f64 <USBH_CDC_Process+0x114>
 8008e74:	a201      	add	r2, pc, #4	; (adr r2, 8008e7c <USBH_CDC_Process+0x2c>)
 8008e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e7a:	bf00      	nop
 8008e7c:	08008e91 	.word	0x08008e91
 8008e80:	08008e97 	.word	0x08008e97
 8008e84:	08008ec7 	.word	0x08008ec7
 8008e88:	08008f3b 	.word	0x08008f3b
 8008e8c:	08008f49 	.word	0x08008f49
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	73fb      	strb	r3, [r7, #15]
    break;
 8008e94:	e06d      	b.n	8008f72 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f897 	bl	8008fd0 <SetLineCoding>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8008ea6:	7bbb      	ldrb	r3, [r7, #14]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d104      	bne.n	8008eb6 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	2202      	movs	r2, #2
 8008eb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8008eb4:	e058      	b.n	8008f68 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8008eb6:	7bbb      	ldrb	r3, [r7, #14]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d055      	beq.n	8008f68 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	2204      	movs	r2, #4
 8008ec0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8008ec4:	e050      	b.n	8008f68 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	3340      	adds	r3, #64	; 0x40
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f860 	bl	8008f92 <GetLineCoding>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8008ed6:	7bbb      	ldrb	r3, [r7, #14]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d126      	bne.n	8008f2a <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008eee:	791b      	ldrb	r3, [r3, #4]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d13b      	bne.n	8008f6c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008efe:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d133      	bne.n	8008f6c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f0e:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d12b      	bne.n	8008f6c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f1c:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d124      	bne.n	8008f6c <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f95a 	bl	80091dc <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8008f28:	e020      	b.n	8008f6c <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8008f2a:	7bbb      	ldrb	r3, [r7, #14]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d01d      	beq.n	8008f6c <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	2204      	movs	r2, #4
 8008f34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8008f38:	e018      	b.n	8008f6c <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f867 	bl	800900e <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 f8dc 	bl	80090fe <CDC_ProcessReception>
    break;
 8008f46:	e014      	b.n	8008f72 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8008f48:	2100      	movs	r1, #0
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fece 	bl	8009cec <USBH_ClrFeature>
 8008f50:	4603      	mov	r3, r0
 8008f52:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10a      	bne.n	8008f70 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8008f62:	e005      	b.n	8008f70 <USBH_CDC_Process+0x120>

  default:
    break;
 8008f64:	bf00      	nop
 8008f66:	e004      	b.n	8008f72 <USBH_CDC_Process+0x122>
    break;
 8008f68:	bf00      	nop
 8008f6a:	e002      	b.n	8008f72 <USBH_CDC_Process+0x122>
    break;
 8008f6c:	bf00      	nop
 8008f6e:	e000      	b.n	8008f72 <USBH_CDC_Process+0x122>
    break;
 8008f70:	bf00      	nop

  }

  return status;
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	370c      	adds	r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b082      	sub	sp, #8
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	22a1      	movs	r2, #161	; 0xa1
 8008fa0:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2221      	movs	r2, #33	; 0x21
 8008fa6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2207      	movs	r2, #7
 8008fb8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	2207      	movs	r2, #7
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f001 f873 	bl	800a0ac <USBH_CtlReq>
 8008fc6:	4603      	mov	r3, r0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2221      	movs	r2, #33	; 0x21
 8008fde:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2220      	movs	r2, #32
 8008fe4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2207      	movs	r2, #7
 8008ff6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	2207      	movs	r2, #7
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f001 f854 	bl	800a0ac <USBH_CtlReq>
 8009004:	4603      	mov	r3, r0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b086      	sub	sp, #24
 8009012:	af02      	add	r7, sp, #8
 8009014:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800901c:	69db      	ldr	r3, [r3, #28]
 800901e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009020:	2300      	movs	r3, #0
 8009022:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800902a:	2b01      	cmp	r3, #1
 800902c:	d002      	beq.n	8009034 <CDC_ProcessTransmission+0x26>
 800902e:	2b02      	cmp	r3, #2
 8009030:	d025      	beq.n	800907e <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8009032:	e060      	b.n	80090f6 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	8b12      	ldrh	r2, [r2, #24]
 800903c:	4293      	cmp	r3, r2
 800903e:	d90c      	bls.n	800905a <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	69d9      	ldr	r1, [r3, #28]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	8b1a      	ldrh	r2, [r3, #24]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	7b58      	ldrb	r0, [r3, #13]
 800904c:	2301      	movs	r3, #1
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	4603      	mov	r3, r0
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f001 fa3b 	bl	800a4ce <USBH_BulkSendData>
 8009058:	e00c      	b.n	8009074 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8009062:	b29a      	uxth	r2, r3
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	7b58      	ldrb	r0, [r3, #13]
 8009068:	2301      	movs	r3, #1
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	4603      	mov	r3, r0
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f001 fa2d 	bl	800a4ce <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2202      	movs	r2, #2
 8009078:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800907c:	e03b      	b.n	80090f6 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	7b5b      	ldrb	r3, [r3, #13]
 8009082:	4619      	mov	r1, r3
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f001 fd4d 	bl	800ab24 <USBH_LL_GetURBState>
 800908a:	4603      	mov	r3, r0
 800908c:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800908e:	7afb      	ldrb	r3, [r7, #11]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d128      	bne.n	80090e6 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	8b12      	ldrh	r2, [r2, #24]
 800909c:	4293      	cmp	r3, r2
 800909e:	d90e      	bls.n	80090be <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	8b12      	ldrh	r2, [r2, #24]
 80090a8:	1a9a      	subs	r2, r3, r2
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	69db      	ldr	r3, [r3, #28]
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	8b12      	ldrh	r2, [r2, #24]
 80090b6:	441a      	add	r2, r3
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	61da      	str	r2, [r3, #28]
 80090bc:	e002      	b.n	80090c4 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2200      	movs	r2, #0
 80090c2:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d004      	beq.n	80090d6 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80090d4:	e00e      	b.n	80090f4 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f868 	bl	80091b4 <USBH_CDC_TransmitCallback>
    break;
 80090e4:	e006      	b.n	80090f4 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 80090e6:	7afb      	ldrb	r3, [r7, #11]
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d103      	bne.n	80090f4 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80090f4:	bf00      	nop
  }
}
 80090f6:	bf00      	nop
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b086      	sub	sp, #24
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800910c:	69db      	ldr	r3, [r3, #28]
 800910e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009110:	2300      	movs	r3, #0
 8009112:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800911a:	2b03      	cmp	r3, #3
 800911c:	d002      	beq.n	8009124 <CDC_ProcessReception+0x26>
 800911e:	2b04      	cmp	r3, #4
 8009120:	d00e      	beq.n	8009140 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8009122:	e043      	b.n	80091ac <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	6a19      	ldr	r1, [r3, #32]
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	8b5a      	ldrh	r2, [r3, #26]
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	7b1b      	ldrb	r3, [r3, #12]
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f001 f9f1 	bl	800a518 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	2204      	movs	r2, #4
 800913a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800913e:	e035      	b.n	80091ac <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	7b1b      	ldrb	r3, [r3, #12]
 8009144:	4619      	mov	r1, r3
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f001 fcec 	bl	800ab24 <USBH_LL_GetURBState>
 800914c:	4603      	mov	r3, r0
 800914e:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8009150:	7cfb      	ldrb	r3, [r7, #19]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d129      	bne.n	80091aa <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	7b1b      	ldrb	r3, [r3, #12]
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f001 fc4f 	bl	800aa00 <USBH_LL_GetLastXferSize>
 8009162:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	429a      	cmp	r2, r3
 800916c:	d016      	beq.n	800919c <CDC_ProcessReception+0x9e>
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	8b5b      	ldrh	r3, [r3, #26]
 8009172:	461a      	mov	r2, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	4293      	cmp	r3, r2
 8009178:	d910      	bls.n	800919c <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	1ad2      	subs	r2, r2, r3
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	6a1a      	ldr	r2, [r3, #32]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	441a      	add	r2, r3
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	2203      	movs	r2, #3
 8009196:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800919a:	e006      	b.n	80091aa <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f80f 	bl	80091c8 <USBH_CDC_ReceiveCallback>
    break;
 80091aa:	bf00      	nop
  }
}
 80091ac:	bf00      	nop
 80091ae:	3718      	adds	r7, #24
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]

}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]

}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]

}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	4613      	mov	r3, r2
 80091fc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d101      	bne.n	8009208 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009204:	2302      	movs	r3, #2
 8009206:	e019      	b.n	800923c <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	79fa      	ldrb	r2, [r7, #7]
 800920c:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2200      	movs	r2, #0
 800921c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f000 f80f 	bl	8009244 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d003      	beq.n	8009234 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f001 fb31 	bl	800a89c <USBH_LL_Init>

  return USBH_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800924c:	2300      	movs	r3, #0
 800924e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8009250:	e008      	b.n	8009264 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	32e0      	adds	r2, #224	; 0xe0
 8009258:	2100      	movs	r1, #0
 800925a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	3301      	adds	r3, #1
 8009262:	60fb      	str	r3, [r7, #12]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2b0e      	cmp	r3, #14
 8009268:	d9f3      	bls.n	8009252 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800926a:	2300      	movs	r3, #0
 800926c:	60fb      	str	r3, [r7, #12]
 800926e:	e009      	b.n	8009284 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	4413      	add	r3, r2
 8009276:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800927a:	2200      	movs	r2, #0
 800927c:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	3301      	adds	r3, #1
 8009282:	60fb      	str	r3, [r7, #12]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800928a:	d3f1      	bcc.n	8009270 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2201      	movs	r2, #1
 80092aa:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2240      	movs	r2, #64	; 0x40
 80092b0:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3714      	adds	r7, #20
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr

080092d6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80092d6:	b480      	push	{r7}
 80092d8:	b085      	sub	sp, #20
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d017      	beq.n	800931a <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d10f      	bne.n	8009314 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092fa:	1c59      	adds	r1, r3, #1
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	33dc      	adds	r3, #220	; 0xdc
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	683a      	ldr	r2, [r7, #0]
 800930c:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	73fb      	strb	r3, [r7, #15]
 8009312:	e004      	b.n	800931e <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009314:	2302      	movs	r3, #2
 8009316:	73fb      	strb	r3, [r7, #15]
 8009318:	e001      	b.n	800931e <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800931a:	2302      	movs	r3, #2
 800931c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800931e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3714      	adds	r7, #20
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8009342:	78fa      	ldrb	r2, [r7, #3]
 8009344:	429a      	cmp	r2, r3
 8009346:	d204      	bcs.n	8009352 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	78fa      	ldrb	r2, [r7, #3]
 800934c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8009350:	e001      	b.n	8009356 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009352:	2302      	movs	r3, #2
 8009354:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8009356:	7bfb      	ldrb	r3, [r7, #15]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3714      	adds	r7, #20
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009364:	b480      	push	{r7}
 8009366:	b087      	sub	sp, #28
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	4608      	mov	r0, r1
 800936e:	4611      	mov	r1, r2
 8009370:	461a      	mov	r2, r3
 8009372:	4603      	mov	r3, r0
 8009374:	70fb      	strb	r3, [r7, #3]
 8009376:	460b      	mov	r3, r1
 8009378:	70bb      	strb	r3, [r7, #2]
 800937a:	4613      	mov	r3, r2
 800937c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800937e:	2300      	movs	r3, #0
 8009380:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009382:	2300      	movs	r3, #0
 8009384:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800938c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800938e:	e025      	b.n	80093dc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009390:	7dfb      	ldrb	r3, [r7, #23]
 8009392:	221a      	movs	r2, #26
 8009394:	fb02 f303 	mul.w	r3, r2, r3
 8009398:	3308      	adds	r3, #8
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	4413      	add	r3, r2
 800939e:	3302      	adds	r3, #2
 80093a0:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	795b      	ldrb	r3, [r3, #5]
 80093a6:	78fa      	ldrb	r2, [r7, #3]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d002      	beq.n	80093b2 <USBH_FindInterface+0x4e>
 80093ac:	78fb      	ldrb	r3, [r7, #3]
 80093ae:	2bff      	cmp	r3, #255	; 0xff
 80093b0:	d111      	bne.n	80093d6 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80093b6:	78ba      	ldrb	r2, [r7, #2]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d002      	beq.n	80093c2 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80093bc:	78bb      	ldrb	r3, [r7, #2]
 80093be:	2bff      	cmp	r3, #255	; 0xff
 80093c0:	d109      	bne.n	80093d6 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80093c6:	787a      	ldrb	r2, [r7, #1]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d002      	beq.n	80093d2 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80093cc:	787b      	ldrb	r3, [r7, #1]
 80093ce:	2bff      	cmp	r3, #255	; 0xff
 80093d0:	d101      	bne.n	80093d6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80093d2:	7dfb      	ldrb	r3, [r7, #23]
 80093d4:	e006      	b.n	80093e4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80093d6:	7dfb      	ldrb	r3, [r7, #23]
 80093d8:	3301      	adds	r3, #1
 80093da:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80093dc:	7dfb      	ldrb	r3, [r7, #23]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d9d6      	bls.n	8009390 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80093e2:	23ff      	movs	r3, #255	; 0xff
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	371c      	adds	r7, #28
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f001 fa8b 	bl	800a914 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80093fe:	2101      	movs	r1, #1
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f001 fba2 	bl	800ab4a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b088      	sub	sp, #32
 8009414:	af04      	add	r7, sp, #16
 8009416:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009418:	2302      	movs	r3, #2
 800941a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800941c:	2300      	movs	r3, #0
 800941e:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 faec 	bl	80099fe <USBH_IsPortEnabled>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10c      	bne.n	8009446 <USBH_Process+0x36>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	b2db      	uxtb	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d007      	beq.n	8009446 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	b2db      	uxtb	r3, r3
 800943c:	2b03      	cmp	r3, #3
 800943e:	d002      	beq.n	8009446 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2203      	movs	r2, #3
 8009444:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	b2db      	uxtb	r3, r3
 800944c:	2b0b      	cmp	r3, #11
 800944e:	f200 814c 	bhi.w	80096ea <USBH_Process+0x2da>
 8009452:	a201      	add	r2, pc, #4	; (adr r2, 8009458 <USBH_Process+0x48>)
 8009454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009458:	08009489 	.word	0x08009489
 800945c:	080094ab 	.word	0x080094ab
 8009460:	080094bf 	.word	0x080094bf
 8009464:	080096c5 	.word	0x080096c5
 8009468:	080096eb 	.word	0x080096eb
 800946c:	0800954d 	.word	0x0800954d
 8009470:	0800967b 	.word	0x0800967b
 8009474:	0800957d 	.word	0x0800957d
 8009478:	0800959d 	.word	0x0800959d
 800947c:	080095bd 	.word	0x080095bd
 8009480:	080095eb 	.word	0x080095eb
 8009484:	080096ad 	.word	0x080096ad
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800948e:	b2db      	uxtb	r3, r3
 8009490:	2b00      	cmp	r3, #0
 8009492:	f000 812c 	beq.w	80096ee <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2201      	movs	r2, #1
 800949a:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800949c:	20c8      	movs	r0, #200	; 0xc8
 800949e:	f001 fb9e 	bl	800abde <USBH_Delay>
      USBH_LL_ResetPort(phost);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f001 fa91 	bl	800a9ca <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80094a8:	e121      	b.n	80096ee <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	f040 811e 	bne.w	80096f2 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2202      	movs	r2, #2
 80094ba:	701a      	strb	r2, [r3, #0]
    }
    break;
 80094bc:	e119      	b.n	80096f2 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 80094be:	2064      	movs	r0, #100	; 0x64
 80094c0:	f001 fb8d 	bl	800abde <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f001 fa5b 	bl	800a980 <USBH_LL_GetSpeed>
 80094ca:	4603      	mov	r3, r0
 80094cc:	461a      	mov	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2205      	movs	r2, #5
 80094d8:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80094da:	2100      	movs	r1, #0
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f001 f868 	bl	800a5b2 <USBH_AllocPipe>
 80094e2:	4603      	mov	r3, r0
 80094e4:	461a      	mov	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80094ea:	2180      	movs	r1, #128	; 0x80
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f001 f860 	bl	800a5b2 <USBH_AllocPipe>
 80094f2:	4603      	mov	r3, r0
 80094f4:	461a      	mov	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	7919      	ldrb	r1, [r3, #4]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800950e:	b292      	uxth	r2, r2
 8009510:	9202      	str	r2, [sp, #8]
 8009512:	2200      	movs	r2, #0
 8009514:	9201      	str	r2, [sp, #4]
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	4603      	mov	r3, r0
 800951a:	2280      	movs	r2, #128	; 0x80
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f001 f819 	bl	800a554 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	7959      	ldrb	r1, [r3, #5]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8009536:	b292      	uxth	r2, r2
 8009538:	9202      	str	r2, [sp, #8]
 800953a:	2200      	movs	r2, #0
 800953c:	9201      	str	r2, [sp, #4]
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	4603      	mov	r3, r0
 8009542:	2200      	movs	r2, #0
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f001 f805 	bl	800a554 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800954a:	e0e3      	b.n	8009714 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f8e7 	bl	8009720 <USBH_HandleEnum>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	f040 80ce 	bne.w	80096f6 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8009568:	2b01      	cmp	r3, #1
 800956a:	d103      	bne.n	8009574 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2208      	movs	r2, #8
 8009570:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8009572:	e0c0      	b.n	80096f6 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2207      	movs	r2, #7
 8009578:	701a      	strb	r2, [r3, #0]
    break;
 800957a:	e0bc      	b.n	80096f6 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009582:	2b00      	cmp	r3, #0
 8009584:	f000 80b9 	beq.w	80096fa <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800958e:	2101      	movs	r1, #1
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2208      	movs	r2, #8
 8009598:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800959a:	e0ae      	b.n	80096fa <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	4619      	mov	r1, r3
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fb59 	bl	8009c5e <USBH_SetCfg>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f040 80a5 	bne.w	80096fe <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2209      	movs	r2, #9
 80095b8:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80095ba:	e0a0      	b.n	80096fe <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 80095c2:	f003 0320 	and.w	r3, r3, #32
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00b      	beq.n	80095e2 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80095ca:	2101      	movs	r1, #1
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fb69 	bl	8009ca4 <USBH_SetFeature>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f040 8094 	bne.w	8009702 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	220a      	movs	r2, #10
 80095de:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80095e0:	e08f      	b.n	8009702 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	220a      	movs	r2, #10
 80095e6:	701a      	strb	r2, [r3, #0]
    break;
 80095e8:	e08b      	b.n	8009702 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f000 8088 	beq.w	8009706 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80095fe:	2300      	movs	r3, #0
 8009600:	73fb      	strb	r3, [r7, #15]
 8009602:	e017      	b.n	8009634 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009604:	7bfb      	ldrb	r3, [r7, #15]
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	33dc      	adds	r3, #220	; 0xdc
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4413      	add	r3, r2
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	791a      	ldrb	r2, [r3, #4]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8009618:	429a      	cmp	r2, r3
 800961a:	d108      	bne.n	800962e <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 800961c:	7bfb      	ldrb	r3, [r7, #15]
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	33dc      	adds	r3, #220	; 0xdc
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4413      	add	r3, r2
 8009626:	685a      	ldr	r2, [r3, #4]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800962e:	7bfb      	ldrb	r3, [r7, #15]
 8009630:	3301      	adds	r3, #1
 8009632:	73fb      	strb	r3, [r7, #15]
 8009634:	7bfb      	ldrb	r3, [r7, #15]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d0e4      	beq.n	8009604 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009640:	2b00      	cmp	r3, #0
 8009642:	d016      	beq.n	8009672 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	4798      	blx	r3
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d109      	bne.n	800966a <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2206      	movs	r2, #6
 800965a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009662:	2103      	movs	r1, #3
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8009668:	e04d      	b.n	8009706 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	220d      	movs	r2, #13
 800966e:	701a      	strb	r2, [r3, #0]
    break;
 8009670:	e049      	b.n	8009706 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	220d      	movs	r2, #13
 8009676:	701a      	strb	r2, [r3, #0]
    break;
 8009678:	e045      	b.n	8009706 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00f      	beq.n	80096a4 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	4798      	blx	r3
 8009690:	4603      	mov	r3, r0
 8009692:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8009694:	7bbb      	ldrb	r3, [r7, #14]
 8009696:	b2db      	uxtb	r3, r3
 8009698:	2b00      	cmp	r3, #0
 800969a:	d136      	bne.n	800970a <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	220b      	movs	r2, #11
 80096a0:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 80096a2:	e032      	b.n	800970a <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	220d      	movs	r2, #13
 80096a8:	701a      	strb	r2, [r3, #0]
    break;
 80096aa:	e02e      	b.n	800970a <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d02b      	beq.n	800970e <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80096bc:	695b      	ldr	r3, [r3, #20]
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	4798      	blx	r3
    }
    break;
 80096c2:	e024      	b.n	800970e <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f7ff fdbd 	bl	8009244 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d01e      	beq.n	8009712 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 80096e8:	e013      	b.n	8009712 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 80096ea:	bf00      	nop
 80096ec:	e012      	b.n	8009714 <USBH_Process+0x304>
    break;
 80096ee:	bf00      	nop
 80096f0:	e010      	b.n	8009714 <USBH_Process+0x304>
    break;
 80096f2:	bf00      	nop
 80096f4:	e00e      	b.n	8009714 <USBH_Process+0x304>
    break;
 80096f6:	bf00      	nop
 80096f8:	e00c      	b.n	8009714 <USBH_Process+0x304>
    break;
 80096fa:	bf00      	nop
 80096fc:	e00a      	b.n	8009714 <USBH_Process+0x304>
    break;
 80096fe:	bf00      	nop
 8009700:	e008      	b.n	8009714 <USBH_Process+0x304>
    break;
 8009702:	bf00      	nop
 8009704:	e006      	b.n	8009714 <USBH_Process+0x304>
    break;
 8009706:	bf00      	nop
 8009708:	e004      	b.n	8009714 <USBH_Process+0x304>
    break;
 800970a:	bf00      	nop
 800970c:	e002      	b.n	8009714 <USBH_Process+0x304>
    break;
 800970e:	bf00      	nop
 8009710:	e000      	b.n	8009714 <USBH_Process+0x304>
    break;
 8009712:	bf00      	nop
  }
 return USBH_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop

08009720 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b088      	sub	sp, #32
 8009724:	af04      	add	r7, sp, #16
 8009726:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009728:	2301      	movs	r3, #1
 800972a:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	785b      	ldrb	r3, [r3, #1]
 8009730:	2b07      	cmp	r3, #7
 8009732:	f200 80f8 	bhi.w	8009926 <USBH_HandleEnum+0x206>
 8009736:	a201      	add	r2, pc, #4	; (adr r2, 800973c <USBH_HandleEnum+0x1c>)
 8009738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973c:	0800975d 	.word	0x0800975d
 8009740:	080097cf 	.word	0x080097cf
 8009744:	080097e7 	.word	0x080097e7
 8009748:	0800985d 	.word	0x0800985d
 800974c:	08009873 	.word	0x08009873
 8009750:	0800988f 	.word	0x0800988f
 8009754:	080098c3 	.word	0x080098c3
 8009758:	080098f7 	.word	0x080098f7
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800975c:	2108      	movs	r1, #8
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f9ad 	bl	8009abe <USBH_Get_DevDesc>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	f040 80df 	bne.w	800992a <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2201      	movs	r2, #1
 800977a:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	7919      	ldrb	r1, [r3, #4]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009790:	b292      	uxth	r2, r2
 8009792:	9202      	str	r2, [sp, #8]
 8009794:	2200      	movs	r2, #0
 8009796:	9201      	str	r2, [sp, #4]
 8009798:	9300      	str	r3, [sp, #0]
 800979a:	4603      	mov	r3, r0
 800979c:	2280      	movs	r2, #128	; 0x80
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 fed8 	bl	800a554 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	7959      	ldrb	r1, [r3, #5]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80097b8:	b292      	uxth	r2, r2
 80097ba:	9202      	str	r2, [sp, #8]
 80097bc:	2200      	movs	r2, #0
 80097be:	9201      	str	r2, [sp, #4]
 80097c0:	9300      	str	r3, [sp, #0]
 80097c2:	4603      	mov	r3, r0
 80097c4:	2200      	movs	r2, #0
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 fec4 	bl	800a554 <USBH_OpenPipe>

    }
    break;
 80097cc:	e0ad      	b.n	800992a <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80097ce:	2112      	movs	r1, #18
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 f974 	bl	8009abe <USBH_Get_DevDesc>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f040 80a8 	bne.w	800992e <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2202      	movs	r2, #2
 80097e2:	705a      	strb	r2, [r3, #1]

    }
    break;
 80097e4:	e0a3      	b.n	800992e <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80097e6:	2101      	movs	r1, #1
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fa14 	bl	8009c16 <USBH_SetAddress>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f040 809e 	bne.w	8009932 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 80097f6:	2002      	movs	r0, #2
 80097f8:	f001 f9f1 	bl	800abde <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2203      	movs	r2, #3
 8009808:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	7919      	ldrb	r1, [r3, #4]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800981e:	b292      	uxth	r2, r2
 8009820:	9202      	str	r2, [sp, #8]
 8009822:	2200      	movs	r2, #0
 8009824:	9201      	str	r2, [sp, #4]
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	4603      	mov	r3, r0
 800982a:	2280      	movs	r2, #128	; 0x80
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fe91 	bl	800a554 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	7959      	ldrb	r1, [r3, #5]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009846:	b292      	uxth	r2, r2
 8009848:	9202      	str	r2, [sp, #8]
 800984a:	2200      	movs	r2, #0
 800984c:	9201      	str	r2, [sp, #4]
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	4603      	mov	r3, r0
 8009852:	2200      	movs	r2, #0
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fe7d 	bl	800a554 <USBH_OpenPipe>
    }
    break;
 800985a:	e06a      	b.n	8009932 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800985c:	2109      	movs	r1, #9
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f955 	bl	8009b0e <USBH_Get_CfgDesc>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d165      	bne.n	8009936 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2204      	movs	r2, #4
 800986e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8009870:	e061      	b.n	8009936 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8009878:	4619      	mov	r1, r3
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f947 	bl	8009b0e <USBH_Get_CfgDesc>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d159      	bne.n	800993a <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2205      	movs	r2, #5
 800988a:	705a      	strb	r2, [r3, #1]
    }
    break;
 800988c:	e055      	b.n	800993a <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8009894:	2b00      	cmp	r3, #0
 8009896:	d010      	beq.n	80098ba <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80098a4:	23ff      	movs	r3, #255	; 0xff
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f955 	bl	8009b56 <USBH_Get_StringDesc>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d145      	bne.n	800993e <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2206      	movs	r2, #6
 80098b6:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80098b8:	e041      	b.n	800993e <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2206      	movs	r2, #6
 80098be:	705a      	strb	r2, [r3, #1]
    break;
 80098c0:	e03d      	b.n	800993e <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d010      	beq.n	80098ee <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80098d8:	23ff      	movs	r3, #255	; 0xff
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 f93b 	bl	8009b56 <USBH_Get_StringDesc>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d12d      	bne.n	8009942 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2207      	movs	r2, #7
 80098ea:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80098ec:	e029      	b.n	8009942 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2207      	movs	r2, #7
 80098f2:	705a      	strb	r2, [r3, #1]
    break;
 80098f4:	e025      	b.n	8009942 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00f      	beq.n	8009920 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800990c:	23ff      	movs	r3, #255	; 0xff
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 f921 	bl	8009b56 <USBH_Get_StringDesc>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d115      	bne.n	8009946 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800991a:	2300      	movs	r3, #0
 800991c:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800991e:	e012      	b.n	8009946 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8009920:	2300      	movs	r3, #0
 8009922:	73fb      	strb	r3, [r7, #15]
    break;
 8009924:	e00f      	b.n	8009946 <USBH_HandleEnum+0x226>

  default:
    break;
 8009926:	bf00      	nop
 8009928:	e00e      	b.n	8009948 <USBH_HandleEnum+0x228>
    break;
 800992a:	bf00      	nop
 800992c:	e00c      	b.n	8009948 <USBH_HandleEnum+0x228>
    break;
 800992e:	bf00      	nop
 8009930:	e00a      	b.n	8009948 <USBH_HandleEnum+0x228>
    break;
 8009932:	bf00      	nop
 8009934:	e008      	b.n	8009948 <USBH_HandleEnum+0x228>
    break;
 8009936:	bf00      	nop
 8009938:	e006      	b.n	8009948 <USBH_HandleEnum+0x228>
    break;
 800993a:	bf00      	nop
 800993c:	e004      	b.n	8009948 <USBH_HandleEnum+0x228>
    break;
 800993e:	bf00      	nop
 8009940:	e002      	b.n	8009948 <USBH_HandleEnum+0x228>
    break;
 8009942:	bf00      	nop
 8009944:	e000      	b.n	8009948 <USBH_HandleEnum+0x228>
    break;
 8009946:	bf00      	nop
  }
  return Status;
 8009948:	7bfb      	ldrb	r3, [r7, #15]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop

08009954 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	683a      	ldr	r2, [r7, #0]
 8009962:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8009966:	bf00      	nop
 8009968:	370c      	adds	r7, #12
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr

08009972 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b082      	sub	sp, #8
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009980:	1c5a      	adds	r2, r3, #1
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f804 	bl	8009996 <USBH_HandleSof>
}
 800998e:	bf00      	nop
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b082      	sub	sp, #8
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	2b0b      	cmp	r3, #11
 80099a6:	d10a      	bne.n	80099be <USBH_HandleSof+0x28>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d005      	beq.n	80099be <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80099b8:	699b      	ldr	r3, [r3, #24]
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	4798      	blx	r3
  }
}
 80099be:	bf00      	nop
 80099c0:	3708      	adds	r7, #8
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}

080099c6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 80099c6:	b480      	push	{r7}
 80099c8:	b083      	sub	sp, #12
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80099d6:	bf00      	nop
}
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr

080099e2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80099e2:	b480      	push	{r7}
 80099e4:	b083      	sub	sp, #12
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80099f2:	bf00      	nop
}
 80099f4:	370c      	adds	r7, #12
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr

080099fe <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 80099fe:	b480      	push	{r7}
 8009a00:	b083      	sub	sp, #12
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d10f      	bne.n	8009a4a <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00e      	beq.n	8009a5a <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009a42:	2104      	movs	r1, #4
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	4798      	blx	r3
 8009a48:	e007      	b.n	8009a5a <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d102      	bne.n	8009a5a <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2202      	movs	r2, #2
 8009a58:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 ff6c 	bl	800a94a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	791b      	ldrb	r3, [r3, #4]
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 fdb8 	bl	800a5ee <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	795b      	ldrb	r3, [r3, #5]
 8009a82:	4619      	mov	r1, r3
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fdb2 	bl	800a5ee <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d005      	beq.n	8009aa8 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009aa2:	2105      	movs	r1, #5
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 ff33 	bl	800a914 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2203      	movs	r2, #3
 8009ab2:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3708      	adds	r7, #8
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b086      	sub	sp, #24
 8009ac2:	af02      	add	r7, sp, #8
 8009ac4:	6078      	str	r0, [r7, #4]
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8009ad0:	78fb      	ldrb	r3, [r7, #3]
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	9300      	str	r3, [sp, #0]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009adc:	2100      	movs	r1, #0
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f864 	bl	8009bac <USBH_GetDescriptor>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	73fb      	strb	r3, [r7, #15]
 8009ae8:	7bfb      	ldrb	r3, [r7, #15]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d10a      	bne.n	8009b04 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f203 3022 	addw	r0, r3, #802	; 0x322
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009afa:	78fa      	ldrb	r2, [r7, #3]
 8009afc:	b292      	uxth	r2, r2
 8009afe:	4619      	mov	r1, r3
 8009b00:	f000 f918 	bl	8009d34 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b086      	sub	sp, #24
 8009b12:	af02      	add	r7, sp, #8
 8009b14:	6078      	str	r0, [r7, #4]
 8009b16:	460b      	mov	r3, r1
 8009b18:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	331c      	adds	r3, #28
 8009b1e:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8009b20:	887b      	ldrh	r3, [r7, #2]
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f83d 	bl	8009bac <USBH_GetDescriptor>
 8009b32:	4603      	mov	r3, r0
 8009b34:	72fb      	strb	r3, [r7, #11]
 8009b36:	7afb      	ldrb	r3, [r7, #11]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d107      	bne.n	8009b4c <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8009b42:	887a      	ldrh	r2, [r7, #2]
 8009b44:	68f9      	ldr	r1, [r7, #12]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 f964 	bl	8009e14 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8009b4c:	7afb      	ldrb	r3, [r7, #11]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b088      	sub	sp, #32
 8009b5a:	af02      	add	r7, sp, #8
 8009b5c:	60f8      	str	r0, [r7, #12]
 8009b5e:	607a      	str	r2, [r7, #4]
 8009b60:	461a      	mov	r2, r3
 8009b62:	460b      	mov	r3, r1
 8009b64:	72fb      	strb	r3, [r7, #11]
 8009b66:	4613      	mov	r3, r2
 8009b68:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8009b6a:	7afb      	ldrb	r3, [r7, #11]
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009b72:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8009b7a:	893b      	ldrh	r3, [r7, #8]
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	460b      	mov	r3, r1
 8009b80:	2100      	movs	r1, #0
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	f000 f812 	bl	8009bac <USBH_GetDescriptor>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	75fb      	strb	r3, [r7, #23]
 8009b8c:	7dfb      	ldrb	r3, [r7, #23]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d107      	bne.n	8009ba2 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009b98:	893a      	ldrh	r2, [r7, #8]
 8009b9a:	6879      	ldr	r1, [r7, #4]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f000 fa37 	bl	800a010 <USBH_ParseStringDesc>
  }
  return status;
 8009ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3718      	adds	r7, #24
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	607b      	str	r3, [r7, #4]
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	72fb      	strb	r3, [r7, #11]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	789b      	ldrb	r3, [r3, #2]
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d11c      	bne.n	8009c00 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009bc6:	7afb      	ldrb	r3, [r7, #11]
 8009bc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009bcc:	b2da      	uxtb	r2, r3
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2206      	movs	r2, #6
 8009bd6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	893a      	ldrh	r2, [r7, #8]
 8009bdc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009bde:	893b      	ldrh	r3, [r7, #8]
 8009be0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009be4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009be8:	d104      	bne.n	8009bf4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f240 4209 	movw	r2, #1033	; 0x409
 8009bf0:	829a      	strh	r2, [r3, #20]
 8009bf2:	e002      	b.n	8009bfa <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	8b3a      	ldrh	r2, [r7, #24]
 8009bfe:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8009c00:	8b3b      	ldrh	r3, [r7, #24]
 8009c02:	461a      	mov	r2, r3
 8009c04:	6879      	ldr	r1, [r7, #4]
 8009c06:	68f8      	ldr	r0, [r7, #12]
 8009c08:	f000 fa50 	bl	800a0ac <USBH_CtlReq>
 8009c0c:	4603      	mov	r3, r0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b082      	sub	sp, #8
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
 8009c1e:	460b      	mov	r3, r1
 8009c20:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	789b      	ldrb	r3, [r3, #2]
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d10f      	bne.n	8009c4a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2205      	movs	r2, #5
 8009c34:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009c36:	78fb      	ldrb	r3, [r7, #3]
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	2100      	movs	r1, #0
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fa2c 	bl	800a0ac <USBH_CtlReq>
 8009c54:	4603      	mov	r3, r0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b082      	sub	sp, #8
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
 8009c66:	460b      	mov	r3, r1
 8009c68:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	789b      	ldrb	r3, [r3, #2]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d10e      	bne.n	8009c90 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2209      	movs	r2, #9
 8009c7c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	887a      	ldrh	r2, [r7, #2]
 8009c82:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8009c90:	2200      	movs	r2, #0
 8009c92:	2100      	movs	r1, #0
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fa09 	bl	800a0ac <USBH_CtlReq>
 8009c9a:	4603      	mov	r3, r0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	460b      	mov	r3, r1
 8009cae:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	789b      	ldrb	r3, [r3, #2]
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d10f      	bne.n	8009cd8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2203      	movs	r2, #3
 8009cc2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009cc4:	78fb      	ldrb	r3, [r7, #3]
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009cd8:	2200      	movs	r2, #0
 8009cda:	2100      	movs	r1, #0
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f9e5 	bl	800a0ac <USBH_CtlReq>
 8009ce2:	4603      	mov	r3, r0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3708      	adds	r7, #8
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	789b      	ldrb	r3, [r3, #2]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d10f      	bne.n	8009d20 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2202      	movs	r2, #2
 8009d04:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009d12:	78fb      	ldrb	r3, [r7, #3]
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8009d20:	2200      	movs	r2, #0
 8009d22:	2100      	movs	r1, #0
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 f9c1 	bl	800a0ac <USBH_CtlReq>
 8009d2a:	4603      	mov	r3, r0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	4613      	mov	r3, r2
 8009d40:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	781a      	ldrb	r2, [r3, #0]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	785a      	ldrb	r2, [r3, #1]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	3302      	adds	r3, #2
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	3303      	adds	r3, #3
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	021b      	lsls	r3, r3, #8
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	4313      	orrs	r3, r2
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	791a      	ldrb	r2, [r3, #4]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	795a      	ldrb	r2, [r3, #5]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	799a      	ldrb	r2, [r3, #6]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	79da      	ldrb	r2, [r3, #7]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009d8e:	88fb      	ldrh	r3, [r7, #6]
 8009d90:	2b08      	cmp	r3, #8
 8009d92:	d939      	bls.n	8009e08 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	3308      	adds	r3, #8
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	b29a      	uxth	r2, r3
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	3309      	adds	r3, #9
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	021b      	lsls	r3, r3, #8
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	4313      	orrs	r3, r2
 8009daa:	b29a      	uxth	r2, r3
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	330a      	adds	r3, #10
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	b29a      	uxth	r2, r3
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	330b      	adds	r3, #11
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	021b      	lsls	r3, r3, #8
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	330c      	adds	r3, #12
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	330d      	adds	r3, #13
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	021b      	lsls	r3, r3, #8
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	4313      	orrs	r3, r2
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	7b9a      	ldrb	r2, [r3, #14]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	7bda      	ldrb	r2, [r3, #15]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	7c1a      	ldrb	r2, [r3, #16]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	7c5a      	ldrb	r2, [r3, #17]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	745a      	strb	r2, [r3, #17]
  }
}
 8009e08:	bf00      	nop
 8009e0a:	3714      	adds	r7, #20
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b08a      	sub	sp, #40	; 0x28
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	4613      	mov	r3, r2
 8009e20:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009e26:	2300      	movs	r3, #0
 8009e28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	781a      	ldrb	r2, [r3, #0]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	785a      	ldrb	r2, [r3, #1]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	3302      	adds	r3, #2
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	3303      	adds	r3, #3
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	021b      	lsls	r3, r3, #8
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	b29a      	uxth	r2, r3
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	791a      	ldrb	r2, [r3, #4]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	795a      	ldrb	r2, [r3, #5]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	799a      	ldrb	r2, [r3, #6]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	79da      	ldrb	r2, [r3, #7]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	7a1a      	ldrb	r2, [r3, #8]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009e8a:	88fb      	ldrh	r3, [r7, #6]
 8009e8c:	2b09      	cmp	r3, #9
 8009e8e:	d95f      	bls.n	8009f50 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009e90:	2309      	movs	r3, #9
 8009e92:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009e94:	2300      	movs	r3, #0
 8009e96:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009e98:	e051      	b.n	8009f3e <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009e9a:	f107 0316 	add.w	r3, r7, #22
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ea2:	f000 f8e8 	bl	800a076 <USBH_GetNextDesc>
 8009ea6:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eaa:	785b      	ldrb	r3, [r3, #1]
 8009eac:	2b04      	cmp	r3, #4
 8009eae:	d146      	bne.n	8009f3e <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009eb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009eb4:	221a      	movs	r2, #26
 8009eb6:	fb02 f303 	mul.w	r3, r2, r3
 8009eba:	3308      	adds	r3, #8
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	3302      	adds	r3, #2
 8009ec2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8009ec4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ec6:	69f8      	ldr	r0, [r7, #28]
 8009ec8:	f000 f846 	bl	8009f58 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009ed6:	e022      	b.n	8009f1e <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8009ed8:	f107 0316 	add.w	r3, r7, #22
 8009edc:	4619      	mov	r1, r3
 8009ede:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ee0:	f000 f8c9 	bl	800a076 <USBH_GetNextDesc>
 8009ee4:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee8:	785b      	ldrb	r3, [r3, #1]
 8009eea:	2b05      	cmp	r3, #5
 8009eec:	d117      	bne.n	8009f1e <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009eee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ef2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009ef6:	3201      	adds	r2, #1
 8009ef8:	00d2      	lsls	r2, r2, #3
 8009efa:	211a      	movs	r1, #26
 8009efc:	fb01 f303 	mul.w	r3, r1, r3
 8009f00:	4413      	add	r3, r2
 8009f02:	3308      	adds	r3, #8
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	4413      	add	r3, r2
 8009f08:	3304      	adds	r3, #4
 8009f0a:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8009f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f0e:	69b8      	ldr	r0, [r7, #24]
 8009f10:	f000 f851 	bl	8009fb6 <USBH_ParseEPDesc>
            ep_ix++;
 8009f14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009f18:	3301      	adds	r3, #1
 8009f1a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	791b      	ldrb	r3, [r3, #4]
 8009f22:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d204      	bcs.n	8009f34 <USBH_ParseCfgDesc+0x120>
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	885a      	ldrh	r2, [r3, #2]
 8009f2e:	8afb      	ldrh	r3, [r7, #22]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d8d1      	bhi.n	8009ed8 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009f34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f38:	3301      	adds	r3, #1
 8009f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009f3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d804      	bhi.n	8009f50 <USBH_ParseCfgDesc+0x13c>
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	885a      	ldrh	r2, [r3, #2]
 8009f4a:	8afb      	ldrh	r3, [r7, #22]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d8a4      	bhi.n	8009e9a <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009f50:	bf00      	nop
 8009f52:	3728      	adds	r7, #40	; 0x28
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	781a      	ldrb	r2, [r3, #0]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	785a      	ldrb	r2, [r3, #1]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	789a      	ldrb	r2, [r3, #2]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	78da      	ldrb	r2, [r3, #3]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	791a      	ldrb	r2, [r3, #4]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	795a      	ldrb	r2, [r3, #5]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	799a      	ldrb	r2, [r3, #6]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	79da      	ldrb	r2, [r3, #7]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	7a1a      	ldrb	r2, [r3, #8]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	721a      	strb	r2, [r3, #8]
}
 8009faa:	bf00      	nop
 8009fac:	370c      	adds	r7, #12
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr

08009fb6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8009fb6:	b480      	push	{r7}
 8009fb8:	b083      	sub	sp, #12
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
 8009fbe:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	781a      	ldrb	r2, [r3, #0]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	785a      	ldrb	r2, [r3, #1]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	789a      	ldrb	r2, [r3, #2]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	78da      	ldrb	r2, [r3, #3]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	3304      	adds	r3, #4
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	b29a      	uxth	r2, r3
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	3305      	adds	r3, #5
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	021b      	lsls	r3, r3, #8
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	b29a      	uxth	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	799a      	ldrb	r2, [r3, #6]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	719a      	strb	r2, [r3, #6]
}
 800a004:	bf00      	nop
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800a010:	b480      	push	{r7}
 800a012:	b087      	sub	sp, #28
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	4613      	mov	r3, r2
 800a01c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	3301      	adds	r3, #1
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	2b03      	cmp	r3, #3
 800a026:	d120      	bne.n	800a06a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	1e9a      	subs	r2, r3, #2
 800a02e:	88fb      	ldrh	r3, [r7, #6]
 800a030:	4293      	cmp	r3, r2
 800a032:	bf28      	it	cs
 800a034:	4613      	movcs	r3, r2
 800a036:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	3302      	adds	r3, #2
 800a03c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a03e:	2300      	movs	r3, #0
 800a040:	82fb      	strh	r3, [r7, #22]
 800a042:	e00b      	b.n	800a05c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a044:	8afb      	ldrh	r3, [r7, #22]
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	4413      	add	r3, r2
 800a04a:	781a      	ldrb	r2, [r3, #0]
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	3301      	adds	r3, #1
 800a054:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a056:	8afb      	ldrh	r3, [r7, #22]
 800a058:	3302      	adds	r3, #2
 800a05a:	82fb      	strh	r3, [r7, #22]
 800a05c:	8afa      	ldrh	r2, [r7, #22]
 800a05e:	8abb      	ldrh	r3, [r7, #20]
 800a060:	429a      	cmp	r2, r3
 800a062:	d3ef      	bcc.n	800a044 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	2200      	movs	r2, #0
 800a068:	701a      	strb	r2, [r3, #0]
  }
}
 800a06a:	bf00      	nop
 800a06c:	371c      	adds	r7, #28
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800a076:	b480      	push	{r7}
 800a078:	b085      	sub	sp, #20
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	881a      	ldrh	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	b29b      	uxth	r3, r3
 800a08a:	4413      	add	r3, r2
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4413      	add	r3, r2
 800a09c:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800a09e:	68fb      	ldr	r3, [r7, #12]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3714      	adds	r7, #20
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b086      	sub	sp, #24
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	789b      	ldrb	r3, [r3, #2]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d002      	beq.n	800a0cc <USBH_CtlReq+0x20>
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	d00f      	beq.n	800a0ea <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 800a0ca:	e034      	b.n	800a136 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	88fa      	ldrh	r2, [r7, #6]
 800a0d6:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2202      	movs	r2, #2
 800a0e2:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	75fb      	strb	r3, [r7, #23]
    break;
 800a0e8:	e025      	b.n	800a136 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f000 f828 	bl	800a140 <USBH_HandleControl>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800a0f4:	7dfb      	ldrb	r3, [r7, #23]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d108      	bne.n	800a10c <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2200      	movs	r2, #0
 800a104:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	75fb      	strb	r3, [r7, #23]
    break;
 800a10a:	e013      	b.n	800a134 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 800a10c:	7dfb      	ldrb	r3, [r7, #23]
 800a10e:	2b03      	cmp	r3, #3
 800a110:	d108      	bne.n	800a124 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2201      	movs	r2, #1
 800a116:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800a11e:	2303      	movs	r3, #3
 800a120:	75fb      	strb	r3, [r7, #23]
    break;
 800a122:	e007      	b.n	800a134 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 800a124:	7dfb      	ldrb	r3, [r7, #23]
 800a126:	2b02      	cmp	r3, #2
 800a128:	d104      	bne.n	800a134 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2201      	movs	r2, #1
 800a12e:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800a130:	2302      	movs	r3, #2
 800a132:	75fb      	strb	r3, [r7, #23]
    break;
 800a134:	bf00      	nop
  }
  return status;
 800a136:	7dfb      	ldrb	r3, [r7, #23]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3718      	adds	r7, #24
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b086      	sub	sp, #24
 800a144:	af02      	add	r7, sp, #8
 800a146:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a148:	2301      	movs	r3, #1
 800a14a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a14c:	2300      	movs	r3, #0
 800a14e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	7e1b      	ldrb	r3, [r3, #24]
 800a154:	3b01      	subs	r3, #1
 800a156:	2b0a      	cmp	r3, #10
 800a158:	f200 814c 	bhi.w	800a3f4 <USBH_HandleControl+0x2b4>
 800a15c:	a201      	add	r2, pc, #4	; (adr r2, 800a164 <USBH_HandleControl+0x24>)
 800a15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a162:	bf00      	nop
 800a164:	0800a191 	.word	0x0800a191
 800a168:	0800a1ab 	.word	0x0800a1ab
 800a16c:	0800a215 	.word	0x0800a215
 800a170:	0800a23b 	.word	0x0800a23b
 800a174:	0800a273 	.word	0x0800a273
 800a178:	0800a29f 	.word	0x0800a29f
 800a17c:	0800a2f1 	.word	0x0800a2f1
 800a180:	0800a313 	.word	0x0800a313
 800a184:	0800a34f 	.word	0x0800a34f
 800a188:	0800a377 	.word	0x0800a377
 800a18c:	0800a3b5 	.word	0x0800a3b5
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f103 0110 	add.w	r1, r3, #16
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	795b      	ldrb	r3, [r3, #5]
 800a19a:	461a      	mov	r2, r3
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 f939 	bl	800a414 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2202      	movs	r2, #2
 800a1a6:	761a      	strb	r2, [r3, #24]
    break;
 800a1a8:	e12f      	b.n	800a40a <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	795b      	ldrb	r3, [r3, #5]
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 fcb7 	bl	800ab24 <USBH_LL_GetURBState>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800a1ba:	7bbb      	ldrb	r3, [r7, #14]
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d11e      	bne.n	800a1fe <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	7c1b      	ldrb	r3, [r3, #16]
 800a1c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a1c8:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	8adb      	ldrh	r3, [r3, #22]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00a      	beq.n	800a1e8 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800a1d2:	7b7b      	ldrb	r3, [r7, #13]
 800a1d4:	2b80      	cmp	r3, #128	; 0x80
 800a1d6:	d103      	bne.n	800a1e0 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2203      	movs	r2, #3
 800a1dc:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a1de:	e10b      	b.n	800a3f8 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2205      	movs	r2, #5
 800a1e4:	761a      	strb	r2, [r3, #24]
    break;
 800a1e6:	e107      	b.n	800a3f8 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 800a1e8:	7b7b      	ldrb	r3, [r7, #13]
 800a1ea:	2b80      	cmp	r3, #128	; 0x80
 800a1ec:	d103      	bne.n	800a1f6 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2209      	movs	r2, #9
 800a1f2:	761a      	strb	r2, [r3, #24]
    break;
 800a1f4:	e100      	b.n	800a3f8 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2207      	movs	r2, #7
 800a1fa:	761a      	strb	r2, [r3, #24]
    break;
 800a1fc:	e0fc      	b.n	800a3f8 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a1fe:	7bbb      	ldrb	r3, [r7, #14]
 800a200:	2b04      	cmp	r3, #4
 800a202:	d003      	beq.n	800a20c <USBH_HandleControl+0xcc>
 800a204:	7bbb      	ldrb	r3, [r7, #14]
 800a206:	2b02      	cmp	r3, #2
 800a208:	f040 80f6 	bne.w	800a3f8 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	220b      	movs	r2, #11
 800a210:	761a      	strb	r2, [r3, #24]
    break;
 800a212:	e0f1      	b.n	800a3f8 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6899      	ldr	r1, [r3, #8]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	899a      	ldrh	r2, [r3, #12]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	791b      	ldrb	r3, [r3, #4]
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f930 	bl	800a492 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2204      	movs	r2, #4
 800a236:	761a      	strb	r2, [r3, #24]
    break;
 800a238:	e0e7      	b.n	800a40a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	791b      	ldrb	r3, [r3, #4]
 800a23e:	4619      	mov	r1, r3
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 fc6f 	bl	800ab24 <USBH_LL_GetURBState>
 800a246:	4603      	mov	r3, r0
 800a248:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800a24a:	7bbb      	ldrb	r3, [r7, #14]
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d102      	bne.n	800a256 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2209      	movs	r2, #9
 800a254:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800a256:	7bbb      	ldrb	r3, [r7, #14]
 800a258:	2b05      	cmp	r3, #5
 800a25a:	d102      	bne.n	800a262 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800a25c:	2303      	movs	r3, #3
 800a25e:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a260:	e0cc      	b.n	800a3fc <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 800a262:	7bbb      	ldrb	r3, [r7, #14]
 800a264:	2b04      	cmp	r3, #4
 800a266:	f040 80c9 	bne.w	800a3fc <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	220b      	movs	r2, #11
 800a26e:	761a      	strb	r2, [r3, #24]
    break;
 800a270:	e0c4      	b.n	800a3fc <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6899      	ldr	r1, [r3, #8]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	899a      	ldrh	r2, [r3, #12]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	7958      	ldrb	r0, [r3, #5]
 800a27e:	2301      	movs	r3, #1
 800a280:	9300      	str	r3, [sp, #0]
 800a282:	4603      	mov	r3, r0
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f8df 	bl	800a448 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a290:	b29a      	uxth	r2, r3
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2206      	movs	r2, #6
 800a29a:	761a      	strb	r2, [r3, #24]
    break;
 800a29c:	e0b5      	b.n	800a40a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	795b      	ldrb	r3, [r3, #5]
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 fc3d 	bl	800ab24 <USBH_LL_GetURBState>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800a2ae:	7bbb      	ldrb	r3, [r7, #14]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d103      	bne.n	800a2bc <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2207      	movs	r2, #7
 800a2b8:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a2ba:	e0a1      	b.n	800a400 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 800a2bc:	7bbb      	ldrb	r3, [r7, #14]
 800a2be:	2b05      	cmp	r3, #5
 800a2c0:	d105      	bne.n	800a2ce <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	220c      	movs	r2, #12
 800a2c6:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	73fb      	strb	r3, [r7, #15]
    break;
 800a2cc:	e098      	b.n	800a400 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800a2ce:	7bbb      	ldrb	r3, [r7, #14]
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d103      	bne.n	800a2dc <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2205      	movs	r2, #5
 800a2d8:	761a      	strb	r2, [r3, #24]
    break;
 800a2da:	e091      	b.n	800a400 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 800a2dc:	7bbb      	ldrb	r3, [r7, #14]
 800a2de:	2b04      	cmp	r3, #4
 800a2e0:	f040 808e 	bne.w	800a400 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	220b      	movs	r2, #11
 800a2e8:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800a2ea:	2302      	movs	r3, #2
 800a2ec:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ee:	e087      	b.n	800a400 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	791b      	ldrb	r3, [r3, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 f8ca 	bl	800a492 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a304:	b29a      	uxth	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2208      	movs	r2, #8
 800a30e:	761a      	strb	r2, [r3, #24]

    break;
 800a310:	e07b      	b.n	800a40a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	791b      	ldrb	r3, [r3, #4]
 800a316:	4619      	mov	r1, r3
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 fc03 	bl	800ab24 <USBH_LL_GetURBState>
 800a31e:	4603      	mov	r3, r0
 800a320:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800a322:	7bbb      	ldrb	r3, [r7, #14]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d105      	bne.n	800a334 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	220d      	movs	r2, #13
 800a32c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800a32e:	2300      	movs	r3, #0
 800a330:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a332:	e067      	b.n	800a404 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 800a334:	7bbb      	ldrb	r3, [r7, #14]
 800a336:	2b04      	cmp	r3, #4
 800a338:	d103      	bne.n	800a342 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	220b      	movs	r2, #11
 800a33e:	761a      	strb	r2, [r3, #24]
    break;
 800a340:	e060      	b.n	800a404 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 800a342:	7bbb      	ldrb	r3, [r7, #14]
 800a344:	2b05      	cmp	r3, #5
 800a346:	d15d      	bne.n	800a404 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 800a348:	2303      	movs	r3, #3
 800a34a:	73fb      	strb	r3, [r7, #15]
    break;
 800a34c:	e05a      	b.n	800a404 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	795a      	ldrb	r2, [r3, #5]
 800a352:	2301      	movs	r3, #1
 800a354:	9300      	str	r3, [sp, #0]
 800a356:	4613      	mov	r3, r2
 800a358:	2200      	movs	r2, #0
 800a35a:	2100      	movs	r1, #0
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 f873 	bl	800a448 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a368:	b29a      	uxth	r2, r3
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	220a      	movs	r2, #10
 800a372:	761a      	strb	r2, [r3, #24]
    break;
 800a374:	e049      	b.n	800a40a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	795b      	ldrb	r3, [r3, #5]
 800a37a:	4619      	mov	r1, r3
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 fbd1 	bl	800ab24 <USBH_LL_GetURBState>
 800a382:	4603      	mov	r3, r0
 800a384:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800a386:	7bbb      	ldrb	r3, [r7, #14]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d105      	bne.n	800a398 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 800a38c:	2300      	movs	r3, #0
 800a38e:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	220d      	movs	r2, #13
 800a394:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800a396:	e037      	b.n	800a408 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800a398:	7bbb      	ldrb	r3, [r7, #14]
 800a39a:	2b02      	cmp	r3, #2
 800a39c:	d103      	bne.n	800a3a6 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2209      	movs	r2, #9
 800a3a2:	761a      	strb	r2, [r3, #24]
    break;
 800a3a4:	e030      	b.n	800a408 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800a3a6:	7bbb      	ldrb	r3, [r7, #14]
 800a3a8:	2b04      	cmp	r3, #4
 800a3aa:	d12d      	bne.n	800a408 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	220b      	movs	r2, #11
 800a3b0:	761a      	strb	r2, [r3, #24]
    break;
 800a3b2:	e029      	b.n	800a408 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	7e5b      	ldrb	r3, [r3, #25]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	b2da      	uxtb	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	765a      	strb	r2, [r3, #25]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	7e5b      	ldrb	r3, [r3, #25]
 800a3c4:	2b02      	cmp	r3, #2
 800a3c6:	d809      	bhi.n	800a3dc <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 fabe 	bl	800a94a <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800a3da:	e016      	b.n	800a40a <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a3e2:	2106      	movs	r1, #6
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800a3ee:	2302      	movs	r3, #2
 800a3f0:	73fb      	strb	r3, [r7, #15]
    break;
 800a3f2:	e00a      	b.n	800a40a <USBH_HandleControl+0x2ca>

  default:
    break;
 800a3f4:	bf00      	nop
 800a3f6:	e008      	b.n	800a40a <USBH_HandleControl+0x2ca>
    break;
 800a3f8:	bf00      	nop
 800a3fa:	e006      	b.n	800a40a <USBH_HandleControl+0x2ca>
    break;
 800a3fc:	bf00      	nop
 800a3fe:	e004      	b.n	800a40a <USBH_HandleControl+0x2ca>
    break;
 800a400:	bf00      	nop
 800a402:	e002      	b.n	800a40a <USBH_HandleControl+0x2ca>
    break;
 800a404:	bf00      	nop
 800a406:	e000      	b.n	800a40a <USBH_HandleControl+0x2ca>
    break;
 800a408:	bf00      	nop
  }
  return status;
 800a40a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3710      	adds	r7, #16
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b088      	sub	sp, #32
 800a418:	af04      	add	r7, sp, #16
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	4613      	mov	r3, r2
 800a420:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a422:	79f9      	ldrb	r1, [r7, #7]
 800a424:	2300      	movs	r3, #0
 800a426:	9303      	str	r3, [sp, #12]
 800a428:	2308      	movs	r3, #8
 800a42a:	9302      	str	r3, [sp, #8]
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	9301      	str	r3, [sp, #4]
 800a430:	2300      	movs	r3, #0
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	2300      	movs	r3, #0
 800a436:	2200      	movs	r2, #0
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f000 fb42 	bl	800aac2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b088      	sub	sp, #32
 800a44c:	af04      	add	r7, sp, #16
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	4611      	mov	r1, r2
 800a454:	461a      	mov	r2, r3
 800a456:	460b      	mov	r3, r1
 800a458:	80fb      	strh	r3, [r7, #6]
 800a45a:	4613      	mov	r3, r2
 800a45c:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a468:	2300      	movs	r3, #0
 800a46a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a46c:	7979      	ldrb	r1, [r7, #5]
 800a46e:	7e3b      	ldrb	r3, [r7, #24]
 800a470:	9303      	str	r3, [sp, #12]
 800a472:	88fb      	ldrh	r3, [r7, #6]
 800a474:	9302      	str	r3, [sp, #8]
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	9301      	str	r3, [sp, #4]
 800a47a:	2301      	movs	r3, #1
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	2300      	movs	r3, #0
 800a480:	2200      	movs	r2, #0
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f000 fb1d 	bl	800aac2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b088      	sub	sp, #32
 800a496:	af04      	add	r7, sp, #16
 800a498:	60f8      	str	r0, [r7, #12]
 800a49a:	60b9      	str	r1, [r7, #8]
 800a49c:	4611      	mov	r1, r2
 800a49e:	461a      	mov	r2, r3
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	80fb      	strh	r3, [r7, #6]
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a4a8:	7979      	ldrb	r1, [r7, #5]
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	9303      	str	r3, [sp, #12]
 800a4ae:	88fb      	ldrh	r3, [r7, #6]
 800a4b0:	9302      	str	r3, [sp, #8]
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	9301      	str	r3, [sp, #4]
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	9300      	str	r3, [sp, #0]
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	2201      	movs	r2, #1
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f000 faff 	bl	800aac2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a4c4:	2300      	movs	r3, #0

}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b088      	sub	sp, #32
 800a4d2:	af04      	add	r7, sp, #16
 800a4d4:	60f8      	str	r0, [r7, #12]
 800a4d6:	60b9      	str	r1, [r7, #8]
 800a4d8:	4611      	mov	r1, r2
 800a4da:	461a      	mov	r2, r3
 800a4dc:	460b      	mov	r3, r1
 800a4de:	80fb      	strh	r3, [r7, #6]
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d001      	beq.n	800a4f2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a4f2:	7979      	ldrb	r1, [r7, #5]
 800a4f4:	7e3b      	ldrb	r3, [r7, #24]
 800a4f6:	9303      	str	r3, [sp, #12]
 800a4f8:	88fb      	ldrh	r3, [r7, #6]
 800a4fa:	9302      	str	r3, [sp, #8]
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	9301      	str	r3, [sp, #4]
 800a500:	2301      	movs	r3, #1
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	2302      	movs	r3, #2
 800a506:	2200      	movs	r2, #0
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f000 fada 	bl	800aac2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b088      	sub	sp, #32
 800a51c:	af04      	add	r7, sp, #16
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	4611      	mov	r1, r2
 800a524:	461a      	mov	r2, r3
 800a526:	460b      	mov	r3, r1
 800a528:	80fb      	strh	r3, [r7, #6]
 800a52a:	4613      	mov	r3, r2
 800a52c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a52e:	7979      	ldrb	r1, [r7, #5]
 800a530:	2300      	movs	r3, #0
 800a532:	9303      	str	r3, [sp, #12]
 800a534:	88fb      	ldrh	r3, [r7, #6]
 800a536:	9302      	str	r3, [sp, #8]
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	9301      	str	r3, [sp, #4]
 800a53c:	2301      	movs	r3, #1
 800a53e:	9300      	str	r3, [sp, #0]
 800a540:	2302      	movs	r3, #2
 800a542:	2201      	movs	r2, #1
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f000 fabc 	bl	800aac2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b086      	sub	sp, #24
 800a558:	af04      	add	r7, sp, #16
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	4608      	mov	r0, r1
 800a55e:	4611      	mov	r1, r2
 800a560:	461a      	mov	r2, r3
 800a562:	4603      	mov	r3, r0
 800a564:	70fb      	strb	r3, [r7, #3]
 800a566:	460b      	mov	r3, r1
 800a568:	70bb      	strb	r3, [r7, #2]
 800a56a:	4613      	mov	r3, r2
 800a56c:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800a56e:	7878      	ldrb	r0, [r7, #1]
 800a570:	78ba      	ldrb	r2, [r7, #2]
 800a572:	78f9      	ldrb	r1, [r7, #3]
 800a574:	8b3b      	ldrh	r3, [r7, #24]
 800a576:	9302      	str	r3, [sp, #8]
 800a578:	7d3b      	ldrb	r3, [r7, #20]
 800a57a:	9301      	str	r3, [sp, #4]
 800a57c:	7c3b      	ldrb	r3, [r7, #16]
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	4603      	mov	r3, r0
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 fa4f 	bl	800aa26 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800a588:	2300      	movs	r3, #0

}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3708      	adds	r7, #8
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800a592:	b580      	push	{r7, lr}
 800a594:	b082      	sub	sp, #8
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
 800a59a:	460b      	mov	r3, r1
 800a59c:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800a59e:	78fb      	ldrb	r3, [r7, #3]
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 fa6e 	bl	800aa84 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a5a8:	2300      	movs	r3, #0

}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b084      	sub	sp, #16
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 f831 	bl	800a626 <USBH_GetFreePipe>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a5c8:	89fb      	ldrh	r3, [r7, #14]
 800a5ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d007      	beq.n	800a5e2 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800a5d2:	78fb      	ldrb	r3, [r7, #3]
 800a5d4:	89fa      	ldrh	r2, [r7, #14]
 800a5d6:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	32e0      	adds	r2, #224	; 0xe0
 800a5de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800a5e2:	89fb      	ldrh	r3, [r7, #14]
 800a5e4:	b2db      	uxtb	r3, r3
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a5ee:	b480      	push	{r7}
 800a5f0:	b083      	sub	sp, #12
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800a5fa:	78fb      	ldrb	r3, [r7, #3]
 800a5fc:	2b0a      	cmp	r3, #10
 800a5fe:	d80b      	bhi.n	800a618 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800a600:	78fa      	ldrb	r2, [r7, #3]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	32e0      	adds	r2, #224	; 0xe0
 800a606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a60a:	78fa      	ldrb	r2, [r7, #3]
 800a60c:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	32e0      	adds	r2, #224	; 0xe0
 800a614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800a618:	2300      	movs	r3, #0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	370c      	adds	r7, #12
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800a626:	b480      	push	{r7}
 800a628:	b085      	sub	sp, #20
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a62e:	2300      	movs	r3, #0
 800a630:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a632:	2300      	movs	r3, #0
 800a634:	73fb      	strb	r3, [r7, #15]
 800a636:	e00e      	b.n	800a656 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a638:	7bfa      	ldrb	r2, [r7, #15]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	32e0      	adds	r2, #224	; 0xe0
 800a63e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a646:	2b00      	cmp	r3, #0
 800a648:	d102      	bne.n	800a650 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800a64a:	7bfb      	ldrb	r3, [r7, #15]
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	e007      	b.n	800a660 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800a650:	7bfb      	ldrb	r3, [r7, #15]
 800a652:	3301      	adds	r3, #1
 800a654:	73fb      	strb	r3, [r7, #15]
 800a656:	7bfb      	ldrb	r3, [r7, #15]
 800a658:	2b0a      	cmp	r3, #10
 800a65a:	d9ed      	bls.n	800a638 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800a65c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a660:	4618      	mov	r0, r3
 800a662:	3714      	adds	r7, #20
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a670:	2201      	movs	r2, #1
 800a672:	490e      	ldr	r1, [pc, #56]	; (800a6ac <MX_USB_HOST_Init+0x40>)
 800a674:	480e      	ldr	r0, [pc, #56]	; (800a6b0 <MX_USB_HOST_Init+0x44>)
 800a676:	f7fe fdbb 	bl	80091f0 <USBH_Init>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d001      	beq.n	800a684 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a680:	f7f6 fb16 	bl	8000cb0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a684:	490b      	ldr	r1, [pc, #44]	; (800a6b4 <MX_USB_HOST_Init+0x48>)
 800a686:	480a      	ldr	r0, [pc, #40]	; (800a6b0 <MX_USB_HOST_Init+0x44>)
 800a688:	f7fe fe25 	bl	80092d6 <USBH_RegisterClass>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d001      	beq.n	800a696 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a692:	f7f6 fb0d 	bl	8000cb0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a696:	4806      	ldr	r0, [pc, #24]	; (800a6b0 <MX_USB_HOST_Init+0x44>)
 800a698:	f7fe feaa 	bl	80093f0 <USBH_Start>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d001      	beq.n	800a6a6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a6a2:	f7f6 fb05 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a6a6:	bf00      	nop
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	0800a6cd 	.word	0x0800a6cd
 800a6b0:	20000864 	.word	0x20000864
 800a6b4:	2000001c 	.word	0x2000001c

0800a6b8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a6bc:	4802      	ldr	r0, [pc, #8]	; (800a6c8 <MX_USB_HOST_Process+0x10>)
 800a6be:	f7fe fea7 	bl	8009410 <USBH_Process>
}
 800a6c2:	bf00      	nop
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20000864 	.word	0x20000864

0800a6cc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a6d8:	78fb      	ldrb	r3, [r7, #3]
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	2b04      	cmp	r3, #4
 800a6de:	d819      	bhi.n	800a714 <USBH_UserProcess+0x48>
 800a6e0:	a201      	add	r2, pc, #4	; (adr r2, 800a6e8 <USBH_UserProcess+0x1c>)
 800a6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e6:	bf00      	nop
 800a6e8:	0800a715 	.word	0x0800a715
 800a6ec:	0800a705 	.word	0x0800a705
 800a6f0:	0800a715 	.word	0x0800a715
 800a6f4:	0800a70d 	.word	0x0800a70d
 800a6f8:	0800a6fd 	.word	0x0800a6fd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a6fc:	4b09      	ldr	r3, [pc, #36]	; (800a724 <USBH_UserProcess+0x58>)
 800a6fe:	2203      	movs	r2, #3
 800a700:	701a      	strb	r2, [r3, #0]
  break;
 800a702:	e008      	b.n	800a716 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a704:	4b07      	ldr	r3, [pc, #28]	; (800a724 <USBH_UserProcess+0x58>)
 800a706:	2202      	movs	r2, #2
 800a708:	701a      	strb	r2, [r3, #0]
  break;
 800a70a:	e004      	b.n	800a716 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a70c:	4b05      	ldr	r3, [pc, #20]	; (800a724 <USBH_UserProcess+0x58>)
 800a70e:	2201      	movs	r2, #1
 800a710:	701a      	strb	r2, [r3, #0]
  break;
 800a712:	e000      	b.n	800a716 <USBH_UserProcess+0x4a>

  default:
  break;
 800a714:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a716:	bf00      	nop
 800a718:	370c      	adds	r7, #12
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	200004d0 	.word	0x200004d0

0800a728 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b08a      	sub	sp, #40	; 0x28
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a730:	f107 0314 	add.w	r3, r7, #20
 800a734:	2200      	movs	r2, #0
 800a736:	601a      	str	r2, [r3, #0]
 800a738:	605a      	str	r2, [r3, #4]
 800a73a:	609a      	str	r2, [r3, #8]
 800a73c:	60da      	str	r2, [r3, #12]
 800a73e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a748:	d14e      	bne.n	800a7e8 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a74a:	4b29      	ldr	r3, [pc, #164]	; (800a7f0 <HAL_HCD_MspInit+0xc8>)
 800a74c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a74e:	4a28      	ldr	r2, [pc, #160]	; (800a7f0 <HAL_HCD_MspInit+0xc8>)
 800a750:	f043 0301 	orr.w	r3, r3, #1
 800a754:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a756:	4b26      	ldr	r3, [pc, #152]	; (800a7f0 <HAL_HCD_MspInit+0xc8>)
 800a758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a75a:	f003 0301 	and.w	r3, r3, #1
 800a75e:	613b      	str	r3, [r7, #16]
 800a760:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a762:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a768:	2302      	movs	r3, #2
 800a76a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a76c:	2300      	movs	r3, #0
 800a76e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a770:	2303      	movs	r3, #3
 800a772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a774:	230a      	movs	r3, #10
 800a776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a778:	f107 0314 	add.w	r3, r7, #20
 800a77c:	4619      	mov	r1, r3
 800a77e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a782:	f7f7 fbf9 	bl	8001f78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a786:	4b1a      	ldr	r3, [pc, #104]	; (800a7f0 <HAL_HCD_MspInit+0xc8>)
 800a788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a78a:	4a19      	ldr	r2, [pc, #100]	; (800a7f0 <HAL_HCD_MspInit+0xc8>)
 800a78c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a790:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a792:	4b17      	ldr	r3, [pc, #92]	; (800a7f0 <HAL_HCD_MspInit+0xc8>)
 800a794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a79a:	60fb      	str	r3, [r7, #12]
 800a79c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a79e:	4b14      	ldr	r3, [pc, #80]	; (800a7f0 <HAL_HCD_MspInit+0xc8>)
 800a7a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d114      	bne.n	800a7d4 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a7aa:	4b11      	ldr	r3, [pc, #68]	; (800a7f0 <HAL_HCD_MspInit+0xc8>)
 800a7ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ae:	4a10      	ldr	r2, [pc, #64]	; (800a7f0 <HAL_HCD_MspInit+0xc8>)
 800a7b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7b4:	6593      	str	r3, [r2, #88]	; 0x58
 800a7b6:	4b0e      	ldr	r3, [pc, #56]	; (800a7f0 <HAL_HCD_MspInit+0xc8>)
 800a7b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7be:	60bb      	str	r3, [r7, #8]
 800a7c0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800a7c2:	f7f9 ffe7 	bl	8004794 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a7c6:	4b0a      	ldr	r3, [pc, #40]	; (800a7f0 <HAL_HCD_MspInit+0xc8>)
 800a7c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ca:	4a09      	ldr	r2, [pc, #36]	; (800a7f0 <HAL_HCD_MspInit+0xc8>)
 800a7cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7d0:	6593      	str	r3, [r2, #88]	; 0x58
 800a7d2:	e001      	b.n	800a7d8 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800a7d4:	f7f9 ffde 	bl	8004794 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a7d8:	2200      	movs	r2, #0
 800a7da:	2100      	movs	r1, #0
 800a7dc:	2043      	movs	r0, #67	; 0x43
 800a7de:	f7f7 fb90 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a7e2:	2043      	movs	r0, #67	; 0x43
 800a7e4:	f7f7 fba9 	bl	8001f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a7e8:	bf00      	nop
 800a7ea:	3728      	adds	r7, #40	; 0x28
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	40021000 	.word	0x40021000

0800a7f4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a802:	4618      	mov	r0, r3
 800a804:	f7ff f8b5 	bl	8009972 <USBH_LL_IncTimer>
}
 800a808:	bf00      	nop
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a81e:	4618      	mov	r0, r3
 800a820:	f7ff f8fa 	bl	8009a18 <USBH_LL_Connect>
}
 800a824:	bf00      	nop
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7ff f912 	bl	8009a64 <USBH_LL_Disconnect>
}
 800a840:	bf00      	nop
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	460b      	mov	r3, r1
 800a852:	70fb      	strb	r3, [r7, #3]
 800a854:	4613      	mov	r3, r2
 800a856:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a858:	bf00      	nop
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a872:	4618      	mov	r0, r3
 800a874:	f7ff f8a7 	bl	80099c6 <USBH_LL_PortEnabled>
} 
 800a878:	bf00      	nop
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a88e:	4618      	mov	r0, r3
 800a890:	f7ff f8a7 	bl	80099e2 <USBH_LL_PortDisabled>
} 
 800a894:	bf00      	nop
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d12a      	bne.n	800a904 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a8ae:	4a18      	ldr	r2, [pc, #96]	; (800a910 <USBH_LL_Init+0x74>)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a15      	ldr	r2, [pc, #84]	; (800a910 <USBH_LL_Init+0x74>)
 800a8ba:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a8be:	4b14      	ldr	r3, [pc, #80]	; (800a910 <USBH_LL_Init+0x74>)
 800a8c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a8c4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a8c6:	4b12      	ldr	r3, [pc, #72]	; (800a910 <USBH_LL_Init+0x74>)
 800a8c8:	2208      	movs	r2, #8
 800a8ca:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a8cc:	4b10      	ldr	r3, [pc, #64]	; (800a910 <USBH_LL_Init+0x74>)
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a8d2:	4b0f      	ldr	r3, [pc, #60]	; (800a910 <USBH_LL_Init+0x74>)
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a8d8:	4b0d      	ldr	r3, [pc, #52]	; (800a910 <USBH_LL_Init+0x74>)
 800a8da:	2202      	movs	r2, #2
 800a8dc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a8de:	4b0c      	ldr	r3, [pc, #48]	; (800a910 <USBH_LL_Init+0x74>)
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a8e4:	480a      	ldr	r0, [pc, #40]	; (800a910 <USBH_LL_Init+0x74>)
 800a8e6:	f7f7 fd07 	bl	80022f8 <HAL_HCD_Init>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d001      	beq.n	800a8f4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a8f0:	f7f6 f9de 	bl	8000cb0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a8f4:	4806      	ldr	r0, [pc, #24]	; (800a910 <USBH_LL_Init+0x74>)
 800a8f6:	f7f8 f8ff 	bl	8002af8 <HAL_HCD_GetCurrentFrame>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f7ff f828 	bl	8009954 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3708      	adds	r7, #8
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	20000c30 	.word	0x20000c30

0800a914 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a91c:	2300      	movs	r3, #0
 800a91e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a920:	2300      	movs	r3, #0
 800a922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7f8 f86c 	bl	8002a08 <HAL_HCD_Start>
 800a930:	4603      	mov	r3, r0
 800a932:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a934:	7bfb      	ldrb	r3, [r7, #15]
 800a936:	4618      	mov	r0, r3
 800a938:	f000 f95c 	bl	800abf4 <USBH_Get_USB_Status>
 800a93c:	4603      	mov	r3, r0
 800a93e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a940:	7bbb      	ldrb	r3, [r7, #14]
}
 800a942:	4618      	mov	r0, r3
 800a944:	3710      	adds	r7, #16
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b084      	sub	sp, #16
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a952:	2300      	movs	r3, #0
 800a954:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a956:	2300      	movs	r3, #0
 800a958:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a960:	4618      	mov	r0, r3
 800a962:	f7f8 f874 	bl	8002a4e <HAL_HCD_Stop>
 800a966:	4603      	mov	r3, r0
 800a968:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a96a:	7bfb      	ldrb	r3, [r7, #15]
 800a96c:	4618      	mov	r0, r3
 800a96e:	f000 f941 	bl	800abf4 <USBH_Get_USB_Status>
 800a972:	4603      	mov	r3, r0
 800a974:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a976:	7bbb      	ldrb	r3, [r7, #14]
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3710      	adds	r7, #16
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a988:	2301      	movs	r3, #1
 800a98a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a992:	4618      	mov	r0, r3
 800a994:	f7f8 f8be 	bl	8002b14 <HAL_HCD_GetCurrentSpeed>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d007      	beq.n	800a9ae <USBH_LL_GetSpeed+0x2e>
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d302      	bcc.n	800a9a8 <USBH_LL_GetSpeed+0x28>
 800a9a2:	2b02      	cmp	r3, #2
 800a9a4:	d006      	beq.n	800a9b4 <USBH_LL_GetSpeed+0x34>
 800a9a6:	e008      	b.n	800a9ba <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a9ac:	e008      	b.n	800a9c0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a9b2:	e005      	b.n	800a9c0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a9b4:	2302      	movs	r3, #2
 800a9b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a9b8:	e002      	b.n	800a9c0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a9be:	bf00      	nop
  }
  return  speed;
 800a9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b084      	sub	sp, #16
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7f8 f851 	bl	8002a88 <HAL_HCD_ResetPort>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800a9ea:	7bfb      	ldrb	r3, [r7, #15]
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f000 f901 	bl	800abf4 <USBH_Get_USB_Status>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a9f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	460b      	mov	r3, r1
 800aa0a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aa12:	78fa      	ldrb	r2, [r7, #3]
 800aa14:	4611      	mov	r1, r2
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7f8 f859 	bl	8002ace <HAL_HCD_HC_GetXferCount>
 800aa1c:	4603      	mov	r3, r0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3708      	adds	r7, #8
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aa26:	b590      	push	{r4, r7, lr}
 800aa28:	b089      	sub	sp, #36	; 0x24
 800aa2a:	af04      	add	r7, sp, #16
 800aa2c:	6078      	str	r0, [r7, #4]
 800aa2e:	4608      	mov	r0, r1
 800aa30:	4611      	mov	r1, r2
 800aa32:	461a      	mov	r2, r3
 800aa34:	4603      	mov	r3, r0
 800aa36:	70fb      	strb	r3, [r7, #3]
 800aa38:	460b      	mov	r3, r1
 800aa3a:	70bb      	strb	r3, [r7, #2]
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa40:	2300      	movs	r3, #0
 800aa42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa44:	2300      	movs	r3, #0
 800aa46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800aa4e:	787c      	ldrb	r4, [r7, #1]
 800aa50:	78ba      	ldrb	r2, [r7, #2]
 800aa52:	78f9      	ldrb	r1, [r7, #3]
 800aa54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aa56:	9302      	str	r3, [sp, #8]
 800aa58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aa5c:	9301      	str	r3, [sp, #4]
 800aa5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aa62:	9300      	str	r3, [sp, #0]
 800aa64:	4623      	mov	r3, r4
 800aa66:	f7f7 fca9 	bl	80023bc <HAL_HCD_HC_Init>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa6e:	7bfb      	ldrb	r3, [r7, #15]
 800aa70:	4618      	mov	r0, r3
 800aa72:	f000 f8bf 	bl	800abf4 <USBH_Get_USB_Status>
 800aa76:	4603      	mov	r3, r0
 800aa78:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800aa7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3714      	adds	r7, #20
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd90      	pop	{r4, r7, pc}

0800aa84 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa90:	2300      	movs	r3, #0
 800aa92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa94:	2300      	movs	r3, #0
 800aa96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aa9e:	78fa      	ldrb	r2, [r7, #3]
 800aaa0:	4611      	mov	r1, r2
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7f7 fd22 	bl	80024ec <HAL_HCD_HC_Halt>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aaac:	7bfb      	ldrb	r3, [r7, #15]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 f8a0 	bl	800abf4 <USBH_Get_USB_Status>
 800aab4:	4603      	mov	r3, r0
 800aab6:	73bb      	strb	r3, [r7, #14]
   
  return usb_status;
 800aab8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3710      	adds	r7, #16
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800aac2:	b590      	push	{r4, r7, lr}
 800aac4:	b089      	sub	sp, #36	; 0x24
 800aac6:	af04      	add	r7, sp, #16
 800aac8:	6078      	str	r0, [r7, #4]
 800aaca:	4608      	mov	r0, r1
 800aacc:	4611      	mov	r1, r2
 800aace:	461a      	mov	r2, r3
 800aad0:	4603      	mov	r3, r0
 800aad2:	70fb      	strb	r3, [r7, #3]
 800aad4:	460b      	mov	r3, r1
 800aad6:	70bb      	strb	r3, [r7, #2]
 800aad8:	4613      	mov	r3, r2
 800aada:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aadc:	2300      	movs	r3, #0
 800aade:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aae0:	2300      	movs	r3, #0
 800aae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800aaea:	787c      	ldrb	r4, [r7, #1]
 800aaec:	78ba      	ldrb	r2, [r7, #2]
 800aaee:	78f9      	ldrb	r1, [r7, #3]
 800aaf0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aaf4:	9303      	str	r3, [sp, #12]
 800aaf6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aaf8:	9302      	str	r3, [sp, #8]
 800aafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafc:	9301      	str	r3, [sp, #4]
 800aafe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	4623      	mov	r3, r4
 800ab06:	f7f7 fd15 	bl	8002534 <HAL_HCD_HC_SubmitRequest>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab0e:	7bfb      	ldrb	r3, [r7, #15]
 800ab10:	4618      	mov	r0, r3
 800ab12:	f000 f86f 	bl	800abf4 <USBH_Get_USB_Status>
 800ab16:	4603      	mov	r3, r0
 800ab18:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ab1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3714      	adds	r7, #20
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd90      	pop	{r4, r7, pc}

0800ab24 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ab36:	78fa      	ldrb	r2, [r7, #3]
 800ab38:	4611      	mov	r1, r2
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7f7 ffb2 	bl	8002aa4 <HAL_HCD_HC_GetURBState>
 800ab40:	4603      	mov	r3, r0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3708      	adds	r7, #8
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b082      	sub	sp, #8
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	460b      	mov	r3, r1
 800ab54:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d103      	bne.n	800ab68 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ab60:	78fb      	ldrb	r3, [r7, #3]
 800ab62:	4618      	mov	r0, r3
 800ab64:	f000 f872 	bl	800ac4c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ab68:	20c8      	movs	r0, #200	; 0xc8
 800ab6a:	f7f7 f8b9 	bl	8001ce0 <HAL_Delay>
  return USBH_OK;
 800ab6e:	2300      	movs	r3, #0
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3708      	adds	r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	460b      	mov	r3, r1
 800ab82:	70fb      	strb	r3, [r7, #3]
 800ab84:	4613      	mov	r3, r2
 800ab86:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ab8e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ab90:	78fa      	ldrb	r2, [r7, #3]
 800ab92:	68f9      	ldr	r1, [r7, #12]
 800ab94:	4613      	mov	r3, r2
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4413      	add	r3, r2
 800ab9a:	00db      	lsls	r3, r3, #3
 800ab9c:	440b      	add	r3, r1
 800ab9e:	333b      	adds	r3, #59	; 0x3b
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00a      	beq.n	800abbc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800aba6:	78fa      	ldrb	r2, [r7, #3]
 800aba8:	68f9      	ldr	r1, [r7, #12]
 800abaa:	4613      	mov	r3, r2
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4413      	add	r3, r2
 800abb0:	00db      	lsls	r3, r3, #3
 800abb2:	440b      	add	r3, r1
 800abb4:	3350      	adds	r3, #80	; 0x50
 800abb6:	78ba      	ldrb	r2, [r7, #2]
 800abb8:	701a      	strb	r2, [r3, #0]
 800abba:	e009      	b.n	800abd0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800abbc:	78fa      	ldrb	r2, [r7, #3]
 800abbe:	68f9      	ldr	r1, [r7, #12]
 800abc0:	4613      	mov	r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	4413      	add	r3, r2
 800abc6:	00db      	lsls	r3, r3, #3
 800abc8:	440b      	add	r3, r1
 800abca:	3351      	adds	r3, #81	; 0x51
 800abcc:	78ba      	ldrb	r2, [r7, #2]
 800abce:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800abd0:	2300      	movs	r3, #0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3714      	adds	r7, #20
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr

0800abde <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b082      	sub	sp, #8
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f7f7 f87a 	bl	8001ce0 <HAL_Delay>
}
 800abec:	bf00      	nop
 800abee:	3708      	adds	r7, #8
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b085      	sub	sp, #20
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	4603      	mov	r3, r0
 800abfc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800abfe:	2300      	movs	r3, #0
 800ac00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ac02:	79fb      	ldrb	r3, [r7, #7]
 800ac04:	2b03      	cmp	r3, #3
 800ac06:	d817      	bhi.n	800ac38 <USBH_Get_USB_Status+0x44>
 800ac08:	a201      	add	r2, pc, #4	; (adr r2, 800ac10 <USBH_Get_USB_Status+0x1c>)
 800ac0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac0e:	bf00      	nop
 800ac10:	0800ac21 	.word	0x0800ac21
 800ac14:	0800ac27 	.word	0x0800ac27
 800ac18:	0800ac2d 	.word	0x0800ac2d
 800ac1c:	0800ac33 	.word	0x0800ac33
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ac20:	2300      	movs	r3, #0
 800ac22:	73fb      	strb	r3, [r7, #15]
    break;
 800ac24:	e00b      	b.n	800ac3e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ac26:	2302      	movs	r3, #2
 800ac28:	73fb      	strb	r3, [r7, #15]
    break;
 800ac2a:	e008      	b.n	800ac3e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ac30:	e005      	b.n	800ac3e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ac32:	2302      	movs	r3, #2
 800ac34:	73fb      	strb	r3, [r7, #15]
    break;
 800ac36:	e002      	b.n	800ac3e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ac38:	2302      	movs	r3, #2
 800ac3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac3c:	bf00      	nop
  }
  return usb_status;
 800ac3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3714      	adds	r7, #20
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr

0800ac4c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	4603      	mov	r3, r0
 800ac54:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800ac56:	79fb      	ldrb	r3, [r7, #7]
 800ac58:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ac5a:	79fb      	ldrb	r3, [r7, #7]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d102      	bne.n	800ac66 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800ac60:	2301      	movs	r3, #1
 800ac62:	73fb      	strb	r3, [r7, #15]
 800ac64:	e001      	b.n	800ac6a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ac66:	2300      	movs	r3, #0
 800ac68:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800ac6a:	7bfb      	ldrb	r3, [r7, #15]
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ac72:	4803      	ldr	r0, [pc, #12]	; (800ac80 <MX_DriverVbusFS+0x34>)
 800ac74:	f7f7 fb28 	bl	80022c8 <HAL_GPIO_WritePin>
}
 800ac78:	bf00      	nop
 800ac7a:	3710      	adds	r7, #16
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}
 800ac80:	48000800 	.word	0x48000800

0800ac84 <__errno>:
 800ac84:	4b01      	ldr	r3, [pc, #4]	; (800ac8c <__errno+0x8>)
 800ac86:	6818      	ldr	r0, [r3, #0]
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop
 800ac8c:	2000003c 	.word	0x2000003c

0800ac90 <__libc_init_array>:
 800ac90:	b570      	push	{r4, r5, r6, lr}
 800ac92:	4e0d      	ldr	r6, [pc, #52]	; (800acc8 <__libc_init_array+0x38>)
 800ac94:	4c0d      	ldr	r4, [pc, #52]	; (800accc <__libc_init_array+0x3c>)
 800ac96:	1ba4      	subs	r4, r4, r6
 800ac98:	10a4      	asrs	r4, r4, #2
 800ac9a:	2500      	movs	r5, #0
 800ac9c:	42a5      	cmp	r5, r4
 800ac9e:	d109      	bne.n	800acb4 <__libc_init_array+0x24>
 800aca0:	4e0b      	ldr	r6, [pc, #44]	; (800acd0 <__libc_init_array+0x40>)
 800aca2:	4c0c      	ldr	r4, [pc, #48]	; (800acd4 <__libc_init_array+0x44>)
 800aca4:	f000 f8ea 	bl	800ae7c <_init>
 800aca8:	1ba4      	subs	r4, r4, r6
 800acaa:	10a4      	asrs	r4, r4, #2
 800acac:	2500      	movs	r5, #0
 800acae:	42a5      	cmp	r5, r4
 800acb0:	d105      	bne.n	800acbe <__libc_init_array+0x2e>
 800acb2:	bd70      	pop	{r4, r5, r6, pc}
 800acb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800acb8:	4798      	blx	r3
 800acba:	3501      	adds	r5, #1
 800acbc:	e7ee      	b.n	800ac9c <__libc_init_array+0xc>
 800acbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800acc2:	4798      	blx	r3
 800acc4:	3501      	adds	r5, #1
 800acc6:	e7f2      	b.n	800acae <__libc_init_array+0x1e>
 800acc8:	0800d20c 	.word	0x0800d20c
 800accc:	0800d20c 	.word	0x0800d20c
 800acd0:	0800d20c 	.word	0x0800d20c
 800acd4:	0800d210 	.word	0x0800d210

0800acd8 <malloc>:
 800acd8:	4b02      	ldr	r3, [pc, #8]	; (800ace4 <malloc+0xc>)
 800acda:	4601      	mov	r1, r0
 800acdc:	6818      	ldr	r0, [r3, #0]
 800acde:	f000 b861 	b.w	800ada4 <_malloc_r>
 800ace2:	bf00      	nop
 800ace4:	2000003c 	.word	0x2000003c

0800ace8 <free>:
 800ace8:	4b02      	ldr	r3, [pc, #8]	; (800acf4 <free+0xc>)
 800acea:	4601      	mov	r1, r0
 800acec:	6818      	ldr	r0, [r3, #0]
 800acee:	f000 b80b 	b.w	800ad08 <_free_r>
 800acf2:	bf00      	nop
 800acf4:	2000003c 	.word	0x2000003c

0800acf8 <memset>:
 800acf8:	4402      	add	r2, r0
 800acfa:	4603      	mov	r3, r0
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d100      	bne.n	800ad02 <memset+0xa>
 800ad00:	4770      	bx	lr
 800ad02:	f803 1b01 	strb.w	r1, [r3], #1
 800ad06:	e7f9      	b.n	800acfc <memset+0x4>

0800ad08 <_free_r>:
 800ad08:	b538      	push	{r3, r4, r5, lr}
 800ad0a:	4605      	mov	r5, r0
 800ad0c:	2900      	cmp	r1, #0
 800ad0e:	d045      	beq.n	800ad9c <_free_r+0x94>
 800ad10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad14:	1f0c      	subs	r4, r1, #4
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	bfb8      	it	lt
 800ad1a:	18e4      	addlt	r4, r4, r3
 800ad1c:	f000 f8ac 	bl	800ae78 <__malloc_lock>
 800ad20:	4a1f      	ldr	r2, [pc, #124]	; (800ada0 <_free_r+0x98>)
 800ad22:	6813      	ldr	r3, [r2, #0]
 800ad24:	4610      	mov	r0, r2
 800ad26:	b933      	cbnz	r3, 800ad36 <_free_r+0x2e>
 800ad28:	6063      	str	r3, [r4, #4]
 800ad2a:	6014      	str	r4, [r2, #0]
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad32:	f000 b8a2 	b.w	800ae7a <__malloc_unlock>
 800ad36:	42a3      	cmp	r3, r4
 800ad38:	d90c      	bls.n	800ad54 <_free_r+0x4c>
 800ad3a:	6821      	ldr	r1, [r4, #0]
 800ad3c:	1862      	adds	r2, r4, r1
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	bf04      	itt	eq
 800ad42:	681a      	ldreq	r2, [r3, #0]
 800ad44:	685b      	ldreq	r3, [r3, #4]
 800ad46:	6063      	str	r3, [r4, #4]
 800ad48:	bf04      	itt	eq
 800ad4a:	1852      	addeq	r2, r2, r1
 800ad4c:	6022      	streq	r2, [r4, #0]
 800ad4e:	6004      	str	r4, [r0, #0]
 800ad50:	e7ec      	b.n	800ad2c <_free_r+0x24>
 800ad52:	4613      	mov	r3, r2
 800ad54:	685a      	ldr	r2, [r3, #4]
 800ad56:	b10a      	cbz	r2, 800ad5c <_free_r+0x54>
 800ad58:	42a2      	cmp	r2, r4
 800ad5a:	d9fa      	bls.n	800ad52 <_free_r+0x4a>
 800ad5c:	6819      	ldr	r1, [r3, #0]
 800ad5e:	1858      	adds	r0, r3, r1
 800ad60:	42a0      	cmp	r0, r4
 800ad62:	d10b      	bne.n	800ad7c <_free_r+0x74>
 800ad64:	6820      	ldr	r0, [r4, #0]
 800ad66:	4401      	add	r1, r0
 800ad68:	1858      	adds	r0, r3, r1
 800ad6a:	4282      	cmp	r2, r0
 800ad6c:	6019      	str	r1, [r3, #0]
 800ad6e:	d1dd      	bne.n	800ad2c <_free_r+0x24>
 800ad70:	6810      	ldr	r0, [r2, #0]
 800ad72:	6852      	ldr	r2, [r2, #4]
 800ad74:	605a      	str	r2, [r3, #4]
 800ad76:	4401      	add	r1, r0
 800ad78:	6019      	str	r1, [r3, #0]
 800ad7a:	e7d7      	b.n	800ad2c <_free_r+0x24>
 800ad7c:	d902      	bls.n	800ad84 <_free_r+0x7c>
 800ad7e:	230c      	movs	r3, #12
 800ad80:	602b      	str	r3, [r5, #0]
 800ad82:	e7d3      	b.n	800ad2c <_free_r+0x24>
 800ad84:	6820      	ldr	r0, [r4, #0]
 800ad86:	1821      	adds	r1, r4, r0
 800ad88:	428a      	cmp	r2, r1
 800ad8a:	bf04      	itt	eq
 800ad8c:	6811      	ldreq	r1, [r2, #0]
 800ad8e:	6852      	ldreq	r2, [r2, #4]
 800ad90:	6062      	str	r2, [r4, #4]
 800ad92:	bf04      	itt	eq
 800ad94:	1809      	addeq	r1, r1, r0
 800ad96:	6021      	streq	r1, [r4, #0]
 800ad98:	605c      	str	r4, [r3, #4]
 800ad9a:	e7c7      	b.n	800ad2c <_free_r+0x24>
 800ad9c:	bd38      	pop	{r3, r4, r5, pc}
 800ad9e:	bf00      	nop
 800ada0:	200004d4 	.word	0x200004d4

0800ada4 <_malloc_r>:
 800ada4:	b570      	push	{r4, r5, r6, lr}
 800ada6:	1ccd      	adds	r5, r1, #3
 800ada8:	f025 0503 	bic.w	r5, r5, #3
 800adac:	3508      	adds	r5, #8
 800adae:	2d0c      	cmp	r5, #12
 800adb0:	bf38      	it	cc
 800adb2:	250c      	movcc	r5, #12
 800adb4:	2d00      	cmp	r5, #0
 800adb6:	4606      	mov	r6, r0
 800adb8:	db01      	blt.n	800adbe <_malloc_r+0x1a>
 800adba:	42a9      	cmp	r1, r5
 800adbc:	d903      	bls.n	800adc6 <_malloc_r+0x22>
 800adbe:	230c      	movs	r3, #12
 800adc0:	6033      	str	r3, [r6, #0]
 800adc2:	2000      	movs	r0, #0
 800adc4:	bd70      	pop	{r4, r5, r6, pc}
 800adc6:	f000 f857 	bl	800ae78 <__malloc_lock>
 800adca:	4a21      	ldr	r2, [pc, #132]	; (800ae50 <_malloc_r+0xac>)
 800adcc:	6814      	ldr	r4, [r2, #0]
 800adce:	4621      	mov	r1, r4
 800add0:	b991      	cbnz	r1, 800adf8 <_malloc_r+0x54>
 800add2:	4c20      	ldr	r4, [pc, #128]	; (800ae54 <_malloc_r+0xb0>)
 800add4:	6823      	ldr	r3, [r4, #0]
 800add6:	b91b      	cbnz	r3, 800ade0 <_malloc_r+0x3c>
 800add8:	4630      	mov	r0, r6
 800adda:	f000 f83d 	bl	800ae58 <_sbrk_r>
 800adde:	6020      	str	r0, [r4, #0]
 800ade0:	4629      	mov	r1, r5
 800ade2:	4630      	mov	r0, r6
 800ade4:	f000 f838 	bl	800ae58 <_sbrk_r>
 800ade8:	1c43      	adds	r3, r0, #1
 800adea:	d124      	bne.n	800ae36 <_malloc_r+0x92>
 800adec:	230c      	movs	r3, #12
 800adee:	6033      	str	r3, [r6, #0]
 800adf0:	4630      	mov	r0, r6
 800adf2:	f000 f842 	bl	800ae7a <__malloc_unlock>
 800adf6:	e7e4      	b.n	800adc2 <_malloc_r+0x1e>
 800adf8:	680b      	ldr	r3, [r1, #0]
 800adfa:	1b5b      	subs	r3, r3, r5
 800adfc:	d418      	bmi.n	800ae30 <_malloc_r+0x8c>
 800adfe:	2b0b      	cmp	r3, #11
 800ae00:	d90f      	bls.n	800ae22 <_malloc_r+0x7e>
 800ae02:	600b      	str	r3, [r1, #0]
 800ae04:	50cd      	str	r5, [r1, r3]
 800ae06:	18cc      	adds	r4, r1, r3
 800ae08:	4630      	mov	r0, r6
 800ae0a:	f000 f836 	bl	800ae7a <__malloc_unlock>
 800ae0e:	f104 000b 	add.w	r0, r4, #11
 800ae12:	1d23      	adds	r3, r4, #4
 800ae14:	f020 0007 	bic.w	r0, r0, #7
 800ae18:	1ac3      	subs	r3, r0, r3
 800ae1a:	d0d3      	beq.n	800adc4 <_malloc_r+0x20>
 800ae1c:	425a      	negs	r2, r3
 800ae1e:	50e2      	str	r2, [r4, r3]
 800ae20:	e7d0      	b.n	800adc4 <_malloc_r+0x20>
 800ae22:	428c      	cmp	r4, r1
 800ae24:	684b      	ldr	r3, [r1, #4]
 800ae26:	bf16      	itet	ne
 800ae28:	6063      	strne	r3, [r4, #4]
 800ae2a:	6013      	streq	r3, [r2, #0]
 800ae2c:	460c      	movne	r4, r1
 800ae2e:	e7eb      	b.n	800ae08 <_malloc_r+0x64>
 800ae30:	460c      	mov	r4, r1
 800ae32:	6849      	ldr	r1, [r1, #4]
 800ae34:	e7cc      	b.n	800add0 <_malloc_r+0x2c>
 800ae36:	1cc4      	adds	r4, r0, #3
 800ae38:	f024 0403 	bic.w	r4, r4, #3
 800ae3c:	42a0      	cmp	r0, r4
 800ae3e:	d005      	beq.n	800ae4c <_malloc_r+0xa8>
 800ae40:	1a21      	subs	r1, r4, r0
 800ae42:	4630      	mov	r0, r6
 800ae44:	f000 f808 	bl	800ae58 <_sbrk_r>
 800ae48:	3001      	adds	r0, #1
 800ae4a:	d0cf      	beq.n	800adec <_malloc_r+0x48>
 800ae4c:	6025      	str	r5, [r4, #0]
 800ae4e:	e7db      	b.n	800ae08 <_malloc_r+0x64>
 800ae50:	200004d4 	.word	0x200004d4
 800ae54:	200004d8 	.word	0x200004d8

0800ae58 <_sbrk_r>:
 800ae58:	b538      	push	{r3, r4, r5, lr}
 800ae5a:	4c06      	ldr	r4, [pc, #24]	; (800ae74 <_sbrk_r+0x1c>)
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	4605      	mov	r5, r0
 800ae60:	4608      	mov	r0, r1
 800ae62:	6023      	str	r3, [r4, #0]
 800ae64:	f7f6 fd88 	bl	8001978 <_sbrk>
 800ae68:	1c43      	adds	r3, r0, #1
 800ae6a:	d102      	bne.n	800ae72 <_sbrk_r+0x1a>
 800ae6c:	6823      	ldr	r3, [r4, #0]
 800ae6e:	b103      	cbz	r3, 800ae72 <_sbrk_r+0x1a>
 800ae70:	602b      	str	r3, [r5, #0]
 800ae72:	bd38      	pop	{r3, r4, r5, pc}
 800ae74:	20000ef4 	.word	0x20000ef4

0800ae78 <__malloc_lock>:
 800ae78:	4770      	bx	lr

0800ae7a <__malloc_unlock>:
 800ae7a:	4770      	bx	lr

0800ae7c <_init>:
 800ae7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae7e:	bf00      	nop
 800ae80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae82:	bc08      	pop	{r3}
 800ae84:	469e      	mov	lr, r3
 800ae86:	4770      	bx	lr

0800ae88 <_fini>:
 800ae88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae8a:	bf00      	nop
 800ae8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae8e:	bc08      	pop	{r3}
 800ae90:	469e      	mov	lr, r3
 800ae92:	4770      	bx	lr
