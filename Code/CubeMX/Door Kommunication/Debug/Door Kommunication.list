
Door Kommunication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab6c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b6c  0800acf4  0800acf4  0001acf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b860  0800b860  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800b860  0800b860  0001b860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b868  0800b868  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b868  0800b868  0001b868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b86c  0800b86c  0001b86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800b870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dfc  200000ac  0800b91c  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ea8  0800b91c  00020ea8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030f7a  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005c74  00000000  00000000  00051056  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001cc8  00000000  00000000  00056cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a10  00000000  00000000  00058998  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f98f  00000000  00000000  0005a3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021dc2  00000000  00000000  00089d37  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00104140  00000000  00000000  000abaf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001afc39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075b4  00000000  00000000  001afcb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000ac 	.word	0x200000ac
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800acdc 	.word	0x0800acdc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b0 	.word	0x200000b0
 80001c4:	0800acdc 	.word	0x0800acdc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <draw_QR>:
#include <stdint.h>
#include "ssd1306.h"

void draw_QR(uint8_t lines[29][29]) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08c      	sub	sp, #48	; 0x30
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t x = 60;
 80004d0:	233c      	movs	r3, #60	; 0x3c
 80004d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t y = 3;
 80004d6:	2303      	movs	r3, #3
 80004d8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t box[31] = { };
 80004dc:	f107 030c 	add.w	r3, r7, #12
 80004e0:	221f      	movs	r2, #31
 80004e2:	2100      	movs	r1, #0
 80004e4:	4618      	mov	r0, r3
 80004e6:	f00a fb37 	bl	800ab58 <memset>
	draw_line(box, x, y-2);
 80004ea:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80004ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80004f2:	1e9a      	subs	r2, r3, #2
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 f86e 	bl	80005da <draw_line>
	draw_line(box, x, y+58);
 80004fe:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8000502:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000506:	f103 023a 	add.w	r2, r3, #58	; 0x3a
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	4618      	mov	r0, r3
 8000510:	f000 f863 	bl	80005da <draw_line>
	draw_line_down(box, x-2, y-2);
 8000514:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000518:	1e99      	subs	r1, r3, #2
 800051a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800051e:	1e9a      	subs	r2, r3, #2
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	4618      	mov	r0, r3
 8000526:	f000 f834 	bl	8000592 <draw_line_down>
	draw_line_down(box, x+58, y-2);
 800052a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800052e:	f103 013a 	add.w	r1, r3, #58	; 0x3a
 8000532:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000536:	1e9a      	subs	r2, r3, #2
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	4618      	mov	r0, r3
 800053e:	f000 f828 	bl	8000592 <draw_line_down>

	for (i = 0; i < 29; i++) {
 8000542:	2300      	movs	r3, #0
 8000544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000548:	e019      	b.n	800057e <draw_QR+0xb6>
		draw_line(lines[i], x, y);
 800054a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800054e:	4613      	mov	r3, r2
 8000550:	00db      	lsls	r3, r3, #3
 8000552:	1a9b      	subs	r3, r3, r2
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	4413      	add	r3, r2
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	4413      	add	r3, r2
 800055c:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8000560:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8000564:	4618      	mov	r0, r3
 8000566:	f000 f838 	bl	80005da <draw_line>
		y = y + 2;
 800056a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800056e:	3302      	adds	r3, #2
 8000570:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (i = 0; i < 29; i++) {
 8000574:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000578:	3301      	adds	r3, #1
 800057a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800057e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000582:	2b1c      	cmp	r3, #28
 8000584:	d9e1      	bls.n	800054a <draw_QR+0x82>
	}
	ssd1306_UpdateScreen();
 8000586:	f001 f92b 	bl	80017e0 <ssd1306_UpdateScreen>
}
 800058a:	bf00      	nop
 800058c:	3730      	adds	r7, #48	; 0x30
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <draw_line_down>:
void draw_line_down(uint8_t line[29], uint8_t x, uint8_t y) {
 8000592:	b580      	push	{r7, lr}
 8000594:	b084      	sub	sp, #16
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	460b      	mov	r3, r1
 800059c:	70fb      	strb	r3, [r7, #3]
 800059e:	4613      	mov	r3, r2
 80005a0:	70bb      	strb	r3, [r7, #2]
	uint8_t i;
	for (i = 0; i < 31; i++) {
 80005a2:	2300      	movs	r3, #0
 80005a4:	73fb      	strb	r3, [r7, #15]
 80005a6:	e011      	b.n	80005cc <draw_line_down+0x3a>
		if (line[i] == 0) {
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d105      	bne.n	80005c0 <draw_line_down+0x2e>
			draw_square(x, y);
 80005b4:	78fb      	ldrb	r3, [r7, #3]
 80005b6:	78ba      	ldrb	r2, [r7, #2]
 80005b8:	4611      	mov	r1, r2
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f831 	bl	8000622 <draw_square>

		}
		y = y + 2;
 80005c0:	78bb      	ldrb	r3, [r7, #2]
 80005c2:	3302      	adds	r3, #2
 80005c4:	70bb      	strb	r3, [r7, #2]
	for (i = 0; i < 31; i++) {
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	3301      	adds	r3, #1
 80005ca:	73fb      	strb	r3, [r7, #15]
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	2b1e      	cmp	r3, #30
 80005d0:	d9ea      	bls.n	80005a8 <draw_line_down+0x16>
	}

}
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <draw_line>:
void draw_line(uint8_t line[29], uint8_t x, uint8_t y) {
 80005da:	b580      	push	{r7, lr}
 80005dc:	b084      	sub	sp, #16
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
 80005e2:	460b      	mov	r3, r1
 80005e4:	70fb      	strb	r3, [r7, #3]
 80005e6:	4613      	mov	r3, r2
 80005e8:	70bb      	strb	r3, [r7, #2]
	uint8_t i;
	for (i = 0; i < 29; i++) {
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]
 80005ee:	e011      	b.n	8000614 <draw_line+0x3a>
		if (line[i] == 0) {
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d105      	bne.n	8000608 <draw_line+0x2e>
			draw_square(x, y);
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	78ba      	ldrb	r2, [r7, #2]
 8000600:	4611      	mov	r1, r2
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f80d 	bl	8000622 <draw_square>

		}
		x = x + 2;
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	3302      	adds	r3, #2
 800060c:	70fb      	strb	r3, [r7, #3]
	for (i = 0; i < 29; i++) {
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	3301      	adds	r3, #1
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	2b1c      	cmp	r3, #28
 8000618:	d9ea      	bls.n	80005f0 <draw_line+0x16>
	}

}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <draw_square>:
void draw_square(uint8_t x, uint8_t y) {
 8000622:	b580      	push	{r7, lr}
 8000624:	b084      	sub	sp, #16
 8000626:	af00      	add	r7, sp, #0
 8000628:	4603      	mov	r3, r0
 800062a:	460a      	mov	r2, r1
 800062c:	71fb      	strb	r3, [r7, #7]
 800062e:	4613      	mov	r3, r2
 8000630:	71bb      	strb	r3, [r7, #6]
	uint8_t i = x;
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	73fb      	strb	r3, [r7, #15]
	uint8_t j = y;
 8000636:	79bb      	ldrb	r3, [r7, #6]
 8000638:	73bb      	strb	r3, [r7, #14]
	uint8_t size = 2;
 800063a:	2302      	movs	r3, #2
 800063c:	737b      	strb	r3, [r7, #13]
	while (i < (x + size)) {
 800063e:	e014      	b.n	800066a <draw_square+0x48>
		j = y;
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	73bb      	strb	r3, [r7, #14]
		while (j < (y + size)) {
 8000644:	e008      	b.n	8000658 <draw_square+0x36>
			ssd1306_DrawPixel(i, j, White);
 8000646:	7bb9      	ldrb	r1, [r7, #14]
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	2201      	movs	r2, #1
 800064c:	4618      	mov	r0, r3
 800064e:	f001 f8ed 	bl	800182c <ssd1306_DrawPixel>
			j++;
 8000652:	7bbb      	ldrb	r3, [r7, #14]
 8000654:	3301      	adds	r3, #1
 8000656:	73bb      	strb	r3, [r7, #14]
		while (j < (y + size)) {
 8000658:	7bba      	ldrb	r2, [r7, #14]
 800065a:	79b9      	ldrb	r1, [r7, #6]
 800065c:	7b7b      	ldrb	r3, [r7, #13]
 800065e:	440b      	add	r3, r1
 8000660:	429a      	cmp	r2, r3
 8000662:	dbf0      	blt.n	8000646 <draw_square+0x24>
		}
		i++;
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	3301      	adds	r3, #1
 8000668:	73fb      	strb	r3, [r7, #15]
	while (i < (x + size)) {
 800066a:	7bfa      	ldrb	r2, [r7, #15]
 800066c:	79f9      	ldrb	r1, [r7, #7]
 800066e:	7b7b      	ldrb	r3, [r7, #13]
 8000670:	440b      	add	r3, r1
 8000672:	429a      	cmp	r2, r3
 8000674:	dbe4      	blt.n	8000640 <draw_square+0x1e>
	}

}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <test_menu>:
	while (1) {
		uint8_t status = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);

	}
}
void test_menu(void) {
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0
	menu_state();
 8000682:	f000 f94f 	bl	8000924 <menu_state>
	cursor_init();
 8000686:	f000 f80b 	bl	80006a0 <cursor_init>
	while (1) {
		cursor();
 800068a:	f000 f821 	bl	80006d0 <cursor>
 800068e:	e7fc      	b.n	800068a <test_menu+0xc>

08000690 <test_disp>:
//HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
	HAL_Delay(10000);
	inb_disp_clear();
	inb_disp_write("end");
}
void test_disp(void) {
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8000694:	f001 f814 	bl	80016c0 <ssd1306_Init>
//
	test_menu();
 8000698:	f7ff fff1 	bl	800067e <test_menu>
//test_wifi_uart();
//test_joystick();
//test_QR();
//test_contrast();
	//test_button();
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}

080006a0 <cursor_init>:

#define MAIN 		0
#define QR 			1
#define LOG 		2

void cursor_init(void) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	BSP_JOY_Init(JOY_MODE_GPIO);
 80006a4:	2000      	movs	r0, #0
 80006a6:	f001 f9e7 	bl	8001a78 <BSP_JOY_Init>
	ssd1306_SetCursor(32, 54);
 80006aa:	2136      	movs	r1, #54	; 0x36
 80006ac:	2020      	movs	r0, #32
 80006ae:	f001 f9cb 	bl	8001a48 <ssd1306_SetCursor>
	ssd1306_WriteString("<", Font_M, White);
 80006b2:	4a05      	ldr	r2, [pc, #20]	; (80006c8 <cursor_init+0x28>)
 80006b4:	2301      	movs	r3, #1
 80006b6:	ca06      	ldmia	r2, {r1, r2}
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <cursor_init+0x2c>)
 80006ba:	f001 f99f 	bl	80019fc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80006be:	f001 f88f 	bl	80017e0 <ssd1306_UpdateScreen>
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000000 	.word	0x20000000
 80006cc:	0800acf4 	.word	0x0800acf4

080006d0 <cursor>:
uint8_t cursor(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
	uint8_t rows[] = { 32, 100 };
 80006d6:	4b2d      	ldr	r3, [pc, #180]	; (800078c <cursor+0xbc>)
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	80bb      	strh	r3, [r7, #4]
	uint8_t *p;
	p = rows;
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	60bb      	str	r3, [r7, #8]
	uint8_t selection = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	73fb      	strb	r3, [r7, #15]
	while (1) {
		JOYState_TypeDef state = BSP_JOY_GetState();
 80006e4:	f001 fa70 	bl	8001bc8 <BSP_JOY_GetState>
 80006e8:	4603      	mov	r3, r0
 80006ea:	71fb      	strb	r3, [r7, #7]
		if (state == JOY_UP || state == JOY_DOWN) {
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	d002      	beq.n	80006f8 <cursor+0x28>
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b03      	cmp	r3, #3
 80006f6:	d141      	bne.n	800077c <cursor+0xac>
			if (selection == 0) {
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d11b      	bne.n	8000736 <cursor+0x66>
				selection = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	73fb      	strb	r3, [r7, #15]
				ssd1306_SetCursor(32, 54);
 8000702:	2136      	movs	r1, #54	; 0x36
 8000704:	2020      	movs	r0, #32
 8000706:	f001 f99f 	bl	8001a48 <ssd1306_SetCursor>
				ssd1306_WriteString(" ", Font_M, White);
 800070a:	4a21      	ldr	r2, [pc, #132]	; (8000790 <cursor+0xc0>)
 800070c:	2301      	movs	r3, #1
 800070e:	ca06      	ldmia	r2, {r1, r2}
 8000710:	4820      	ldr	r0, [pc, #128]	; (8000794 <cursor+0xc4>)
 8000712:	f001 f973 	bl	80019fc <ssd1306_WriteString>
				ssd1306_SetCursor(96, 54);
 8000716:	2136      	movs	r1, #54	; 0x36
 8000718:	2060      	movs	r0, #96	; 0x60
 800071a:	f001 f995 	bl	8001a48 <ssd1306_SetCursor>
				ssd1306_WriteString("<", Font_M, White);
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <cursor+0xc0>)
 8000720:	2301      	movs	r3, #1
 8000722:	ca06      	ldmia	r2, {r1, r2}
 8000724:	481c      	ldr	r0, [pc, #112]	; (8000798 <cursor+0xc8>)
 8000726:	f001 f969 	bl	80019fc <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 800072a:	f001 f859 	bl	80017e0 <ssd1306_UpdateScreen>
				HAL_Delay(200);
 800072e:	20c8      	movs	r0, #200	; 0xc8
 8000730:	f001 fc3a 	bl	8001fa8 <HAL_Delay>
 8000734:	e022      	b.n	800077c <cursor+0xac>

			} else {
				if (selection == 1) {
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d11b      	bne.n	8000774 <cursor+0xa4>
					selection = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	73fb      	strb	r3, [r7, #15]
					ssd1306_SetCursor(32, 54);
 8000740:	2136      	movs	r1, #54	; 0x36
 8000742:	2020      	movs	r0, #32
 8000744:	f001 f980 	bl	8001a48 <ssd1306_SetCursor>
					ssd1306_WriteString("<", Font_M, White);
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <cursor+0xc0>)
 800074a:	2301      	movs	r3, #1
 800074c:	ca06      	ldmia	r2, {r1, r2}
 800074e:	4812      	ldr	r0, [pc, #72]	; (8000798 <cursor+0xc8>)
 8000750:	f001 f954 	bl	80019fc <ssd1306_WriteString>
					ssd1306_SetCursor(96, 54);
 8000754:	2136      	movs	r1, #54	; 0x36
 8000756:	2060      	movs	r0, #96	; 0x60
 8000758:	f001 f976 	bl	8001a48 <ssd1306_SetCursor>
					ssd1306_WriteString(" ", Font_M, White);
 800075c:	4a0c      	ldr	r2, [pc, #48]	; (8000790 <cursor+0xc0>)
 800075e:	2301      	movs	r3, #1
 8000760:	ca06      	ldmia	r2, {r1, r2}
 8000762:	480c      	ldr	r0, [pc, #48]	; (8000794 <cursor+0xc4>)
 8000764:	f001 f94a 	bl	80019fc <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8000768:	f001 f83a 	bl	80017e0 <ssd1306_UpdateScreen>
					HAL_Delay(200);
 800076c:	20c8      	movs	r0, #200	; 0xc8
 800076e:	f001 fc1b 	bl	8001fa8 <HAL_Delay>
 8000772:	e003      	b.n	800077c <cursor+0xac>
				} else {
					selection = -1;
 8000774:	23ff      	movs	r3, #255	; 0xff
 8000776:	73fb      	strb	r3, [r7, #15]
					return selection;
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	e003      	b.n	8000784 <cursor+0xb4>
				}
			}
		}
		if (state == JOY_DOWN) {
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b03      	cmp	r3, #3
 8000780:	d1b0      	bne.n	80006e4 <cursor+0x14>
			return selection;
 8000782:	7bfb      	ldrb	r3, [r7, #15]
		}

	}
}
 8000784:	4618      	mov	r0, r3
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	0800acfc 	.word	0x0800acfc
 8000790:	20000000 	.word	0x20000000
 8000794:	0800acf8 	.word	0x0800acf8
 8000798:	0800acf4 	.word	0x0800acf4

0800079c <menu_log>:
uint8_t menu_log(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f000 fffa 	bl	800179c <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 80007a8:	2100      	movs	r1, #0
 80007aa:	2002      	movs	r0, #2
 80007ac:	f001 f94c 	bl	8001a48 <ssd1306_SetCursor>
	ssd1306_WriteString("MESSAGE 1", Font_M, White);
 80007b0:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <menu_log+0x88>)
 80007b2:	2301      	movs	r3, #1
 80007b4:	ca06      	ldmia	r2, {r1, r2}
 80007b6:	481c      	ldr	r0, [pc, #112]	; (8000828 <menu_log+0x8c>)
 80007b8:	f001 f920 	bl	80019fc <ssd1306_WriteString>
	ssd1306_SetCursor(2, 10);
 80007bc:	210a      	movs	r1, #10
 80007be:	2002      	movs	r0, #2
 80007c0:	f001 f942 	bl	8001a48 <ssd1306_SetCursor>
	ssd1306_WriteString("MESSAGE 2", Font_M, White);
 80007c4:	4a17      	ldr	r2, [pc, #92]	; (8000824 <menu_log+0x88>)
 80007c6:	2301      	movs	r3, #1
 80007c8:	ca06      	ldmia	r2, {r1, r2}
 80007ca:	4818      	ldr	r0, [pc, #96]	; (800082c <menu_log+0x90>)
 80007cc:	f001 f916 	bl	80019fc <ssd1306_WriteString>
	ssd1306_SetCursor(2, 10 + 10);
 80007d0:	2114      	movs	r1, #20
 80007d2:	2002      	movs	r0, #2
 80007d4:	f001 f938 	bl	8001a48 <ssd1306_SetCursor>
	ssd1306_WriteString("MESSAGE 3", Font_M, White);
 80007d8:	4a12      	ldr	r2, [pc, #72]	; (8000824 <menu_log+0x88>)
 80007da:	2301      	movs	r3, #1
 80007dc:	ca06      	ldmia	r2, {r1, r2}
 80007de:	4814      	ldr	r0, [pc, #80]	; (8000830 <menu_log+0x94>)
 80007e0:	f001 f90c 	bl	80019fc <ssd1306_WriteString>

	ssd1306_SetCursor(2, 54);
 80007e4:	2136      	movs	r1, #54	; 0x36
 80007e6:	2002      	movs	r0, #2
 80007e8:	f001 f92e 	bl	8001a48 <ssd1306_SetCursor>
	ssd1306_WriteString("BACK", Font_M, White);
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <menu_log+0x88>)
 80007ee:	2301      	movs	r3, #1
 80007f0:	ca06      	ldmia	r2, {r1, r2}
 80007f2:	4810      	ldr	r0, [pc, #64]	; (8000834 <menu_log+0x98>)
 80007f4:	f001 f902 	bl	80019fc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80007f8:	f000 fff2 	bl	80017e0 <ssd1306_UpdateScreen>
	cursor_init();
 80007fc:	f7ff ff50 	bl	80006a0 <cursor_init>
	BSP_JOY_Init(JOY_MODE_GPIO);
 8000800:	2000      	movs	r0, #0
 8000802:	f001 f939 	bl	8001a78 <BSP_JOY_Init>
	uint8_t selection = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	71fb      	strb	r3, [r7, #7]
	while (1) {
		JOYState_TypeDef state = BSP_JOY_GetState();
 800080a:	f001 f9dd 	bl	8001bc8 <BSP_JOY_GetState>
 800080e:	4603      	mov	r3, r0
 8000810:	71bb      	strb	r3, [r7, #6]
		if (state == JOY_SEL) {
 8000812:	79bb      	ldrb	r3, [r7, #6]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d1f8      	bne.n	800080a <menu_log+0x6e>
			return MAIN;
 8000818:	2300      	movs	r3, #0
		}
	}

	HAL_Delay(100);
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000000 	.word	0x20000000
 8000828:	0800ad00 	.word	0x0800ad00
 800082c:	0800ad0c 	.word	0x0800ad0c
 8000830:	0800ad18 	.word	0x0800ad18
 8000834:	0800ad24 	.word	0x0800ad24

08000838 <menu_QR>:

uint8_t menu_QR(void) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 800083e:	2000      	movs	r0, #0
 8000840:	f000 ffac 	bl	800179c <ssd1306_Fill>
	draw_QR(line_QR);
 8000844:	4819      	ldr	r0, [pc, #100]	; (80008ac <menu_QR+0x74>)
 8000846:	f7ff fe3f 	bl	80004c8 <draw_QR>
	ssd1306_SetCursor(2, 54);
 800084a:	2136      	movs	r1, #54	; 0x36
 800084c:	2002      	movs	r0, #2
 800084e:	f001 f8fb 	bl	8001a48 <ssd1306_SetCursor>
	ssd1306_WriteString("BACK", Font_M, White);
 8000852:	4a17      	ldr	r2, [pc, #92]	; (80008b0 <menu_QR+0x78>)
 8000854:	2301      	movs	r3, #1
 8000856:	ca06      	ldmia	r2, {r1, r2}
 8000858:	4816      	ldr	r0, [pc, #88]	; (80008b4 <menu_QR+0x7c>)
 800085a:	f001 f8cf 	bl	80019fc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800085e:	f000 ffbf 	bl	80017e0 <ssd1306_UpdateScreen>
	cursor_init();
 8000862:	f7ff ff1d 	bl	80006a0 <cursor_init>
	BSP_JOY_Init(JOY_MODE_GPIO);
 8000866:	2000      	movs	r0, #0
 8000868:	f001 f906 	bl	8001a78 <BSP_JOY_Init>
	uint8_t selection = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	71bb      	strb	r3, [r7, #6]
	uint8_t value = 0xFF;
 8000870:	23ff      	movs	r3, #255	; 0xff
 8000872:	71fb      	strb	r3, [r7, #7]
	while (1) {
		JOYState_TypeDef state = BSP_JOY_GetState();
 8000874:	f001 f9a8 	bl	8001bc8 <BSP_JOY_GetState>
 8000878:	4603      	mov	r3, r0
 800087a:	717b      	strb	r3, [r7, #5]
		if (state == JOY_DOWN) {
 800087c:	797b      	ldrb	r3, [r7, #5]
 800087e:	2b03      	cmp	r3, #3
 8000880:	d101      	bne.n	8000886 <menu_QR+0x4e>
			return MAIN;
 8000882:	2300      	movs	r3, #0
 8000884:	e00d      	b.n	80008a2 <menu_QR+0x6a>
		}

		value = value - 4;
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	3b04      	subs	r3, #4
 800088a:	71fb      	strb	r3, [r7, #7]
		ssd1306_WriteCommand(0x81);
 800088c:	2081      	movs	r0, #129	; 0x81
 800088e:	f000 fee5 	bl	800165c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(value);
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	4618      	mov	r0, r3
 8000896:	f000 fee1 	bl	800165c <ssd1306_WriteCommand>
		HAL_Delay(100);
 800089a:	2064      	movs	r0, #100	; 0x64
 800089c:	f001 fb84 	bl	8001fa8 <HAL_Delay>
	while (1) {
 80008a0:	e7e8      	b.n	8000874 <menu_QR+0x3c>
	}
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	0800ad4c 	.word	0x0800ad4c
 80008b0:	20000000 	.word	0x20000000
 80008b4:	0800ad24 	.word	0x0800ad24

080008b8 <menu_main>:

uint8_t menu_main(void) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80008be:	2000      	movs	r0, #0
 80008c0:	f000 ff6c 	bl	800179c <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 80008c4:	2100      	movs	r1, #0
 80008c6:	2002      	movs	r0, #2
 80008c8:	f001 f8be 	bl	8001a48 <ssd1306_SetCursor>
	ssd1306_WriteString("MESSAGE HERE", Font_M, White);
 80008cc:	4a12      	ldr	r2, [pc, #72]	; (8000918 <menu_main+0x60>)
 80008ce:	2301      	movs	r3, #1
 80008d0:	ca06      	ldmia	r2, {r1, r2}
 80008d2:	4812      	ldr	r0, [pc, #72]	; (800091c <menu_main+0x64>)
 80008d4:	f001 f892 	bl	80019fc <ssd1306_WriteString>
	ssd1306_SetCursor(2, 54);
 80008d8:	2136      	movs	r1, #54	; 0x36
 80008da:	2002      	movs	r0, #2
 80008dc:	f001 f8b4 	bl	8001a48 <ssd1306_SetCursor>
	ssd1306_WriteString("QR", Font_M, White);
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <menu_main+0x60>)
 80008e2:	2301      	movs	r3, #1
 80008e4:	ca06      	ldmia	r2, {r1, r2}
 80008e6:	480e      	ldr	r0, [pc, #56]	; (8000920 <menu_main+0x68>)
 80008e8:	f001 f888 	bl	80019fc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80008ec:	f000 ff78 	bl	80017e0 <ssd1306_UpdateScreen>
	cursor_init();
 80008f0:	f7ff fed6 	bl	80006a0 <cursor_init>
	uint8_t selection = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	71fb      	strb	r3, [r7, #7]
	while (1) {
		JOYState_TypeDef state = BSP_JOY_GetState();
 80008f8:	f001 f966 	bl	8001bc8 <BSP_JOY_GetState>
 80008fc:	4603      	mov	r3, r0
 80008fe:	71bb      	strb	r3, [r7, #6]

		if (state == JOY_DOWN) {
 8000900:	79bb      	ldrb	r3, [r7, #6]
 8000902:	2b03      	cmp	r3, #3
 8000904:	d1f8      	bne.n	80008f8 <menu_main+0x40>
			if (selection == 0)
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d1f5      	bne.n	80008f8 <menu_main+0x40>
				return QR;
 800090c:	2301      	movs	r3, #1
		}
	}

	HAL_Delay(100);
}
 800090e:	4618      	mov	r0, r3
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000000 	.word	0x20000000
 800091c:	0800ad2c 	.word	0x0800ad2c
 8000920:	0800ad3c 	.word	0x0800ad3c

08000924 <menu_state>:

void menu_state(void) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
	uint8_t state = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	71fb      	strb	r3, [r7, #7]
	BSP_JOY_Init(JOY_MODE_GPIO);
 800092e:	2000      	movs	r0, #0
 8000930:	f001 f8a2 	bl	8001a78 <BSP_JOY_Init>
	while (1) {
		switch (state) {
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d008      	beq.n	800094c <menu_state+0x28>
 800093a:	2b02      	cmp	r3, #2
 800093c:	d00b      	beq.n	8000956 <menu_state+0x32>
 800093e:	2b00      	cmp	r3, #0
 8000940:	d10e      	bne.n	8000960 <menu_state+0x3c>
		case MAIN:
			state = menu_main();
 8000942:	f7ff ffb9 	bl	80008b8 <menu_main>
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
			break;
 800094a:	e019      	b.n	8000980 <menu_state+0x5c>
		case QR:
			state = menu_QR();
 800094c:	f7ff ff74 	bl	8000838 <menu_QR>
 8000950:	4603      	mov	r3, r0
 8000952:	71fb      	strb	r3, [r7, #7]
			break;
 8000954:	e014      	b.n	8000980 <menu_state+0x5c>
		case LOG:
			state = menu_log();
 8000956:	f7ff ff21 	bl	800079c <menu_log>
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
			break;
 800095e:	e00f      	b.n	8000980 <menu_state+0x5c>
		default:
			ssd1306_Fill(Black);
 8000960:	2000      	movs	r0, #0
 8000962:	f000 ff1b 	bl	800179c <ssd1306_Fill>
			ssd1306_SetCursor(2, 0);
 8000966:	2100      	movs	r1, #0
 8000968:	2002      	movs	r0, #2
 800096a:	f001 f86d 	bl	8001a48 <ssd1306_SetCursor>
			ssd1306_WriteString("ERROR", Font_M, White);
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <menu_state+0x60>)
 8000970:	2301      	movs	r3, #1
 8000972:	ca06      	ldmia	r2, {r1, r2}
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <menu_state+0x64>)
 8000976:	f001 f841 	bl	80019fc <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 800097a:	f000 ff31 	bl	80017e0 <ssd1306_UpdateScreen>
			break;
 800097e:	bf00      	nop
		switch (state) {
 8000980:	e7d8      	b.n	8000934 <menu_state+0x10>
 8000982:	bf00      	nop
 8000984:	20000000 	.word	0x20000000
 8000988:	0800ad40 	.word	0x0800ad40

0800098c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	; 0x30
 8000990:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a2:	4b92      	ldr	r3, [pc, #584]	; (8000bec <MX_GPIO_Init+0x260>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	4a91      	ldr	r2, [pc, #580]	; (8000bec <MX_GPIO_Init+0x260>)
 80009a8:	f043 0310 	orr.w	r3, r3, #16
 80009ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ae:	4b8f      	ldr	r3, [pc, #572]	; (8000bec <MX_GPIO_Init+0x260>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	f003 0310 	and.w	r3, r3, #16
 80009b6:	61bb      	str	r3, [r7, #24]
 80009b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4b8c      	ldr	r3, [pc, #560]	; (8000bec <MX_GPIO_Init+0x260>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	4a8b      	ldr	r2, [pc, #556]	; (8000bec <MX_GPIO_Init+0x260>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c6:	4b89      	ldr	r3, [pc, #548]	; (8000bec <MX_GPIO_Init+0x260>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d2:	4b86      	ldr	r3, [pc, #536]	; (8000bec <MX_GPIO_Init+0x260>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a85      	ldr	r2, [pc, #532]	; (8000bec <MX_GPIO_Init+0x260>)
 80009d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b83      	ldr	r3, [pc, #524]	; (8000bec <MX_GPIO_Init+0x260>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b80      	ldr	r3, [pc, #512]	; (8000bec <MX_GPIO_Init+0x260>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	4a7f      	ldr	r2, [pc, #508]	; (8000bec <MX_GPIO_Init+0x260>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f6:	4b7d      	ldr	r3, [pc, #500]	; (8000bec <MX_GPIO_Init+0x260>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b7a      	ldr	r3, [pc, #488]	; (8000bec <MX_GPIO_Init+0x260>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a79      	ldr	r2, [pc, #484]	; (8000bec <MX_GPIO_Init+0x260>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b77      	ldr	r3, [pc, #476]	; (8000bec <MX_GPIO_Init+0x260>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1a:	4b74      	ldr	r3, [pc, #464]	; (8000bec <MX_GPIO_Init+0x260>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	4a73      	ldr	r2, [pc, #460]	; (8000bec <MX_GPIO_Init+0x260>)
 8000a20:	f043 0308 	orr.w	r3, r3, #8
 8000a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a26:	4b71      	ldr	r3, [pc, #452]	; (8000bec <MX_GPIO_Init+0x260>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f240 1109 	movw	r1, #265	; 0x109
 8000a38:	486d      	ldr	r0, [pc, #436]	; (8000bf0 <MX_GPIO_Init+0x264>)
 8000a3a:	f001 fda9 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	210c      	movs	r1, #12
 8000a42:	486c      	ldr	r0, [pc, #432]	; (8000bf4 <MX_GPIO_Init+0x268>)
 8000a44:	f001 fda4 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a4e:	486a      	ldr	r0, [pc, #424]	; (8000bf8 <MX_GPIO_Init+0x26c>)
 8000a50:	f001 fd9e 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a5a:	4867      	ldr	r0, [pc, #412]	; (8000bf8 <MX_GPIO_Init+0x26c>)
 8000a5c:	f001 fd98 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2180      	movs	r1, #128	; 0x80
 8000a64:	4865      	ldr	r0, [pc, #404]	; (8000bfc <MX_GPIO_Init+0x270>)
 8000a66:	f001 fd93 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000a6a:	2308      	movs	r3, #8
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a76:	2302      	movs	r3, #2
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	485b      	ldr	r0, [pc, #364]	; (8000bf0 <MX_GPIO_Init+0x264>)
 8000a82:	f001 fbc5 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8000a86:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a8c:	4b5c      	ldr	r3, [pc, #368]	; (8000c00 <MX_GPIO_Init+0x274>)
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4857      	ldr	r0, [pc, #348]	; (8000bf8 <MX_GPIO_Init+0x26c>)
 8000a9c:	f001 fbb8 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 8000aa0:	2307      	movs	r3, #7
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4851      	ldr	r0, [pc, #324]	; (8000bf8 <MX_GPIO_Init+0x26c>)
 8000ab4:	f001 fbac 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000ab8:	2310      	movs	r3, #16
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000abc:	4b50      	ldr	r3, [pc, #320]	; (8000c00 <MX_GPIO_Init+0x274>)
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ace:	f001 fb9f 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin;
 8000ad2:	2320      	movs	r3, #32
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ada:	2302      	movs	r3, #2
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_DOWN_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae8:	f001 fb92 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000aec:	2304      	movs	r3, #4
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	483c      	ldr	r0, [pc, #240]	; (8000bf4 <MX_GPIO_Init+0x268>)
 8000b04:	f001 fb84 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000b08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4833      	ldr	r0, [pc, #204]	; (8000bf0 <MX_GPIO_Init+0x264>)
 8000b22:	f001 fb75 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8000b26:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	482e      	ldr	r0, [pc, #184]	; (8000bf8 <MX_GPIO_Init+0x26c>)
 8000b40:	f001 fb66 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8000b44:	2305      	movs	r3, #5
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b48:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <MX_GPIO_Init+0x274>)
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	4829      	ldr	r0, [pc, #164]	; (8000bfc <MX_GPIO_Init+0x270>)
 8000b58:	f001 fb5a 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	4822      	ldr	r0, [pc, #136]	; (8000bfc <MX_GPIO_Init+0x270>)
 8000b74:	f001 fb4c 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8000b78:	2308      	movs	r3, #8
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4819      	ldr	r0, [pc, #100]	; (8000bf4 <MX_GPIO_Init+0x268>)
 8000b90:	f001 fb3e 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <MX_GPIO_Init+0x274>)
 8000b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4812      	ldr	r0, [pc, #72]	; (8000bf4 <MX_GPIO_Init+0x268>)
 8000baa:	f001 fb31 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480a      	ldr	r0, [pc, #40]	; (8000bf0 <MX_GPIO_Init+0x264>)
 8000bc6:	f001 fb23 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_GPIO_Init+0x274>)
 8000bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_GPIO_Init+0x264>)
 8000bde:	f001 fb17 	bl	8002210 <HAL_GPIO_Init>

}
 8000be2:	bf00      	nop
 8000be4:	3730      	adds	r7, #48	; 0x30
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	48001000 	.word	0x48001000
 8000bf4:	48000400 	.word	0x48000400
 8000bf8:	48000800 	.word	0x48000800
 8000bfc:	48000c00 	.word	0x48000c00
 8000c00:	10120000 	.word	0x10120000

08000c04 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c0a:	4a1c      	ldr	r2, [pc, #112]	; (8000c7c <MX_I2C1_Init+0x78>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c10:	4a1b      	ldr	r2, [pc, #108]	; (8000c80 <MX_I2C1_Init+0x7c>)
 8000c12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c14:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c20:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c3e:	480e      	ldr	r0, [pc, #56]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c40:	f003 f8de 	bl	8003e00 <HAL_I2C_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c4a:	f000 fa73 	bl	8001134 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4809      	ldr	r0, [pc, #36]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c52:	f003 fc41 	bl	80044d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c5c:	f000 fa6a 	bl	8001134 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c60:	2100      	movs	r1, #0
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c64:	f003 fc83 	bl	800456e <HAL_I2CEx_ConfigDigitalFilter>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c6e:	f000 fa61 	bl	8001134 <Error_Handler>
  }

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200004e8 	.word	0x200004e8
 8000c7c:	40005400 	.word	0x40005400
 8000c80:	00404c74 	.word	0x00404c74

08000c84 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000c8a:	4a1c      	ldr	r2, [pc, #112]	; (8000cfc <MX_I2C2_Init+0x78>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00404C74;
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000c90:	4a1b      	ldr	r2, [pc, #108]	; (8000d00 <MX_I2C2_Init+0x7c>)
 8000c92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cbe:	480e      	ldr	r0, [pc, #56]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000cc0:	f003 f89e 	bl	8003e00 <HAL_I2C_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000cca:	f000 fa33 	bl	8001134 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4809      	ldr	r0, [pc, #36]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000cd2:	f003 fc01 	bl	80044d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000cdc:	f000 fa2a 	bl	8001134 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000ce4:	f003 fc43 	bl	800456e <HAL_I2CEx_ConfigDigitalFilter>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000cee:	f000 fa21 	bl	8001134 <Error_Handler>
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000534 	.word	0x20000534
 8000cfc:	40005800 	.word	0x40005800
 8000d00:	00404c74 	.word	0x00404c74

08000d04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08c      	sub	sp, #48	; 0x30
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a2e      	ldr	r2, [pc, #184]	; (8000ddc <HAL_I2C_MspInit+0xd8>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d128      	bne.n	8000d78 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	4b2e      	ldr	r3, [pc, #184]	; (8000de0 <HAL_I2C_MspInit+0xdc>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	4a2d      	ldr	r2, [pc, #180]	; (8000de0 <HAL_I2C_MspInit+0xdc>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d32:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <HAL_I2C_MspInit+0xdc>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	61bb      	str	r3, [r7, #24]
 8000d3c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000d3e:	23c0      	movs	r3, #192	; 0xc0
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d42:	2312      	movs	r3, #18
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d4e:	2304      	movs	r3, #4
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	4822      	ldr	r0, [pc, #136]	; (8000de4 <HAL_I2C_MspInit+0xe0>)
 8000d5a:	f001 fa59 	bl	8002210 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <HAL_I2C_MspInit+0xdc>)
 8000d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d62:	4a1f      	ldr	r2, [pc, #124]	; (8000de0 <HAL_I2C_MspInit+0xdc>)
 8000d64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d68:	6593      	str	r3, [r2, #88]	; 0x58
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <HAL_I2C_MspInit+0xdc>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000d76:	e02d      	b.n	8000dd4 <HAL_I2C_MspInit+0xd0>
  else if(i2cHandle->Instance==I2C2)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a1a      	ldr	r2, [pc, #104]	; (8000de8 <HAL_I2C_MspInit+0xe4>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d128      	bne.n	8000dd4 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <HAL_I2C_MspInit+0xdc>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	4a16      	ldr	r2, [pc, #88]	; (8000de0 <HAL_I2C_MspInit+0xdc>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <HAL_I2C_MspInit+0xdc>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8000d9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da0:	2312      	movs	r3, #18
 8000da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dac:	2304      	movs	r3, #4
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	480b      	ldr	r0, [pc, #44]	; (8000de4 <HAL_I2C_MspInit+0xe0>)
 8000db8:	f001 fa2a 	bl	8002210 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_I2C_MspInit+0xdc>)
 8000dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <HAL_I2C_MspInit+0xdc>)
 8000dc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dc6:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_I2C_MspInit+0xdc>)
 8000dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3730      	adds	r7, #48	; 0x30
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40005400 	.word	0x40005400
 8000de0:	40021000 	.word	0x40021000
 8000de4:	48000400 	.word	0x48000400
 8000de8:	40005800 	.word	0x40005800

08000dec <MX_LCD_Init>:

LCD_HandleTypeDef hlcd;

/* LCD init function */
void MX_LCD_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0

  hlcd.Instance = LCD;
 8000df0:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <MX_LCD_Init+0x68>)
 8000df2:	4a19      	ldr	r2, [pc, #100]	; (8000e58 <MX_LCD_Init+0x6c>)
 8000df4:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_LCD_Init+0x68>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_LCD_Init+0x68>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_LCD_Init+0x68>)
 8000e04:	220c      	movs	r2, #12
 8000e06:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_LCD_Init+0x68>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_LCD_Init+0x68>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_LCD_Init+0x68>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_LCD_Init+0x68>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_LCD_Init+0x68>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <MX_LCD_Init+0x68>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_LCD_Init+0x68>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <MX_LCD_Init+0x68>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_LCD_Init+0x68>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_LCD_Init+0x68>)
 8000e40:	f003 fbe2 	bl	8004608 <HAL_LCD_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_LCD_Init+0x62>
  {
    Error_Handler();
 8000e4a:	f000 f973 	bl	8001134 <Error_Handler>
  }

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000580 	.word	0x20000580
 8000e58:	40002400 	.word	0x40002400

08000e5c <HAL_LCD_MspInit>:

void HAL_LCD_MspInit(LCD_HandleTypeDef* lcdHandle)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08c      	sub	sp, #48	; 0x30
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(lcdHandle->Instance==LCD)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a44      	ldr	r2, [pc, #272]	; (8000f8c <HAL_LCD_MspInit+0x130>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	f040 8081 	bne.w	8000f82 <HAL_LCD_MspInit+0x126>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* LCD clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8000e80:	4b43      	ldr	r3, [pc, #268]	; (8000f90 <HAL_LCD_MspInit+0x134>)
 8000e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e84:	4a42      	ldr	r2, [pc, #264]	; (8000f90 <HAL_LCD_MspInit+0x134>)
 8000e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8000e8c:	4b40      	ldr	r3, [pc, #256]	; (8000f90 <HAL_LCD_MspInit+0x134>)
 8000e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e94:	61bb      	str	r3, [r7, #24]
 8000e96:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e98:	4b3d      	ldr	r3, [pc, #244]	; (8000f90 <HAL_LCD_MspInit+0x134>)
 8000e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9c:	4a3c      	ldr	r2, [pc, #240]	; (8000f90 <HAL_LCD_MspInit+0x134>)
 8000e9e:	f043 0304 	orr.w	r3, r3, #4
 8000ea2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea4:	4b3a      	ldr	r3, [pc, #232]	; (8000f90 <HAL_LCD_MspInit+0x134>)
 8000ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea8:	f003 0304 	and.w	r3, r3, #4
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb0:	4b37      	ldr	r3, [pc, #220]	; (8000f90 <HAL_LCD_MspInit+0x134>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb4:	4a36      	ldr	r2, [pc, #216]	; (8000f90 <HAL_LCD_MspInit+0x134>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebc:	4b34      	ldr	r3, [pc, #208]	; (8000f90 <HAL_LCD_MspInit+0x134>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec8:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <HAL_LCD_MspInit+0x134>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ecc:	4a30      	ldr	r2, [pc, #192]	; (8000f90 <HAL_LCD_MspInit+0x134>)
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed4:	4b2e      	ldr	r3, [pc, #184]	; (8000f90 <HAL_LCD_MspInit+0x134>)
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee0:	4b2b      	ldr	r3, [pc, #172]	; (8000f90 <HAL_LCD_MspInit+0x134>)
 8000ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee4:	4a2a      	ldr	r2, [pc, #168]	; (8000f90 <HAL_LCD_MspInit+0x134>)
 8000ee6:	f043 0308 	orr.w	r3, r3, #8
 8000eea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eec:	4b28      	ldr	r3, [pc, #160]	; (8000f90 <HAL_LCD_MspInit+0x134>)
 8000eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef0:	f003 0308 	and.w	r3, r3, #8
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3 
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 8000ef8:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000efc:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f0a:	230b      	movs	r3, #11
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	4619      	mov	r1, r3
 8000f14:	481f      	ldr	r0, [pc, #124]	; (8000f94 <HAL_LCD_MspInit+0x138>)
 8000f16:	f001 f97b 	bl	8002210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 8000f1a:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000f1e:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f2c:	230b      	movs	r3, #11
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	4619      	mov	r1, r3
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3a:	f001 f969 	bl	8002210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 8000f3e:	f24f 2333 	movw	r3, #62003	; 0xf233
 8000f42:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin 
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f50:	230b      	movs	r3, #11
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	4619      	mov	r1, r3
 8000f5a:	480f      	ldr	r0, [pc, #60]	; (8000f98 <HAL_LCD_MspInit+0x13c>)
 8000f5c:	f001 f958 	bl	8002210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8000f60:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000f64:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f72:	230b      	movs	r3, #11
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4807      	ldr	r0, [pc, #28]	; (8000f9c <HAL_LCD_MspInit+0x140>)
 8000f7e:	f001 f947 	bl	8002210 <HAL_GPIO_Init>

  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }
}
 8000f82:	bf00      	nop
 8000f84:	3730      	adds	r7, #48	; 0x30
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40002400 	.word	0x40002400
 8000f90:	40021000 	.word	0x40021000
 8000f94:	48000800 	.word	0x48000800
 8000f98:	48000400 	.word	0x48000400
 8000f9c:	48000c00 	.word	0x48000c00

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000fa4:	f000 ff88 	bl	8001eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa8:	f000 f81a 	bl	8000fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fac:	f7ff fcee 	bl	800098c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fb0:	f7ff fe28 	bl	8000c04 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000fb4:	f7ff fe66 	bl	8000c84 <MX_I2C2_Init>
  MX_LCD_Init();
 8000fb8:	f7ff ff18 	bl	8000dec <MX_LCD_Init>
  MX_QUADSPI_Init();
 8000fbc:	f000 f8c2 	bl	8001144 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000fc0:	f000 f9a2 	bl	8001308 <MX_SAI1_Init>
  MX_SPI2_Init();
 8000fc4:	f000 fac0 	bl	8001548 <MX_SPI2_Init>
  MX_USB_HOST_Init();
 8000fc8:	f009 fa80 	bl	800a4cc <MX_USB_HOST_Init>
  MX_UART4_Init();
 8000fcc:	f000 fed8 	bl	8001d80 <MX_UART4_Init>
  MX_RTC_Init();
 8000fd0:	f000 f922 	bl	8001218 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
#ifdef RUN_TEST_PROGRAM
  //Test_program();
  test_disp();
 8000fd4:	f7ff fb5c 	bl	8000690 <test_disp>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000fd8:	f009 fa9e 	bl	800a518 <MX_USB_HOST_Process>
 8000fdc:	e7fc      	b.n	8000fd8 <main+0x38>
	...

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0b8      	sub	sp, #224	; 0xe0
 8000fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fea:	2244      	movs	r2, #68	; 0x44
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f009 fdb2 	bl	800ab58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001004:	463b      	mov	r3, r7
 8001006:	2288      	movs	r2, #136	; 0x88
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f009 fda4 	bl	800ab58 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001010:	f003 fbdc 	bl	80047cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001014:	4b45      	ldr	r3, [pc, #276]	; (800112c <SystemClock_Config+0x14c>)
 8001016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800101a:	4a44      	ldr	r2, [pc, #272]	; (800112c <SystemClock_Config+0x14c>)
 800101c:	f023 0318 	bic.w	r3, r3, #24
 8001020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001024:	231c      	movs	r3, #28
 8001026:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800102a:	2301      	movs	r3, #1
 800102c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001030:	2301      	movs	r3, #1
 8001032:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001036:	2301      	movs	r3, #1
 8001038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001042:	2360      	movs	r3, #96	; 0x60
 8001044:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001048:	2302      	movs	r3, #2
 800104a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800104e:	2301      	movs	r3, #1
 8001050:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001054:	2301      	movs	r3, #1
 8001056:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 800105a:	2314      	movs	r3, #20
 800105c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001060:	2307      	movs	r3, #7
 8001062:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001066:	2302      	movs	r3, #2
 8001068:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800106c:	2302      	movs	r3, #2
 800106e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001072:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001076:	4618      	mov	r0, r3
 8001078:	f003 fcf4 	bl	8004a64 <HAL_RCC_OscConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001082:	f000 f857 	bl	8001134 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001086:	230f      	movs	r3, #15
 8001088:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108c:	2303      	movs	r3, #3
 800108e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001092:	2380      	movs	r3, #128	; 0x80
 8001094:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010a4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80010a8:	2101      	movs	r1, #1
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 f88a 	bl	80051c4 <HAL_RCC_ClockConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0xda>
  {
    Error_Handler();
 80010b6:	f000 f83d 	bl	8001134 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <SystemClock_Config+0x150>)
 80010bc:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80010be:	2300      	movs	r3, #0
 80010c0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80010d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010da:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80010dc:	2301      	movs	r3, #1
 80010de:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80010e4:	2318      	movs	r3, #24
 80010e6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010e8:	2307      	movs	r3, #7
 80010ea:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 80010f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010f8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010fa:	463b      	mov	r3, r7
 80010fc:	4618      	mov	r0, r3
 80010fe:	f004 fa65 	bl	80055cc <HAL_RCCEx_PeriphCLKConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8001108:	f000 f814 	bl	8001134 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800110c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001110:	f003 fb7a 	bl	8004808 <HAL_PWREx_ControlVoltageScaling>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x13e>
  {
    Error_Handler();
 800111a:	f000 f80b 	bl	8001134 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800111e:	f005 f9b3 	bl	8006488 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001122:	bf00      	nop
 8001124:	37e0      	adds	r7, #224	; 0xe0
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000
 8001130:	000228c8 	.word	0x000228c8

08001134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_QUADSPI_Init+0x44>)
 800114a:	4a10      	ldr	r2, [pc, #64]	; (800118c <MX_QUADSPI_Init+0x48>)
 800114c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_QUADSPI_Init+0x44>)
 8001150:	22ff      	movs	r2, #255	; 0xff
 8001152:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_QUADSPI_Init+0x44>)
 8001156:	2201      	movs	r2, #1
 8001158:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <MX_QUADSPI_Init+0x44>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_QUADSPI_Init+0x44>)
 8001162:	2201      	movs	r2, #1
 8001164:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <MX_QUADSPI_Init+0x44>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_QUADSPI_Init+0x44>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_QUADSPI_Init+0x44>)
 8001174:	f003 fbae 	bl	80048d4 <HAL_QSPI_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800117e:	f7ff ffd9 	bl	8001134 <Error_Handler>
  }

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200005bc 	.word	0x200005bc
 800118c:	a0001000 	.word	0xa0001000

08001190 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a17      	ldr	r2, [pc, #92]	; (800120c <HAL_QSPI_MspInit+0x7c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d128      	bne.n	8001204 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_QSPI_MspInit+0x80>)
 80011b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011b6:	4a16      	ldr	r2, [pc, #88]	; (8001210 <HAL_QSPI_MspInit+0x80>)
 80011b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011bc:	6513      	str	r3, [r2, #80]	; 0x50
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <HAL_QSPI_MspInit+0x80>)
 80011c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_QSPI_MspInit+0x80>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	4a10      	ldr	r2, [pc, #64]	; (8001210 <HAL_QSPI_MspInit+0x80>)
 80011d0:	f043 0310 	orr.w	r3, r3, #16
 80011d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_QSPI_MspInit+0x80>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	f003 0310 	and.w	r3, r3, #16
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 80011e2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80011e6:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80011f4:	230a      	movs	r3, #10
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <HAL_QSPI_MspInit+0x84>)
 8001200:	f001 f806 	bl	8002210 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	; 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	a0001000 	.word	0xa0001000
 8001210:	40021000 	.word	0x40021000
 8001214:	48001000 	.word	0x48001000

08001218 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800122c:	2300      	movs	r3, #0
 800122e:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001230:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <MX_RTC_Init+0xb0>)
 8001232:	4a26      	ldr	r2, [pc, #152]	; (80012cc <MX_RTC_Init+0xb4>)
 8001234:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001236:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <MX_RTC_Init+0xb0>)
 8001238:	2200      	movs	r2, #0
 800123a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800123c:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <MX_RTC_Init+0xb0>)
 800123e:	227f      	movs	r2, #127	; 0x7f
 8001240:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001242:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <MX_RTC_Init+0xb0>)
 8001244:	22ff      	movs	r2, #255	; 0xff
 8001246:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <MX_RTC_Init+0xb0>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800124e:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <MX_RTC_Init+0xb0>)
 8001250:	2200      	movs	r2, #0
 8001252:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001254:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <MX_RTC_Init+0xb0>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <MX_RTC_Init+0xb0>)
 800125c:	2200      	movs	r2, #0
 800125e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001260:	4819      	ldr	r0, [pc, #100]	; (80012c8 <MX_RTC_Init+0xb0>)
 8001262:	f005 fbc3 	bl	80069ec <HAL_RTC_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800126c:	f7ff ff62 	bl	8001134 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8001270:	2300      	movs	r3, #0
 8001272:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001274:	2300      	movs	r3, #0
 8001276:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001278:	2300      	movs	r3, #0
 800127a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2201      	movs	r2, #1
 8001288:	4619      	mov	r1, r3
 800128a:	480f      	ldr	r0, [pc, #60]	; (80012c8 <MX_RTC_Init+0xb0>)
 800128c:	f005 fc2c 	bl	8006ae8 <HAL_RTC_SetTime>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001296:	f7ff ff4d 	bl	8001134 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800129a:	2301      	movs	r3, #1
 800129c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800129e:	2301      	movs	r3, #1
 80012a0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80012a2:	2301      	movs	r3, #1
 80012a4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80012aa:	463b      	mov	r3, r7
 80012ac:	2201      	movs	r2, #1
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_RTC_Init+0xb0>)
 80012b2:	f005 fcb6 	bl	8006c22 <HAL_RTC_SetDate>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80012bc:	f7ff ff3a 	bl	8001134 <Error_Handler>
  }

}
 80012c0:	bf00      	nop
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000600 	.word	0x20000600
 80012cc:	40002800 	.word	0x40002800

080012d0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a08      	ldr	r2, [pc, #32]	; (8001300 <HAL_RTC_MspInit+0x30>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d107      	bne.n	80012f2 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_RTC_MspInit+0x34>)
 80012e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012e8:	4a06      	ldr	r2, [pc, #24]	; (8001304 <HAL_RTC_MspInit+0x34>)
 80012ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40002800 	.word	0x40002800
 8001304:	40021000 	.word	0x40021000

08001308 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0

  hsai_BlockA1.Instance = SAI1_Block_A;
 800130c:	4b4d      	ldr	r3, [pc, #308]	; (8001444 <MX_SAI1_Init+0x13c>)
 800130e:	4a4e      	ldr	r2, [pc, #312]	; (8001448 <MX_SAI1_Init+0x140>)
 8001310:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001312:	4b4c      	ldr	r3, [pc, #304]	; (8001444 <MX_SAI1_Init+0x13c>)
 8001314:	2200      	movs	r2, #0
 8001316:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001318:	4b4a      	ldr	r3, [pc, #296]	; (8001444 <MX_SAI1_Init+0x13c>)
 800131a:	2200      	movs	r2, #0
 800131c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800131e:	4b49      	ldr	r3, [pc, #292]	; (8001444 <MX_SAI1_Init+0x13c>)
 8001320:	2240      	movs	r2, #64	; 0x40
 8001322:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001324:	4b47      	ldr	r3, [pc, #284]	; (8001444 <MX_SAI1_Init+0x13c>)
 8001326:	2200      	movs	r2, #0
 8001328:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800132a:	4b46      	ldr	r3, [pc, #280]	; (8001444 <MX_SAI1_Init+0x13c>)
 800132c:	2200      	movs	r2, #0
 800132e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001330:	4b44      	ldr	r3, [pc, #272]	; (8001444 <MX_SAI1_Init+0x13c>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001336:	4b43      	ldr	r3, [pc, #268]	; (8001444 <MX_SAI1_Init+0x13c>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800133c:	4b41      	ldr	r3, [pc, #260]	; (8001444 <MX_SAI1_Init+0x13c>)
 800133e:	2200      	movs	r2, #0
 8001340:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001342:	4b40      	ldr	r3, [pc, #256]	; (8001444 <MX_SAI1_Init+0x13c>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001348:	4b3e      	ldr	r3, [pc, #248]	; (8001444 <MX_SAI1_Init+0x13c>)
 800134a:	4a40      	ldr	r2, [pc, #256]	; (800144c <MX_SAI1_Init+0x144>)
 800134c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800134e:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <MX_SAI1_Init+0x13c>)
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001354:	4b3b      	ldr	r3, [pc, #236]	; (8001444 <MX_SAI1_Init+0x13c>)
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800135a:	4b3a      	ldr	r3, [pc, #232]	; (8001444 <MX_SAI1_Init+0x13c>)
 800135c:	2200      	movs	r2, #0
 800135e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001360:	4b38      	ldr	r3, [pc, #224]	; (8001444 <MX_SAI1_Init+0x13c>)
 8001362:	2200      	movs	r2, #0
 8001364:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001366:	4b37      	ldr	r3, [pc, #220]	; (8001444 <MX_SAI1_Init+0x13c>)
 8001368:	2208      	movs	r2, #8
 800136a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800136c:	4b35      	ldr	r3, [pc, #212]	; (8001444 <MX_SAI1_Init+0x13c>)
 800136e:	2201      	movs	r2, #1
 8001370:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001372:	4b34      	ldr	r3, [pc, #208]	; (8001444 <MX_SAI1_Init+0x13c>)
 8001374:	2200      	movs	r2, #0
 8001376:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001378:	4b32      	ldr	r3, [pc, #200]	; (8001444 <MX_SAI1_Init+0x13c>)
 800137a:	2200      	movs	r2, #0
 800137c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800137e:	4b31      	ldr	r3, [pc, #196]	; (8001444 <MX_SAI1_Init+0x13c>)
 8001380:	2200      	movs	r2, #0
 8001382:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001384:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <MX_SAI1_Init+0x13c>)
 8001386:	2200      	movs	r2, #0
 8001388:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800138a:	4b2e      	ldr	r3, [pc, #184]	; (8001444 <MX_SAI1_Init+0x13c>)
 800138c:	2200      	movs	r2, #0
 800138e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001390:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <MX_SAI1_Init+0x13c>)
 8001392:	2201      	movs	r2, #1
 8001394:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001396:	4b2b      	ldr	r3, [pc, #172]	; (8001444 <MX_SAI1_Init+0x13c>)
 8001398:	2200      	movs	r2, #0
 800139a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800139c:	4829      	ldr	r0, [pc, #164]	; (8001444 <MX_SAI1_Init+0x13c>)
 800139e:	f005 fd7f 	bl	8006ea0 <HAL_SAI_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 80013a8:	f7ff fec4 	bl	8001134 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 80013ac:	4b28      	ldr	r3, [pc, #160]	; (8001450 <MX_SAI1_Init+0x148>)
 80013ae:	4a29      	ldr	r2, [pc, #164]	; (8001454 <MX_SAI1_Init+0x14c>)
 80013b0:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 80013b2:	4b27      	ldr	r3, [pc, #156]	; (8001450 <MX_SAI1_Init+0x148>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80013b8:	4b25      	ldr	r3, [pc, #148]	; (8001450 <MX_SAI1_Init+0x148>)
 80013ba:	2203      	movs	r2, #3
 80013bc:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 80013be:	4b24      	ldr	r3, [pc, #144]	; (8001450 <MX_SAI1_Init+0x148>)
 80013c0:	2240      	movs	r2, #64	; 0x40
 80013c2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80013c4:	4b22      	ldr	r3, [pc, #136]	; (8001450 <MX_SAI1_Init+0x148>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80013ca:	4b21      	ldr	r3, [pc, #132]	; (8001450 <MX_SAI1_Init+0x148>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80013d0:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <MX_SAI1_Init+0x148>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80013d6:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <MX_SAI1_Init+0x148>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80013dc:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <MX_SAI1_Init+0x148>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <MX_SAI1_Init+0x148>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <MX_SAI1_Init+0x148>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <MX_SAI1_Init+0x148>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80013f4:	4b16      	ldr	r3, [pc, #88]	; (8001450 <MX_SAI1_Init+0x148>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <MX_SAI1_Init+0x148>)
 80013fc:	2208      	movs	r2, #8
 80013fe:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <MX_SAI1_Init+0x148>)
 8001402:	2201      	movs	r2, #1
 8001404:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <MX_SAI1_Init+0x148>)
 8001408:	2200      	movs	r2, #0
 800140a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <MX_SAI1_Init+0x148>)
 800140e:	2200      	movs	r2, #0
 8001410:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <MX_SAI1_Init+0x148>)
 8001414:	2200      	movs	r2, #0
 8001416:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <MX_SAI1_Init+0x148>)
 800141a:	2200      	movs	r2, #0
 800141c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_SAI1_Init+0x148>)
 8001420:	2200      	movs	r2, #0
 8001422:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <MX_SAI1_Init+0x148>)
 8001426:	2201      	movs	r2, #1
 8001428:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_SAI1_Init+0x148>)
 800142c:	2200      	movs	r2, #0
 800142e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001430:	4807      	ldr	r0, [pc, #28]	; (8001450 <MX_SAI1_Init+0x148>)
 8001432:	f005 fd35 	bl	8006ea0 <HAL_SAI_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 800143c:	f7ff fe7a 	bl	8001134 <Error_Handler>
  }

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200006a8 	.word	0x200006a8
 8001448:	40015404 	.word	0x40015404
 800144c:	0002ee00 	.word	0x0002ee00
 8001450:	20000624 	.word	0x20000624
 8001454:	40015424 	.word	0x40015424

08001458 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a33      	ldr	r2, [pc, #204]	; (8001534 <HAL_SAI_MspInit+0xdc>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d135      	bne.n	80014d6 <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 800146a:	4b33      	ldr	r3, [pc, #204]	; (8001538 <HAL_SAI_MspInit+0xe0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10b      	bne.n	800148a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001472:	4b32      	ldr	r3, [pc, #200]	; (800153c <HAL_SAI_MspInit+0xe4>)
 8001474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001476:	4a31      	ldr	r2, [pc, #196]	; (800153c <HAL_SAI_MspInit+0xe4>)
 8001478:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800147c:	6613      	str	r3, [r2, #96]	; 0x60
 800147e:	4b2f      	ldr	r3, [pc, #188]	; (800153c <HAL_SAI_MspInit+0xe4>)
 8001480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800148a:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <HAL_SAI_MspInit+0xe0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	3301      	adds	r3, #1
 8001490:	4a29      	ldr	r2, [pc, #164]	; (8001538 <HAL_SAI_MspInit+0xe0>)
 8001492:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B 
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 8001494:	2374      	movs	r3, #116	; 0x74
 8001496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80014a4:	230d      	movs	r3, #13
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4619      	mov	r1, r3
 80014ae:	4824      	ldr	r0, [pc, #144]	; (8001540 <HAL_SAI_MspInit+0xe8>)
 80014b0:	f000 feae 	bl	8002210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 80014b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80014c6:	230d      	movs	r3, #13
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	481b      	ldr	r0, [pc, #108]	; (8001540 <HAL_SAI_MspInit+0xe8>)
 80014d2:	f000 fe9d 	bl	8002210 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a1a      	ldr	r2, [pc, #104]	; (8001544 <HAL_SAI_MspInit+0xec>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d124      	bne.n	800152a <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <HAL_SAI_MspInit+0xe0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d10b      	bne.n	8001500 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <HAL_SAI_MspInit+0xe4>)
 80014ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ec:	4a13      	ldr	r2, [pc, #76]	; (800153c <HAL_SAI_MspInit+0xe4>)
 80014ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014f2:	6613      	str	r3, [r2, #96]	; 0x60
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <HAL_SAI_MspInit+0xe4>)
 80014f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001500:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_SAI_MspInit+0xe0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	3301      	adds	r3, #1
 8001506:	4a0c      	ldr	r2, [pc, #48]	; (8001538 <HAL_SAI_MspInit+0xe0>)
 8001508:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE7     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800151a:	230d      	movs	r3, #13
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	4806      	ldr	r0, [pc, #24]	; (8001540 <HAL_SAI_MspInit+0xe8>)
 8001526:	f000 fe73 	bl	8002210 <HAL_GPIO_Init>

    }
}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	; 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40015404 	.word	0x40015404
 8001538:	200000c8 	.word	0x200000c8
 800153c:	40021000 	.word	0x40021000
 8001540:	48001000 	.word	0x48001000
 8001544:	40015424 	.word	0x40015424

08001548 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <MX_SPI2_Init+0x74>)
 800154e:	4a1c      	ldr	r2, [pc, #112]	; (80015c0 <MX_SPI2_Init+0x78>)
 8001550:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <MX_SPI2_Init+0x74>)
 8001554:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001558:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <MX_SPI2_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <MX_SPI2_Init+0x74>)
 8001562:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001566:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <MX_SPI2_Init+0x74>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <MX_SPI2_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_SPI2_Init+0x74>)
 8001576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800157a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <MX_SPI2_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_SPI2_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_SPI2_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <MX_SPI2_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_SPI2_Init+0x74>)
 8001596:	2207      	movs	r2, #7
 8001598:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <MX_SPI2_Init+0x74>)
 800159c:	2200      	movs	r2, #0
 800159e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_SPI2_Init+0x74>)
 80015a2:	2208      	movs	r2, #8
 80015a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_SPI2_Init+0x74>)
 80015a8:	f005 fe14 	bl	80071d4 <HAL_SPI_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80015b2:	f7ff fdbf 	bl	8001134 <Error_Handler>
  }

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	2000072c 	.word	0x2000072c
 80015c0:	40003800 	.word	0x40003800

080015c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a17      	ldr	r2, [pc, #92]	; (8001640 <HAL_SPI_MspInit+0x7c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d127      	bne.n	8001636 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015e6:	4b17      	ldr	r3, [pc, #92]	; (8001644 <HAL_SPI_MspInit+0x80>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	4a16      	ldr	r2, [pc, #88]	; (8001644 <HAL_SPI_MspInit+0x80>)
 80015ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f0:	6593      	str	r3, [r2, #88]	; 0x58
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <HAL_SPI_MspInit+0x80>)
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_SPI_MspInit+0x80>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	4a10      	ldr	r2, [pc, #64]	; (8001644 <HAL_SPI_MspInit+0x80>)
 8001604:	f043 0308 	orr.w	r3, r3, #8
 8001608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <HAL_SPI_MspInit+0x80>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8001616:	231a      	movs	r3, #26
 8001618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001622:	2303      	movs	r3, #3
 8001624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001626:	2305      	movs	r3, #5
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	4805      	ldr	r0, [pc, #20]	; (8001648 <HAL_SPI_MspInit+0x84>)
 8001632:	f000 fded 	bl	8002210 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40003800 	.word	0x40003800
 8001644:	40021000 	.word	0x40021000
 8001648:	48000c00 	.word	0x48000c00

0800164c <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af04      	add	r7, sp, #16
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	2301      	movs	r3, #1
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	1dfb      	adds	r3, r7, #7
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	2301      	movs	r3, #1
 8001676:	2200      	movs	r2, #0
 8001678:	2178      	movs	r1, #120	; 0x78
 800167a:	4803      	ldr	r0, [pc, #12]	; (8001688 <ssd1306_WriteCommand+0x2c>)
 800167c:	f002 fc50 	bl	8003f20 <HAL_I2C_Mem_Write>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200004e8 	.word	0x200004e8

0800168c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af04      	add	r7, sp, #16
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	b29b      	uxth	r3, r3
 800169a:	f04f 32ff 	mov.w	r2, #4294967295
 800169e:	9202      	str	r2, [sp, #8]
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2301      	movs	r3, #1
 80016a8:	2240      	movs	r2, #64	; 0x40
 80016aa:	2178      	movs	r1, #120	; 0x78
 80016ac:	4803      	ldr	r0, [pc, #12]	; (80016bc <ssd1306_WriteData+0x30>)
 80016ae:	f002 fc37 	bl	8003f20 <HAL_I2C_Mem_Write>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200004e8 	.word	0x200004e8

080016c0 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 80016c4:	f7ff ffc2 	bl	800164c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80016c8:	2064      	movs	r0, #100	; 0x64
 80016ca:	f000 fc6d 	bl	8001fa8 <HAL_Delay>

    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 80016ce:	20ae      	movs	r0, #174	; 0xae
 80016d0:	f7ff ffc4 	bl	800165c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80016d4:	2020      	movs	r0, #32
 80016d6:	f7ff ffc1 	bl	800165c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80016da:	2000      	movs	r0, #0
 80016dc:	f7ff ffbe 	bl	800165c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80016e0:	20b0      	movs	r0, #176	; 0xb0
 80016e2:	f7ff ffbb 	bl	800165c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80016e6:	20c8      	movs	r0, #200	; 0xc8
 80016e8:	f7ff ffb8 	bl	800165c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff ffb5 	bl	800165c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80016f2:	2010      	movs	r0, #16
 80016f4:	f7ff ffb2 	bl	800165c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80016f8:	2040      	movs	r0, #64	; 0x40
 80016fa:	f7ff ffaf 	bl	800165c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 80016fe:	2081      	movs	r0, #129	; 0x81
 8001700:	f7ff ffac 	bl	800165c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8001704:	20ff      	movs	r0, #255	; 0xff
 8001706:	f7ff ffa9 	bl	800165c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800170a:	20a1      	movs	r0, #161	; 0xa1
 800170c:	f7ff ffa6 	bl	800165c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001710:	20a6      	movs	r0, #166	; 0xa6
 8001712:	f7ff ffa3 	bl	800165c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001716:	20a8      	movs	r0, #168	; 0xa8
 8001718:	f7ff ffa0 	bl	800165c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800171c:	203f      	movs	r0, #63	; 0x3f
 800171e:	f7ff ff9d 	bl	800165c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001722:	20a4      	movs	r0, #164	; 0xa4
 8001724:	f7ff ff9a 	bl	800165c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001728:	20d3      	movs	r0, #211	; 0xd3
 800172a:	f7ff ff97 	bl	800165c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800172e:	2000      	movs	r0, #0
 8001730:	f7ff ff94 	bl	800165c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001734:	20d5      	movs	r0, #213	; 0xd5
 8001736:	f7ff ff91 	bl	800165c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800173a:	20f0      	movs	r0, #240	; 0xf0
 800173c:	f7ff ff8e 	bl	800165c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001740:	20d9      	movs	r0, #217	; 0xd9
 8001742:	f7ff ff8b 	bl	800165c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001746:	2022      	movs	r0, #34	; 0x22
 8001748:	f7ff ff88 	bl	800165c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800174c:	20da      	movs	r0, #218	; 0xda
 800174e:	f7ff ff85 	bl	800165c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001752:	2012      	movs	r0, #18
 8001754:	f7ff ff82 	bl	800165c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001758:	20db      	movs	r0, #219	; 0xdb
 800175a:	f7ff ff7f 	bl	800165c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800175e:	2020      	movs	r0, #32
 8001760:	f7ff ff7c 	bl	800165c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001764:	208d      	movs	r0, #141	; 0x8d
 8001766:	f7ff ff79 	bl	800165c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800176a:	2014      	movs	r0, #20
 800176c:	f7ff ff76 	bl	800165c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001770:	20af      	movs	r0, #175	; 0xaf
 8001772:	f7ff ff73 	bl	800165c <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8001776:	2000      	movs	r0, #0
 8001778:	f000 f810 	bl	800179c <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800177c:	f000 f830 	bl	80017e0 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <ssd1306_Init+0xd8>)
 8001782:	2200      	movs	r2, #0
 8001784:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <ssd1306_Init+0xd8>)
 8001788:	2200      	movs	r2, #0
 800178a:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800178c:	4b02      	ldr	r3, [pc, #8]	; (8001798 <ssd1306_Init+0xd8>)
 800178e:	2201      	movs	r2, #1
 8001790:	715a      	strb	r2, [r3, #5]
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200004cc 	.word	0x200004cc

0800179c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	e00d      	b.n	80017c8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <ssd1306_Fill+0x1a>
 80017b2:	2100      	movs	r1, #0
 80017b4:	e000      	b.n	80017b8 <ssd1306_Fill+0x1c>
 80017b6:	21ff      	movs	r1, #255	; 0xff
 80017b8:	4a08      	ldr	r2, [pc, #32]	; (80017dc <ssd1306_Fill+0x40>)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4413      	add	r3, r2
 80017be:	460a      	mov	r2, r1
 80017c0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3301      	adds	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ce:	d3ed      	bcc.n	80017ac <ssd1306_Fill+0x10>
    }
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	200000cc 	.word	0x200000cc

080017e0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80017e6:	2300      	movs	r3, #0
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	e016      	b.n	800181a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	3b50      	subs	r3, #80	; 0x50
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff ff32 	bl	800165c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80017f8:	2000      	movs	r0, #0
 80017fa:	f7ff ff2f 	bl	800165c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80017fe:	2010      	movs	r0, #16
 8001800:	f7ff ff2c 	bl	800165c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	01db      	lsls	r3, r3, #7
 8001808:	4a07      	ldr	r2, [pc, #28]	; (8001828 <ssd1306_UpdateScreen+0x48>)
 800180a:	4413      	add	r3, r2
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff ff3c 	bl	800168c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	3301      	adds	r3, #1
 8001818:	71fb      	strb	r3, [r7, #7]
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	2b07      	cmp	r3, #7
 800181e:	d9e5      	bls.n	80017ec <ssd1306_UpdateScreen+0xc>
    }
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	200000cc 	.word	0x200000cc

0800182c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
 8001836:	460b      	mov	r3, r1
 8001838:	71bb      	strb	r3, [r7, #6]
 800183a:	4613      	mov	r3, r2
 800183c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	2b00      	cmp	r3, #0
 8001844:	db48      	blt.n	80018d8 <ssd1306_DrawPixel+0xac>
 8001846:	79bb      	ldrb	r3, [r7, #6]
 8001848:	2b3f      	cmp	r3, #63	; 0x3f
 800184a:	d845      	bhi.n	80018d8 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 800184c:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <ssd1306_DrawPixel+0xb8>)
 800184e:	791b      	ldrb	r3, [r3, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d006      	beq.n	8001862 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8001854:	797b      	ldrb	r3, [r7, #5]
 8001856:	2b00      	cmp	r3, #0
 8001858:	bf0c      	ite	eq
 800185a:	2301      	moveq	r3, #1
 800185c:	2300      	movne	r3, #0
 800185e:	b2db      	uxtb	r3, r3
 8001860:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the right color
    if(color == White) {
 8001862:	797b      	ldrb	r3, [r7, #5]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d11a      	bne.n	800189e <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001868:	79fa      	ldrb	r2, [r7, #7]
 800186a:	79bb      	ldrb	r3, [r7, #6]
 800186c:	08db      	lsrs	r3, r3, #3
 800186e:	b2d8      	uxtb	r0, r3
 8001870:	4603      	mov	r3, r0
 8001872:	01db      	lsls	r3, r3, #7
 8001874:	4413      	add	r3, r2
 8001876:	4a1c      	ldr	r2, [pc, #112]	; (80018e8 <ssd1306_DrawPixel+0xbc>)
 8001878:	5cd3      	ldrb	r3, [r2, r3]
 800187a:	b25a      	sxtb	r2, r3
 800187c:	79bb      	ldrb	r3, [r7, #6]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	2101      	movs	r1, #1
 8001884:	fa01 f303 	lsl.w	r3, r1, r3
 8001888:	b25b      	sxtb	r3, r3
 800188a:	4313      	orrs	r3, r2
 800188c:	b259      	sxtb	r1, r3
 800188e:	79fa      	ldrb	r2, [r7, #7]
 8001890:	4603      	mov	r3, r0
 8001892:	01db      	lsls	r3, r3, #7
 8001894:	4413      	add	r3, r2
 8001896:	b2c9      	uxtb	r1, r1
 8001898:	4a13      	ldr	r2, [pc, #76]	; (80018e8 <ssd1306_DrawPixel+0xbc>)
 800189a:	54d1      	strb	r1, [r2, r3]
 800189c:	e01d      	b.n	80018da <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800189e:	79fa      	ldrb	r2, [r7, #7]
 80018a0:	79bb      	ldrb	r3, [r7, #6]
 80018a2:	08db      	lsrs	r3, r3, #3
 80018a4:	b2d8      	uxtb	r0, r3
 80018a6:	4603      	mov	r3, r0
 80018a8:	01db      	lsls	r3, r3, #7
 80018aa:	4413      	add	r3, r2
 80018ac:	4a0e      	ldr	r2, [pc, #56]	; (80018e8 <ssd1306_DrawPixel+0xbc>)
 80018ae:	5cd3      	ldrb	r3, [r2, r3]
 80018b0:	b25a      	sxtb	r2, r3
 80018b2:	79bb      	ldrb	r3, [r7, #6]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	2101      	movs	r1, #1
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	b25b      	sxtb	r3, r3
 80018c4:	4013      	ands	r3, r2
 80018c6:	b259      	sxtb	r1, r3
 80018c8:	79fa      	ldrb	r2, [r7, #7]
 80018ca:	4603      	mov	r3, r0
 80018cc:	01db      	lsls	r3, r3, #7
 80018ce:	4413      	add	r3, r2
 80018d0:	b2c9      	uxtb	r1, r1
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <ssd1306_DrawPixel+0xbc>)
 80018d4:	54d1      	strb	r1, [r2, r3]
 80018d6:	e000      	b.n	80018da <ssd1306_DrawPixel+0xae>
        return;
 80018d8:	bf00      	nop
    }
}
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	200004cc 	.word	0x200004cc
 80018e8:	200000cc 	.word	0x200000cc

080018ec <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b089      	sub	sp, #36	; 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4604      	mov	r4, r0
 80018f4:	1d38      	adds	r0, r7, #4
 80018f6:	e880 0006 	stmia.w	r0, {r1, r2}
 80018fa:	461a      	mov	r2, r3
 80018fc:	4623      	mov	r3, r4
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	4613      	mov	r3, r2
 8001902:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	2b1f      	cmp	r3, #31
 8001908:	d902      	bls.n	8001910 <ssd1306_WriteChar+0x24>
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	2b7e      	cmp	r3, #126	; 0x7e
 800190e:	d901      	bls.n	8001914 <ssd1306_WriteChar+0x28>
        return 0;
 8001910:	2300      	movs	r3, #0
 8001912:	e06d      	b.n	80019f0 <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001914:	4b38      	ldr	r3, [pc, #224]	; (80019f8 <ssd1306_WriteChar+0x10c>)
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	793b      	ldrb	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	2b80      	cmp	r3, #128	; 0x80
 8001920:	dc06      	bgt.n	8001930 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001922:	4b35      	ldr	r3, [pc, #212]	; (80019f8 <ssd1306_WriteChar+0x10c>)
 8001924:	885b      	ldrh	r3, [r3, #2]
 8001926:	461a      	mov	r2, r3
 8001928:	797b      	ldrb	r3, [r7, #5]
 800192a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800192c:	2b40      	cmp	r3, #64	; 0x40
 800192e:	dd01      	ble.n	8001934 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001930:	2300      	movs	r3, #0
 8001932:	e05d      	b.n	80019f0 <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
 8001938:	e04c      	b.n	80019d4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	3b20      	subs	r3, #32
 8001940:	7979      	ldrb	r1, [r7, #5]
 8001942:	fb01 f303 	mul.w	r3, r1, r3
 8001946:	4619      	mov	r1, r3
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	440b      	add	r3, r1
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4413      	add	r3, r2
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
 8001958:	e034      	b.n	80019c4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d012      	beq.n	8001990 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800196a:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <ssd1306_WriteChar+0x10c>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	b2db      	uxtb	r3, r3
 8001974:	4413      	add	r3, r2
 8001976:	b2d8      	uxtb	r0, r3
 8001978:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <ssd1306_WriteChar+0x10c>)
 800197a:	885b      	ldrh	r3, [r3, #2]
 800197c:	b2da      	uxtb	r2, r3
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	4413      	add	r3, r2
 8001984:	b2db      	uxtb	r3, r3
 8001986:	7bba      	ldrb	r2, [r7, #14]
 8001988:	4619      	mov	r1, r3
 800198a:	f7ff ff4f 	bl	800182c <ssd1306_DrawPixel>
 800198e:	e016      	b.n	80019be <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <ssd1306_WriteChar+0x10c>)
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	4413      	add	r3, r2
 800199c:	b2d8      	uxtb	r0, r3
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <ssd1306_WriteChar+0x10c>)
 80019a0:	885b      	ldrh	r3, [r3, #2]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	b2d9      	uxtb	r1, r3
 80019ac:	7bbb      	ldrb	r3, [r7, #14]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	bf0c      	ite	eq
 80019b2:	2301      	moveq	r3, #1
 80019b4:	2300      	movne	r3, #0
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	461a      	mov	r2, r3
 80019ba:	f7ff ff37 	bl	800182c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	3301      	adds	r3, #1
 80019c2:	61bb      	str	r3, [r7, #24]
 80019c4:	793b      	ldrb	r3, [r7, #4]
 80019c6:	461a      	mov	r2, r3
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d3c5      	bcc.n	800195a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3301      	adds	r3, #1
 80019d2:	61fb      	str	r3, [r7, #28]
 80019d4:	797b      	ldrb	r3, [r7, #5]
 80019d6:	461a      	mov	r2, r3
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	4293      	cmp	r3, r2
 80019dc:	d3ad      	bcc.n	800193a <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <ssd1306_WriteChar+0x10c>)
 80019e0:	881a      	ldrh	r2, [r3, #0]
 80019e2:	793b      	ldrb	r3, [r7, #4]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <ssd1306_WriteChar+0x10c>)
 80019ec:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3724      	adds	r7, #36	; 0x24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd90      	pop	{r4, r7, pc}
 80019f8:	200004cc 	.word	0x200004cc

080019fc <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	1d38      	adds	r0, r7, #4
 8001a06:	e880 0006 	stmia.w	r0, {r1, r2}
 8001a0a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001a0c:	e012      	b.n	8001a34 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	7818      	ldrb	r0, [r3, #0]
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	1d3a      	adds	r2, r7, #4
 8001a16:	ca06      	ldmia	r2, {r1, r2}
 8001a18:	f7ff ff68 	bl	80018ec <ssd1306_WriteChar>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d002      	beq.n	8001a2e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	e008      	b.n	8001a40 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	3301      	adds	r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1e8      	bne.n	8001a0e <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	460a      	mov	r2, r1
 8001a52:	71fb      	strb	r3, [r7, #7]
 8001a54:	4613      	mov	r3, r2
 8001a56:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <ssd1306_SetCursor+0x2c>)
 8001a5e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001a60:	79bb      	ldrb	r3, [r7, #6]
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <ssd1306_SetCursor+0x2c>)
 8001a66:	805a      	strh	r2, [r3, #2]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	200004cc 	.word	0x200004cc

08001a78 <BSP_JOY_Init>:
 *     @arg  JOY_MODE_GPIO: Joystick pins will be used as simple IOs
 *     @arg  JOY_MODE_EXTI: Joystick pins will be connected to EXTI line
 *                                 with interrupt generation capability
 * @retval HAL_OK: if all initializations are OK. Other value if error.
 */
uint8_t BSP_JOY_Init(JOYMode_TypeDef Joy_Mode) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08e      	sub	sp, #56	; 0x38
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
	JOYState_TypeDef joykey;
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Initialized the Joystick. */
	//for (joykey = JOY_SEL; joykey < (JOY_SEL + JOYn) ; joykey++)
	joykey = JOY_DOWN;
 8001a82:	2303      	movs	r3, #3
 8001a84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	/* Enable the JOY clock */
	JOYx_GPIO_CLK_ENABLE(joykey);
 8001a88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10c      	bne.n	8001aaa <BSP_JOY_Init+0x32>
 8001a90:	4b48      	ldr	r3, [pc, #288]	; (8001bb4 <BSP_JOY_Init+0x13c>)
 8001a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a94:	4a47      	ldr	r2, [pc, #284]	; (8001bb4 <BSP_JOY_Init+0x13c>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9c:	4b45      	ldr	r3, [pc, #276]	; (8001bb4 <BSP_JOY_Init+0x13c>)
 8001a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	e042      	b.n	8001b30 <BSP_JOY_Init+0xb8>
 8001aaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d10c      	bne.n	8001acc <BSP_JOY_Init+0x54>
 8001ab2:	4b40      	ldr	r3, [pc, #256]	; (8001bb4 <BSP_JOY_Init+0x13c>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	4a3f      	ldr	r2, [pc, #252]	; (8001bb4 <BSP_JOY_Init+0x13c>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001abe:	4b3d      	ldr	r3, [pc, #244]	; (8001bb4 <BSP_JOY_Init+0x13c>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	61bb      	str	r3, [r7, #24]
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	e031      	b.n	8001b30 <BSP_JOY_Init+0xb8>
 8001acc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d10c      	bne.n	8001aee <BSP_JOY_Init+0x76>
 8001ad4:	4b37      	ldr	r3, [pc, #220]	; (8001bb4 <BSP_JOY_Init+0x13c>)
 8001ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad8:	4a36      	ldr	r2, [pc, #216]	; (8001bb4 <BSP_JOY_Init+0x13c>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae0:	4b34      	ldr	r3, [pc, #208]	; (8001bb4 <BSP_JOY_Init+0x13c>)
 8001ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	e020      	b.n	8001b30 <BSP_JOY_Init+0xb8>
 8001aee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d10c      	bne.n	8001b10 <BSP_JOY_Init+0x98>
 8001af6:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <BSP_JOY_Init+0x13c>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	4a2e      	ldr	r2, [pc, #184]	; (8001bb4 <BSP_JOY_Init+0x13c>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b02:	4b2c      	ldr	r3, [pc, #176]	; (8001bb4 <BSP_JOY_Init+0x13c>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	e00f      	b.n	8001b30 <BSP_JOY_Init+0xb8>
 8001b10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d10b      	bne.n	8001b30 <BSP_JOY_Init+0xb8>
 8001b18:	4b26      	ldr	r3, [pc, #152]	; (8001bb4 <BSP_JOY_Init+0x13c>)
 8001b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1c:	4a25      	ldr	r2, [pc, #148]	; (8001bb4 <BSP_JOY_Init+0x13c>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b24:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <BSP_JOY_Init+0x13c>)
 8001b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]

	GPIO_InitStruct.Pin = JOY_PIN[joykey];
 8001b30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b34:	4a20      	ldr	r2, [pc, #128]	; (8001bb8 <BSP_JOY_Init+0x140>)
 8001b36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b3a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (Joy_Mode == JOY_MODE_GPIO) {
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10d      	bne.n	8001b66 <BSP_JOY_Init+0xee>
		/* Configure Joy pin as input */
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(JOY_PORT[joykey], &GPIO_InitStruct);
 8001b4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b52:	4a1a      	ldr	r2, [pc, #104]	; (8001bbc <BSP_JOY_Init+0x144>)
 8001b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b58:	f107 0220 	add.w	r2, r7, #32
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 fb56 	bl	8002210 <HAL_GPIO_Init>
 8001b64:	e021      	b.n	8001baa <BSP_JOY_Init+0x132>
	} else if (Joy_Mode == JOY_MODE_EXTI) {
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d11e      	bne.n	8001baa <BSP_JOY_Init+0x132>
		/* Configure Joy pin as input with External interrupt */
		GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <BSP_JOY_Init+0x148>)
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(JOY_PORT[joykey], &GPIO_InitStruct);
 8001b70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b74:	4a11      	ldr	r2, [pc, #68]	; (8001bbc <BSP_JOY_Init+0x144>)
 8001b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7a:	f107 0220 	add.w	r2, r7, #32
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f000 fb45 	bl	8002210 <HAL_GPIO_Init>

		/* Enable and set Joy EXTI Interrupt to the lowest priority */
		HAL_NVIC_SetPriority((IRQn_Type) (JOY_IRQn[joykey]), 0x0F, 0x00);
 8001b86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b8a:	4a0e      	ldr	r2, [pc, #56]	; (8001bc4 <BSP_JOY_Init+0x14c>)
 8001b8c:	5cd3      	ldrb	r3, [r2, r3]
 8001b8e:	b25b      	sxtb	r3, r3
 8001b90:	2200      	movs	r2, #0
 8001b92:	210f      	movs	r1, #15
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 fb04 	bl	80021a2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ((IRQn_Type) (JOY_IRQn[joykey]));
 8001b9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b9e:	4a09      	ldr	r2, [pc, #36]	; (8001bc4 <BSP_JOY_Init+0x14c>)
 8001ba0:	5cd3      	ldrb	r3, [r2, r3]
 8001ba2:	b25b      	sxtb	r3, r3
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 fb18 	bl	80021da <HAL_NVIC_EnableIRQ>
	}

	return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3738      	adds	r7, #56	; 0x38
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	0800b804 	.word	0x0800b804
 8001bbc:	20000008 	.word	0x20000008
 8001bc0:	10210000 	.word	0x10210000
 8001bc4:	0800b810 	.word	0x0800b810

08001bc8 <BSP_JOY_GetState>:
 *            @arg  JOY_DOWN
 *            @arg  JOY_LEFT
 *            @arg  JOY_RIGHT
 *            @arg  JOY_UP
 */
JOYState_TypeDef BSP_JOY_GetState(void) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
	JOYState_TypeDef joykey;

	//for (joykey = JOY_SEL; joykey < (JOY_SEL + JOYn); joykey++) {
	joykey =JOY_DOWN;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	71fb      	strb	r3, [r7, #7]
		if (HAL_GPIO_ReadPin(JOY_PORT[joykey], JOY_PIN[joykey])
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	4a09      	ldr	r2, [pc, #36]	; (8001bfc <BSP_JOY_GetState+0x34>)
 8001bd6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	4a08      	ldr	r2, [pc, #32]	; (8001c00 <BSP_JOY_GetState+0x38>)
 8001bde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001be2:	4619      	mov	r1, r3
 8001be4:	f000 fcbc 	bl	8002560 <HAL_GPIO_ReadPin>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <BSP_JOY_GetState+0x2a>
				== GPIO_PIN_SET) {
			/* Return Code Joystick key pressed */
			return joykey;
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	e000      	b.n	8001bf4 <BSP_JOY_GetState+0x2c>
		}
	//}

	/* No Joystick key pressed */
	return JOY_NONE;
 8001bf2:	2305      	movs	r3, #5
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	0800b804 	.word	0x0800b804

08001c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_MspInit+0x44>)
 8001c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0e:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <HAL_MspInit+0x44>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6613      	str	r3, [r2, #96]	; 0x60
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <HAL_MspInit+0x44>)
 8001c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_MspInit+0x44>)
 8001c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c26:	4a08      	ldr	r2, [pc, #32]	; (8001c48 <HAL_MspInit+0x44>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_MspInit+0x44>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000

08001c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <HardFault_Handler+0x4>

08001c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <MemManage_Handler+0x4>

08001c66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <BusFault_Handler+0x4>

08001c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <UsageFault_Handler+0x4>

08001c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca0:	f000 f964 	bl	8001f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <OTG_FS_IRQHandler+0x10>)
 8001cae:	f000 ff09 	bl	8002ac4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000be0 	.word	0x20000be0

08001cbc <_sbrk>:
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <_sbrk+0x50>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <_sbrk+0x16>
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <_sbrk+0x50>)
 8001cce:	4a10      	ldr	r2, [pc, #64]	; (8001d10 <_sbrk+0x54>)
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <_sbrk+0x50>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <_sbrk+0x50>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	466a      	mov	r2, sp
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d907      	bls.n	8001cf6 <_sbrk+0x3a>
 8001ce6:	f008 fefd 	bl	800aae4 <__errno>
 8001cea:	4602      	mov	r2, r0
 8001cec:	230c      	movs	r3, #12
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf4:	e006      	b.n	8001d04 <_sbrk+0x48>
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <_sbrk+0x50>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4a03      	ldr	r2, [pc, #12]	; (8001d0c <_sbrk+0x50>)
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200004d4 	.word	0x200004d4
 8001d10:	20000ea8 	.word	0x20000ea8

08001d14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d18:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <SystemInit+0x64>)
 8001d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1e:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <SystemInit+0x64>)
 8001d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d28:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <SystemInit+0x68>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a13      	ldr	r2, [pc, #76]	; (8001d7c <SystemInit+0x68>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <SystemInit+0x68>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <SystemInit+0x68>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a0f      	ldr	r2, [pc, #60]	; (8001d7c <SystemInit+0x68>)
 8001d40:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001d44:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001d48:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <SystemInit+0x68>)
 8001d4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d50:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <SystemInit+0x68>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a09      	ldr	r2, [pc, #36]	; (8001d7c <SystemInit+0x68>)
 8001d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001d5e:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <SystemInit+0x68>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <SystemInit+0x64>)
 8001d66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d6a:	609a      	str	r2, [r3, #8]
#endif
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000ed00 	.word	0xe000ed00
 8001d7c:	40021000 	.word	0x40021000

08001d80 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <MX_UART4_Init+0x58>)
 8001d86:	4a15      	ldr	r2, [pc, #84]	; (8001ddc <MX_UART4_Init+0x5c>)
 8001d88:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d8a:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <MX_UART4_Init+0x58>)
 8001d8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d90:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_UART4_Init+0x58>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <MX_UART4_Init+0x58>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <MX_UART4_Init+0x58>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <MX_UART4_Init+0x58>)
 8001da6:	220c      	movs	r2, #12
 8001da8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001daa:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <MX_UART4_Init+0x58>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MX_UART4_Init+0x58>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <MX_UART4_Init+0x58>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <MX_UART4_Init+0x58>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <MX_UART4_Init+0x58>)
 8001dc4:	f005 fa90 	bl	80072e8 <HAL_UART_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001dce:	f7ff f9b1 	bl	8001134 <Error_Handler>
  }

}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000790 	.word	0x20000790
 8001ddc:	40004c00 	.word	0x40004c00

08001de0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a17      	ldr	r2, [pc, #92]	; (8001e5c <HAL_UART_MspInit+0x7c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d128      	bne.n	8001e54 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_UART_MspInit+0x80>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	4a16      	ldr	r2, [pc, #88]	; (8001e60 <HAL_UART_MspInit+0x80>)
 8001e08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <HAL_UART_MspInit+0x80>)
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <HAL_UART_MspInit+0x80>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	4a10      	ldr	r2, [pc, #64]	; (8001e60 <HAL_UART_MspInit+0x80>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <HAL_UART_MspInit+0x80>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e32:	2303      	movs	r3, #3
 8001e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e42:	2308      	movs	r3, #8
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e50:	f000 f9de 	bl	8002210 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001e54:	bf00      	nop
 8001e56:	3728      	adds	r7, #40	; 0x28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40004c00 	.word	0x40004c00
 8001e60:	40021000 	.word	0x40021000

08001e64 <Reset_Handler>:
 8001e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e9c <LoopForever+0x2>
 8001e68:	2100      	movs	r1, #0
 8001e6a:	e003      	b.n	8001e74 <LoopCopyDataInit>

08001e6c <CopyDataInit>:
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <LoopForever+0x6>)
 8001e6e:	585b      	ldr	r3, [r3, r1]
 8001e70:	5043      	str	r3, [r0, r1]
 8001e72:	3104      	adds	r1, #4

08001e74 <LoopCopyDataInit>:
 8001e74:	480b      	ldr	r0, [pc, #44]	; (8001ea4 <LoopForever+0xa>)
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <LoopForever+0xe>)
 8001e78:	1842      	adds	r2, r0, r1
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d3f6      	bcc.n	8001e6c <CopyDataInit>
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <LoopForever+0x12>)
 8001e80:	e002      	b.n	8001e88 <LoopFillZerobss>

08001e82 <FillZerobss>:
 8001e82:	2300      	movs	r3, #0
 8001e84:	f842 3b04 	str.w	r3, [r2], #4

08001e88 <LoopFillZerobss>:
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <LoopForever+0x16>)
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d3f9      	bcc.n	8001e82 <FillZerobss>
 8001e8e:	f7ff ff41 	bl	8001d14 <SystemInit>
 8001e92:	f008 fe2d 	bl	800aaf0 <__libc_init_array>
 8001e96:	f7ff f883 	bl	8000fa0 <main>

08001e9a <LoopForever>:
 8001e9a:	e7fe      	b.n	8001e9a <LoopForever>
 8001e9c:	20018000 	.word	0x20018000
 8001ea0:	0800b870 	.word	0x0800b870
 8001ea4:	20000000 	.word	0x20000000
 8001ea8:	200000ac 	.word	0x200000ac
 8001eac:	200000ac 	.word	0x200000ac
 8001eb0:	20000ea8 	.word	0x20000ea8

08001eb4 <ADC1_2_IRQHandler>:
 8001eb4:	e7fe      	b.n	8001eb4 <ADC1_2_IRQHandler>
	...

08001eb8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <HAL_Init+0x3c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a0b      	ldr	r2, [pc, #44]	; (8001ef4 <HAL_Init+0x3c>)
 8001ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ecc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ece:	2003      	movs	r0, #3
 8001ed0:	f000 f95c 	bl	800218c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f000 f80f 	bl	8001ef8 <HAL_InitTick>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	71fb      	strb	r3, [r7, #7]
 8001ee4:	e001      	b.n	8001eea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ee6:	f7ff fe8d 	bl	8001c04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eea:	79fb      	ldrb	r3, [r7, #7]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40022000 	.word	0x40022000

08001ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f04:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <HAL_InitTick+0x68>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d022      	beq.n	8001f52 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <HAL_InitTick+0x6c>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <HAL_InitTick+0x68>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f18:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 f968 	bl	80021f6 <HAL_SYSTICK_Config>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10f      	bne.n	8001f4c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b0f      	cmp	r3, #15
 8001f30:	d809      	bhi.n	8001f46 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f32:	2200      	movs	r2, #0
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3a:	f000 f932 	bl	80021a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <HAL_InitTick+0x70>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	e007      	b.n	8001f56 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	73fb      	strb	r3, [r7, #15]
 8001f4a:	e004      	b.n	8001f56 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
 8001f50:	e001      	b.n	8001f56 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000024 	.word	0x20000024
 8001f64:	2000001c 	.word	0x2000001c
 8001f68:	20000020 	.word	0x20000020

08001f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f70:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <HAL_IncTick+0x1c>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <HAL_IncTick+0x20>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4413      	add	r3, r2
 8001f7a:	4a03      	ldr	r2, [pc, #12]	; (8001f88 <HAL_IncTick+0x1c>)
 8001f7c:	6013      	str	r3, [r2, #0]
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	20000810 	.word	0x20000810
 8001f8c:	20000024 	.word	0x20000024

08001f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return uwTick;
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <HAL_GetTick+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000810 	.word	0x20000810

08001fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff ffee 	bl	8001f90 <HAL_GetTick>
 8001fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d004      	beq.n	8001fcc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <HAL_Delay+0x40>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4413      	add	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fcc:	bf00      	nop
 8001fce:	f7ff ffdf 	bl	8001f90 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d8f7      	bhi.n	8001fce <HAL_Delay+0x26>
  {
  }
}
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000024 	.word	0x20000024

08001fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <__NVIC_SetPriorityGrouping+0x44>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002008:	4013      	ands	r3, r2
 800200a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800201c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201e:	4a04      	ldr	r2, [pc, #16]	; (8002030 <__NVIC_SetPriorityGrouping+0x44>)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	60d3      	str	r3, [r2, #12]
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <__NVIC_GetPriorityGrouping+0x18>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	f003 0307 	and.w	r3, r3, #7
}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	2b00      	cmp	r3, #0
 8002060:	db0b      	blt.n	800207a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	f003 021f 	and.w	r2, r3, #31
 8002068:	4907      	ldr	r1, [pc, #28]	; (8002088 <__NVIC_EnableIRQ+0x38>)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	095b      	lsrs	r3, r3, #5
 8002070:	2001      	movs	r0, #1
 8002072:	fa00 f202 	lsl.w	r2, r0, r2
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000e100 	.word	0xe000e100

0800208c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	6039      	str	r1, [r7, #0]
 8002096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209c:	2b00      	cmp	r3, #0
 800209e:	db0a      	blt.n	80020b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	490c      	ldr	r1, [pc, #48]	; (80020d8 <__NVIC_SetPriority+0x4c>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	0112      	lsls	r2, r2, #4
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	440b      	add	r3, r1
 80020b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b4:	e00a      	b.n	80020cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4908      	ldr	r1, [pc, #32]	; (80020dc <__NVIC_SetPriority+0x50>)
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	3b04      	subs	r3, #4
 80020c4:	0112      	lsls	r2, r2, #4
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	440b      	add	r3, r1
 80020ca:	761a      	strb	r2, [r3, #24]
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000e100 	.word	0xe000e100
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f1c3 0307 	rsb	r3, r3, #7
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	bf28      	it	cs
 80020fe:	2304      	movcs	r3, #4
 8002100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3304      	adds	r3, #4
 8002106:	2b06      	cmp	r3, #6
 8002108:	d902      	bls.n	8002110 <NVIC_EncodePriority+0x30>
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3b03      	subs	r3, #3
 800210e:	e000      	b.n	8002112 <NVIC_EncodePriority+0x32>
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	f04f 32ff 	mov.w	r2, #4294967295
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43da      	mvns	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	401a      	ands	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002128:	f04f 31ff 	mov.w	r1, #4294967295
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	43d9      	mvns	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	4313      	orrs	r3, r2
         );
}
 800213a:	4618      	mov	r0, r3
 800213c:	3724      	adds	r7, #36	; 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002158:	d301      	bcc.n	800215e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215a:	2301      	movs	r3, #1
 800215c:	e00f      	b.n	800217e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <SysTick_Config+0x40>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002166:	210f      	movs	r1, #15
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f7ff ff8e 	bl	800208c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <SysTick_Config+0x40>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002176:	4b04      	ldr	r3, [pc, #16]	; (8002188 <SysTick_Config+0x40>)
 8002178:	2207      	movs	r2, #7
 800217a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	e000e010 	.word	0xe000e010

0800218c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ff29 	bl	8001fec <__NVIC_SetPriorityGrouping>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	4603      	mov	r3, r0
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021b4:	f7ff ff3e 	bl	8002034 <__NVIC_GetPriorityGrouping>
 80021b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	6978      	ldr	r0, [r7, #20]
 80021c0:	f7ff ff8e 	bl	80020e0 <NVIC_EncodePriority>
 80021c4:	4602      	mov	r2, r0
 80021c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff5d 	bl	800208c <__NVIC_SetPriority>
}
 80021d2:	bf00      	nop
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff31 	bl	8002050 <__NVIC_EnableIRQ>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff ffa2 	bl	8002148 <SysTick_Config>
 8002204:	4603      	mov	r3, r0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221e:	e17f      	b.n	8002520 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	2101      	movs	r1, #1
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	4013      	ands	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8171 	beq.w	800251a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x38>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b12      	cmp	r3, #18
 8002246:	d123      	bne.n	8002290 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	08da      	lsrs	r2, r3, #3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3208      	adds	r2, #8
 8002250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	220f      	movs	r2, #15
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	08da      	lsrs	r2, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3208      	adds	r2, #8
 800228a:	6939      	ldr	r1, [r7, #16]
 800228c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2203      	movs	r2, #3
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4013      	ands	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0203 	and.w	r2, r3, #3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d00b      	beq.n	80022e4 <HAL_GPIO_Init+0xd4>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d007      	beq.n	80022e4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022d8:	2b11      	cmp	r3, #17
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b12      	cmp	r3, #18
 80022e2:	d130      	bne.n	8002346 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800231a:	2201      	movs	r2, #1
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	091b      	lsrs	r3, r3, #4
 8002330:	f003 0201 	and.w	r2, r3, #1
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b03      	cmp	r3, #3
 8002350:	d118      	bne.n	8002384 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002358:	2201      	movs	r2, #1
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	08db      	lsrs	r3, r3, #3
 800236e:	f003 0201 	and.w	r2, r3, #1
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	2203      	movs	r2, #3
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 80ac 	beq.w	800251a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c2:	4b5e      	ldr	r3, [pc, #376]	; (800253c <HAL_GPIO_Init+0x32c>)
 80023c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c6:	4a5d      	ldr	r2, [pc, #372]	; (800253c <HAL_GPIO_Init+0x32c>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6613      	str	r3, [r2, #96]	; 0x60
 80023ce:	4b5b      	ldr	r3, [pc, #364]	; (800253c <HAL_GPIO_Init+0x32c>)
 80023d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023da:	4a59      	ldr	r2, [pc, #356]	; (8002540 <HAL_GPIO_Init+0x330>)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	089b      	lsrs	r3, r3, #2
 80023e0:	3302      	adds	r3, #2
 80023e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	220f      	movs	r2, #15
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002404:	d025      	beq.n	8002452 <HAL_GPIO_Init+0x242>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4e      	ldr	r2, [pc, #312]	; (8002544 <HAL_GPIO_Init+0x334>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d01f      	beq.n	800244e <HAL_GPIO_Init+0x23e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a4d      	ldr	r2, [pc, #308]	; (8002548 <HAL_GPIO_Init+0x338>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d019      	beq.n	800244a <HAL_GPIO_Init+0x23a>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a4c      	ldr	r2, [pc, #304]	; (800254c <HAL_GPIO_Init+0x33c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d013      	beq.n	8002446 <HAL_GPIO_Init+0x236>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4b      	ldr	r2, [pc, #300]	; (8002550 <HAL_GPIO_Init+0x340>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00d      	beq.n	8002442 <HAL_GPIO_Init+0x232>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a4a      	ldr	r2, [pc, #296]	; (8002554 <HAL_GPIO_Init+0x344>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d007      	beq.n	800243e <HAL_GPIO_Init+0x22e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a49      	ldr	r2, [pc, #292]	; (8002558 <HAL_GPIO_Init+0x348>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d101      	bne.n	800243a <HAL_GPIO_Init+0x22a>
 8002436:	2306      	movs	r3, #6
 8002438:	e00c      	b.n	8002454 <HAL_GPIO_Init+0x244>
 800243a:	2307      	movs	r3, #7
 800243c:	e00a      	b.n	8002454 <HAL_GPIO_Init+0x244>
 800243e:	2305      	movs	r3, #5
 8002440:	e008      	b.n	8002454 <HAL_GPIO_Init+0x244>
 8002442:	2304      	movs	r3, #4
 8002444:	e006      	b.n	8002454 <HAL_GPIO_Init+0x244>
 8002446:	2303      	movs	r3, #3
 8002448:	e004      	b.n	8002454 <HAL_GPIO_Init+0x244>
 800244a:	2302      	movs	r3, #2
 800244c:	e002      	b.n	8002454 <HAL_GPIO_Init+0x244>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_GPIO_Init+0x244>
 8002452:	2300      	movs	r3, #0
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	f002 0203 	and.w	r2, r2, #3
 800245a:	0092      	lsls	r2, r2, #2
 800245c:	4093      	lsls	r3, r2
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002464:	4936      	ldr	r1, [pc, #216]	; (8002540 <HAL_GPIO_Init+0x330>)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	089b      	lsrs	r3, r3, #2
 800246a:	3302      	adds	r3, #2
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002472:	4b3a      	ldr	r3, [pc, #232]	; (800255c <HAL_GPIO_Init+0x34c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	43db      	mvns	r3, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002496:	4a31      	ldr	r2, [pc, #196]	; (800255c <HAL_GPIO_Init+0x34c>)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800249c:	4b2f      	ldr	r3, [pc, #188]	; (800255c <HAL_GPIO_Init+0x34c>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024c0:	4a26      	ldr	r2, [pc, #152]	; (800255c <HAL_GPIO_Init+0x34c>)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024c6:	4b25      	ldr	r3, [pc, #148]	; (800255c <HAL_GPIO_Init+0x34c>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4013      	ands	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024ea:	4a1c      	ldr	r2, [pc, #112]	; (800255c <HAL_GPIO_Init+0x34c>)
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024f0:	4b1a      	ldr	r3, [pc, #104]	; (800255c <HAL_GPIO_Init+0x34c>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002514:	4a11      	ldr	r2, [pc, #68]	; (800255c <HAL_GPIO_Init+0x34c>)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	3301      	adds	r3, #1
 800251e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	fa22 f303 	lsr.w	r3, r2, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	f47f ae78 	bne.w	8002220 <HAL_GPIO_Init+0x10>
  }
}
 8002530:	bf00      	nop
 8002532:	371c      	adds	r7, #28
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	40021000 	.word	0x40021000
 8002540:	40010000 	.word	0x40010000
 8002544:	48000400 	.word	0x48000400
 8002548:	48000800 	.word	0x48000800
 800254c:	48000c00 	.word	0x48000c00
 8002550:	48001000 	.word	0x48001000
 8002554:	48001400 	.word	0x48001400
 8002558:	48001800 	.word	0x48001800
 800255c:	40010400 	.word	0x40010400

08002560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	887b      	ldrh	r3, [r7, #2]
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	e001      	b.n	8002582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
 800259c:	4613      	mov	r3, r2
 800259e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a0:	787b      	ldrb	r3, [r7, #1]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025ac:	e002      	b.n	80025b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025ae:	887a      	ldrh	r2, [r7, #2]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80025c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025c2:	b08f      	sub	sp, #60	; 0x3c
 80025c4:	af0a      	add	r7, sp, #40	; 0x28
 80025c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e054      	b.n	800267c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d106      	bne.n	80025f2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f007 ffcb 	bl	800a588 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2203      	movs	r2, #3
 80025f6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d102      	bne.n	800260c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f005 fb91 	bl	8007d38 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	687e      	ldr	r6, [r7, #4]
 800261e:	466d      	mov	r5, sp
 8002620:	f106 0410 	add.w	r4, r6, #16
 8002624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800262a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800262c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002630:	e885 0003 	stmia.w	r5, {r0, r1}
 8002634:	1d33      	adds	r3, r6, #4
 8002636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002638:	6838      	ldr	r0, [r7, #0]
 800263a:	f005 fb1a 	bl	8007c72 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2101      	movs	r1, #1
 8002644:	4618      	mov	r0, r3
 8002646:	f005 fb88 	bl	8007d5a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	687e      	ldr	r6, [r7, #4]
 8002652:	466d      	mov	r5, sp
 8002654:	f106 0410 	add.w	r4, r6, #16
 8002658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800265a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800265c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800265e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002660:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002664:	e885 0003 	stmia.w	r5, {r0, r1}
 8002668:	1d33      	adds	r3, r6, #4
 800266a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800266c:	6838      	ldr	r0, [r7, #0]
 800266e:	f005 fc97 	bl	8007fa0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002684 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b089      	sub	sp, #36	; 0x24
 8002688:	af04      	add	r7, sp, #16
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	4608      	mov	r0, r1
 800268e:	4611      	mov	r1, r2
 8002690:	461a      	mov	r2, r3
 8002692:	4603      	mov	r3, r0
 8002694:	70fb      	strb	r3, [r7, #3]
 8002696:	460b      	mov	r3, r1
 8002698:	70bb      	strb	r3, [r7, #2]
 800269a:	4613      	mov	r3, r2
 800269c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_HCD_HC_Init+0x28>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e07f      	b.n	80027ac <HAL_HCD_HC_Init+0x128>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	440b      	add	r3, r1
 80026c2:	333d      	adds	r3, #61	; 0x3d
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	440b      	add	r3, r1
 80026d6:	3338      	adds	r3, #56	; 0x38
 80026d8:	787a      	ldrb	r2, [r7, #1]
 80026da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80026dc:	78fa      	ldrb	r2, [r7, #3]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	440b      	add	r3, r1
 80026ea:	3340      	adds	r3, #64	; 0x40
 80026ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80026ee:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	440b      	add	r3, r1
 80026fe:	3339      	adds	r3, #57	; 0x39
 8002700:	78fa      	ldrb	r2, [r7, #3]
 8002702:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002704:	78fa      	ldrb	r2, [r7, #3]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	440b      	add	r3, r1
 8002712:	333f      	adds	r3, #63	; 0x3f
 8002714:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002718:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800271a:	78fa      	ldrb	r2, [r7, #3]
 800271c:	78bb      	ldrb	r3, [r7, #2]
 800271e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002722:	b2d8      	uxtb	r0, r3
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	440b      	add	r3, r1
 8002730:	333a      	adds	r3, #58	; 0x3a
 8002732:	4602      	mov	r2, r0
 8002734:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002736:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800273a:	2b00      	cmp	r3, #0
 800273c:	da0a      	bge.n	8002754 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800273e:	78fa      	ldrb	r2, [r7, #3]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	440b      	add	r3, r1
 800274c:	333b      	adds	r3, #59	; 0x3b
 800274e:	2201      	movs	r2, #1
 8002750:	701a      	strb	r2, [r3, #0]
 8002752:	e009      	b.n	8002768 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002754:	78fa      	ldrb	r2, [r7, #3]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	440b      	add	r3, r1
 8002762:	333b      	adds	r3, #59	; 0x3b
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002768:	78fa      	ldrb	r2, [r7, #3]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	440b      	add	r3, r1
 8002776:	333c      	adds	r3, #60	; 0x3c
 8002778:	f897 2020 	ldrb.w	r2, [r7, #32]
 800277c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6818      	ldr	r0, [r3, #0]
 8002782:	787c      	ldrb	r4, [r7, #1]
 8002784:	78ba      	ldrb	r2, [r7, #2]
 8002786:	78f9      	ldrb	r1, [r7, #3]
 8002788:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800278a:	9302      	str	r3, [sp, #8]
 800278c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	4623      	mov	r3, r4
 800279a:	f005 fd45 	bl	8008228 <USB_HC_Init>
 800279e:	4603      	mov	r3, r0
 80027a0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd90      	pop	{r4, r7, pc}

080027b4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_HCD_HC_Halt+0x1e>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e00f      	b.n	80027f2 <HAL_HCD_HC_Halt+0x3e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	78fa      	ldrb	r2, [r7, #3]
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f005 ff23 	bl	800862e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	4608      	mov	r0, r1
 8002806:	4611      	mov	r1, r2
 8002808:	461a      	mov	r2, r3
 800280a:	4603      	mov	r3, r0
 800280c:	70fb      	strb	r3, [r7, #3]
 800280e:	460b      	mov	r3, r1
 8002810:	70bb      	strb	r3, [r7, #2]
 8002812:	4613      	mov	r3, r2
 8002814:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	440b      	add	r3, r1
 8002824:	333b      	adds	r3, #59	; 0x3b
 8002826:	78ba      	ldrb	r2, [r7, #2]
 8002828:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800282a:	78fa      	ldrb	r2, [r7, #3]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	440b      	add	r3, r1
 8002838:	333f      	adds	r3, #63	; 0x3f
 800283a:	787a      	ldrb	r2, [r7, #1]
 800283c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800283e:	7c3b      	ldrb	r3, [r7, #16]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10a      	bne.n	800285a <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	440b      	add	r3, r1
 8002852:	3342      	adds	r3, #66	; 0x42
 8002854:	2203      	movs	r2, #3
 8002856:	701a      	strb	r2, [r3, #0]
 8002858:	e009      	b.n	800286e <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800285a:	78fa      	ldrb	r2, [r7, #3]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	440b      	add	r3, r1
 8002868:	3342      	adds	r3, #66	; 0x42
 800286a:	2202      	movs	r2, #2
 800286c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800286e:	787b      	ldrb	r3, [r7, #1]
 8002870:	2b03      	cmp	r3, #3
 8002872:	f200 80d6 	bhi.w	8002a22 <HAL_HCD_HC_SubmitRequest+0x226>
 8002876:	a201      	add	r2, pc, #4	; (adr r2, 800287c <HAL_HCD_HC_SubmitRequest+0x80>)
 8002878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287c:	0800288d 	.word	0x0800288d
 8002880:	08002a0d 	.word	0x08002a0d
 8002884:	080028f9 	.word	0x080028f9
 8002888:	08002983 	.word	0x08002983
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800288c:	7c3b      	ldrb	r3, [r7, #16]
 800288e:	2b01      	cmp	r3, #1
 8002890:	f040 80c9 	bne.w	8002a26 <HAL_HCD_HC_SubmitRequest+0x22a>
 8002894:	78bb      	ldrb	r3, [r7, #2]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f040 80c5 	bne.w	8002a26 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 800289c:	8b3b      	ldrh	r3, [r7, #24]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80028a2:	78fa      	ldrb	r2, [r7, #3]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	440b      	add	r3, r1
 80028b0:	3351      	adds	r3, #81	; 0x51
 80028b2:	2201      	movs	r2, #1
 80028b4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	440b      	add	r3, r1
 80028c4:	3351      	adds	r3, #81	; 0x51
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10a      	bne.n	80028e2 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028cc:	78fa      	ldrb	r2, [r7, #3]
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	440b      	add	r3, r1
 80028da:	3342      	adds	r3, #66	; 0x42
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80028e0:	e0a1      	b.n	8002a26 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	440b      	add	r3, r1
 80028f0:	3342      	adds	r3, #66	; 0x42
 80028f2:	2202      	movs	r2, #2
 80028f4:	701a      	strb	r2, [r3, #0]
      break;
 80028f6:	e096      	b.n	8002a26 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80028f8:	78bb      	ldrb	r3, [r7, #2]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d120      	bne.n	8002940 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	440b      	add	r3, r1
 800290c:	3351      	adds	r3, #81	; 0x51
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10a      	bne.n	800292a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	440b      	add	r3, r1
 8002922:	3342      	adds	r3, #66	; 0x42
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002928:	e07e      	b.n	8002a28 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	440b      	add	r3, r1
 8002938:	3342      	adds	r3, #66	; 0x42
 800293a:	2202      	movs	r2, #2
 800293c:	701a      	strb	r2, [r3, #0]
      break;
 800293e:	e073      	b.n	8002a28 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	440b      	add	r3, r1
 800294e:	3350      	adds	r3, #80	; 0x50
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10a      	bne.n	800296c <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	440b      	add	r3, r1
 8002964:	3342      	adds	r3, #66	; 0x42
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
      break;
 800296a:	e05d      	b.n	8002a28 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800296c:	78fa      	ldrb	r2, [r7, #3]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	440b      	add	r3, r1
 800297a:	3342      	adds	r3, #66	; 0x42
 800297c:	2202      	movs	r2, #2
 800297e:	701a      	strb	r2, [r3, #0]
      break;
 8002980:	e052      	b.n	8002a28 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002982:	78bb      	ldrb	r3, [r7, #2]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d120      	bne.n	80029ca <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	440b      	add	r3, r1
 8002996:	3351      	adds	r3, #81	; 0x51
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10a      	bne.n	80029b4 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800299e:	78fa      	ldrb	r2, [r7, #3]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	440b      	add	r3, r1
 80029ac:	3342      	adds	r3, #66	; 0x42
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80029b2:	e039      	b.n	8002a28 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	440b      	add	r3, r1
 80029c2:	3342      	adds	r3, #66	; 0x42
 80029c4:	2202      	movs	r2, #2
 80029c6:	701a      	strb	r2, [r3, #0]
      break;
 80029c8:	e02e      	b.n	8002a28 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80029ca:	78fa      	ldrb	r2, [r7, #3]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	440b      	add	r3, r1
 80029d8:	3350      	adds	r3, #80	; 0x50
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029e0:	78fa      	ldrb	r2, [r7, #3]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	440b      	add	r3, r1
 80029ee:	3342      	adds	r3, #66	; 0x42
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
      break;
 80029f4:	e018      	b.n	8002a28 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	440b      	add	r3, r1
 8002a04:	3342      	adds	r3, #66	; 0x42
 8002a06:	2202      	movs	r2, #2
 8002a08:	701a      	strb	r2, [r3, #0]
      break;
 8002a0a:	e00d      	b.n	8002a28 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a0c:	78fa      	ldrb	r2, [r7, #3]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	440b      	add	r3, r1
 8002a1a:	3342      	adds	r3, #66	; 0x42
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
      break;
 8002a20:	e002      	b.n	8002a28 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8002a22:	bf00      	nop
 8002a24:	e000      	b.n	8002a28 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8002a26:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	440b      	add	r3, r1
 8002a36:	3344      	adds	r3, #68	; 0x44
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002a3c:	78fa      	ldrb	r2, [r7, #3]
 8002a3e:	8b39      	ldrh	r1, [r7, #24]
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4403      	add	r3, r0
 8002a4c:	3348      	adds	r3, #72	; 0x48
 8002a4e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	440b      	add	r3, r1
 8002a5e:	335c      	adds	r3, #92	; 0x5c
 8002a60:	2200      	movs	r2, #0
 8002a62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	440b      	add	r3, r1
 8002a72:	334c      	adds	r3, #76	; 0x4c
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	440b      	add	r3, r1
 8002a86:	3339      	adds	r3, #57	; 0x39
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	440b      	add	r3, r1
 8002a9a:	335d      	adds	r3, #93	; 0x5d
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	78fa      	ldrb	r2, [r7, #3]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	3338      	adds	r3, #56	; 0x38
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	f005 fca9 	bl	800840c <USB_HC_StartXfer>
 8002aba:	4603      	mov	r3, r0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f005 fa1d 	bl	8007f1a <USB_GetMode>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	f040 80f1 	bne.w	8002cca <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f005 fa01 	bl	8007ef4 <USB_ReadInterrupts>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 80e7 	beq.w	8002cc8 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f005 f9f8 	bl	8007ef4 <USB_ReadInterrupts>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b0e:	d104      	bne.n	8002b1a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f005 f9e8 	bl	8007ef4 <USB_ReadInterrupts>
 8002b24:	4603      	mov	r3, r0
 8002b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b2e:	d104      	bne.n	8002b3a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f005 f9d8 	bl	8007ef4 <USB_ReadInterrupts>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b4e:	d104      	bne.n	8002b5a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f005 f9c8 	bl	8007ef4 <USB_ReadInterrupts>
 8002b64:	4603      	mov	r3, r0
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d103      	bne.n	8002b76 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2202      	movs	r2, #2
 8002b74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f005 f9ba 	bl	8007ef4 <USB_ReadInterrupts>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b8a:	d117      	bne.n	8002bbc <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002b9a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b9e:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f007 fd73 	bl	800a68c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2101      	movs	r1, #1
 8002bac:	4618      	mov	r0, r3
 8002bae:	f005 fa75 	bl	800809c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002bba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f005 f997 	bl	8007ef4 <USB_ReadInterrupts>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bd0:	d102      	bne.n	8002bd8 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f001 f884 	bl	8003ce0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f005 f989 	bl	8007ef4 <USB_ReadInterrupts>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d106      	bne.n	8002bfa <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f007 fd31 	bl	800a654 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2208      	movs	r2, #8
 8002bf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f005 f978 	bl	8007ef4 <USB_ReadInterrupts>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c0e:	d138      	bne.n	8002c82 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f005 fcf9 	bl	800860c <USB_HC_ReadInterrupt>
 8002c1a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	e025      	b.n	8002c6e <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d018      	beq.n	8002c68 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c4c:	d106      	bne.n	8002c5c <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	4619      	mov	r1, r3
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f8cf 	bl	8002df8 <HCD_HC_IN_IRQHandler>
 8002c5a:	e005      	b.n	8002c68 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	4619      	mov	r1, r3
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fc3b 	bl	80034de <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d3d4      	bcc.n	8002c22 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f005 f934 	bl	8007ef4 <USB_ReadInterrupts>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	2b10      	cmp	r3, #16
 8002c94:	d101      	bne.n	8002c9a <HAL_HCD_IRQHandler+0x1d6>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_HCD_IRQHandler+0x1d8>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d014      	beq.n	8002cca <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699a      	ldr	r2, [r3, #24]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0210 	bic.w	r2, r2, #16
 8002cae:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 ff69 	bl	8003b88 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699a      	ldr	r2, [r3, #24]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0210 	orr.w	r2, r2, #16
 8002cc4:	619a      	str	r2, [r3, #24]
 8002cc6:	e000      	b.n	8002cca <HAL_HCD_IRQHandler+0x206>
      return;
 8002cc8:	bf00      	nop
    }
  }
}
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <HAL_HCD_Start+0x16>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e013      	b.n	8002d0e <HAL_HCD_Start+0x3e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f005 f80f 	bl	8007d16 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f005 fa30 	bl	8008164 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_HCD_Stop+0x16>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e00d      	b.n	8002d48 <HAL_HCD_Stop+0x32>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f005 fd77 	bl	800882c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f005 f9d7 	bl	8008110 <USB_ResetPort>
 8002d62:	4603      	mov	r3, r0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	440b      	add	r3, r1
 8002d86:	335c      	adds	r3, #92	; 0x5c
 8002d88:	781b      	ldrb	r3, [r3, #0]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	440b      	add	r3, r1
 8002db0:	334c      	adds	r3, #76	; 0x4c
 8002db2:	681b      	ldr	r3, [r3, #0]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f005 fa19 	bl	8008204 <USB_GetCurrentFrame>
 8002dd2:	4603      	mov	r3, r0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f005 f9f4 	bl	80081d6 <USB_GetHostSpeed>
 8002dee:	4603      	mov	r3, r0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002e0e:	78fb      	ldrb	r3, [r7, #3]
 8002e10:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d119      	bne.n	8002e5c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e34:	461a      	mov	r2, r3
 8002e36:	2304      	movs	r3, #4
 8002e38:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	0151      	lsls	r1, r2, #5
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	440a      	add	r2, r1
 8002e50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e54:	f043 0302 	orr.w	r3, r3, #2
 8002e58:	60d3      	str	r3, [r2, #12]
 8002e5a:	e095      	b.n	8002f88 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	d109      	bne.n	8002e86 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7e:	461a      	mov	r2, r3
 8002e80:	2320      	movs	r3, #32
 8002e82:	6093      	str	r3, [r2, #8]
 8002e84:	e080      	b.n	8002f88 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	015a      	lsls	r2, r3, #5
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d134      	bne.n	8002f06 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	0151      	lsls	r1, r2, #5
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	440a      	add	r2, r1
 8002eb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002eb6:	f043 0302 	orr.w	r3, r3, #2
 8002eba:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	440b      	add	r3, r1
 8002eca:	335d      	adds	r3, #93	; 0x5d
 8002ecc:	2205      	movs	r2, #5
 8002ece:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002edc:	461a      	mov	r2, r3
 8002ede:	2310      	movs	r3, #16
 8002ee0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eee:	461a      	mov	r2, r3
 8002ef0:	2308      	movs	r3, #8
 8002ef2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	4611      	mov	r1, r2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f005 fb95 	bl	800862e <USB_HC_Halt>
 8002f04:	e040      	b.n	8002f88 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f1c:	d134      	bne.n	8002f88 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	0151      	lsls	r1, r2, #5
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	440a      	add	r2, r1
 8002f34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f38:	f043 0302 	orr.w	r3, r3, #2
 8002f3c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f005 fb70 	bl	800862e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	2310      	movs	r3, #16
 8002f5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	440b      	add	r3, r1
 8002f6e:	335d      	adds	r3, #93	; 0x5d
 8002f70:	2208      	movs	r2, #8
 8002f72:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f80:	461a      	mov	r2, r3
 8002f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f86:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f9e:	d122      	bne.n	8002fe6 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	0151      	lsls	r1, r2, #5
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	440a      	add	r2, r1
 8002fb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fba:	f043 0302 	orr.w	r3, r3, #2
 8002fbe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	4611      	mov	r1, r2
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f005 fb2f 	bl	800862e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fdc:	461a      	mov	r2, r3
 8002fde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fe2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002fe4:	e277      	b.n	80034d6 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	f040 80a1 	bne.w	8003140 <HCD_HC_IN_IRQHandler+0x348>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	440b      	add	r3, r1
 800300c:	335d      	adds	r3, #93	; 0x5d
 800300e:	2201      	movs	r2, #1
 8003010:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	440b      	add	r3, r1
 8003020:	3358      	adds	r3, #88	; 0x58
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	4413      	add	r3, r2
 800302e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003032:	461a      	mov	r2, r3
 8003034:	2301      	movs	r3, #1
 8003036:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	440b      	add	r3, r1
 8003046:	333f      	adds	r3, #63	; 0x3f
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HCD_HC_IN_IRQHandler+0x26c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	440b      	add	r3, r1
 800305c:	333f      	adds	r3, #63	; 0x3f
 800305e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003060:	2b02      	cmp	r3, #2
 8003062:	d121      	bne.n	80030a8 <HCD_HC_IN_IRQHandler+0x2b0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4413      	add	r3, r2
 800306c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	0151      	lsls	r1, r2, #5
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	440a      	add	r2, r1
 800307a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800307e:	f043 0302 	orr.w	r3, r3, #2
 8003082:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	4611      	mov	r1, r2
 800308e:	4618      	mov	r0, r3
 8003090:	f005 facd 	bl	800862e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4413      	add	r3, r2
 800309c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a0:	461a      	mov	r2, r3
 80030a2:	2310      	movs	r3, #16
 80030a4:	6093      	str	r3, [r2, #8]
 80030a6:	e034      	b.n	8003112 <HCD_HC_IN_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	440b      	add	r3, r1
 80030b6:	333f      	adds	r3, #63	; 0x3f
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d129      	bne.n	8003112 <HCD_HC_IN_IRQHandler+0x31a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	0151      	lsls	r1, r2, #5
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	440a      	add	r2, r1
 80030d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030dc:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	440b      	add	r3, r1
 80030ec:	335c      	adds	r3, #92	; 0x5c
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	b2d8      	uxtb	r0, r3
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	440b      	add	r3, r1
 8003104:	335c      	adds	r3, #92	; 0x5c
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	4601      	mov	r1, r0
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f007 facb 	bl	800a6a8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	440b      	add	r3, r1
 8003120:	3350      	adds	r3, #80	; 0x50
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	f083 0301 	eor.w	r3, r3, #1
 8003128:	b2d8      	uxtb	r0, r3
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	440b      	add	r3, r1
 8003138:	3350      	adds	r3, #80	; 0x50
 800313a:	4602      	mov	r2, r0
 800313c:	701a      	strb	r2, [r3, #0]
}
 800313e:	e1ca      	b.n	80034d6 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4413      	add	r3, r2
 8003148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b02      	cmp	r3, #2
 8003154:	f040 80f1 	bne.w	800333a <HCD_HC_IN_IRQHandler+0x542>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4413      	add	r3, r2
 8003160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	0151      	lsls	r1, r2, #5
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	440a      	add	r2, r1
 800316e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003172:	f023 0302 	bic.w	r3, r3, #2
 8003176:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	440b      	add	r3, r1
 8003186:	335d      	adds	r3, #93	; 0x5d
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d10a      	bne.n	80031a4 <HCD_HC_IN_IRQHandler+0x3ac>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	440b      	add	r3, r1
 800319c:	335c      	adds	r3, #92	; 0x5c
 800319e:	2201      	movs	r2, #1
 80031a0:	701a      	strb	r2, [r3, #0]
 80031a2:	e0b0      	b.n	8003306 <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	440b      	add	r3, r1
 80031b2:	335d      	adds	r3, #93	; 0x5d
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b05      	cmp	r3, #5
 80031b8:	d10a      	bne.n	80031d0 <HCD_HC_IN_IRQHandler+0x3d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	440b      	add	r3, r1
 80031c8:	335c      	adds	r3, #92	; 0x5c
 80031ca:	2205      	movs	r2, #5
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	e09a      	b.n	8003306 <HCD_HC_IN_IRQHandler+0x50e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	440b      	add	r3, r1
 80031de:	335d      	adds	r3, #93	; 0x5d
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b06      	cmp	r3, #6
 80031e4:	d00a      	beq.n	80031fc <HCD_HC_IN_IRQHandler+0x404>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	440b      	add	r3, r1
 80031f4:	335d      	adds	r3, #93	; 0x5d
 80031f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d156      	bne.n	80032aa <HCD_HC_IN_IRQHandler+0x4b2>
      hhcd->hc[ch_num].ErrCnt++;
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	440b      	add	r3, r1
 800320a:	3358      	adds	r3, #88	; 0x58
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	1c59      	adds	r1, r3, #1
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4403      	add	r3, r0
 800321e:	3358      	adds	r3, #88	; 0x58
 8003220:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	440b      	add	r3, r1
 8003230:	3358      	adds	r3, #88	; 0x58
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b03      	cmp	r3, #3
 8003236:	d914      	bls.n	8003262 <HCD_HC_IN_IRQHandler+0x46a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	440b      	add	r3, r1
 8003246:	3358      	adds	r3, #88	; 0x58
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	440b      	add	r3, r1
 800325a:	335c      	adds	r3, #92	; 0x5c
 800325c:	2204      	movs	r2, #4
 800325e:	701a      	strb	r2, [r3, #0]
 8003260:	e009      	b.n	8003276 <HCD_HC_IN_IRQHandler+0x47e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	440b      	add	r3, r1
 8003270:	335c      	adds	r3, #92	; 0x5c
 8003272:	2202      	movs	r2, #2
 8003274:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4413      	add	r3, r2
 800327e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800328c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003294:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4413      	add	r3, r2
 800329e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a2:	461a      	mov	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	e02d      	b.n	8003306 <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	440b      	add	r3, r1
 80032b8:	335d      	adds	r3, #93	; 0x5d
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d122      	bne.n	8003306 <HCD_HC_IN_IRQHandler+0x50e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	440b      	add	r3, r1
 80032ce:	335c      	adds	r3, #92	; 0x5c
 80032d0:	2202      	movs	r2, #2
 80032d2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032ea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032f2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003300:	461a      	mov	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4413      	add	r3, r2
 800330e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003312:	461a      	mov	r2, r3
 8003314:	2302      	movs	r3, #2
 8003316:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	b2d8      	uxtb	r0, r3
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	440b      	add	r3, r1
 800332a:	335c      	adds	r3, #92	; 0x5c
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	4601      	mov	r1, r0
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f007 f9b8 	bl	800a6a8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003338:	e0cd      	b.n	80034d6 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4413      	add	r3, r2
 8003342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334c:	2b80      	cmp	r3, #128	; 0x80
 800334e:	d13e      	bne.n	80033ce <HCD_HC_IN_IRQHandler+0x5d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4413      	add	r3, r2
 8003358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	0151      	lsls	r1, r2, #5
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	440a      	add	r2, r1
 8003366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800336a:	f043 0302 	orr.w	r3, r3, #2
 800336e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	440b      	add	r3, r1
 800337e:	3358      	adds	r3, #88	; 0x58
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	1c59      	adds	r1, r3, #1
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4403      	add	r3, r0
 8003392:	3358      	adds	r3, #88	; 0x58
 8003394:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	440b      	add	r3, r1
 80033a4:	335d      	adds	r3, #93	; 0x5d
 80033a6:	2206      	movs	r2, #6
 80033a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	4611      	mov	r1, r2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f005 f93a 	bl	800862e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c6:	461a      	mov	r2, r3
 80033c8:	2380      	movs	r3, #128	; 0x80
 80033ca:	6093      	str	r3, [r2, #8]
}
 80033cc:	e083      	b.n	80034d6 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b10      	cmp	r3, #16
 80033e2:	d178      	bne.n	80034d6 <HCD_HC_IN_IRQHandler+0x6de>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	440b      	add	r3, r1
 80033f2:	333f      	adds	r3, #63	; 0x3f
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d122      	bne.n	8003440 <HCD_HC_IN_IRQHandler+0x648>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	440b      	add	r3, r1
 8003408:	3358      	adds	r3, #88	; 0x58
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4413      	add	r3, r2
 8003416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	0151      	lsls	r1, r2, #5
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	440a      	add	r2, r1
 8003424:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003428:	f043 0302 	orr.w	r3, r3, #2
 800342c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	4611      	mov	r1, r2
 8003438:	4618      	mov	r0, r3
 800343a:	f005 f8f8 	bl	800862e <USB_HC_Halt>
 800343e:	e041      	b.n	80034c4 <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	440b      	add	r3, r1
 800344e:	333f      	adds	r3, #63	; 0x3f
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HCD_HC_IN_IRQHandler+0x674>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	440b      	add	r3, r1
 8003464:	333f      	adds	r3, #63	; 0x3f
 8003466:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003468:	2b02      	cmp	r3, #2
 800346a:	d12b      	bne.n	80034c4 <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	440b      	add	r3, r1
 800347a:	3358      	adds	r3, #88	; 0x58
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	440b      	add	r3, r1
 800348e:	335d      	adds	r3, #93	; 0x5d
 8003490:	2203      	movs	r2, #3
 8003492:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	4413      	add	r3, r2
 800349c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	0151      	lsls	r1, r2, #5
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	440a      	add	r2, r1
 80034aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034ae:	f043 0302 	orr.w	r3, r3, #2
 80034b2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	4611      	mov	r1, r2
 80034be:	4618      	mov	r0, r3
 80034c0:	f005 f8b5 	bl	800862e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d0:	461a      	mov	r2, r3
 80034d2:	2310      	movs	r3, #16
 80034d4:	6093      	str	r3, [r2, #8]
}
 80034d6:	bf00      	nop
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b086      	sub	sp, #24
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	460b      	mov	r3, r1
 80034e8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b04      	cmp	r3, #4
 800350c:	d119      	bne.n	8003542 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4413      	add	r3, r2
 8003516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351a:	461a      	mov	r2, r3
 800351c:	2304      	movs	r3, #4
 800351e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	4413      	add	r3, r2
 8003528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	0151      	lsls	r1, r2, #5
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	440a      	add	r2, r1
 8003536:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800353a:	f043 0302 	orr.w	r3, r3, #2
 800353e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003540:	e31e      	b.n	8003b80 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	015a      	lsls	r2, r3, #5
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	4413      	add	r3, r2
 800354a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 0320 	and.w	r3, r3, #32
 8003554:	2b20      	cmp	r3, #32
 8003556:	d141      	bne.n	80035dc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4413      	add	r3, r2
 8003560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003564:	461a      	mov	r2, r3
 8003566:	2320      	movs	r3, #32
 8003568:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	440b      	add	r3, r1
 8003578:	333d      	adds	r3, #61	; 0x3d
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b01      	cmp	r3, #1
 800357e:	f040 82ff 	bne.w	8003b80 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	440b      	add	r3, r1
 8003590:	333d      	adds	r3, #61	; 0x3d
 8003592:	2200      	movs	r2, #0
 8003594:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	440b      	add	r3, r1
 80035a4:	335c      	adds	r3, #92	; 0x5c
 80035a6:	2202      	movs	r2, #2
 80035a8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	0151      	lsls	r1, r2, #5
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	440a      	add	r2, r1
 80035c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035c4:	f043 0302 	orr.w	r3, r3, #2
 80035c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	4611      	mov	r1, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f005 f82a 	bl	800862e <USB_HC_Halt>
}
 80035da:	e2d1      	b.n	8003b80 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ee:	2b40      	cmp	r3, #64	; 0x40
 80035f0:	d13f      	bne.n	8003672 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	440b      	add	r3, r1
 8003600:	335d      	adds	r3, #93	; 0x5d
 8003602:	2204      	movs	r2, #4
 8003604:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	440b      	add	r3, r1
 8003614:	333d      	adds	r3, #61	; 0x3d
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	440b      	add	r3, r1
 8003628:	3358      	adds	r3, #88	; 0x58
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4413      	add	r3, r2
 8003636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	0151      	lsls	r1, r2, #5
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	440a      	add	r2, r1
 8003644:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003648:	f043 0302 	orr.w	r3, r3, #2
 800364c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	4611      	mov	r1, r2
 8003658:	4618      	mov	r0, r3
 800365a:	f004 ffe8 	bl	800862e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4413      	add	r3, r2
 8003666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800366a:	461a      	mov	r2, r3
 800366c:	2340      	movs	r3, #64	; 0x40
 800366e:	6093      	str	r3, [r2, #8]
}
 8003670:	e286      	b.n	8003b80 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4413      	add	r3, r2
 800367a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003688:	d122      	bne.n	80036d0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	4413      	add	r3, r2
 8003692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	0151      	lsls	r1, r2, #5
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	440a      	add	r2, r1
 80036a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036a4:	f043 0302 	orr.w	r3, r3, #2
 80036a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	4611      	mov	r1, r2
 80036b4:	4618      	mov	r0, r3
 80036b6:	f004 ffba 	bl	800862e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c6:	461a      	mov	r2, r3
 80036c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036cc:	6093      	str	r3, [r2, #8]
}
 80036ce:	e257      	b.n	8003b80 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d135      	bne.n	8003752 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	440b      	add	r3, r1
 80036f4:	3358      	adds	r3, #88	; 0x58
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4413      	add	r3, r2
 8003702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	0151      	lsls	r1, r2, #5
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	440a      	add	r2, r1
 8003710:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003714:	f043 0302 	orr.w	r3, r3, #2
 8003718:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	4611      	mov	r1, r2
 8003724:	4618      	mov	r0, r3
 8003726:	f004 ff82 	bl	800862e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	4413      	add	r3, r2
 8003732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003736:	461a      	mov	r2, r3
 8003738:	2301      	movs	r3, #1
 800373a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	440b      	add	r3, r1
 800374a:	335d      	adds	r3, #93	; 0x5d
 800374c:	2201      	movs	r2, #1
 800374e:	701a      	strb	r2, [r3, #0]
}
 8003750:	e216      	b.n	8003b80 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4413      	add	r3, r2
 800375a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b08      	cmp	r3, #8
 8003766:	d12b      	bne.n	80037c0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4413      	add	r3, r2
 8003770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003774:	461a      	mov	r2, r3
 8003776:	2308      	movs	r3, #8
 8003778:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4413      	add	r3, r2
 8003782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	0151      	lsls	r1, r2, #5
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	440a      	add	r2, r1
 8003790:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003794:	f043 0302 	orr.w	r3, r3, #2
 8003798:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f004 ff42 	bl	800862e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	440b      	add	r3, r1
 80037b8:	335d      	adds	r3, #93	; 0x5d
 80037ba:	2205      	movs	r2, #5
 80037bc:	701a      	strb	r2, [r3, #0]
}
 80037be:	e1df      	b.n	8003b80 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	2b10      	cmp	r3, #16
 80037d4:	d135      	bne.n	8003842 <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	440b      	add	r3, r1
 80037e4:	3358      	adds	r3, #88	; 0x58
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4613      	mov	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	440b      	add	r3, r1
 80037f8:	335d      	adds	r3, #93	; 0x5d
 80037fa:	2203      	movs	r2, #3
 80037fc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4413      	add	r3, r2
 8003806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	0151      	lsls	r1, r2, #5
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	440a      	add	r2, r1
 8003814:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003818:	f043 0302 	orr.w	r3, r3, #2
 800381c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	4611      	mov	r1, r2
 8003828:	4618      	mov	r0, r3
 800382a:	f004 ff00 	bl	800862e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4413      	add	r3, r2
 8003836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383a:	461a      	mov	r2, r3
 800383c:	2310      	movs	r3, #16
 800383e:	6093      	str	r3, [r2, #8]
}
 8003840:	e19e      	b.n	8003b80 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4413      	add	r3, r2
 800384a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003854:	2b80      	cmp	r3, #128	; 0x80
 8003856:	d12b      	bne.n	80038b0 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	4413      	add	r3, r2
 8003860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	0151      	lsls	r1, r2, #5
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	440a      	add	r2, r1
 800386e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003872:	f043 0302 	orr.w	r3, r3, #2
 8003876:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	4611      	mov	r1, r2
 8003882:	4618      	mov	r0, r3
 8003884:	f004 fed3 	bl	800862e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	440b      	add	r3, r1
 8003896:	335d      	adds	r3, #93	; 0x5d
 8003898:	2206      	movs	r2, #6
 800389a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a8:	461a      	mov	r2, r3
 80038aa:	2380      	movs	r3, #128	; 0x80
 80038ac:	6093      	str	r3, [r2, #8]
}
 80038ae:	e167      	b.n	8003b80 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c6:	d135      	bne.n	8003934 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	0151      	lsls	r1, r2, #5
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	440a      	add	r2, r1
 80038de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038e2:	f043 0302 	orr.w	r3, r3, #2
 80038e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	4611      	mov	r1, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f004 fe9b 	bl	800862e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003904:	461a      	mov	r2, r3
 8003906:	2310      	movs	r3, #16
 8003908:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	4413      	add	r3, r2
 8003912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003916:	461a      	mov	r2, r3
 8003918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800391c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	440b      	add	r3, r1
 800392c:	335d      	adds	r3, #93	; 0x5d
 800392e:	2208      	movs	r2, #8
 8003930:	701a      	strb	r2, [r3, #0]
}
 8003932:	e125      	b.n	8003b80 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4413      	add	r3, r2
 800393c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b02      	cmp	r3, #2
 8003948:	f040 811a 	bne.w	8003b80 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4413      	add	r3, r2
 8003954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	0151      	lsls	r1, r2, #5
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	440a      	add	r2, r1
 8003962:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003966:	f023 0302 	bic.w	r3, r3, #2
 800396a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	440b      	add	r3, r1
 800397a:	335d      	adds	r3, #93	; 0x5d
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d137      	bne.n	80039f2 <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	440b      	add	r3, r1
 8003990:	335c      	adds	r3, #92	; 0x5c
 8003992:	2201      	movs	r2, #1
 8003994:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	440b      	add	r3, r1
 80039a4:	333f      	adds	r3, #63	; 0x3f
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d00b      	beq.n	80039c4 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	440b      	add	r3, r1
 80039ba:	333f      	adds	r3, #63	; 0x3f
 80039bc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80039be:	2b03      	cmp	r3, #3
 80039c0:	f040 80c5 	bne.w	8003b4e <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	440b      	add	r3, r1
 80039d2:	3351      	adds	r3, #81	; 0x51
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	f083 0301 	eor.w	r3, r3, #1
 80039da:	b2d8      	uxtb	r0, r3
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	440b      	add	r3, r1
 80039ea:	3351      	adds	r3, #81	; 0x51
 80039ec:	4602      	mov	r2, r0
 80039ee:	701a      	strb	r2, [r3, #0]
 80039f0:	e0ad      	b.n	8003b4e <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	440b      	add	r3, r1
 8003a00:	335d      	adds	r3, #93	; 0x5d
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d10a      	bne.n	8003a1e <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	440b      	add	r3, r1
 8003a16:	335c      	adds	r3, #92	; 0x5c
 8003a18:	2202      	movs	r2, #2
 8003a1a:	701a      	strb	r2, [r3, #0]
 8003a1c:	e097      	b.n	8003b4e <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4613      	mov	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	440b      	add	r3, r1
 8003a2c:	335d      	adds	r3, #93	; 0x5d
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d10a      	bne.n	8003a4a <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	440b      	add	r3, r1
 8003a42:	335c      	adds	r3, #92	; 0x5c
 8003a44:	2202      	movs	r2, #2
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	e081      	b.n	8003b4e <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	440b      	add	r3, r1
 8003a58:	335d      	adds	r3, #93	; 0x5d
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b05      	cmp	r3, #5
 8003a5e:	d10a      	bne.n	8003a76 <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	440b      	add	r3, r1
 8003a6e:	335c      	adds	r3, #92	; 0x5c
 8003a70:	2205      	movs	r2, #5
 8003a72:	701a      	strb	r2, [r3, #0]
 8003a74:	e06b      	b.n	8003b4e <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	440b      	add	r3, r1
 8003a84:	335d      	adds	r3, #93	; 0x5d
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b06      	cmp	r3, #6
 8003a8a:	d00a      	beq.n	8003aa2 <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	440b      	add	r3, r1
 8003a9a:	335d      	adds	r3, #93	; 0x5d
 8003a9c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d155      	bne.n	8003b4e <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	440b      	add	r3, r1
 8003ab0:	3358      	adds	r3, #88	; 0x58
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	1c59      	adds	r1, r3, #1
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4403      	add	r3, r0
 8003ac4:	3358      	adds	r3, #88	; 0x58
 8003ac6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	440b      	add	r3, r1
 8003ad6:	3358      	adds	r3, #88	; 0x58
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	d914      	bls.n	8003b08 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	440b      	add	r3, r1
 8003aec:	3358      	adds	r3, #88	; 0x58
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4613      	mov	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	440b      	add	r3, r1
 8003b00:	335c      	adds	r3, #92	; 0x5c
 8003b02:	2204      	movs	r2, #4
 8003b04:	701a      	strb	r2, [r3, #0]
 8003b06:	e009      	b.n	8003b1c <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	440b      	add	r3, r1
 8003b16:	335c      	adds	r3, #92	; 0x5c
 8003b18:	2202      	movs	r2, #2
 8003b1a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b32:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b3a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b48:	461a      	mov	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	b2d8      	uxtb	r0, r3
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	440b      	add	r3, r1
 8003b72:	335c      	adds	r3, #92	; 0x5c
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	4601      	mov	r1, r0
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f006 fd94 	bl	800a6a8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003b80:	bf00      	nop
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08a      	sub	sp, #40	; 0x28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	f003 030f 	and.w	r3, r3, #15
 8003ba8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	0c5b      	lsrs	r3, r3, #17
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	091b      	lsrs	r3, r3, #4
 8003bb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bbc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d003      	beq.n	8003bcc <HCD_RXQLVL_IRQHandler+0x44>
 8003bc4:	2b05      	cmp	r3, #5
 8003bc6:	f000 8082 	beq.w	8003cce <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003bca:	e083      	b.n	8003cd4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d07f      	beq.n	8003cd2 <HCD_RXQLVL_IRQHandler+0x14a>
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	440b      	add	r3, r1
 8003be0:	3344      	adds	r3, #68	; 0x44
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d074      	beq.n	8003cd2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	440b      	add	r3, r1
 8003bfa:	3344      	adds	r3, #68	; 0x44
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	b292      	uxth	r2, r2
 8003c02:	4619      	mov	r1, r3
 8003c04:	f004 f94d 	bl	8007ea2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	440b      	add	r3, r1
 8003c16:	3344      	adds	r3, #68	; 0x44
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	18d1      	adds	r1, r2, r3
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4613      	mov	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	4403      	add	r3, r0
 8003c2c:	3344      	adds	r3, #68	; 0x44
 8003c2e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	440b      	add	r3, r1
 8003c3e:	334c      	adds	r3, #76	; 0x4c
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	18d1      	adds	r1, r2, r3
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	4403      	add	r3, r0
 8003c54:	334c      	adds	r3, #76	; 0x4c
 8003c56:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c64:	691a      	ldr	r2, [r3, #16]
 8003c66:	4b1d      	ldr	r3, [pc, #116]	; (8003cdc <HCD_RXQLVL_IRQHandler+0x154>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d031      	beq.n	8003cd2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c84:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c8c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	440b      	add	r3, r1
 8003cae:	3350      	adds	r3, #80	; 0x50
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	f083 0301 	eor.w	r3, r3, #1
 8003cb6:	b2d8      	uxtb	r0, r3
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	440b      	add	r3, r1
 8003cc6:	3350      	adds	r3, #80	; 0x50
 8003cc8:	4602      	mov	r2, r0
 8003cca:	701a      	strb	r2, [r3, #0]
      break;
 8003ccc:	e001      	b.n	8003cd2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003cce:	bf00      	nop
 8003cd0:	e000      	b.n	8003cd4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003cd2:	bf00      	nop
  }
}
 8003cd4:	bf00      	nop
 8003cd6:	3728      	adds	r7, #40	; 0x28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	1ff80000 	.word	0x1ff80000

08003ce0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003d0c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d113      	bne.n	8003d40 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d10a      	bne.n	8003d38 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	699a      	ldr	r2, [r3, #24]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003d30:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f006 fc9c 	bl	800a670 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f043 0302 	orr.w	r3, r3, #2
 8003d3e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d147      	bne.n	8003dda <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f043 0308 	orr.w	r3, r3, #8
 8003d50:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d129      	bne.n	8003db0 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d113      	bne.n	8003d8c <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003d6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d6e:	d106      	bne.n	8003d7e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2102      	movs	r1, #2
 8003d76:	4618      	mov	r0, r3
 8003d78:	f004 f990 	bl	800809c <USB_InitFSLSPClkSel>
 8003d7c:	e011      	b.n	8003da2 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2101      	movs	r1, #1
 8003d84:	4618      	mov	r0, r3
 8003d86:	f004 f989 	bl	800809c <USB_InitFSLSPClkSel>
 8003d8a:	e00a      	b.n	8003da2 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d106      	bne.n	8003da2 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003da0:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f006 fc8e 	bl	800a6c4 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f006 fc61 	bl	800a670 <HAL_HCD_Connect_Callback>
 8003dae:	e014      	b.n	8003dda <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f006 fc95 	bl	800a6e0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003dc4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003dc8:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699a      	ldr	r2, [r3, #24]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003dd8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d103      	bne.n	8003dec <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f043 0320 	orr.w	r3, r3, #32
 8003dea:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003df2:	461a      	mov	r2, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	6013      	str	r3, [r2, #0]
}
 8003df8:	bf00      	nop
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e081      	b.n	8003f16 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fc ff6c 	bl	8000d04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2224      	movs	r2, #36	; 0x24
 8003e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0201 	bic.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d107      	bne.n	8003e7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e76:	609a      	str	r2, [r3, #8]
 8003e78:	e006      	b.n	8003e88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d104      	bne.n	8003e9a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ebc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691a      	ldr	r2, [r3, #16]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	ea42 0103 	orr.w	r1, r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	021a      	lsls	r2, r3, #8
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69d9      	ldr	r1, [r3, #28]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a1a      	ldr	r2, [r3, #32]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	4608      	mov	r0, r1
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4603      	mov	r3, r0
 8003f30:	817b      	strh	r3, [r7, #10]
 8003f32:	460b      	mov	r3, r1
 8003f34:	813b      	strh	r3, [r7, #8]
 8003f36:	4613      	mov	r3, r2
 8003f38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	f040 80f9 	bne.w	800413a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <HAL_I2C_Mem_Write+0x34>
 8003f4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d105      	bne.n	8003f60 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f5a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0ed      	b.n	800413c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d101      	bne.n	8003f6e <HAL_I2C_Mem_Write+0x4e>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	e0e6      	b.n	800413c <HAL_I2C_Mem_Write+0x21c>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f76:	f7fe f80b 	bl	8001f90 <HAL_GetTick>
 8003f7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	2319      	movs	r3, #25
 8003f82:	2201      	movs	r2, #1
 8003f84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f955 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0d1      	b.n	800413c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2221      	movs	r2, #33	; 0x21
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2240      	movs	r2, #64	; 0x40
 8003fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6a3a      	ldr	r2, [r7, #32]
 8003fb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fc0:	88f8      	ldrh	r0, [r7, #6]
 8003fc2:	893a      	ldrh	r2, [r7, #8]
 8003fc4:	8979      	ldrh	r1, [r7, #10]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	9301      	str	r3, [sp, #4]
 8003fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	4603      	mov	r3, r0
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 f8b9 	bl	8004148 <I2C_RequestMemoryWrite>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0a9      	b.n	800413c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2bff      	cmp	r3, #255	; 0xff
 8003ff0:	d90e      	bls.n	8004010 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	22ff      	movs	r2, #255	; 0xff
 8003ff6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	8979      	ldrh	r1, [r7, #10]
 8004000:	2300      	movs	r3, #0
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 fa37 	bl	800447c <I2C_TransferConfig>
 800400e:	e00f      	b.n	8004030 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401e:	b2da      	uxtb	r2, r3
 8004020:	8979      	ldrh	r1, [r7, #10]
 8004022:	2300      	movs	r3, #0
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 fa26 	bl	800447c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 f93f 	bl	80042b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e07b      	b.n	800413c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	781a      	ldrb	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d034      	beq.n	80040e8 <HAL_I2C_Mem_Write+0x1c8>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004082:	2b00      	cmp	r3, #0
 8004084:	d130      	bne.n	80040e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408c:	2200      	movs	r2, #0
 800408e:	2180      	movs	r1, #128	; 0x80
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f8d1 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e04d      	b.n	800413c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2bff      	cmp	r3, #255	; 0xff
 80040a8:	d90e      	bls.n	80040c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	22ff      	movs	r2, #255	; 0xff
 80040ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	8979      	ldrh	r1, [r7, #10]
 80040b8:	2300      	movs	r3, #0
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f9db 	bl	800447c <I2C_TransferConfig>
 80040c6:	e00f      	b.n	80040e8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	8979      	ldrh	r1, [r7, #10]
 80040da:	2300      	movs	r3, #0
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 f9ca 	bl	800447c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d19e      	bne.n	8004030 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f91e 	bl	8004338 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e01a      	b.n	800413c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2220      	movs	r2, #32
 800410c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6859      	ldr	r1, [r3, #4]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <HAL_I2C_Mem_Write+0x224>)
 800411a:	400b      	ands	r3, r1
 800411c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	e000      	b.n	800413c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800413a:	2302      	movs	r3, #2
  }
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	fe00e800 	.word	0xfe00e800

08004148 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af02      	add	r7, sp, #8
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	4608      	mov	r0, r1
 8004152:	4611      	mov	r1, r2
 8004154:	461a      	mov	r2, r3
 8004156:	4603      	mov	r3, r0
 8004158:	817b      	strh	r3, [r7, #10]
 800415a:	460b      	mov	r3, r1
 800415c:	813b      	strh	r3, [r7, #8]
 800415e:	4613      	mov	r3, r2
 8004160:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	b2da      	uxtb	r2, r3
 8004166:	8979      	ldrh	r1, [r7, #10]
 8004168:	4b20      	ldr	r3, [pc, #128]	; (80041ec <I2C_RequestMemoryWrite+0xa4>)
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f983 	bl	800447c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	69b9      	ldr	r1, [r7, #24]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 f89c 	bl	80042b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e02c      	b.n	80041e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800418a:	88fb      	ldrh	r3, [r7, #6]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d105      	bne.n	800419c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004190:	893b      	ldrh	r3, [r7, #8]
 8004192:	b2da      	uxtb	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	629a      	str	r2, [r3, #40]	; 0x28
 800419a:	e015      	b.n	80041c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800419c:	893b      	ldrh	r3, [r7, #8]
 800419e:	0a1b      	lsrs	r3, r3, #8
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	69b9      	ldr	r1, [r7, #24]
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f882 	bl	80042b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e012      	b.n	80041e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041be:	893b      	ldrh	r3, [r7, #8]
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2200      	movs	r2, #0
 80041d0:	2180      	movs	r1, #128	; 0x80
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f830 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	80002000 	.word	0x80002000

080041f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b02      	cmp	r3, #2
 8004204:	d103      	bne.n	800420e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2200      	movs	r2, #0
 800420c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b01      	cmp	r3, #1
 800421a:	d007      	beq.n	800422c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699a      	ldr	r2, [r3, #24]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	619a      	str	r2, [r3, #24]
  }
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	4613      	mov	r3, r2
 8004246:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004248:	e022      	b.n	8004290 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004250:	d01e      	beq.n	8004290 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004252:	f7fd fe9d 	bl	8001f90 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d302      	bcc.n	8004268 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d113      	bne.n	8004290 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426c:	f043 0220 	orr.w	r2, r3, #32
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e00f      	b.n	80042b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	4013      	ands	r3, r2
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	429a      	cmp	r2, r3
 800429e:	bf0c      	ite	eq
 80042a0:	2301      	moveq	r3, #1
 80042a2:	2300      	movne	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	461a      	mov	r2, r3
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d0cd      	beq.n	800424a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042c4:	e02c      	b.n	8004320 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	68b9      	ldr	r1, [r7, #8]
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 f870 	bl	80043b0 <I2C_IsAcknowledgeFailed>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e02a      	b.n	8004330 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e0:	d01e      	beq.n	8004320 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e2:	f7fd fe55 	bl	8001f90 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d302      	bcc.n	80042f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d113      	bne.n	8004320 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fc:	f043 0220 	orr.w	r2, r3, #32
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e007      	b.n	8004330 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b02      	cmp	r3, #2
 800432c:	d1cb      	bne.n	80042c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004344:	e028      	b.n	8004398 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	68b9      	ldr	r1, [r7, #8]
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 f830 	bl	80043b0 <I2C_IsAcknowledgeFailed>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e026      	b.n	80043a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435a:	f7fd fe19 	bl	8001f90 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	429a      	cmp	r2, r3
 8004368:	d302      	bcc.n	8004370 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d113      	bne.n	8004398 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004374:	f043 0220 	orr.w	r2, r3, #32
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e007      	b.n	80043a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b20      	cmp	r3, #32
 80043a4:	d1cf      	bne.n	8004346 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	2b10      	cmp	r3, #16
 80043c8:	d151      	bne.n	800446e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043ca:	e022      	b.n	8004412 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d2:	d01e      	beq.n	8004412 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d4:	f7fd fddc 	bl	8001f90 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d302      	bcc.n	80043ea <I2C_IsAcknowledgeFailed+0x3a>
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d113      	bne.n	8004412 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ee:	f043 0220 	orr.w	r2, r3, #32
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e02e      	b.n	8004470 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b20      	cmp	r3, #32
 800441e:	d1d5      	bne.n	80043cc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2210      	movs	r2, #16
 8004426:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2220      	movs	r2, #32
 800442e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f7ff fedd 	bl	80041f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6859      	ldr	r1, [r3, #4]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4b0d      	ldr	r3, [pc, #52]	; (8004478 <I2C_IsAcknowledgeFailed+0xc8>)
 8004442:	400b      	ands	r3, r1
 8004444:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444a:	f043 0204 	orr.w	r2, r3, #4
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	fe00e800 	.word	0xfe00e800

0800447c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	460b      	mov	r3, r1
 8004488:	817b      	strh	r3, [r7, #10]
 800448a:	4613      	mov	r3, r2
 800448c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	0d5b      	lsrs	r3, r3, #21
 8004498:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800449c:	4b0d      	ldr	r3, [pc, #52]	; (80044d4 <I2C_TransferConfig+0x58>)
 800449e:	430b      	orrs	r3, r1
 80044a0:	43db      	mvns	r3, r3
 80044a2:	ea02 0103 	and.w	r1, r2, r3
 80044a6:	897b      	ldrh	r3, [r7, #10]
 80044a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80044ac:	7a7b      	ldrb	r3, [r7, #9]
 80044ae:	041b      	lsls	r3, r3, #16
 80044b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	431a      	orrs	r2, r3
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	431a      	orrs	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80044c6:	bf00      	nop
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	03ff63ff 	.word	0x03ff63ff

080044d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b20      	cmp	r3, #32
 80044ec:	d138      	bne.n	8004560 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e032      	b.n	8004562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2224      	movs	r2, #36	; 0x24
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0201 	bic.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800452a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6819      	ldr	r1, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0201 	orr.w	r2, r2, #1
 800454a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800455c:	2300      	movs	r3, #0
 800455e:	e000      	b.n	8004562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004560:	2302      	movs	r3, #2
  }
}
 8004562:	4618      	mov	r0, r3
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800456e:	b480      	push	{r7}
 8004570:	b085      	sub	sp, #20
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b20      	cmp	r3, #32
 8004582:	d139      	bne.n	80045f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800458e:	2302      	movs	r3, #2
 8004590:	e033      	b.n	80045fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2224      	movs	r2, #36	; 0x24
 800459e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0201 	bic.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0201 	orr.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	e000      	b.n	80045fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80045f8:	2302      	movs	r3, #2
  }
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
	...

08004608 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e0af      	b.n	800477a <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fc fc14 	bl	8000e5c <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0201 	bic.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	e00a      	b.n	8004668 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	3304      	adds	r3, #4
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	2200      	movs	r2, #0
 8004660:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	3301      	adds	r3, #1
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	2b0f      	cmp	r3, #15
 800466c:	d9f1      	bls.n	8004652 <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0204 	orr.w	r2, r2, #4
 800467c:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	4b3f      	ldr	r3, [pc, #252]	; (8004784 <HAL_LCD_Init+0x17c>)
 8004686:	4013      	ands	r3, r2
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6851      	ldr	r1, [r2, #4]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6892      	ldr	r2, [r2, #8]
 8004690:	4311      	orrs	r1, r2
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004696:	4311      	orrs	r1, r2
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800469c:	4311      	orrs	r1, r2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	69d2      	ldr	r2, [r2, #28]
 80046a2:	4311      	orrs	r1, r2
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6a12      	ldr	r2, [r2, #32]
 80046a8:	4311      	orrs	r1, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6992      	ldr	r2, [r2, #24]
 80046ae:	4311      	orrs	r1, r2
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046b4:	4311      	orrs	r1, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	430b      	orrs	r3, r1
 80046bc:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f862 	bl	8004788 <LCD_WaitForSynchro>
 80046c4:	4603      	mov	r3, r0
 80046c6:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 80046c8:	7cfb      	ldrb	r3, [r7, #19]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_LCD_Init+0xca>
  {
    return status;
 80046ce:	7cfb      	ldrb	r3, [r7, #19]
 80046d0:	e053      	b.n	800477a <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68da      	ldr	r2, [r3, #12]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0201 	orr.w	r2, r2, #1
 8004708:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 800470a:	f7fd fc41 	bl	8001f90 <HAL_GetTick>
 800470e:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8004710:	e00c      	b.n	800472c <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8004712:	f7fd fc3d 	bl	8001f90 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004720:	d904      	bls.n	800472c <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2208      	movs	r2, #8
 8004726:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e026      	b.n	800477a <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b01      	cmp	r3, #1
 8004738:	d1eb      	bne.n	8004712 <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 800473a:	f7fd fc29 	bl	8001f90 <HAL_GetTick>
 800473e:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8004740:	e00c      	b.n	800475c <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8004742:	f7fd fc25 	bl	8001f90 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004750:	d904      	bls.n	800475c <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2210      	movs	r2, #16
 8004756:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e00e      	b.n	800477a <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 0310 	and.w	r3, r3, #16
 8004766:	2b10      	cmp	r3, #16
 8004768:	d1eb      	bne.n	8004742 <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8004778:	7cfb      	ldrb	r3, [r7, #19]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	fc00000e 	.word	0xfc00000e

08004788 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8004790:	f7fd fbfe 	bl	8001f90 <HAL_GetTick>
 8004794:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8004796:	e00c      	b.n	80047b2 <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8004798:	f7fd fbfa 	bl	8001f90 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047a6:	d904      	bls.n	80047b2 <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e007      	b.n	80047c2 <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f003 0320 	and.w	r3, r3, #32
 80047bc:	2b20      	cmp	r3, #32
 80047be:	d1eb      	bne.n	8004798 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a04      	ldr	r2, [pc, #16]	; (80047e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047da:	6013      	str	r3, [r2, #0]
}
 80047dc:	bf00      	nop
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40007000 	.word	0x40007000

080047ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80047f0:	4b04      	ldr	r3, [pc, #16]	; (8004804 <HAL_PWREx_GetVoltageRange+0x18>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40007000 	.word	0x40007000

08004808 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004816:	d130      	bne.n	800487a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004818:	4b23      	ldr	r3, [pc, #140]	; (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004824:	d038      	beq.n	8004898 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004826:	4b20      	ldr	r3, [pc, #128]	; (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800482e:	4a1e      	ldr	r2, [pc, #120]	; (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004830:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004834:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004836:	4b1d      	ldr	r3, [pc, #116]	; (80048ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2232      	movs	r2, #50	; 0x32
 800483c:	fb02 f303 	mul.w	r3, r2, r3
 8004840:	4a1b      	ldr	r2, [pc, #108]	; (80048b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004842:	fba2 2303 	umull	r2, r3, r2, r3
 8004846:	0c9b      	lsrs	r3, r3, #18
 8004848:	3301      	adds	r3, #1
 800484a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800484c:	e002      	b.n	8004854 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3b01      	subs	r3, #1
 8004852:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004854:	4b14      	ldr	r3, [pc, #80]	; (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800485c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004860:	d102      	bne.n	8004868 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1f2      	bne.n	800484e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004868:	4b0f      	ldr	r3, [pc, #60]	; (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004874:	d110      	bne.n	8004898 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e00f      	b.n	800489a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800487a:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004886:	d007      	beq.n	8004898 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004888:	4b07      	ldr	r3, [pc, #28]	; (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004890:	4a05      	ldr	r2, [pc, #20]	; (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004892:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004896:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40007000 	.word	0x40007000
 80048ac:	2000001c 	.word	0x2000001c
 80048b0:	431bde83 	.word	0x431bde83

080048b4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80048b8:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	4a04      	ldr	r2, [pc, #16]	; (80048d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80048be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048c2:	6053      	str	r3, [r2, #4]
}
 80048c4:	bf00      	nop
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40007000 	.word	0x40007000

080048d4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af02      	add	r7, sp, #8
 80048da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80048dc:	f7fd fb58 	bl	8001f90 <HAL_GetTick>
 80048e0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e06f      	b.n	80049cc <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_QSPI_Init+0x28>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e067      	b.n	80049cc <HAL_QSPI_Init+0xf8>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10b      	bne.n	8004928 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f7fc fc39 	bl	8001190 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800491e:	f241 3188 	movw	r1, #5000	; 0x1388
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f858 	bl	80049d8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	3b01      	subs	r3, #1
 8004938:	021a      	lsls	r2, r3, #8
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	2120      	movs	r1, #32
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f850 	bl	80049f4 <QSPI_WaitFlagStateUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004958:	7afb      	ldrb	r3, [r7, #11]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d131      	bne.n	80049c2 <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004968:	f023 0310 	bic.w	r3, r3, #16
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6852      	ldr	r2, [r2, #4]
 8004970:	0611      	lsls	r1, r2, #24
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	68d2      	ldr	r2, [r2, #12]
 8004976:	4311      	orrs	r1, r2
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6812      	ldr	r2, [r2, #0]
 800497c:	430b      	orrs	r3, r1
 800497e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	4b13      	ldr	r3, [pc, #76]	; (80049d4 <HAL_QSPI_Init+0x100>)
 8004988:	4013      	ands	r3, r2
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6912      	ldr	r2, [r2, #16]
 800498e:	0411      	lsls	r1, r2, #16
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6952      	ldr	r2, [r2, #20]
 8004994:	4311      	orrs	r1, r2
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	6992      	ldr	r2, [r2, #24]
 800499a:	4311      	orrs	r1, r2
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6812      	ldr	r2, [r2, #0]
 80049a0:	430b      	orrs	r3, r1
 80049a2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0201 	orr.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80049ca:	7afb      	ldrb	r3, [r7, #11]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	ffe0f8fe 	.word	0xffe0f8fe

080049d8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	4613      	mov	r3, r2
 8004a02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004a04:	e01a      	b.n	8004a3c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0c:	d016      	beq.n	8004a3c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a0e:	f7fd fabf 	bl	8001f90 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d302      	bcc.n	8004a24 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10b      	bne.n	8004a3c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2204      	movs	r2, #4
 8004a28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a30:	f043 0201 	orr.w	r2, r3, #1
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e00e      	b.n	8004a5a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	4013      	ands	r3, r2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	bf14      	ite	ne
 8004a4a:	2301      	movne	r3, #1
 8004a4c:	2300      	moveq	r3, #0
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	461a      	mov	r2, r3
 8004a52:	79fb      	ldrb	r3, [r7, #7]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d1d6      	bne.n	8004a06 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
	...

08004a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e39d      	b.n	80051b2 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a76:	4ba4      	ldr	r3, [pc, #656]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 030c 	and.w	r3, r3, #12
 8004a7e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a80:	4ba1      	ldr	r3, [pc, #644]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f003 0303 	and.w	r3, r3, #3
 8004a88:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0310 	and.w	r3, r3, #16
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 80e1 	beq.w	8004c5a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d007      	beq.n	8004aae <HAL_RCC_OscConfig+0x4a>
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	2b0c      	cmp	r3, #12
 8004aa2:	f040 8088 	bne.w	8004bb6 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	f040 8084 	bne.w	8004bb6 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004aae:	4b96      	ldr	r3, [pc, #600]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d005      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x62>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e375      	b.n	80051b2 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1a      	ldr	r2, [r3, #32]
 8004aca:	4b8f      	ldr	r3, [pc, #572]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d004      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x7c>
 8004ad6:	4b8c      	ldr	r3, [pc, #560]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ade:	e005      	b.n	8004aec <HAL_RCC_OscConfig+0x88>
 8004ae0:	4b89      	ldr	r3, [pc, #548]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ae6:	091b      	lsrs	r3, r3, #4
 8004ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d223      	bcs.n	8004b38 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 fd09 	bl	800550c <RCC_SetFlashLatencyFromMSIRange>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e356      	b.n	80051b2 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b04:	4b80      	ldr	r3, [pc, #512]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a7f      	ldr	r2, [pc, #508]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004b0a:	f043 0308 	orr.w	r3, r3, #8
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	4b7d      	ldr	r3, [pc, #500]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	497a      	ldr	r1, [pc, #488]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b22:	4b79      	ldr	r3, [pc, #484]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	021b      	lsls	r3, r3, #8
 8004b30:	4975      	ldr	r1, [pc, #468]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	604b      	str	r3, [r1, #4]
 8004b36:	e022      	b.n	8004b7e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b38:	4b73      	ldr	r3, [pc, #460]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a72      	ldr	r2, [pc, #456]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004b3e:	f043 0308 	orr.w	r3, r3, #8
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	4b70      	ldr	r3, [pc, #448]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	496d      	ldr	r1, [pc, #436]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b56:	4b6c      	ldr	r3, [pc, #432]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	021b      	lsls	r3, r3, #8
 8004b64:	4968      	ldr	r1, [pc, #416]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fccc 	bl	800550c <RCC_SetFlashLatencyFromMSIRange>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e319      	b.n	80051b2 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b7e:	f000 fc03 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 8004b82:	4601      	mov	r1, r0
 8004b84:	4b60      	ldr	r3, [pc, #384]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	091b      	lsrs	r3, r3, #4
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	4a5f      	ldr	r2, [pc, #380]	; (8004d0c <HAL_RCC_OscConfig+0x2a8>)
 8004b90:	5cd3      	ldrb	r3, [r2, r3]
 8004b92:	f003 031f 	and.w	r3, r3, #31
 8004b96:	fa21 f303 	lsr.w	r3, r1, r3
 8004b9a:	4a5d      	ldr	r2, [pc, #372]	; (8004d10 <HAL_RCC_OscConfig+0x2ac>)
 8004b9c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b9e:	4b5d      	ldr	r3, [pc, #372]	; (8004d14 <HAL_RCC_OscConfig+0x2b0>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fd f9a8 	bl	8001ef8 <HAL_InitTick>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d052      	beq.n	8004c58 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
 8004bb4:	e2fd      	b.n	80051b2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d032      	beq.n	8004c24 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004bbe:	4b52      	ldr	r3, [pc, #328]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a51      	ldr	r2, [pc, #324]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004bc4:	f043 0301 	orr.w	r3, r3, #1
 8004bc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004bca:	f7fd f9e1 	bl	8001f90 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bd2:	f7fd f9dd 	bl	8001f90 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e2e6      	b.n	80051b2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004be4:	4b48      	ldr	r3, [pc, #288]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0f0      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bf0:	4b45      	ldr	r3, [pc, #276]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a44      	ldr	r2, [pc, #272]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004bf6:	f043 0308 	orr.w	r3, r3, #8
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	4b42      	ldr	r3, [pc, #264]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	493f      	ldr	r1, [pc, #252]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c0e:	4b3e      	ldr	r3, [pc, #248]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	021b      	lsls	r3, r3, #8
 8004c1c:	493a      	ldr	r1, [pc, #232]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	604b      	str	r3, [r1, #4]
 8004c22:	e01a      	b.n	8004c5a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c24:	4b38      	ldr	r3, [pc, #224]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a37      	ldr	r2, [pc, #220]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004c2a:	f023 0301 	bic.w	r3, r3, #1
 8004c2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c30:	f7fd f9ae 	bl	8001f90 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c38:	f7fd f9aa 	bl	8001f90 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e2b3      	b.n	80051b2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c4a:	4b2f      	ldr	r3, [pc, #188]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f0      	bne.n	8004c38 <HAL_RCC_OscConfig+0x1d4>
 8004c56:	e000      	b.n	8004c5a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d074      	beq.n	8004d50 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d005      	beq.n	8004c78 <HAL_RCC_OscConfig+0x214>
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	2b0c      	cmp	r3, #12
 8004c70:	d10e      	bne.n	8004c90 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	d10b      	bne.n	8004c90 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c78:	4b23      	ldr	r3, [pc, #140]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d064      	beq.n	8004d4e <HAL_RCC_OscConfig+0x2ea>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d160      	bne.n	8004d4e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e290      	b.n	80051b2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c98:	d106      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x244>
 8004c9a:	4b1b      	ldr	r3, [pc, #108]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a1a      	ldr	r2, [pc, #104]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	e01d      	b.n	8004ce4 <HAL_RCC_OscConfig+0x280>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cb0:	d10c      	bne.n	8004ccc <HAL_RCC_OscConfig+0x268>
 8004cb2:	4b15      	ldr	r3, [pc, #84]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a14      	ldr	r2, [pc, #80]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a11      	ldr	r2, [pc, #68]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	e00b      	b.n	8004ce4 <HAL_RCC_OscConfig+0x280>
 8004ccc:	4b0e      	ldr	r3, [pc, #56]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a0d      	ldr	r2, [pc, #52]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a0a      	ldr	r2, [pc, #40]	; (8004d08 <HAL_RCC_OscConfig+0x2a4>)
 8004cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01c      	beq.n	8004d26 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cec:	f7fd f950 	bl	8001f90 <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cf2:	e011      	b.n	8004d18 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf4:	f7fd f94c 	bl	8001f90 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b64      	cmp	r3, #100	; 0x64
 8004d00:	d90a      	bls.n	8004d18 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e255      	b.n	80051b2 <HAL_RCC_OscConfig+0x74e>
 8004d06:	bf00      	nop
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	0800b818 	.word	0x0800b818
 8004d10:	2000001c 	.word	0x2000001c
 8004d14:	20000020 	.word	0x20000020
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d18:	4bae      	ldr	r3, [pc, #696]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0e7      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x290>
 8004d24:	e014      	b.n	8004d50 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d26:	f7fd f933 	bl	8001f90 <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d2e:	f7fd f92f 	bl	8001f90 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b64      	cmp	r3, #100	; 0x64
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e238      	b.n	80051b2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d40:	4ba4      	ldr	r3, [pc, #656]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f0      	bne.n	8004d2e <HAL_RCC_OscConfig+0x2ca>
 8004d4c:	e000      	b.n	8004d50 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d4e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d060      	beq.n	8004e1e <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d005      	beq.n	8004d6e <HAL_RCC_OscConfig+0x30a>
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	2b0c      	cmp	r3, #12
 8004d66:	d119      	bne.n	8004d9c <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d116      	bne.n	8004d9c <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d6e:	4b99      	ldr	r3, [pc, #612]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d005      	beq.n	8004d86 <HAL_RCC_OscConfig+0x322>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e215      	b.n	80051b2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d86:	4b93      	ldr	r3, [pc, #588]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	061b      	lsls	r3, r3, #24
 8004d94:	498f      	ldr	r1, [pc, #572]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d9a:	e040      	b.n	8004e1e <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d023      	beq.n	8004dec <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004da4:	4b8b      	ldr	r3, [pc, #556]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a8a      	ldr	r2, [pc, #552]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db0:	f7fd f8ee 	bl	8001f90 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004db8:	f7fd f8ea 	bl	8001f90 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e1f3      	b.n	80051b2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dca:	4b82      	ldr	r3, [pc, #520]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0f0      	beq.n	8004db8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd6:	4b7f      	ldr	r3, [pc, #508]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	061b      	lsls	r3, r3, #24
 8004de4:	497b      	ldr	r1, [pc, #492]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	604b      	str	r3, [r1, #4]
 8004dea:	e018      	b.n	8004e1e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dec:	4b79      	ldr	r3, [pc, #484]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a78      	ldr	r2, [pc, #480]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004df2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df8:	f7fd f8ca 	bl	8001f90 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e00:	f7fd f8c6 	bl	8001f90 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e1cf      	b.n	80051b2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e12:	4b70      	ldr	r3, [pc, #448]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1f0      	bne.n	8004e00 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d03c      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01c      	beq.n	8004e6c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e32:	4b68      	ldr	r3, [pc, #416]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e38:	4a66      	ldr	r2, [pc, #408]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004e3a:	f043 0301 	orr.w	r3, r3, #1
 8004e3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e42:	f7fd f8a5 	bl	8001f90 <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e48:	e008      	b.n	8004e5c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e4a:	f7fd f8a1 	bl	8001f90 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e1aa      	b.n	80051b2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e5c:	4b5d      	ldr	r3, [pc, #372]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d0ef      	beq.n	8004e4a <HAL_RCC_OscConfig+0x3e6>
 8004e6a:	e01b      	b.n	8004ea4 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e6c:	4b59      	ldr	r3, [pc, #356]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e72:	4a58      	ldr	r2, [pc, #352]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004e74:	f023 0301 	bic.w	r3, r3, #1
 8004e78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7c:	f7fd f888 	bl	8001f90 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e84:	f7fd f884 	bl	8001f90 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e18d      	b.n	80051b2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e96:	4b4f      	ldr	r3, [pc, #316]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1ef      	bne.n	8004e84 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 80a5 	beq.w	8004ffc <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004eb6:	4b47      	ldr	r3, [pc, #284]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10d      	bne.n	8004ede <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ec2:	4b44      	ldr	r3, [pc, #272]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec6:	4a43      	ldr	r2, [pc, #268]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8004ece:	4b41      	ldr	r3, [pc, #260]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed6:	60bb      	str	r3, [r7, #8]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eda:	2301      	movs	r3, #1
 8004edc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ede:	4b3e      	ldr	r3, [pc, #248]	; (8004fd8 <HAL_RCC_OscConfig+0x574>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d118      	bne.n	8004f1c <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004eea:	4b3b      	ldr	r3, [pc, #236]	; (8004fd8 <HAL_RCC_OscConfig+0x574>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a3a      	ldr	r2, [pc, #232]	; (8004fd8 <HAL_RCC_OscConfig+0x574>)
 8004ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ef6:	f7fd f84b 	bl	8001f90 <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004efc:	e008      	b.n	8004f10 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004efe:	f7fd f847 	bl	8001f90 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e150      	b.n	80051b2 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f10:	4b31      	ldr	r3, [pc, #196]	; (8004fd8 <HAL_RCC_OscConfig+0x574>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0f0      	beq.n	8004efe <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d108      	bne.n	8004f36 <HAL_RCC_OscConfig+0x4d2>
 8004f24:	4b2b      	ldr	r3, [pc, #172]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2a:	4a2a      	ldr	r2, [pc, #168]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004f2c:	f043 0301 	orr.w	r3, r3, #1
 8004f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f34:	e024      	b.n	8004f80 <HAL_RCC_OscConfig+0x51c>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	2b05      	cmp	r3, #5
 8004f3c:	d110      	bne.n	8004f60 <HAL_RCC_OscConfig+0x4fc>
 8004f3e:	4b25      	ldr	r3, [pc, #148]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f44:	4a23      	ldr	r2, [pc, #140]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004f46:	f043 0304 	orr.w	r3, r3, #4
 8004f4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f4e:	4b21      	ldr	r3, [pc, #132]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f54:	4a1f      	ldr	r2, [pc, #124]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004f56:	f043 0301 	orr.w	r3, r3, #1
 8004f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f5e:	e00f      	b.n	8004f80 <HAL_RCC_OscConfig+0x51c>
 8004f60:	4b1c      	ldr	r3, [pc, #112]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f66:	4a1b      	ldr	r2, [pc, #108]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004f68:	f023 0301 	bic.w	r3, r3, #1
 8004f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f70:	4b18      	ldr	r3, [pc, #96]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f76:	4a17      	ldr	r2, [pc, #92]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004f78:	f023 0304 	bic.w	r3, r3, #4
 8004f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d016      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f88:	f7fd f802 	bl	8001f90 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f90:	f7fc fffe 	bl	8001f90 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e105      	b.n	80051b2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fa6:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <HAL_RCC_OscConfig+0x570>)
 8004fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0ed      	beq.n	8004f90 <HAL_RCC_OscConfig+0x52c>
 8004fb4:	e019      	b.n	8004fea <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb6:	f7fc ffeb 	bl	8001f90 <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fbc:	e00e      	b.n	8004fdc <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fbe:	f7fc ffe7 	bl	8001f90 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d905      	bls.n	8004fdc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e0ee      	b.n	80051b2 <HAL_RCC_OscConfig+0x74e>
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fdc:	4b77      	ldr	r3, [pc, #476]	; (80051bc <HAL_RCC_OscConfig+0x758>)
 8004fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1e9      	bne.n	8004fbe <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fea:	7ffb      	ldrb	r3, [r7, #31]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d105      	bne.n	8004ffc <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ff0:	4b72      	ldr	r3, [pc, #456]	; (80051bc <HAL_RCC_OscConfig+0x758>)
 8004ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff4:	4a71      	ldr	r2, [pc, #452]	; (80051bc <HAL_RCC_OscConfig+0x758>)
 8004ff6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ffa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 80d5 	beq.w	80051b0 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	2b0c      	cmp	r3, #12
 800500a:	f000 808e 	beq.w	800512a <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005012:	2b02      	cmp	r3, #2
 8005014:	d15b      	bne.n	80050ce <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005016:	4b69      	ldr	r3, [pc, #420]	; (80051bc <HAL_RCC_OscConfig+0x758>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a68      	ldr	r2, [pc, #416]	; (80051bc <HAL_RCC_OscConfig+0x758>)
 800501c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005022:	f7fc ffb5 	bl	8001f90 <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005028:	e008      	b.n	800503c <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800502a:	f7fc ffb1 	bl	8001f90 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e0ba      	b.n	80051b2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800503c:	4b5f      	ldr	r3, [pc, #380]	; (80051bc <HAL_RCC_OscConfig+0x758>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1f0      	bne.n	800502a <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005048:	4b5c      	ldr	r3, [pc, #368]	; (80051bc <HAL_RCC_OscConfig+0x758>)
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	4b5c      	ldr	r3, [pc, #368]	; (80051c0 <HAL_RCC_OscConfig+0x75c>)
 800504e:	4013      	ands	r3, r2
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005058:	3a01      	subs	r2, #1
 800505a:	0112      	lsls	r2, r2, #4
 800505c:	4311      	orrs	r1, r2
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005062:	0212      	lsls	r2, r2, #8
 8005064:	4311      	orrs	r1, r2
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800506a:	0852      	lsrs	r2, r2, #1
 800506c:	3a01      	subs	r2, #1
 800506e:	0552      	lsls	r2, r2, #21
 8005070:	4311      	orrs	r1, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005076:	0852      	lsrs	r2, r2, #1
 8005078:	3a01      	subs	r2, #1
 800507a:	0652      	lsls	r2, r2, #25
 800507c:	4311      	orrs	r1, r2
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005082:	0912      	lsrs	r2, r2, #4
 8005084:	0452      	lsls	r2, r2, #17
 8005086:	430a      	orrs	r2, r1
 8005088:	494c      	ldr	r1, [pc, #304]	; (80051bc <HAL_RCC_OscConfig+0x758>)
 800508a:	4313      	orrs	r3, r2
 800508c:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800508e:	4b4b      	ldr	r3, [pc, #300]	; (80051bc <HAL_RCC_OscConfig+0x758>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a4a      	ldr	r2, [pc, #296]	; (80051bc <HAL_RCC_OscConfig+0x758>)
 8005094:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005098:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800509a:	4b48      	ldr	r3, [pc, #288]	; (80051bc <HAL_RCC_OscConfig+0x758>)
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	4a47      	ldr	r2, [pc, #284]	; (80051bc <HAL_RCC_OscConfig+0x758>)
 80050a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050a4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a6:	f7fc ff73 	bl	8001f90 <HAL_GetTick>
 80050aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ae:	f7fc ff6f 	bl	8001f90 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e078      	b.n	80051b2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050c0:	4b3e      	ldr	r3, [pc, #248]	; (80051bc <HAL_RCC_OscConfig+0x758>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0f0      	beq.n	80050ae <HAL_RCC_OscConfig+0x64a>
 80050cc:	e070      	b.n	80051b0 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ce:	4b3b      	ldr	r3, [pc, #236]	; (80051bc <HAL_RCC_OscConfig+0x758>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a3a      	ldr	r2, [pc, #232]	; (80051bc <HAL_RCC_OscConfig+0x758>)
 80050d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050d8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80050da:	4b38      	ldr	r3, [pc, #224]	; (80051bc <HAL_RCC_OscConfig+0x758>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d105      	bne.n	80050f2 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80050e6:	4b35      	ldr	r3, [pc, #212]	; (80051bc <HAL_RCC_OscConfig+0x758>)
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	4a34      	ldr	r2, [pc, #208]	; (80051bc <HAL_RCC_OscConfig+0x758>)
 80050ec:	f023 0303 	bic.w	r3, r3, #3
 80050f0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80050f2:	4b32      	ldr	r3, [pc, #200]	; (80051bc <HAL_RCC_OscConfig+0x758>)
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	4a31      	ldr	r2, [pc, #196]	; (80051bc <HAL_RCC_OscConfig+0x758>)
 80050f8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80050fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005100:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005102:	f7fc ff45 	bl	8001f90 <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800510a:	f7fc ff41 	bl	8001f90 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e04a      	b.n	80051b2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800511c:	4b27      	ldr	r3, [pc, #156]	; (80051bc <HAL_RCC_OscConfig+0x758>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1f0      	bne.n	800510a <HAL_RCC_OscConfig+0x6a6>
 8005128:	e042      	b.n	80051b0 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512e:	2b01      	cmp	r3, #1
 8005130:	d101      	bne.n	8005136 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e03d      	b.n	80051b2 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8005136:	4b21      	ldr	r3, [pc, #132]	; (80051bc <HAL_RCC_OscConfig+0x758>)
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f003 0203 	and.w	r2, r3, #3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005146:	429a      	cmp	r2, r3
 8005148:	d130      	bne.n	80051ac <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005154:	3b01      	subs	r3, #1
 8005156:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005158:	429a      	cmp	r2, r3
 800515a:	d127      	bne.n	80051ac <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005166:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005168:	429a      	cmp	r2, r3
 800516a:	d11f      	bne.n	80051ac <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005176:	2a07      	cmp	r2, #7
 8005178:	bf14      	ite	ne
 800517a:	2201      	movne	r2, #1
 800517c:	2200      	moveq	r2, #0
 800517e:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005180:	4293      	cmp	r3, r2
 8005182:	d113      	bne.n	80051ac <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518e:	085b      	lsrs	r3, r3, #1
 8005190:	3b01      	subs	r3, #1
 8005192:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005194:	429a      	cmp	r2, r3
 8005196:	d109      	bne.n	80051ac <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	085b      	lsrs	r3, r3, #1
 80051a4:	3b01      	subs	r3, #1
 80051a6:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d001      	beq.n	80051b0 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e000      	b.n	80051b2 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3720      	adds	r7, #32
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	40021000 	.word	0x40021000
 80051c0:	f99d808c 	.word	0xf99d808c

080051c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e0c8      	b.n	800536a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051d8:	4b66      	ldr	r3, [pc, #408]	; (8005374 <HAL_RCC_ClockConfig+0x1b0>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d910      	bls.n	8005208 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e6:	4b63      	ldr	r3, [pc, #396]	; (8005374 <HAL_RCC_ClockConfig+0x1b0>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f023 0207 	bic.w	r2, r3, #7
 80051ee:	4961      	ldr	r1, [pc, #388]	; (8005374 <HAL_RCC_ClockConfig+0x1b0>)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f6:	4b5f      	ldr	r3, [pc, #380]	; (8005374 <HAL_RCC_ClockConfig+0x1b0>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	429a      	cmp	r2, r3
 8005202:	d001      	beq.n	8005208 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e0b0      	b.n	800536a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	d04c      	beq.n	80052ae <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	2b03      	cmp	r3, #3
 800521a:	d107      	bne.n	800522c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800521c:	4b56      	ldr	r3, [pc, #344]	; (8005378 <HAL_RCC_ClockConfig+0x1b4>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d121      	bne.n	800526c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e09e      	b.n	800536a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	2b02      	cmp	r3, #2
 8005232:	d107      	bne.n	8005244 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005234:	4b50      	ldr	r3, [pc, #320]	; (8005378 <HAL_RCC_ClockConfig+0x1b4>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d115      	bne.n	800526c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e092      	b.n	800536a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d107      	bne.n	800525c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800524c:	4b4a      	ldr	r3, [pc, #296]	; (8005378 <HAL_RCC_ClockConfig+0x1b4>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d109      	bne.n	800526c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e086      	b.n	800536a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800525c:	4b46      	ldr	r3, [pc, #280]	; (8005378 <HAL_RCC_ClockConfig+0x1b4>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e07e      	b.n	800536a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800526c:	4b42      	ldr	r3, [pc, #264]	; (8005378 <HAL_RCC_ClockConfig+0x1b4>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f023 0203 	bic.w	r2, r3, #3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	493f      	ldr	r1, [pc, #252]	; (8005378 <HAL_RCC_ClockConfig+0x1b4>)
 800527a:	4313      	orrs	r3, r2
 800527c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800527e:	f7fc fe87 	bl	8001f90 <HAL_GetTick>
 8005282:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005284:	e00a      	b.n	800529c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005286:	f7fc fe83 	bl	8001f90 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	f241 3288 	movw	r2, #5000	; 0x1388
 8005294:	4293      	cmp	r3, r2
 8005296:	d901      	bls.n	800529c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e066      	b.n	800536a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800529c:	4b36      	ldr	r3, [pc, #216]	; (8005378 <HAL_RCC_ClockConfig+0x1b4>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 020c 	and.w	r2, r3, #12
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d1eb      	bne.n	8005286 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d008      	beq.n	80052cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052ba:	4b2f      	ldr	r3, [pc, #188]	; (8005378 <HAL_RCC_ClockConfig+0x1b4>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	492c      	ldr	r1, [pc, #176]	; (8005378 <HAL_RCC_ClockConfig+0x1b4>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052cc:	4b29      	ldr	r3, [pc, #164]	; (8005374 <HAL_RCC_ClockConfig+0x1b0>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d210      	bcs.n	80052fc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052da:	4b26      	ldr	r3, [pc, #152]	; (8005374 <HAL_RCC_ClockConfig+0x1b0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f023 0207 	bic.w	r2, r3, #7
 80052e2:	4924      	ldr	r1, [pc, #144]	; (8005374 <HAL_RCC_ClockConfig+0x1b0>)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ea:	4b22      	ldr	r3, [pc, #136]	; (8005374 <HAL_RCC_ClockConfig+0x1b0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d001      	beq.n	80052fc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e036      	b.n	800536a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b00      	cmp	r3, #0
 8005306:	d008      	beq.n	800531a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005308:	4b1b      	ldr	r3, [pc, #108]	; (8005378 <HAL_RCC_ClockConfig+0x1b4>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	4918      	ldr	r1, [pc, #96]	; (8005378 <HAL_RCC_ClockConfig+0x1b4>)
 8005316:	4313      	orrs	r3, r2
 8005318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0308 	and.w	r3, r3, #8
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005326:	4b14      	ldr	r3, [pc, #80]	; (8005378 <HAL_RCC_ClockConfig+0x1b4>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	4910      	ldr	r1, [pc, #64]	; (8005378 <HAL_RCC_ClockConfig+0x1b4>)
 8005336:	4313      	orrs	r3, r2
 8005338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800533a:	f000 f825 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 800533e:	4601      	mov	r1, r0
 8005340:	4b0d      	ldr	r3, [pc, #52]	; (8005378 <HAL_RCC_ClockConfig+0x1b4>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	091b      	lsrs	r3, r3, #4
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	4a0c      	ldr	r2, [pc, #48]	; (800537c <HAL_RCC_ClockConfig+0x1b8>)
 800534c:	5cd3      	ldrb	r3, [r2, r3]
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	fa21 f303 	lsr.w	r3, r1, r3
 8005356:	4a0a      	ldr	r2, [pc, #40]	; (8005380 <HAL_RCC_ClockConfig+0x1bc>)
 8005358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800535a:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <HAL_RCC_ClockConfig+0x1c0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f7fc fdca 	bl	8001ef8 <HAL_InitTick>
 8005364:	4603      	mov	r3, r0
 8005366:	72fb      	strb	r3, [r7, #11]

  return status;
 8005368:	7afb      	ldrb	r3, [r7, #11]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	40022000 	.word	0x40022000
 8005378:	40021000 	.word	0x40021000
 800537c:	0800b818 	.word	0x0800b818
 8005380:	2000001c 	.word	0x2000001c
 8005384:	20000020 	.word	0x20000020

08005388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005388:	b480      	push	{r7}
 800538a:	b089      	sub	sp, #36	; 0x24
 800538c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800538e:	2300      	movs	r3, #0
 8005390:	61fb      	str	r3, [r7, #28]
 8005392:	2300      	movs	r3, #0
 8005394:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005396:	4b3d      	ldr	r3, [pc, #244]	; (800548c <HAL_RCC_GetSysClockFreq+0x104>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 030c 	and.w	r3, r3, #12
 800539e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053a0:	4b3a      	ldr	r3, [pc, #232]	; (800548c <HAL_RCC_GetSysClockFreq+0x104>)
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0303 	and.w	r3, r3, #3
 80053a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <HAL_RCC_GetSysClockFreq+0x34>
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	2b0c      	cmp	r3, #12
 80053b4:	d121      	bne.n	80053fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d11e      	bne.n	80053fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80053bc:	4b33      	ldr	r3, [pc, #204]	; (800548c <HAL_RCC_GetSysClockFreq+0x104>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0308 	and.w	r3, r3, #8
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d107      	bne.n	80053d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80053c8:	4b30      	ldr	r3, [pc, #192]	; (800548c <HAL_RCC_GetSysClockFreq+0x104>)
 80053ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053ce:	0a1b      	lsrs	r3, r3, #8
 80053d0:	f003 030f 	and.w	r3, r3, #15
 80053d4:	61fb      	str	r3, [r7, #28]
 80053d6:	e005      	b.n	80053e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80053d8:	4b2c      	ldr	r3, [pc, #176]	; (800548c <HAL_RCC_GetSysClockFreq+0x104>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	091b      	lsrs	r3, r3, #4
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80053e4:	4a2a      	ldr	r2, [pc, #168]	; (8005490 <HAL_RCC_GetSysClockFreq+0x108>)
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10d      	bne.n	8005410 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053f8:	e00a      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	d102      	bne.n	8005406 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005400:	4b24      	ldr	r3, [pc, #144]	; (8005494 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005402:	61bb      	str	r3, [r7, #24]
 8005404:	e004      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	2b08      	cmp	r3, #8
 800540a:	d101      	bne.n	8005410 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800540c:	4b22      	ldr	r3, [pc, #136]	; (8005498 <HAL_RCC_GetSysClockFreq+0x110>)
 800540e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	2b0c      	cmp	r3, #12
 8005414:	d133      	bne.n	800547e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005416:	4b1d      	ldr	r3, [pc, #116]	; (800548c <HAL_RCC_GetSysClockFreq+0x104>)
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f003 0303 	and.w	r3, r3, #3
 800541e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b02      	cmp	r3, #2
 8005424:	d002      	beq.n	800542c <HAL_RCC_GetSysClockFreq+0xa4>
 8005426:	2b03      	cmp	r3, #3
 8005428:	d003      	beq.n	8005432 <HAL_RCC_GetSysClockFreq+0xaa>
 800542a:	e005      	b.n	8005438 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800542c:	4b19      	ldr	r3, [pc, #100]	; (8005494 <HAL_RCC_GetSysClockFreq+0x10c>)
 800542e:	617b      	str	r3, [r7, #20]
      break;
 8005430:	e005      	b.n	800543e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005432:	4b19      	ldr	r3, [pc, #100]	; (8005498 <HAL_RCC_GetSysClockFreq+0x110>)
 8005434:	617b      	str	r3, [r7, #20]
      break;
 8005436:	e002      	b.n	800543e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	617b      	str	r3, [r7, #20]
      break;
 800543c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800543e:	4b13      	ldr	r3, [pc, #76]	; (800548c <HAL_RCC_GetSysClockFreq+0x104>)
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	091b      	lsrs	r3, r3, #4
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	3301      	adds	r3, #1
 800544a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800544c:	4b0f      	ldr	r3, [pc, #60]	; (800548c <HAL_RCC_GetSysClockFreq+0x104>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	0a1b      	lsrs	r3, r3, #8
 8005452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	fb02 f203 	mul.w	r2, r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005462:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005464:	4b09      	ldr	r3, [pc, #36]	; (800548c <HAL_RCC_GetSysClockFreq+0x104>)
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	0e5b      	lsrs	r3, r3, #25
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	3301      	adds	r3, #1
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	fbb2 f3f3 	udiv	r3, r2, r3
 800547c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800547e:	69bb      	ldr	r3, [r7, #24]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3724      	adds	r7, #36	; 0x24
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	40021000 	.word	0x40021000
 8005490:	0800b830 	.word	0x0800b830
 8005494:	00f42400 	.word	0x00f42400
 8005498:	007a1200 	.word	0x007a1200

0800549c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054a0:	4b03      	ldr	r3, [pc, #12]	; (80054b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80054a2:	681b      	ldr	r3, [r3, #0]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	2000001c 	.word	0x2000001c

080054b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054b8:	f7ff fff0 	bl	800549c <HAL_RCC_GetHCLKFreq>
 80054bc:	4601      	mov	r1, r0
 80054be:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	0a1b      	lsrs	r3, r3, #8
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	4a04      	ldr	r2, [pc, #16]	; (80054dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80054ca:	5cd3      	ldrb	r3, [r2, r3]
 80054cc:	f003 031f 	and.w	r3, r3, #31
 80054d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	40021000 	.word	0x40021000
 80054dc:	0800b828 	.word	0x0800b828

080054e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80054e4:	f7ff ffda 	bl	800549c <HAL_RCC_GetHCLKFreq>
 80054e8:	4601      	mov	r1, r0
 80054ea:	4b06      	ldr	r3, [pc, #24]	; (8005504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	0adb      	lsrs	r3, r3, #11
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	4a04      	ldr	r2, [pc, #16]	; (8005508 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054f6:	5cd3      	ldrb	r3, [r2, r3]
 80054f8:	f003 031f 	and.w	r3, r3, #31
 80054fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005500:	4618      	mov	r0, r3
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40021000 	.word	0x40021000
 8005508:	0800b828 	.word	0x0800b828

0800550c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005514:	2300      	movs	r3, #0
 8005516:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005518:	4b2a      	ldr	r3, [pc, #168]	; (80055c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800551a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d003      	beq.n	800552c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005524:	f7ff f962 	bl	80047ec <HAL_PWREx_GetVoltageRange>
 8005528:	6178      	str	r0, [r7, #20]
 800552a:	e014      	b.n	8005556 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800552c:	4b25      	ldr	r3, [pc, #148]	; (80055c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800552e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005530:	4a24      	ldr	r2, [pc, #144]	; (80055c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005536:	6593      	str	r3, [r2, #88]	; 0x58
 8005538:	4b22      	ldr	r3, [pc, #136]	; (80055c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800553a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005544:	f7ff f952 	bl	80047ec <HAL_PWREx_GetVoltageRange>
 8005548:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800554a:	4b1e      	ldr	r3, [pc, #120]	; (80055c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800554c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554e:	4a1d      	ldr	r2, [pc, #116]	; (80055c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005554:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800555c:	d10b      	bne.n	8005576 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b80      	cmp	r3, #128	; 0x80
 8005562:	d919      	bls.n	8005598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2ba0      	cmp	r3, #160	; 0xa0
 8005568:	d902      	bls.n	8005570 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800556a:	2302      	movs	r3, #2
 800556c:	613b      	str	r3, [r7, #16]
 800556e:	e013      	b.n	8005598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005570:	2301      	movs	r3, #1
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	e010      	b.n	8005598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b80      	cmp	r3, #128	; 0x80
 800557a:	d902      	bls.n	8005582 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800557c:	2303      	movs	r3, #3
 800557e:	613b      	str	r3, [r7, #16]
 8005580:	e00a      	b.n	8005598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b80      	cmp	r3, #128	; 0x80
 8005586:	d102      	bne.n	800558e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005588:	2302      	movs	r3, #2
 800558a:	613b      	str	r3, [r7, #16]
 800558c:	e004      	b.n	8005598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b70      	cmp	r3, #112	; 0x70
 8005592:	d101      	bne.n	8005598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005594:	2301      	movs	r3, #1
 8005596:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005598:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f023 0207 	bic.w	r2, r3, #7
 80055a0:	4909      	ldr	r1, [pc, #36]	; (80055c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80055a8:	4b07      	ldr	r3, [pc, #28]	; (80055c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d001      	beq.n	80055ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40021000 	.word	0x40021000
 80055c8:	40022000 	.word	0x40022000

080055cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055d4:	2300      	movs	r3, #0
 80055d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055d8:	2300      	movs	r3, #0
 80055da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d03f      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055f0:	d01c      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x60>
 80055f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055f6:	d802      	bhi.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x32>
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00e      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80055fc:	e01f      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80055fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005602:	d003      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005604:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005608:	d01c      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800560a:	e018      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800560c:	4b85      	ldr	r3, [pc, #532]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	4a84      	ldr	r2, [pc, #528]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005616:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005618:	e015      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3304      	adds	r3, #4
 800561e:	2100      	movs	r1, #0
 8005620:	4618      	mov	r0, r3
 8005622:	f000 ff41 	bl	80064a8 <RCCEx_PLLSAI1_Config>
 8005626:	4603      	mov	r3, r0
 8005628:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800562a:	e00c      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3320      	adds	r3, #32
 8005630:	2100      	movs	r1, #0
 8005632:	4618      	mov	r0, r3
 8005634:	f001 f828 	bl	8006688 <RCCEx_PLLSAI2_Config>
 8005638:	4603      	mov	r3, r0
 800563a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800563c:	e003      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	74fb      	strb	r3, [r7, #19]
      break;
 8005642:	e000      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005646:	7cfb      	ldrb	r3, [r7, #19]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10b      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800564c:	4b75      	ldr	r3, [pc, #468]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800564e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005652:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800565a:	4972      	ldr	r1, [pc, #456]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005662:	e001      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005664:	7cfb      	ldrb	r3, [r7, #19]
 8005666:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d03f      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800567c:	d01c      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800567e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005682:	d802      	bhi.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00e      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005688:	e01f      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800568a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800568e:	d003      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005690:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005694:	d01c      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8005696:	e018      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005698:	4b62      	ldr	r3, [pc, #392]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	4a61      	ldr	r2, [pc, #388]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800569e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056a4:	e015      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3304      	adds	r3, #4
 80056aa:	2100      	movs	r1, #0
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 fefb 	bl	80064a8 <RCCEx_PLLSAI1_Config>
 80056b2:	4603      	mov	r3, r0
 80056b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056b6:	e00c      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3320      	adds	r3, #32
 80056bc:	2100      	movs	r1, #0
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 ffe2 	bl	8006688 <RCCEx_PLLSAI2_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056c8:	e003      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	74fb      	strb	r3, [r7, #19]
      break;
 80056ce:	e000      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80056d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056d2:	7cfb      	ldrb	r3, [r7, #19]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10b      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056d8:	4b52      	ldr	r3, [pc, #328]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056e6:	494f      	ldr	r1, [pc, #316]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80056ee:	e001      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f0:	7cfb      	ldrb	r3, [r7, #19]
 80056f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 80a0 	beq.w	8005842 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005702:	2300      	movs	r3, #0
 8005704:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005706:	4b47      	ldr	r3, [pc, #284]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005716:	2300      	movs	r3, #0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00d      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800571c:	4b41      	ldr	r3, [pc, #260]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800571e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005720:	4a40      	ldr	r2, [pc, #256]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005726:	6593      	str	r3, [r2, #88]	; 0x58
 8005728:	4b3e      	ldr	r3, [pc, #248]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800572a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005730:	60bb      	str	r3, [r7, #8]
 8005732:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005734:	2301      	movs	r3, #1
 8005736:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005738:	4b3b      	ldr	r3, [pc, #236]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a3a      	ldr	r2, [pc, #232]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800573e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005742:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005744:	f7fc fc24 	bl	8001f90 <HAL_GetTick>
 8005748:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800574a:	e009      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800574c:	f7fc fc20 	bl	8001f90 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b02      	cmp	r3, #2
 8005758:	d902      	bls.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	74fb      	strb	r3, [r7, #19]
        break;
 800575e:	e005      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005760:	4b31      	ldr	r3, [pc, #196]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0ef      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800576c:	7cfb      	ldrb	r3, [r7, #19]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d15c      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005772:	4b2c      	ldr	r3, [pc, #176]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005778:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800577c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01f      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	429a      	cmp	r2, r3
 800578e:	d019      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005790:	4b24      	ldr	r3, [pc, #144]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800579a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800579c:	4b21      	ldr	r3, [pc, #132]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800579e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a2:	4a20      	ldr	r2, [pc, #128]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057ac:	4b1d      	ldr	r3, [pc, #116]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b2:	4a1c      	ldr	r2, [pc, #112]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057bc:	4a19      	ldr	r2, [pc, #100]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d016      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ce:	f7fc fbdf 	bl	8001f90 <HAL_GetTick>
 80057d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057d4:	e00b      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057d6:	f7fc fbdb 	bl	8001f90 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d902      	bls.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	74fb      	strb	r3, [r7, #19]
            break;
 80057ec:	e006      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057ee:	4b0d      	ldr	r3, [pc, #52]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0ec      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80057fc:	7cfb      	ldrb	r3, [r7, #19]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10c      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005802:	4b08      	ldr	r3, [pc, #32]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005808:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005812:	4904      	ldr	r1, [pc, #16]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005814:	4313      	orrs	r3, r2
 8005816:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800581a:	e009      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800581c:	7cfb      	ldrb	r3, [r7, #19]
 800581e:	74bb      	strb	r3, [r7, #18]
 8005820:	e006      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005822:	bf00      	nop
 8005824:	40021000 	.word	0x40021000
 8005828:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800582c:	7cfb      	ldrb	r3, [r7, #19]
 800582e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005830:	7c7b      	ldrb	r3, [r7, #17]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d105      	bne.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005836:	4b9e      	ldr	r3, [pc, #632]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583a:	4a9d      	ldr	r2, [pc, #628]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800583c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005840:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00a      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800584e:	4b98      	ldr	r3, [pc, #608]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005854:	f023 0203 	bic.w	r2, r3, #3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	4994      	ldr	r1, [pc, #592]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00a      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005870:	4b8f      	ldr	r3, [pc, #572]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005876:	f023 020c 	bic.w	r2, r3, #12
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587e:	498c      	ldr	r1, [pc, #560]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005880:	4313      	orrs	r3, r2
 8005882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0304 	and.w	r3, r3, #4
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00a      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005892:	4b87      	ldr	r3, [pc, #540]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005898:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a0:	4983      	ldr	r1, [pc, #524]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0308 	and.w	r3, r3, #8
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00a      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058b4:	4b7e      	ldr	r3, [pc, #504]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c2:	497b      	ldr	r1, [pc, #492]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0310 	and.w	r3, r3, #16
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00a      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058d6:	4b76      	ldr	r3, [pc, #472]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058e4:	4972      	ldr	r1, [pc, #456]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0320 	and.w	r3, r3, #32
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00a      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058f8:	4b6d      	ldr	r3, [pc, #436]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005906:	496a      	ldr	r1, [pc, #424]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005908:	4313      	orrs	r3, r2
 800590a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800591a:	4b65      	ldr	r3, [pc, #404]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800591c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005920:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005928:	4961      	ldr	r1, [pc, #388]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800592a:	4313      	orrs	r3, r2
 800592c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00a      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800593c:	4b5c      	ldr	r3, [pc, #368]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800593e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005942:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800594a:	4959      	ldr	r1, [pc, #356]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800594c:	4313      	orrs	r3, r2
 800594e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800595e:	4b54      	ldr	r3, [pc, #336]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005964:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800596c:	4950      	ldr	r1, [pc, #320]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800596e:	4313      	orrs	r3, r2
 8005970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005980:	4b4b      	ldr	r3, [pc, #300]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005986:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598e:	4948      	ldr	r1, [pc, #288]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005990:	4313      	orrs	r3, r2
 8005992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059a2:	4b43      	ldr	r3, [pc, #268]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b0:	493f      	ldr	r1, [pc, #252]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d028      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059c4:	4b3a      	ldr	r3, [pc, #232]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059d2:	4937      	ldr	r1, [pc, #220]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059e2:	d106      	bne.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059e4:	4b32      	ldr	r3, [pc, #200]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	4a31      	ldr	r2, [pc, #196]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059ee:	60d3      	str	r3, [r2, #12]
 80059f0:	e011      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059fa:	d10c      	bne.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3304      	adds	r3, #4
 8005a00:	2101      	movs	r1, #1
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 fd50 	bl	80064a8 <RCCEx_PLLSAI1_Config>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005a0c:	7cfb      	ldrb	r3, [r7, #19]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8005a12:	7cfb      	ldrb	r3, [r7, #19]
 8005a14:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d028      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a22:	4b23      	ldr	r3, [pc, #140]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a30:	491f      	ldr	r1, [pc, #124]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a40:	d106      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a42:	4b1b      	ldr	r3, [pc, #108]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	4a1a      	ldr	r2, [pc, #104]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a4c:	60d3      	str	r3, [r2, #12]
 8005a4e:	e011      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a58:	d10c      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	2101      	movs	r1, #1
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 fd21 	bl	80064a8 <RCCEx_PLLSAI1_Config>
 8005a66:	4603      	mov	r3, r0
 8005a68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a6a:	7cfb      	ldrb	r3, [r7, #19]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8005a70:	7cfb      	ldrb	r3, [r7, #19]
 8005a72:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d02b      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a80:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a8e:	4908      	ldr	r1, [pc, #32]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a9e:	d109      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aa0:	4b03      	ldr	r3, [pc, #12]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	4a02      	ldr	r2, [pc, #8]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005aa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aaa:	60d3      	str	r3, [r2, #12]
 8005aac:	e014      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005aae:	bf00      	nop
 8005ab0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ab8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005abc:	d10c      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f000 fcef 	bl	80064a8 <RCCEx_PLLSAI1_Config>
 8005aca:	4603      	mov	r3, r0
 8005acc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ace:	7cfb      	ldrb	r3, [r7, #19]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005ad4:	7cfb      	ldrb	r3, [r7, #19]
 8005ad6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d02f      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ae4:	4b2b      	ldr	r3, [pc, #172]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005af2:	4928      	ldr	r1, [pc, #160]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005afe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b02:	d10d      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	3304      	adds	r3, #4
 8005b08:	2102      	movs	r1, #2
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fccc 	bl	80064a8 <RCCEx_PLLSAI1_Config>
 8005b10:	4603      	mov	r3, r0
 8005b12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b14:	7cfb      	ldrb	r3, [r7, #19]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d014      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005b1a:	7cfb      	ldrb	r3, [r7, #19]
 8005b1c:	74bb      	strb	r3, [r7, #18]
 8005b1e:	e011      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b28:	d10c      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3320      	adds	r3, #32
 8005b2e:	2102      	movs	r1, #2
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fda9 	bl	8006688 <RCCEx_PLLSAI2_Config>
 8005b36:	4603      	mov	r3, r0
 8005b38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b3a:	7cfb      	ldrb	r3, [r7, #19]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005b40:	7cfb      	ldrb	r3, [r7, #19]
 8005b42:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00a      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b50:	4b10      	ldr	r3, [pc, #64]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b56:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b5e:	490d      	ldr	r1, [pc, #52]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00b      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b72:	4b08      	ldr	r3, [pc, #32]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b82:	4904      	ldr	r1, [pc, #16]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b8a:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40021000 	.word	0x40021000

08005b98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005baa:	d137      	bne.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005bac:	4bb8      	ldr	r3, [pc, #736]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bb6:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bbe:	d014      	beq.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8005bc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bc4:	d01e      	beq.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8005bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bca:	d001      	beq.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005bcc:	f000 bc53 	b.w	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005bd0:	4baf      	ldr	r3, [pc, #700]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	f040 8446 	bne.w	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        frequency = LSE_VALUE;
 8005be0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005be4:	61fb      	str	r3, [r7, #28]
      break;
 8005be6:	f000 bc41 	b.w	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005bea:	4ba9      	ldr	r3, [pc, #676]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	f040 843b 	bne.w	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          frequency = LSI_VALUE;
 8005bfa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005bfe:	61fb      	str	r3, [r7, #28]
      break;
 8005c00:	f000 bc36 	b.w	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c04:	4ba2      	ldr	r3, [pc, #648]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c10:	f040 8430 	bne.w	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        frequency = HSE_VALUE / 32U;
 8005c14:	4b9f      	ldr	r3, [pc, #636]	; (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005c16:	61fb      	str	r3, [r7, #28]
      break;
 8005c18:	f000 bc2c 	b.w	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c1c:	4b9c      	ldr	r3, [pc, #624]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f003 0303 	and.w	r3, r3, #3
 8005c24:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d023      	beq.n	8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d02e      	beq.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d139      	bne.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005c34:	4b96      	ldr	r3, [pc, #600]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d116      	bne.n	8005c6e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005c40:	4b93      	ldr	r3, [pc, #588]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0308 	and.w	r3, r3, #8
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d005      	beq.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8005c4c:	4b90      	ldr	r3, [pc, #576]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	091b      	lsrs	r3, r3, #4
 8005c52:	f003 030f 	and.w	r3, r3, #15
 8005c56:	e005      	b.n	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8005c58:	4b8d      	ldr	r3, [pc, #564]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c5e:	0a1b      	lsrs	r3, r3, #8
 8005c60:	f003 030f 	and.w	r3, r3, #15
 8005c64:	4a8c      	ldr	r2, [pc, #560]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c6a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005c6c:	e01f      	b.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61bb      	str	r3, [r7, #24]
      break;
 8005c72:	e01c      	b.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c74:	4b86      	ldr	r3, [pc, #536]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c80:	d102      	bne.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8005c82:	4b86      	ldr	r3, [pc, #536]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005c84:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005c86:	e012      	b.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	61bb      	str	r3, [r7, #24]
      break;
 8005c8c:	e00f      	b.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c8e:	4b80      	ldr	r3, [pc, #512]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c9a:	d102      	bne.n	8005ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8005c9c:	4b80      	ldr	r3, [pc, #512]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8005c9e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005ca0:	e005      	b.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	61bb      	str	r3, [r7, #24]
      break;
 8005ca6:	e002      	b.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	61bb      	str	r3, [r7, #24]
      break;
 8005cac:	bf00      	nop
    }

    switch(PeriphClk)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb4:	f000 8337 	beq.w	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 8005cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cbc:	d825      	bhi.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8005cbe:	2b10      	cmp	r3, #16
 8005cc0:	f000 81df 	beq.w	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005cc4:	2b10      	cmp	r3, #16
 8005cc6:	d80f      	bhi.n	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	f000 8128 	beq.w	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d803      	bhi.n	8005cda <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	f000 80ec 	beq.w	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005cd8:	e3cd      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	f000 8169 	beq.w	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	f000 819a 	beq.w	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 8005ce6:	e3c6      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005ce8:	2b40      	cmp	r3, #64	; 0x40
 8005cea:	f000 82b3 	beq.w	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
 8005cee:	2b40      	cmp	r3, #64	; 0x40
 8005cf0:	d803      	bhi.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8005cf2:	2b20      	cmp	r3, #32
 8005cf4:	f000 81fd 	beq.w	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 8005cf8:	e3bd      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005cfa:	2b80      	cmp	r3, #128	; 0x80
 8005cfc:	f000 82cd 	beq.w	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8005d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d04:	f000 82ec 	beq.w	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
      break;
 8005d08:	e3b5      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005d0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d0e:	f000 822d 	beq.w	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8005d12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d16:	d811      	bhi.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8005d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d1c:	d021      	beq.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8005d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d22:	d804      	bhi.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d28:	f000 833e 	beq.w	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
      break;
 8005d2c:	e3a3      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d32:	d01d      	beq.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8005d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d38:	d021      	beq.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8005d3a:	e39c      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d40:	f000 8277 	beq.w	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 8005d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d48:	d804      	bhi.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d4e:	f000 8371 	beq.w	8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
      break;
 8005d52:	e390      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005d54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d58:	d011      	beq.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005d5a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d5e:	d00e      	beq.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8005d60:	e389      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005d62:	69b9      	ldr	r1, [r7, #24]
 8005d64:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005d68:	f000 fd68 	bl	800683c <RCCEx_GetSAIxPeriphCLKFreq>
 8005d6c:	61f8      	str	r0, [r7, #28]
      break;
 8005d6e:	e382      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005d70:	69b9      	ldr	r1, [r7, #24]
 8005d72:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005d76:	f000 fd61 	bl	800683c <RCCEx_GetSAIxPeriphCLKFreq>
 8005d7a:	61f8      	str	r0, [r7, #28]
      break;
 8005d7c:	e37b      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005d7e:	4b44      	ldr	r3, [pc, #272]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d84:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005d88:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d90:	d023      	beq.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 8005d92:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005d96:	d003      	beq.n	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005d98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d9c:	d04a      	beq.n	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 8005d9e:	e086      	b.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005da0:	4b3b      	ldr	r3, [pc, #236]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d17b      	bne.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005dac:	4b38      	ldr	r3, [pc, #224]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0308 	and.w	r3, r3, #8
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d005      	beq.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8005db8:	4b35      	ldr	r3, [pc, #212]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	091b      	lsrs	r3, r3, #4
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	e005      	b.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8005dc4:	4b32      	ldr	r3, [pc, #200]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dca:	0a1b      	lsrs	r3, r3, #8
 8005dcc:	f003 030f 	and.w	r3, r3, #15
 8005dd0:	4a31      	ldr	r2, [pc, #196]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd6:	61fb      	str	r3, [r7, #28]
          break;
 8005dd8:	e064      	b.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005dda:	4b2d      	ldr	r3, [pc, #180]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005de6:	d15f      	bne.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005de8:	4b29      	ldr	r3, [pc, #164]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005df0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005df4:	d158      	bne.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005df6:	4b26      	ldr	r3, [pc, #152]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	0a1b      	lsrs	r3, r3, #8
 8005dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e00:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	fb02 f203 	mul.w	r2, r2, r3
 8005e0a:	4b21      	ldr	r3, [pc, #132]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	091b      	lsrs	r3, r3, #4
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	3301      	adds	r3, #1
 8005e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005e1c:	4b1c      	ldr	r3, [pc, #112]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	0d5b      	lsrs	r3, r3, #21
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	3301      	adds	r3, #1
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e30:	61fb      	str	r3, [r7, #28]
          break;
 8005e32:	e039      	b.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005e34:	4b16      	ldr	r3, [pc, #88]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e40:	d134      	bne.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005e42:	4b13      	ldr	r3, [pc, #76]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e4e:	d12d      	bne.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005e50:	4b0f      	ldr	r3, [pc, #60]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	0a1b      	lsrs	r3, r3, #8
 8005e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e5a:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	fb02 f203 	mul.w	r2, r2, r3
 8005e64:	4b0a      	ldr	r3, [pc, #40]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	091b      	lsrs	r3, r3, #4
 8005e6a:	f003 0307 	and.w	r3, r3, #7
 8005e6e:	3301      	adds	r3, #1
 8005e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e74:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005e76:	4b06      	ldr	r3, [pc, #24]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	0d5b      	lsrs	r3, r3, #21
 8005e7c:	f003 0303 	and.w	r3, r3, #3
 8005e80:	3301      	adds	r3, #1
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e8a:	61fb      	str	r3, [r7, #28]
          break;
 8005e8c:	e00e      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005e8e:	bf00      	nop
 8005e90:	40021000 	.word	0x40021000
 8005e94:	0003d090 	.word	0x0003d090
 8005e98:	0800b830 	.word	0x0800b830
 8005e9c:	00f42400 	.word	0x00f42400
 8005ea0:	007a1200 	.word	0x007a1200
          break;
 8005ea4:	bf00      	nop
 8005ea6:	e2e6      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005ea8:	bf00      	nop
 8005eaa:	e2e4      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005eac:	bf00      	nop
        break;
 8005eae:	e2e2      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005eb0:	4bac      	ldr	r3, [pc, #688]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d827      	bhi.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8005ec2:	a201      	add	r2, pc, #4	; (adr r2, 8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec8:	08005ed9 	.word	0x08005ed9
 8005ecc:	08005ee1 	.word	0x08005ee1
 8005ed0:	08005ee9 	.word	0x08005ee9
 8005ed4:	08005efd 	.word	0x08005efd
          frequency = HAL_RCC_GetPCLK2Freq();
 8005ed8:	f7ff fb02 	bl	80054e0 <HAL_RCC_GetPCLK2Freq>
 8005edc:	61f8      	str	r0, [r7, #28]
          break;
 8005ede:	e01d      	b.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ee0:	f7ff fa52 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 8005ee4:	61f8      	str	r0, [r7, #28]
          break;
 8005ee6:	e019      	b.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ee8:	4b9e      	ldr	r3, [pc, #632]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef4:	d10f      	bne.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 8005ef6:	4b9c      	ldr	r3, [pc, #624]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005ef8:	61fb      	str	r3, [r7, #28]
          break;
 8005efa:	e00c      	b.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005efc:	4b99      	ldr	r3, [pc, #612]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d107      	bne.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 8005f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f0e:	61fb      	str	r3, [r7, #28]
          break;
 8005f10:	e003      	b.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 8005f12:	bf00      	nop
 8005f14:	e2af      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005f16:	bf00      	nop
 8005f18:	e2ad      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005f1a:	bf00      	nop
        break;
 8005f1c:	e2ab      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005f1e:	4b91      	ldr	r3, [pc, #580]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f24:	f003 030c 	and.w	r3, r3, #12
 8005f28:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	2b0c      	cmp	r3, #12
 8005f2e:	d83a      	bhi.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8005f30:	a201      	add	r2, pc, #4	; (adr r2, 8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8005f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f36:	bf00      	nop
 8005f38:	08005f6d 	.word	0x08005f6d
 8005f3c:	08005fa7 	.word	0x08005fa7
 8005f40:	08005fa7 	.word	0x08005fa7
 8005f44:	08005fa7 	.word	0x08005fa7
 8005f48:	08005f75 	.word	0x08005f75
 8005f4c:	08005fa7 	.word	0x08005fa7
 8005f50:	08005fa7 	.word	0x08005fa7
 8005f54:	08005fa7 	.word	0x08005fa7
 8005f58:	08005f7d 	.word	0x08005f7d
 8005f5c:	08005fa7 	.word	0x08005fa7
 8005f60:	08005fa7 	.word	0x08005fa7
 8005f64:	08005fa7 	.word	0x08005fa7
 8005f68:	08005f91 	.word	0x08005f91
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f6c:	f7ff faa2 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8005f70:	61f8      	str	r0, [r7, #28]
          break;
 8005f72:	e01d      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f74:	f7ff fa08 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 8005f78:	61f8      	str	r0, [r7, #28]
          break;
 8005f7a:	e019      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f7c:	4b79      	ldr	r3, [pc, #484]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f88:	d10f      	bne.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 8005f8a:	4b77      	ldr	r3, [pc, #476]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005f8c:	61fb      	str	r3, [r7, #28]
          break;
 8005f8e:	e00c      	b.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005f90:	4b74      	ldr	r3, [pc, #464]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d107      	bne.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 8005f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fa2:	61fb      	str	r3, [r7, #28]
          break;
 8005fa4:	e003      	b.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 8005fa6:	bf00      	nop
 8005fa8:	e265      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005faa:	bf00      	nop
 8005fac:	e263      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005fae:	bf00      	nop
        break;
 8005fb0:	e261      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005fb2:	4b6c      	ldr	r3, [pc, #432]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fbc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	2b10      	cmp	r3, #16
 8005fc2:	d00d      	beq.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8005fc4:	2b10      	cmp	r3, #16
 8005fc6:	d802      	bhi.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d005      	beq.n	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 8005fcc:	e024      	b.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 8005fce:	2b20      	cmp	r3, #32
 8005fd0:	d00a      	beq.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8005fd2:	2b30      	cmp	r3, #48	; 0x30
 8005fd4:	d012      	beq.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 8005fd6:	e01f      	b.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005fd8:	f7ff fa6c 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8005fdc:	61f8      	str	r0, [r7, #28]
          break;
 8005fde:	e01b      	b.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 8005fe0:	f7ff f9d2 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 8005fe4:	61f8      	str	r0, [r7, #28]
          break;
 8005fe6:	e017      	b.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fe8:	4b5e      	ldr	r3, [pc, #376]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff4:	d10d      	bne.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 8005ff6:	4b5c      	ldr	r3, [pc, #368]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005ff8:	61fb      	str	r3, [r7, #28]
          break;
 8005ffa:	e00a      	b.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005ffc:	4b59      	ldr	r3, [pc, #356]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b02      	cmp	r3, #2
 8006008:	d105      	bne.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 800600a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800600e:	61fb      	str	r3, [r7, #28]
          break;
 8006010:	e001      	b.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8006012:	bf00      	nop
 8006014:	e22f      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006016:	bf00      	nop
        break;
 8006018:	e22d      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800601a:	4b52      	ldr	r3, [pc, #328]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800601c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006020:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006024:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	2b40      	cmp	r3, #64	; 0x40
 800602a:	d00d      	beq.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 800602c:	2b40      	cmp	r3, #64	; 0x40
 800602e:	d802      	bhi.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8006030:	2b00      	cmp	r3, #0
 8006032:	d005      	beq.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 8006034:	e024      	b.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 8006036:	2b80      	cmp	r3, #128	; 0x80
 8006038:	d00a      	beq.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800603a:	2bc0      	cmp	r3, #192	; 0xc0
 800603c:	d012      	beq.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 800603e:	e01f      	b.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006040:	f7ff fa38 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8006044:	61f8      	str	r0, [r7, #28]
          break;
 8006046:	e01b      	b.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 8006048:	f7ff f99e 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 800604c:	61f8      	str	r0, [r7, #28]
          break;
 800604e:	e017      	b.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006050:	4b44      	ldr	r3, [pc, #272]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800605c:	d10d      	bne.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 800605e:	4b42      	ldr	r3, [pc, #264]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8006060:	61fb      	str	r3, [r7, #28]
          break;
 8006062:	e00a      	b.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006064:	4b3f      	ldr	r3, [pc, #252]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b02      	cmp	r3, #2
 8006070:	d105      	bne.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 8006072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006076:	61fb      	str	r3, [r7, #28]
          break;
 8006078:	e001      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 800607a:	bf00      	nop
 800607c:	e1fb      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800607e:	bf00      	nop
        break;
 8006080:	e1f9      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006082:	4b38      	ldr	r3, [pc, #224]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800608c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006094:	d010      	beq.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8006096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800609a:	d802      	bhi.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800609c:	2b00      	cmp	r3, #0
 800609e:	d007      	beq.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 80060a0:	e026      	b.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 80060a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060a6:	d00b      	beq.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80060a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ac:	d012      	beq.n	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 80060ae:	e01f      	b.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 80060b0:	f7ff fa00 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 80060b4:	61f8      	str	r0, [r7, #28]
          break;
 80060b6:	e01b      	b.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 80060b8:	f7ff f966 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 80060bc:	61f8      	str	r0, [r7, #28]
          break;
 80060be:	e017      	b.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060c0:	4b28      	ldr	r3, [pc, #160]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060cc:	d10d      	bne.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 80060ce:	4b26      	ldr	r3, [pc, #152]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80060d0:	61fb      	str	r3, [r7, #28]
          break;
 80060d2:	e00a      	b.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80060d4:	4b23      	ldr	r3, [pc, #140]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80060d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d105      	bne.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 80060e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060e6:	61fb      	str	r3, [r7, #28]
          break;
 80060e8:	e001      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 80060ea:	bf00      	nop
 80060ec:	e1c3      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80060ee:	bf00      	nop
        break;
 80060f0:	e1c1      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80060f2:	4b1c      	ldr	r3, [pc, #112]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80060f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060fc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006104:	d010      	beq.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8006106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800610a:	d802      	bhi.n	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800610c:	2b00      	cmp	r3, #0
 800610e:	d007      	beq.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 8006110:	e026      	b.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 8006112:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006116:	d00b      	beq.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8006118:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800611c:	d012      	beq.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 800611e:	e01f      	b.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006120:	f7ff f9c8 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8006124:	61f8      	str	r0, [r7, #28]
          break;
 8006126:	e01b      	b.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 8006128:	f7ff f92e 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 800612c:	61f8      	str	r0, [r7, #28]
          break;
 800612e:	e017      	b.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006130:	4b0c      	ldr	r3, [pc, #48]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800613c:	d10d      	bne.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 800613e:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8006140:	61fb      	str	r3, [r7, #28]
          break;
 8006142:	e00a      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006144:	4b07      	ldr	r3, [pc, #28]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b02      	cmp	r3, #2
 8006150:	d105      	bne.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 8006152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006156:	61fb      	str	r3, [r7, #28]
          break;
 8006158:	e001      	b.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 800615a:	bf00      	nop
 800615c:	e18b      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800615e:	bf00      	nop
        break;
 8006160:	e189      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006162:	bf00      	nop
 8006164:	40021000 	.word	0x40021000
 8006168:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800616c:	4bae      	ldr	r3, [pc, #696]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800616e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006172:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006176:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800617e:	d02f      	beq.n	80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8006180:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006184:	d003      	beq.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006186:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800618a:	d004      	beq.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 800618c:	e050      	b.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetSysClockFreq();
 800618e:	f7ff f8fb 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 8006192:	61f8      	str	r0, [r7, #28]
          break;
 8006194:	e04c      	b.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8006196:	4ba4      	ldr	r3, [pc, #656]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d043      	beq.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80061a2:	4ba1      	ldr	r3, [pc, #644]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	0a1b      	lsrs	r3, r3, #8
 80061a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ac:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	fb02 f203 	mul.w	r2, r2, r3
 80061b6:	4b9c      	ldr	r3, [pc, #624]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	091b      	lsrs	r3, r3, #4
 80061bc:	f003 0307 	and.w	r3, r3, #7
 80061c0:	3301      	adds	r3, #1
 80061c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c6:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80061c8:	4b97      	ldr	r3, [pc, #604]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	0e5b      	lsrs	r3, r3, #25
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	3301      	adds	r3, #1
 80061d4:	005b      	lsls	r3, r3, #1
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061dc:	61fb      	str	r3, [r7, #28]
          break;
 80061de:	e024      	b.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 80061e0:	4b91      	ldr	r3, [pc, #580]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d020      	beq.n	800622e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80061ec:	4b8e      	ldr	r3, [pc, #568]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	0a1b      	lsrs	r3, r3, #8
 80061f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061f6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	fb02 f203 	mul.w	r2, r2, r3
 8006200:	4b89      	ldr	r3, [pc, #548]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	091b      	lsrs	r3, r3, #4
 8006206:	f003 0307 	and.w	r3, r3, #7
 800620a:	3301      	adds	r3, #1
 800620c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006210:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8006212:	4b85      	ldr	r3, [pc, #532]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	0e5b      	lsrs	r3, r3, #25
 8006218:	f003 0303 	and.w	r3, r3, #3
 800621c:	3301      	adds	r3, #1
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	fbb2 f3f3 	udiv	r3, r2, r3
 8006226:	61fb      	str	r3, [r7, #28]
          break;
 8006228:	e001      	b.n	800622e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          break;
 800622a:	bf00      	nop
 800622c:	e123      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800622e:	bf00      	nop
        break;
 8006230:	e121      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006232:	4b7d      	ldr	r3, [pc, #500]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006238:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800623c:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d103      	bne.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006244:	f7ff f94c 	bl	80054e0 <HAL_RCC_GetPCLK2Freq>
 8006248:	61f8      	str	r0, [r7, #28]
        break;
 800624a:	e114      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 800624c:	f7ff f89c 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 8006250:	61f8      	str	r0, [r7, #28]
        break;
 8006252:	e110      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006254:	4b74      	ldr	r3, [pc, #464]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800625e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006266:	d009      	beq.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8006268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800626c:	d00a      	beq.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 800626e:	2b00      	cmp	r3, #0
 8006270:	d000      	beq.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          break;
 8006272:	e011      	b.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006274:	f7ff f91e 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8006278:	61f8      	str	r0, [r7, #28]
          break;
 800627a:	e00d      	b.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetSysClockFreq();
 800627c:	f7ff f884 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 8006280:	61f8      	str	r0, [r7, #28]
          break;
 8006282:	e009      	b.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006284:	4b68      	ldr	r3, [pc, #416]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800628c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006290:	d101      	bne.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
            frequency = HSI_VALUE;
 8006292:	4b66      	ldr	r3, [pc, #408]	; (800642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006294:	61fb      	str	r3, [r7, #28]
          break;
 8006296:	bf00      	nop
        break;
 8006298:	e0ed      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800629a:	4b63      	ldr	r3, [pc, #396]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800629c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80062a4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062ac:	d009      	beq.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80062ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b2:	d00a      	beq.n	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d000      	beq.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 80062b8:	e011      	b.n	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetPCLK1Freq();
 80062ba:	f7ff f8fb 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 80062be:	61f8      	str	r0, [r7, #28]
          break;
 80062c0:	e00d      	b.n	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetSysClockFreq();
 80062c2:	f7ff f861 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 80062c6:	61f8      	str	r0, [r7, #28]
          break;
 80062c8:	e009      	b.n	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062ca:	4b57      	ldr	r3, [pc, #348]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062d6:	d101      	bne.n	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
            frequency = HSI_VALUE;
 80062d8:	4b54      	ldr	r3, [pc, #336]	; (800642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80062da:	61fb      	str	r3, [r7, #28]
          break;
 80062dc:	bf00      	nop
        break;
 80062de:	e0ca      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80062e0:	4b51      	ldr	r3, [pc, #324]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80062e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062ea:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062f2:	d009      	beq.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80062f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062f8:	d00a      	beq.n	8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d000      	beq.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 80062fe:	e011      	b.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006300:	f7ff f8d8 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8006304:	61f8      	str	r0, [r7, #28]
          break;
 8006306:	e00d      	b.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetSysClockFreq();
 8006308:	f7ff f83e 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 800630c:	61f8      	str	r0, [r7, #28]
          break;
 800630e:	e009      	b.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006310:	4b45      	ldr	r3, [pc, #276]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800631c:	d101      	bne.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            frequency = HSI_VALUE;
 800631e:	4b43      	ldr	r3, [pc, #268]	; (800642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006320:	61fb      	str	r3, [r7, #28]
          break;
 8006322:	bf00      	nop
        break;
 8006324:	e0a7      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006326:	4b40      	ldr	r3, [pc, #256]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006330:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006338:	d010      	beq.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 800633a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800633e:	d802      	bhi.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 8006340:	2b00      	cmp	r3, #0
 8006342:	d007      	beq.n	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
          break;
 8006344:	e02f      	b.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
        switch(srcclk)
 8006346:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800634a:	d012      	beq.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 800634c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006350:	d019      	beq.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8006352:	e028      	b.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006354:	f7ff f8ae 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8006358:	61f8      	str	r0, [r7, #28]
          break;
 800635a:	e024      	b.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800635c:	4b32      	ldr	r3, [pc, #200]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800635e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b02      	cmp	r3, #2
 8006368:	d118      	bne.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
              frequency = LSI_VALUE;
 800636a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800636e:	61fb      	str	r3, [r7, #28]
          break;
 8006370:	e014      	b.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006372:	4b2d      	ldr	r3, [pc, #180]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800637a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800637e:	d10f      	bne.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
            frequency = HSI_VALUE;
 8006380:	4b2a      	ldr	r3, [pc, #168]	; (800642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006382:	61fb      	str	r3, [r7, #28]
          break;
 8006384:	e00c      	b.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006386:	4b28      	ldr	r3, [pc, #160]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b02      	cmp	r3, #2
 8006392:	d107      	bne.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
            frequency = LSE_VALUE;
 8006394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006398:	61fb      	str	r3, [r7, #28]
          break;
 800639a:	e003      	b.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          break;
 800639c:	bf00      	nop
 800639e:	e06a      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80063a0:	bf00      	nop
 80063a2:	e068      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80063a4:	bf00      	nop
        break;
 80063a6:	e066      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80063a8:	4b1f      	ldr	r3, [pc, #124]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80063aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80063b2:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ba:	d010      	beq.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80063bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063c0:	d802      	bhi.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d007      	beq.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          break;
 80063c6:	e034      	b.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
        switch(srcclk)
 80063c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063cc:	d012      	beq.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 80063ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063d2:	d019      	beq.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          break;
 80063d4:	e02d      	b.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80063d6:	f7ff f86d 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 80063da:	61f8      	str	r0, [r7, #28]
          break;
 80063dc:	e029      	b.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80063de:	4b12      	ldr	r3, [pc, #72]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80063e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d118      	bne.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = LSI_VALUE;
 80063ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80063f0:	61fb      	str	r3, [r7, #28]
          break;
 80063f2:	e014      	b.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063f4:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006400:	d10f      	bne.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
            frequency = HSI_VALUE;
 8006402:	4b0a      	ldr	r3, [pc, #40]	; (800642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006404:	61fb      	str	r3, [r7, #28]
          break;
 8006406:	e00c      	b.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006408:	4b07      	ldr	r3, [pc, #28]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800640a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	2b02      	cmp	r3, #2
 8006414:	d10c      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
            frequency = LSE_VALUE;
 8006416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800641a:	61fb      	str	r3, [r7, #28]
          break;
 800641c:	e008      	b.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          break;
 800641e:	bf00      	nop
 8006420:	e029      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006422:	bf00      	nop
 8006424:	e027      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006426:	bf00      	nop
 8006428:	40021000 	.word	0x40021000
 800642c:	00f42400 	.word	0x00f42400
          break;
 8006430:	bf00      	nop
        break;
 8006432:	e020      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8006434:	4b12      	ldr	r3, [pc, #72]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800643e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
 8006446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800644a:	d004      	beq.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          break;
 800644c:	e00d      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800644e:	f7ff f831 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8006452:	61f8      	str	r0, [r7, #28]
          break;
 8006454:	e009      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006456:	4b0a      	ldr	r3, [pc, #40]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800645e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006462:	d101      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
            frequency = HSI_VALUE;
 8006464:	4b07      	ldr	r3, [pc, #28]	; (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
 8006466:	61fb      	str	r3, [r7, #28]
          break;
 8006468:	bf00      	nop
        break;
 800646a:	e004      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 800646c:	bf00      	nop
 800646e:	e002      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8006470:	bf00      	nop
 8006472:	e000      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8006474:	bf00      	nop
    }
  }

  return(frequency);
 8006476:	69fb      	ldr	r3, [r7, #28]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3720      	adds	r7, #32
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	40021000 	.word	0x40021000
 8006484:	00f42400 	.word	0x00f42400

08006488 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006488:	b480      	push	{r7}
 800648a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800648c:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a04      	ldr	r2, [pc, #16]	; (80064a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006492:	f043 0304 	orr.w	r3, r3, #4
 8006496:	6013      	str	r3, [r2, #0]
}
 8006498:	bf00      	nop
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	40021000 	.word	0x40021000

080064a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064b6:	4b73      	ldr	r3, [pc, #460]	; (8006684 <RCCEx_PLLSAI1_Config+0x1dc>)
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d018      	beq.n	80064f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80064c2:	4b70      	ldr	r3, [pc, #448]	; (8006684 <RCCEx_PLLSAI1_Config+0x1dc>)
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f003 0203 	and.w	r2, r3, #3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d10d      	bne.n	80064ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
       ||
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d009      	beq.n	80064ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80064da:	4b6a      	ldr	r3, [pc, #424]	; (8006684 <RCCEx_PLLSAI1_Config+0x1dc>)
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	091b      	lsrs	r3, r3, #4
 80064e0:	f003 0307 	and.w	r3, r3, #7
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
       ||
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d044      	beq.n	8006578 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	73fb      	strb	r3, [r7, #15]
 80064f2:	e041      	b.n	8006578 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d00c      	beq.n	8006516 <RCCEx_PLLSAI1_Config+0x6e>
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d013      	beq.n	8006528 <RCCEx_PLLSAI1_Config+0x80>
 8006500:	2b01      	cmp	r3, #1
 8006502:	d120      	bne.n	8006546 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006504:	4b5f      	ldr	r3, [pc, #380]	; (8006684 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d11d      	bne.n	800654c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006514:	e01a      	b.n	800654c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006516:	4b5b      	ldr	r3, [pc, #364]	; (8006684 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800651e:	2b00      	cmp	r3, #0
 8006520:	d116      	bne.n	8006550 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006526:	e013      	b.n	8006550 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006528:	4b56      	ldr	r3, [pc, #344]	; (8006684 <RCCEx_PLLSAI1_Config+0x1dc>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10f      	bne.n	8006554 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006534:	4b53      	ldr	r3, [pc, #332]	; (8006684 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d109      	bne.n	8006554 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006544:	e006      	b.n	8006554 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	73fb      	strb	r3, [r7, #15]
      break;
 800654a:	e004      	b.n	8006556 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800654c:	bf00      	nop
 800654e:	e002      	b.n	8006556 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006550:	bf00      	nop
 8006552:	e000      	b.n	8006556 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006554:	bf00      	nop
    }

    if(status == HAL_OK)
 8006556:	7bfb      	ldrb	r3, [r7, #15]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10d      	bne.n	8006578 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800655c:	4b49      	ldr	r3, [pc, #292]	; (8006684 <RCCEx_PLLSAI1_Config+0x1dc>)
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6819      	ldr	r1, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	3b01      	subs	r3, #1
 800656e:	011b      	lsls	r3, r3, #4
 8006570:	430b      	orrs	r3, r1
 8006572:	4944      	ldr	r1, [pc, #272]	; (8006684 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006574:	4313      	orrs	r3, r2
 8006576:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d17d      	bne.n	800667a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800657e:	4b41      	ldr	r3, [pc, #260]	; (8006684 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a40      	ldr	r2, [pc, #256]	; (8006684 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006584:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006588:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800658a:	f7fb fd01 	bl	8001f90 <HAL_GetTick>
 800658e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006590:	e009      	b.n	80065a6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006592:	f7fb fcfd 	bl	8001f90 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b02      	cmp	r3, #2
 800659e:	d902      	bls.n	80065a6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	73fb      	strb	r3, [r7, #15]
        break;
 80065a4:	e005      	b.n	80065b2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065a6:	4b37      	ldr	r3, [pc, #220]	; (8006684 <RCCEx_PLLSAI1_Config+0x1dc>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1ef      	bne.n	8006592 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d160      	bne.n	800667a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d111      	bne.n	80065e2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065be:	4b31      	ldr	r3, [pc, #196]	; (8006684 <RCCEx_PLLSAI1_Config+0x1dc>)
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80065c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	6892      	ldr	r2, [r2, #8]
 80065ce:	0211      	lsls	r1, r2, #8
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	68d2      	ldr	r2, [r2, #12]
 80065d4:	0912      	lsrs	r2, r2, #4
 80065d6:	0452      	lsls	r2, r2, #17
 80065d8:	430a      	orrs	r2, r1
 80065da:	492a      	ldr	r1, [pc, #168]	; (8006684 <RCCEx_PLLSAI1_Config+0x1dc>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	610b      	str	r3, [r1, #16]
 80065e0:	e027      	b.n	8006632 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d112      	bne.n	800660e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065e8:	4b26      	ldr	r3, [pc, #152]	; (8006684 <RCCEx_PLLSAI1_Config+0x1dc>)
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80065f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	6892      	ldr	r2, [r2, #8]
 80065f8:	0211      	lsls	r1, r2, #8
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	6912      	ldr	r2, [r2, #16]
 80065fe:	0852      	lsrs	r2, r2, #1
 8006600:	3a01      	subs	r2, #1
 8006602:	0552      	lsls	r2, r2, #21
 8006604:	430a      	orrs	r2, r1
 8006606:	491f      	ldr	r1, [pc, #124]	; (8006684 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006608:	4313      	orrs	r3, r2
 800660a:	610b      	str	r3, [r1, #16]
 800660c:	e011      	b.n	8006632 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800660e:	4b1d      	ldr	r3, [pc, #116]	; (8006684 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006616:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	6892      	ldr	r2, [r2, #8]
 800661e:	0211      	lsls	r1, r2, #8
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	6952      	ldr	r2, [r2, #20]
 8006624:	0852      	lsrs	r2, r2, #1
 8006626:	3a01      	subs	r2, #1
 8006628:	0652      	lsls	r2, r2, #25
 800662a:	430a      	orrs	r2, r1
 800662c:	4915      	ldr	r1, [pc, #84]	; (8006684 <RCCEx_PLLSAI1_Config+0x1dc>)
 800662e:	4313      	orrs	r3, r2
 8006630:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006632:	4b14      	ldr	r3, [pc, #80]	; (8006684 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a13      	ldr	r2, [pc, #76]	; (8006684 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006638:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800663c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800663e:	f7fb fca7 	bl	8001f90 <HAL_GetTick>
 8006642:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006644:	e009      	b.n	800665a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006646:	f7fb fca3 	bl	8001f90 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d902      	bls.n	800665a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	73fb      	strb	r3, [r7, #15]
          break;
 8006658:	e005      	b.n	8006666 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800665a:	4b0a      	ldr	r3, [pc, #40]	; (8006684 <RCCEx_PLLSAI1_Config+0x1dc>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d0ef      	beq.n	8006646 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8006666:	7bfb      	ldrb	r3, [r7, #15]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d106      	bne.n	800667a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800666c:	4b05      	ldr	r3, [pc, #20]	; (8006684 <RCCEx_PLLSAI1_Config+0x1dc>)
 800666e:	691a      	ldr	r2, [r3, #16]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	4903      	ldr	r1, [pc, #12]	; (8006684 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006676:	4313      	orrs	r3, r2
 8006678:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800667a:	7bfb      	ldrb	r3, [r7, #15]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	40021000 	.word	0x40021000

08006688 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006696:	4b68      	ldr	r3, [pc, #416]	; (8006838 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f003 0303 	and.w	r3, r3, #3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d018      	beq.n	80066d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80066a2:	4b65      	ldr	r3, [pc, #404]	; (8006838 <RCCEx_PLLSAI2_Config+0x1b0>)
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f003 0203 	and.w	r2, r3, #3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d10d      	bne.n	80066ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
       ||
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d009      	beq.n	80066ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80066ba:	4b5f      	ldr	r3, [pc, #380]	; (8006838 <RCCEx_PLLSAI2_Config+0x1b0>)
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	091b      	lsrs	r3, r3, #4
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
       ||
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d044      	beq.n	8006758 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	73fb      	strb	r3, [r7, #15]
 80066d2:	e041      	b.n	8006758 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d00c      	beq.n	80066f6 <RCCEx_PLLSAI2_Config+0x6e>
 80066dc:	2b03      	cmp	r3, #3
 80066de:	d013      	beq.n	8006708 <RCCEx_PLLSAI2_Config+0x80>
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d120      	bne.n	8006726 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80066e4:	4b54      	ldr	r3, [pc, #336]	; (8006838 <RCCEx_PLLSAI2_Config+0x1b0>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d11d      	bne.n	800672c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066f4:	e01a      	b.n	800672c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80066f6:	4b50      	ldr	r3, [pc, #320]	; (8006838 <RCCEx_PLLSAI2_Config+0x1b0>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d116      	bne.n	8006730 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006706:	e013      	b.n	8006730 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006708:	4b4b      	ldr	r3, [pc, #300]	; (8006838 <RCCEx_PLLSAI2_Config+0x1b0>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10f      	bne.n	8006734 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006714:	4b48      	ldr	r3, [pc, #288]	; (8006838 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d109      	bne.n	8006734 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006724:	e006      	b.n	8006734 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	73fb      	strb	r3, [r7, #15]
      break;
 800672a:	e004      	b.n	8006736 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800672c:	bf00      	nop
 800672e:	e002      	b.n	8006736 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006730:	bf00      	nop
 8006732:	e000      	b.n	8006736 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006734:	bf00      	nop
    }

    if(status == HAL_OK)
 8006736:	7bfb      	ldrb	r3, [r7, #15]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10d      	bne.n	8006758 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800673c:	4b3e      	ldr	r3, [pc, #248]	; (8006838 <RCCEx_PLLSAI2_Config+0x1b0>)
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6819      	ldr	r1, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	3b01      	subs	r3, #1
 800674e:	011b      	lsls	r3, r3, #4
 8006750:	430b      	orrs	r3, r1
 8006752:	4939      	ldr	r1, [pc, #228]	; (8006838 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006754:	4313      	orrs	r3, r2
 8006756:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006758:	7bfb      	ldrb	r3, [r7, #15]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d167      	bne.n	800682e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800675e:	4b36      	ldr	r3, [pc, #216]	; (8006838 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a35      	ldr	r2, [pc, #212]	; (8006838 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800676a:	f7fb fc11 	bl	8001f90 <HAL_GetTick>
 800676e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006770:	e009      	b.n	8006786 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006772:	f7fb fc0d 	bl	8001f90 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	2b02      	cmp	r3, #2
 800677e:	d902      	bls.n	8006786 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	73fb      	strb	r3, [r7, #15]
        break;
 8006784:	e005      	b.n	8006792 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006786:	4b2c      	ldr	r3, [pc, #176]	; (8006838 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1ef      	bne.n	8006772 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006792:	7bfb      	ldrb	r3, [r7, #15]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d14a      	bne.n	800682e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d111      	bne.n	80067c2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800679e:	4b26      	ldr	r3, [pc, #152]	; (8006838 <RCCEx_PLLSAI2_Config+0x1b0>)
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80067a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	6892      	ldr	r2, [r2, #8]
 80067ae:	0211      	lsls	r1, r2, #8
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	68d2      	ldr	r2, [r2, #12]
 80067b4:	0912      	lsrs	r2, r2, #4
 80067b6:	0452      	lsls	r2, r2, #17
 80067b8:	430a      	orrs	r2, r1
 80067ba:	491f      	ldr	r1, [pc, #124]	; (8006838 <RCCEx_PLLSAI2_Config+0x1b0>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	614b      	str	r3, [r1, #20]
 80067c0:	e011      	b.n	80067e6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80067c2:	4b1d      	ldr	r3, [pc, #116]	; (8006838 <RCCEx_PLLSAI2_Config+0x1b0>)
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80067ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	6892      	ldr	r2, [r2, #8]
 80067d2:	0211      	lsls	r1, r2, #8
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6912      	ldr	r2, [r2, #16]
 80067d8:	0852      	lsrs	r2, r2, #1
 80067da:	3a01      	subs	r2, #1
 80067dc:	0652      	lsls	r2, r2, #25
 80067de:	430a      	orrs	r2, r1
 80067e0:	4915      	ldr	r1, [pc, #84]	; (8006838 <RCCEx_PLLSAI2_Config+0x1b0>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80067e6:	4b14      	ldr	r3, [pc, #80]	; (8006838 <RCCEx_PLLSAI2_Config+0x1b0>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a13      	ldr	r2, [pc, #76]	; (8006838 <RCCEx_PLLSAI2_Config+0x1b0>)
 80067ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067f2:	f7fb fbcd 	bl	8001f90 <HAL_GetTick>
 80067f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80067f8:	e009      	b.n	800680e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80067fa:	f7fb fbc9 	bl	8001f90 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	2b02      	cmp	r3, #2
 8006806:	d902      	bls.n	800680e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	73fb      	strb	r3, [r7, #15]
          break;
 800680c:	e005      	b.n	800681a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800680e:	4b0a      	ldr	r3, [pc, #40]	; (8006838 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d0ef      	beq.n	80067fa <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800681a:	7bfb      	ldrb	r3, [r7, #15]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d106      	bne.n	800682e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006820:	4b05      	ldr	r3, [pc, #20]	; (8006838 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006822:	695a      	ldr	r2, [r3, #20]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	4903      	ldr	r1, [pc, #12]	; (8006838 <RCCEx_PLLSAI2_Config+0x1b0>)
 800682a:	4313      	orrs	r3, r2
 800682c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800682e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	40021000 	.word	0x40021000

0800683c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800683c:	b480      	push	{r7}
 800683e:	b089      	sub	sp, #36	; 0x24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006858:	d10c      	bne.n	8006874 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800685a:	4b62      	ldr	r3, [pc, #392]	; (80069e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800685c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006860:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006864:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800686c:	d112      	bne.n	8006894 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800686e:	4b5e      	ldr	r3, [pc, #376]	; (80069e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8006870:	61fb      	str	r3, [r7, #28]
 8006872:	e00f      	b.n	8006894 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800687a:	d10b      	bne.n	8006894 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800687c:	4b59      	ldr	r3, [pc, #356]	; (80069e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800687e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006882:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006886:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800688e:	d101      	bne.n	8006894 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006890:	4b55      	ldr	r3, [pc, #340]	; (80069e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8006892:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	2b00      	cmp	r3, #0
 8006898:	f040 809c 	bne.w	80069d4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
  {
    pllvco = InputFrequency;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068a6:	d003      	beq.n	80068b0 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068ae:	d12d      	bne.n	800690c <RCCEx_GetSAIxPeriphCLKFreq+0xd0>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 80068b0:	4b4c      	ldr	r3, [pc, #304]	; (80069e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 808b 	beq.w	80069d4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80068be:	4b49      	ldr	r3, [pc, #292]	; (80069e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	091b      	lsrs	r3, r3, #4
 80068c4:	f003 0307 	and.w	r3, r3, #7
 80068c8:	3301      	adds	r3, #1
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80068d2:	4b44      	ldr	r3, [pc, #272]	; (80069e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	0a1b      	lsrs	r3, r3, #8
 80068d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068dc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10a      	bne.n	80068fa <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80068e4:	4b3f      	ldr	r3, [pc, #252]	; (80069e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <RCCEx_GetSAIxPeriphCLKFreq+0xba>
          {
            pllp = 17U;
 80068f0:	2311      	movs	r3, #17
 80068f2:	617b      	str	r3, [r7, #20]
 80068f4:	e001      	b.n	80068fa <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
          }
          else
          {
            pllp = 7U;
 80068f6:	2307      	movs	r3, #7
 80068f8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	fb02 f203 	mul.w	r2, r2, r3
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	fbb2 f3f3 	udiv	r3, r2, r3
 8006908:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 800690a:	e063      	b.n	80069d4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d12c      	bne.n	800696c <RCCEx_GetSAIxPeriphCLKFreq+0x130>
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8006912:	4b34      	ldr	r3, [pc, #208]	; (80069e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d05a      	beq.n	80069d4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800691e:	4b31      	ldr	r3, [pc, #196]	; (80069e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	091b      	lsrs	r3, r3, #4
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	3301      	adds	r3, #1
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006930:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006932:	4b2c      	ldr	r3, [pc, #176]	; (80069e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	0a1b      	lsrs	r3, r3, #8
 8006938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800693c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10a      	bne.n	800695a <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006944:	4b27      	ldr	r3, [pc, #156]	; (80069e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d002      	beq.n	8006956 <RCCEx_GetSAIxPeriphCLKFreq+0x11a>
          {
            pllp = 17U;
 8006950:	2311      	movs	r3, #17
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	e001      	b.n	800695a <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
          }
          else
          {
            pllp = 7U;
 8006956:	2307      	movs	r3, #7
 8006958:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	fb02 f203 	mul.w	r2, r2, r3
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	fbb2 f3f3 	udiv	r3, r2, r3
 8006968:	61fb      	str	r3, [r7, #28]
 800696a:	e033      	b.n	80069d4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006972:	d003      	beq.n	800697c <RCCEx_GetSAIxPeriphCLKFreq+0x140>
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800697a:	d12b      	bne.n	80069d4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 800697c:	4b19      	ldr	r3, [pc, #100]	; (80069e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d025      	beq.n	80069d4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006988:	4b16      	ldr	r3, [pc, #88]	; (80069e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	091b      	lsrs	r3, r3, #4
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	3301      	adds	r3, #1
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	fbb2 f3f3 	udiv	r3, r2, r3
 800699a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800699c:	4b11      	ldr	r3, [pc, #68]	; (80069e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	0a1b      	lsrs	r3, r3, #8
 80069a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069a6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10a      	bne.n	80069c4 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80069ae:	4b0d      	ldr	r3, [pc, #52]	; (80069e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d002      	beq.n	80069c0 <RCCEx_GetSAIxPeriphCLKFreq+0x184>
          {
            pllp = 17U;
 80069ba:	2311      	movs	r3, #17
 80069bc:	617b      	str	r3, [r7, #20]
 80069be:	e001      	b.n	80069c4 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
          }
          else
          {
            pllp = 7U;
 80069c0:	2307      	movs	r3, #7
 80069c2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	fb02 f203 	mul.w	r2, r2, r3
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d2:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80069d4:	69fb      	ldr	r3, [r7, #28]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3724      	adds	r7, #36	; 0x24
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	40021000 	.word	0x40021000
 80069e8:	001fff68 	.word	0x001fff68

080069ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d06f      	beq.n	8006ade <HAL_RTC_Init+0xf2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d106      	bne.n	8006a18 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f7fa fc5c 	bl	80012d0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	22ca      	movs	r2, #202	; 0xca
 8006a26:	625a      	str	r2, [r3, #36]	; 0x24
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2253      	movs	r2, #83	; 0x53
 8006a2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f9a3 	bl	8006d7c <RTC_EnterInitMode>
 8006a36:	4603      	mov	r3, r0
 8006a38:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d14e      	bne.n	8006ade <HAL_RTC_Init+0xf2>
#if defined(STM32L412xx) || defined(STM32L422xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	6812      	ldr	r2, [r2, #0]
 8006a4a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a52:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6899      	ldr	r1, [r3, #8]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	68d2      	ldr	r2, [r2, #12]
 8006a7a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6919      	ldr	r1, [r3, #16]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	041a      	lsls	r2, r3, #16
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f9a7 	bl	8006de4 <RTC_ExitInitMode>
 8006a96:	4603      	mov	r3, r0
 8006a98:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d11e      	bne.n	8006ade <HAL_RTC_Init+0xf2>
      {
#if defined(STM32L412xx) || defined(STM32L422xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 0203 	bic.w	r2, r2, #3
 8006aae:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	69da      	ldr	r2, [r3, #28]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	22ff      	movs	r2, #255	; 0xff
 8006ace:	625a      	str	r2, [r3, #36]	; 0x24

        if (status == HAL_OK)
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d103      	bne.n	8006ade <HAL_RTC_Init+0xf2>
        {
          hrtc->State = HAL_RTC_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
      }
    }
  }

  return status;
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006ae8:	b590      	push	{r4, r7, lr}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d101      	bne.n	8006b02 <HAL_RTC_SetTime+0x1a>
 8006afe:	2302      	movs	r3, #2
 8006b00:	e08b      	b.n	8006c1a <HAL_RTC_SetTime+0x132>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	22ca      	movs	r2, #202	; 0xca
 8006b18:	625a      	str	r2, [r3, #36]	; 0x24
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2253      	movs	r2, #83	; 0x53
 8006b20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 f92a 	bl	8006d7c <RTC_EnterInitMode>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006b2c:	7cfb      	ldrb	r3, [r7, #19]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d163      	bne.n	8006bfa <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d126      	bne.n	8006b86 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d102      	bne.n	8006b4c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 f985 	bl	8006e60 <RTC_ByteToBcd2>
 8006b56:	4603      	mov	r3, r0
 8006b58:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	785b      	ldrb	r3, [r3, #1]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f000 f97e 	bl	8006e60 <RTC_ByteToBcd2>
 8006b64:	4603      	mov	r3, r0
 8006b66:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b68:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	789b      	ldrb	r3, [r3, #2]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 f976 	bl	8006e60 <RTC_ByteToBcd2>
 8006b74:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b76:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	78db      	ldrb	r3, [r3, #3]
 8006b7e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b80:	4313      	orrs	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	e018      	b.n	8006bb8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d102      	bne.n	8006b9a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2200      	movs	r2, #0
 8006b98:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	785b      	ldrb	r3, [r3, #1]
 8006ba4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006ba6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006bac:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	78db      	ldrb	r3, [r3, #3]
 8006bb2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006bc2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006bc6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689a      	ldr	r2, [r3, #8]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006bd6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6899      	ldr	r1, [r3, #8]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	68da      	ldr	r2, [r3, #12]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	431a      	orrs	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	430a      	orrs	r2, r1
 8006bee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 f8f7 	bl	8006de4 <RTC_ExitInitMode>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	22ff      	movs	r2, #255	; 0xff
 8006c00:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006c02:	7cfb      	ldrb	r3, [r7, #19]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d103      	bne.n	8006c10 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006c18:	7cfb      	ldrb	r3, [r7, #19]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	371c      	adds	r7, #28
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd90      	pop	{r4, r7, pc}

08006c22 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006c22:	b590      	push	{r4, r7, lr}
 8006c24:	b087      	sub	sp, #28
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d101      	bne.n	8006c3c <HAL_RTC_SetDate+0x1a>
 8006c38:	2302      	movs	r3, #2
 8006c3a:	e075      	b.n	8006d28 <HAL_RTC_SetDate+0x106>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10e      	bne.n	8006c70 <HAL_RTC_SetDate+0x4e>
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	785b      	ldrb	r3, [r3, #1]
 8006c56:	f003 0310 	and.w	r3, r3, #16
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d008      	beq.n	8006c70 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	785b      	ldrb	r3, [r3, #1]
 8006c62:	f023 0310 	bic.w	r3, r3, #16
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	330a      	adds	r3, #10
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d11c      	bne.n	8006cb0 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	78db      	ldrb	r3, [r3, #3]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 f8f0 	bl	8006e60 <RTC_ByteToBcd2>
 8006c80:	4603      	mov	r3, r0
 8006c82:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	785b      	ldrb	r3, [r3, #1]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 f8e9 	bl	8006e60 <RTC_ByteToBcd2>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006c92:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	789b      	ldrb	r3, [r3, #2]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f000 f8e1 	bl	8006e60 <RTC_ByteToBcd2>
 8006c9e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006ca0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006caa:	4313      	orrs	r3, r2
 8006cac:	617b      	str	r3, [r7, #20]
 8006cae:	e00e      	b.n	8006cce <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	78db      	ldrb	r3, [r3, #3]
 8006cb4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	785b      	ldrb	r3, [r3, #1]
 8006cba:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006cbc:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006cc2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	22ca      	movs	r2, #202	; 0xca
 8006cd4:	625a      	str	r2, [r3, #36]	; 0x24
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2253      	movs	r2, #83	; 0x53
 8006cdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f000 f84c 	bl	8006d7c <RTC_EnterInitMode>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006ce8:	7cfb      	ldrb	r3, [r7, #19]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10c      	bne.n	8006d08 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006cf8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006cfc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 f870 	bl	8006de4 <RTC_ExitInitMode>
 8006d04:	4603      	mov	r3, r0
 8006d06:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	22ff      	movs	r2, #255	; 0xff
 8006d0e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006d10:	7cfb      	ldrb	r3, [r7, #19]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d103      	bne.n	8006d1e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006d26:	7cfb      	ldrb	r3, [r7, #19]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	371c      	adds	r7, #28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd90      	pop	{r4, r7, pc}

08006d30 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006d46:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006d48:	f7fb f922 	bl	8001f90 <HAL_GetTick>
 8006d4c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006d4e:	e009      	b.n	8006d64 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006d50:	f7fb f91e 	bl	8001f90 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d5e:	d901      	bls.n	8006d64 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e007      	b.n	8006d74 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d0ee      	beq.n	8006d50 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d84:	2300      	movs	r3, #0
 8006d86:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d120      	bne.n	8006dd8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d9e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006da0:	f7fb f8f6 	bl	8001f90 <HAL_GetTick>
 8006da4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006da6:	e00d      	b.n	8006dc4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006da8:	f7fb f8f2 	bl	8001f90 <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006db6:	d905      	bls.n	8006dc4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2203      	movs	r2, #3
 8006dc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d102      	bne.n	8006dd8 <RTC_EnterInitMode+0x5c>
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	d1e7      	bne.n	8006da8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return status;
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
	...

08006de4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006df0:	4b1a      	ldr	r3, [pc, #104]	; (8006e5c <RTC_ExitInitMode+0x78>)
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	4a19      	ldr	r2, [pc, #100]	; (8006e5c <RTC_ExitInitMode+0x78>)
 8006df6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dfa:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006dfc:	4b17      	ldr	r3, [pc, #92]	; (8006e5c <RTC_ExitInitMode+0x78>)
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f003 0320 	and.w	r3, r3, #32
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10c      	bne.n	8006e22 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f7ff ff91 	bl	8006d30 <HAL_RTC_WaitForSynchro>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d01e      	beq.n	8006e52 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2203      	movs	r2, #3
 8006e18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	73fb      	strb	r3, [r7, #15]
 8006e20:	e017      	b.n	8006e52 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006e22:	4b0e      	ldr	r3, [pc, #56]	; (8006e5c <RTC_ExitInitMode+0x78>)
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	4a0d      	ldr	r2, [pc, #52]	; (8006e5c <RTC_ExitInitMode+0x78>)
 8006e28:	f023 0320 	bic.w	r3, r3, #32
 8006e2c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7ff ff7e 	bl	8006d30 <HAL_RTC_WaitForSynchro>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d005      	beq.n	8006e46 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2203      	movs	r2, #3
 8006e3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006e46:	4b05      	ldr	r3, [pc, #20]	; (8006e5c <RTC_ExitInitMode+0x78>)
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	4a04      	ldr	r2, [pc, #16]	; (8006e5c <RTC_ExitInitMode+0x78>)
 8006e4c:	f043 0320 	orr.w	r3, r3, #32
 8006e50:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	40002800 	.word	0x40002800

08006e60 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	4603      	mov	r3, r0
 8006e68:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8006e6e:	79fb      	ldrb	r3, [r7, #7]
 8006e70:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8006e72:	e005      	b.n	8006e80 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	3301      	adds	r3, #1
 8006e78:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8006e7a:	7afb      	ldrb	r3, [r7, #11]
 8006e7c:	3b0a      	subs	r3, #10
 8006e7e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006e80:	7afb      	ldrb	r3, [r7, #11]
 8006e82:	2b09      	cmp	r3, #9
 8006e84:	d8f6      	bhi.n	8006e74 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	011b      	lsls	r3, r3, #4
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	7afb      	ldrb	r3, [r7, #11]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	b2db      	uxtb	r3, r3
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b088      	sub	sp, #32
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d101      	bne.n	8006eb2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e14a      	b.n	8007148 <HAL_SAI_Init+0x2a8>
      return HAL_ERROR;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d106      	bne.n	8006ecc <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7fa fac6 	bl	8001458 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f94d 	bl	800716c <SAI_Disable>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d001      	beq.n	8006edc <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e135      	b.n	8007148 <HAL_SAI_Init+0x2a8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2202      	movs	r2, #2
 8006ee0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d007      	beq.n	8006efc <HAL_SAI_Init+0x5c>
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d302      	bcc.n	8006ef6 <HAL_SAI_Init+0x56>
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d006      	beq.n	8006f02 <HAL_SAI_Init+0x62>
 8006ef4:	e008      	b.n	8006f08 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	61fb      	str	r3, [r7, #28]
      break;
 8006efa:	e008      	b.n	8006f0e <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006efc:	2310      	movs	r3, #16
 8006efe:	61fb      	str	r3, [r7, #28]
      break;
 8006f00:	e005      	b.n	8006f0e <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006f02:	2320      	movs	r3, #32
 8006f04:	61fb      	str	r3, [r7, #28]
      break;
 8006f06:	e002      	b.n	8006f0e <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	61fb      	str	r3, [r7, #28]
      break;
 8006f0c:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	2b03      	cmp	r3, #3
 8006f14:	d81d      	bhi.n	8006f52 <HAL_SAI_Init+0xb2>
 8006f16:	a201      	add	r2, pc, #4	; (adr r2, 8006f1c <HAL_SAI_Init+0x7c>)
 8006f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1c:	08006f2d 	.word	0x08006f2d
 8006f20:	08006f33 	.word	0x08006f33
 8006f24:	08006f3b 	.word	0x08006f3b
 8006f28:	08006f43 	.word	0x08006f43
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	617b      	str	r3, [r7, #20]
      break;
 8006f30:	e012      	b.n	8006f58 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f36:	617b      	str	r3, [r7, #20]
      break;
 8006f38:	e00e      	b.n	8006f58 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006f3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f3e:	617b      	str	r3, [r7, #20]
      break;
 8006f40:	e00a      	b.n	8006f58 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006f42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f46:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	f043 0301 	orr.w	r3, r3, #1
 8006f4e:	61fb      	str	r3, [r7, #28]
      break;
 8006f50:	e002      	b.n	8006f58 <HAL_SAI_Init+0xb8>
    default :
      syncen_bits = 0;
 8006f52:	2300      	movs	r3, #0
 8006f54:	617b      	str	r3, [r7, #20]
      break;
 8006f56:	bf00      	nop

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a7c      	ldr	r2, [pc, #496]	; (8007150 <HAL_SAI_Init+0x2b0>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d004      	beq.n	8006f6c <HAL_SAI_Init+0xcc>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a7b      	ldr	r2, [pc, #492]	; (8007154 <HAL_SAI_Init+0x2b4>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d103      	bne.n	8006f74 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8006f6c:	4a7a      	ldr	r2, [pc, #488]	; (8007158 <HAL_SAI_Init+0x2b8>)
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	e002      	b.n	8006f7a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006f74:	4a79      	ldr	r2, [pc, #484]	; (800715c <HAL_SAI_Init+0x2bc>)
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	6013      	str	r3, [r2, #0]

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || */
  /* STM32L496xx || STM32L4A6xx || */
  /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d038      	beq.n	8006ff4 <HAL_SAI_Init+0x154>
    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a72      	ldr	r2, [pc, #456]	; (8007150 <HAL_SAI_Init+0x2b0>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d004      	beq.n	8006f96 <HAL_SAI_Init+0xf6>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a70      	ldr	r2, [pc, #448]	; (8007154 <HAL_SAI_Init+0x2b4>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d105      	bne.n	8006fa2 <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006f96:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006f9a:	f7fe fdfd 	bl	8005b98 <HAL_RCCEx_GetPeriphCLKFreq>
 8006f9e:	6138      	str	r0, [r7, #16]
 8006fa0:	e004      	b.n	8006fac <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006fa2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006fa6:	f7fe fdf7 	bl	8005b98 <HAL_RCCEx_GetPeriphCLKFreq>
 8006faa:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	005b      	lsls	r3, r3, #1
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	69db      	ldr	r3, [r3, #28]
 8006fbc:	025b      	lsls	r3, r3, #9
 8006fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc2:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	4a66      	ldr	r2, [pc, #408]	; (8007160 <HAL_SAI_Init+0x2c0>)
 8006fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fcc:	08da      	lsrs	r2, r3, #3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006fd2:	68f9      	ldr	r1, [r7, #12]
 8006fd4:	4b62      	ldr	r3, [pc, #392]	; (8007160 <HAL_SAI_Init+0x2c0>)
 8006fd6:	fba3 2301 	umull	r2, r3, r3, r1
 8006fda:	08da      	lsrs	r2, r3, #3
 8006fdc:	4613      	mov	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	005b      	lsls	r3, r3, #1
 8006fe4:	1aca      	subs	r2, r1, r3
 8006fe6:	2a08      	cmp	r2, #8
 8006fe8:	d904      	bls.n	8006ff4 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	1c5a      	adds	r2, r3, #1
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d003      	beq.n	8007004 <HAL_SAI_Init+0x164>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	2b02      	cmp	r3, #2
 8007002:	d109      	bne.n	8007018 <HAL_SAI_Init+0x178>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007008:	2b01      	cmp	r3, #1
 800700a:	d101      	bne.n	8007010 <HAL_SAI_Init+0x170>
 800700c:	2300      	movs	r3, #0
 800700e:	e001      	b.n	8007014 <HAL_SAI_Init+0x174>
 8007010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007014:	61bb      	str	r3, [r7, #24]
 8007016:	e008      	b.n	800702a <HAL_SAI_Init+0x18a>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701c:	2b01      	cmp	r3, #1
 800701e:	d102      	bne.n	8007026 <HAL_SAI_Init+0x186>
 8007020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007024:	e000      	b.n	8007028 <HAL_SAI_Init+0x188>
 8007026:	2300      	movs	r3, #0
 8007028:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6819      	ldr	r1, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	4b4b      	ldr	r3, [pc, #300]	; (8007164 <HAL_SAI_Init+0x2c4>)
 8007036:	400b      	ands	r3, r1
 8007038:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	6819      	ldr	r1, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007048:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800704e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007054:	431a      	orrs	r2, r3
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8007062:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800706e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a1b      	ldr	r3, [r3, #32]
 8007074:	051b      	lsls	r3, r3, #20
 8007076:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	430a      	orrs	r2, r1
 800707e:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	6812      	ldr	r2, [r2, #0]
 800708a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800708e:	f023 030f 	bic.w	r3, r3, #15
 8007092:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6859      	ldr	r1, [r3, #4]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	699a      	ldr	r2, [r3, #24]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a2:	431a      	orrs	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a8:	431a      	orrs	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6899      	ldr	r1, [r3, #8]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	4b2a      	ldr	r3, [pc, #168]	; (8007168 <HAL_SAI_Init+0x2c8>)
 80070be:	400b      	ands	r3, r1
 80070c0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6899      	ldr	r1, [r3, #8]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070cc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80070d2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80070d8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80070de:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e4:	3b01      	subs	r3, #1
 80070e6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80070e8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68d9      	ldr	r1, [r3, #12]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007100:	400b      	ands	r3, r1
 8007102:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68d9      	ldr	r1, [r3, #12]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007112:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007118:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800711a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007120:	3b01      	subs	r3, #1
 8007122:	021b      	lsls	r3, r3, #8
 8007124:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	430a      	orrs	r2, r1
 800712c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3720      	adds	r7, #32
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	40015404 	.word	0x40015404
 8007154:	40015424 	.word	0x40015424
 8007158:	40015400 	.word	0x40015400
 800715c:	40015800 	.word	0x40015800
 8007160:	cccccccd 	.word	0xcccccccd
 8007164:	ff05c010 	.word	0xff05c010
 8007168:	fff88000 	.word	0xfff88000

0800716c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800716c:	b490      	push	{r4, r7}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007174:	4b15      	ldr	r3, [pc, #84]	; (80071cc <SAI_Disable+0x60>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a15      	ldr	r2, [pc, #84]	; (80071d0 <SAI_Disable+0x64>)
 800717a:	fba2 2303 	umull	r2, r3, r2, r3
 800717e:	0b1b      	lsrs	r3, r3, #12
 8007180:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007194:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007196:	2c00      	cmp	r4, #0
 8007198:	d10a      	bne.n	80071b0 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	73fb      	strb	r3, [r7, #15]
      break;
 80071ae:	e007      	b.n	80071c0 <SAI_Disable+0x54>
    }
    count--;
 80071b0:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1ea      	bne.n	8007196 <SAI_Disable+0x2a>

  return status;
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bc90      	pop	{r4, r7}
 80071ca:	4770      	bx	lr
 80071cc:	2000001c 	.word	0x2000001c
 80071d0:	95cbec1b 	.word	0x95cbec1b

080071d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e07c      	b.n	80072e0 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d106      	bne.n	8007206 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7fa f9df 	bl	80015c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2202      	movs	r2, #2
 800720a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800721c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007226:	d902      	bls.n	800722e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007228:	2300      	movs	r3, #0
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	e002      	b.n	8007234 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800722e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007232:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800723c:	d007      	beq.n	800724e <HAL_SPI_Init+0x7a>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007246:	d002      	beq.n	800724e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10b      	bne.n	800726e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800725e:	d903      	bls.n	8007268 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2202      	movs	r2, #2
 8007264:	631a      	str	r2, [r3, #48]	; 0x30
 8007266:	e002      	b.n	800726e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685a      	ldr	r2, [r3, #4]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	431a      	orrs	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	431a      	orrs	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	431a      	orrs	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800728c:	431a      	orrs	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	431a      	orrs	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	ea42 0103 	orr.w	r1, r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	430a      	orrs	r2, r1
 80072a6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	0c1b      	lsrs	r3, r3, #16
 80072ae:	f003 0204 	and.w	r2, r3, #4
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	431a      	orrs	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072bc:	431a      	orrs	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	ea42 0103 	orr.w	r1, r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e040      	b.n	800737c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d106      	bne.n	8007310 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f7fa fd68 	bl	8001de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2224      	movs	r2, #36	; 0x24
 8007314:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 0201 	bic.w	r2, r2, #1
 8007324:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f82c 	bl	8007384 <UART_SetConfig>
 800732c:	4603      	mov	r3, r0
 800732e:	2b01      	cmp	r3, #1
 8007330:	d101      	bne.n	8007336 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e022      	b.n	800737c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fb68 	bl	8007a14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007352:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689a      	ldr	r2, [r3, #8]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007362:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f042 0201 	orr.w	r2, r2, #1
 8007372:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fbef 	bl	8007b58 <UART_CheckIdleState>
 800737a:	4603      	mov	r3, r0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007384:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007388:	b088      	sub	sp, #32
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800738e:	2300      	movs	r3, #0
 8007390:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007392:	2300      	movs	r3, #0
 8007394:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007396:	2300      	movs	r3, #0
 8007398:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	689a      	ldr	r2, [r3, #8]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	431a      	orrs	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	431a      	orrs	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	4bac      	ldr	r3, [pc, #688]	; (800766c <UART_SetConfig+0x2e8>)
 80073ba:	4013      	ands	r3, r2
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	6812      	ldr	r2, [r2, #0]
 80073c0:	69f9      	ldr	r1, [r7, #28]
 80073c2:	430b      	orrs	r3, r1
 80073c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68da      	ldr	r2, [r3, #12]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	430a      	orrs	r2, r1
 80073da:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4aa2      	ldr	r2, [pc, #648]	; (8007670 <UART_SetConfig+0x2ec>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d004      	beq.n	80073f6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	69fa      	ldr	r2, [r7, #28]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	69fa      	ldr	r2, [r7, #28]
 8007406:	430a      	orrs	r2, r1
 8007408:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a99      	ldr	r2, [pc, #612]	; (8007674 <UART_SetConfig+0x2f0>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d121      	bne.n	8007458 <UART_SetConfig+0xd4>
 8007414:	4b98      	ldr	r3, [pc, #608]	; (8007678 <UART_SetConfig+0x2f4>)
 8007416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800741a:	f003 0303 	and.w	r3, r3, #3
 800741e:	2b03      	cmp	r3, #3
 8007420:	d816      	bhi.n	8007450 <UART_SetConfig+0xcc>
 8007422:	a201      	add	r2, pc, #4	; (adr r2, 8007428 <UART_SetConfig+0xa4>)
 8007424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007428:	08007439 	.word	0x08007439
 800742c:	08007445 	.word	0x08007445
 8007430:	0800743f 	.word	0x0800743f
 8007434:	0800744b 	.word	0x0800744b
 8007438:	2301      	movs	r3, #1
 800743a:	76fb      	strb	r3, [r7, #27]
 800743c:	e0e8      	b.n	8007610 <UART_SetConfig+0x28c>
 800743e:	2302      	movs	r3, #2
 8007440:	76fb      	strb	r3, [r7, #27]
 8007442:	e0e5      	b.n	8007610 <UART_SetConfig+0x28c>
 8007444:	2304      	movs	r3, #4
 8007446:	76fb      	strb	r3, [r7, #27]
 8007448:	e0e2      	b.n	8007610 <UART_SetConfig+0x28c>
 800744a:	2308      	movs	r3, #8
 800744c:	76fb      	strb	r3, [r7, #27]
 800744e:	e0df      	b.n	8007610 <UART_SetConfig+0x28c>
 8007450:	2310      	movs	r3, #16
 8007452:	76fb      	strb	r3, [r7, #27]
 8007454:	bf00      	nop
 8007456:	e0db      	b.n	8007610 <UART_SetConfig+0x28c>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a87      	ldr	r2, [pc, #540]	; (800767c <UART_SetConfig+0x2f8>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d134      	bne.n	80074cc <UART_SetConfig+0x148>
 8007462:	4b85      	ldr	r3, [pc, #532]	; (8007678 <UART_SetConfig+0x2f4>)
 8007464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007468:	f003 030c 	and.w	r3, r3, #12
 800746c:	2b0c      	cmp	r3, #12
 800746e:	d829      	bhi.n	80074c4 <UART_SetConfig+0x140>
 8007470:	a201      	add	r2, pc, #4	; (adr r2, 8007478 <UART_SetConfig+0xf4>)
 8007472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007476:	bf00      	nop
 8007478:	080074ad 	.word	0x080074ad
 800747c:	080074c5 	.word	0x080074c5
 8007480:	080074c5 	.word	0x080074c5
 8007484:	080074c5 	.word	0x080074c5
 8007488:	080074b9 	.word	0x080074b9
 800748c:	080074c5 	.word	0x080074c5
 8007490:	080074c5 	.word	0x080074c5
 8007494:	080074c5 	.word	0x080074c5
 8007498:	080074b3 	.word	0x080074b3
 800749c:	080074c5 	.word	0x080074c5
 80074a0:	080074c5 	.word	0x080074c5
 80074a4:	080074c5 	.word	0x080074c5
 80074a8:	080074bf 	.word	0x080074bf
 80074ac:	2300      	movs	r3, #0
 80074ae:	76fb      	strb	r3, [r7, #27]
 80074b0:	e0ae      	b.n	8007610 <UART_SetConfig+0x28c>
 80074b2:	2302      	movs	r3, #2
 80074b4:	76fb      	strb	r3, [r7, #27]
 80074b6:	e0ab      	b.n	8007610 <UART_SetConfig+0x28c>
 80074b8:	2304      	movs	r3, #4
 80074ba:	76fb      	strb	r3, [r7, #27]
 80074bc:	e0a8      	b.n	8007610 <UART_SetConfig+0x28c>
 80074be:	2308      	movs	r3, #8
 80074c0:	76fb      	strb	r3, [r7, #27]
 80074c2:	e0a5      	b.n	8007610 <UART_SetConfig+0x28c>
 80074c4:	2310      	movs	r3, #16
 80074c6:	76fb      	strb	r3, [r7, #27]
 80074c8:	bf00      	nop
 80074ca:	e0a1      	b.n	8007610 <UART_SetConfig+0x28c>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a6b      	ldr	r2, [pc, #428]	; (8007680 <UART_SetConfig+0x2fc>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d120      	bne.n	8007518 <UART_SetConfig+0x194>
 80074d6:	4b68      	ldr	r3, [pc, #416]	; (8007678 <UART_SetConfig+0x2f4>)
 80074d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074e0:	2b10      	cmp	r3, #16
 80074e2:	d00f      	beq.n	8007504 <UART_SetConfig+0x180>
 80074e4:	2b10      	cmp	r3, #16
 80074e6:	d802      	bhi.n	80074ee <UART_SetConfig+0x16a>
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d005      	beq.n	80074f8 <UART_SetConfig+0x174>
 80074ec:	e010      	b.n	8007510 <UART_SetConfig+0x18c>
 80074ee:	2b20      	cmp	r3, #32
 80074f0:	d005      	beq.n	80074fe <UART_SetConfig+0x17a>
 80074f2:	2b30      	cmp	r3, #48	; 0x30
 80074f4:	d009      	beq.n	800750a <UART_SetConfig+0x186>
 80074f6:	e00b      	b.n	8007510 <UART_SetConfig+0x18c>
 80074f8:	2300      	movs	r3, #0
 80074fa:	76fb      	strb	r3, [r7, #27]
 80074fc:	e088      	b.n	8007610 <UART_SetConfig+0x28c>
 80074fe:	2302      	movs	r3, #2
 8007500:	76fb      	strb	r3, [r7, #27]
 8007502:	e085      	b.n	8007610 <UART_SetConfig+0x28c>
 8007504:	2304      	movs	r3, #4
 8007506:	76fb      	strb	r3, [r7, #27]
 8007508:	e082      	b.n	8007610 <UART_SetConfig+0x28c>
 800750a:	2308      	movs	r3, #8
 800750c:	76fb      	strb	r3, [r7, #27]
 800750e:	e07f      	b.n	8007610 <UART_SetConfig+0x28c>
 8007510:	2310      	movs	r3, #16
 8007512:	76fb      	strb	r3, [r7, #27]
 8007514:	bf00      	nop
 8007516:	e07b      	b.n	8007610 <UART_SetConfig+0x28c>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a59      	ldr	r2, [pc, #356]	; (8007684 <UART_SetConfig+0x300>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d120      	bne.n	8007564 <UART_SetConfig+0x1e0>
 8007522:	4b55      	ldr	r3, [pc, #340]	; (8007678 <UART_SetConfig+0x2f4>)
 8007524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007528:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800752c:	2b40      	cmp	r3, #64	; 0x40
 800752e:	d00f      	beq.n	8007550 <UART_SetConfig+0x1cc>
 8007530:	2b40      	cmp	r3, #64	; 0x40
 8007532:	d802      	bhi.n	800753a <UART_SetConfig+0x1b6>
 8007534:	2b00      	cmp	r3, #0
 8007536:	d005      	beq.n	8007544 <UART_SetConfig+0x1c0>
 8007538:	e010      	b.n	800755c <UART_SetConfig+0x1d8>
 800753a:	2b80      	cmp	r3, #128	; 0x80
 800753c:	d005      	beq.n	800754a <UART_SetConfig+0x1c6>
 800753e:	2bc0      	cmp	r3, #192	; 0xc0
 8007540:	d009      	beq.n	8007556 <UART_SetConfig+0x1d2>
 8007542:	e00b      	b.n	800755c <UART_SetConfig+0x1d8>
 8007544:	2300      	movs	r3, #0
 8007546:	76fb      	strb	r3, [r7, #27]
 8007548:	e062      	b.n	8007610 <UART_SetConfig+0x28c>
 800754a:	2302      	movs	r3, #2
 800754c:	76fb      	strb	r3, [r7, #27]
 800754e:	e05f      	b.n	8007610 <UART_SetConfig+0x28c>
 8007550:	2304      	movs	r3, #4
 8007552:	76fb      	strb	r3, [r7, #27]
 8007554:	e05c      	b.n	8007610 <UART_SetConfig+0x28c>
 8007556:	2308      	movs	r3, #8
 8007558:	76fb      	strb	r3, [r7, #27]
 800755a:	e059      	b.n	8007610 <UART_SetConfig+0x28c>
 800755c:	2310      	movs	r3, #16
 800755e:	76fb      	strb	r3, [r7, #27]
 8007560:	bf00      	nop
 8007562:	e055      	b.n	8007610 <UART_SetConfig+0x28c>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a47      	ldr	r2, [pc, #284]	; (8007688 <UART_SetConfig+0x304>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d124      	bne.n	80075b8 <UART_SetConfig+0x234>
 800756e:	4b42      	ldr	r3, [pc, #264]	; (8007678 <UART_SetConfig+0x2f4>)
 8007570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800757c:	d012      	beq.n	80075a4 <UART_SetConfig+0x220>
 800757e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007582:	d802      	bhi.n	800758a <UART_SetConfig+0x206>
 8007584:	2b00      	cmp	r3, #0
 8007586:	d007      	beq.n	8007598 <UART_SetConfig+0x214>
 8007588:	e012      	b.n	80075b0 <UART_SetConfig+0x22c>
 800758a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800758e:	d006      	beq.n	800759e <UART_SetConfig+0x21a>
 8007590:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007594:	d009      	beq.n	80075aa <UART_SetConfig+0x226>
 8007596:	e00b      	b.n	80075b0 <UART_SetConfig+0x22c>
 8007598:	2300      	movs	r3, #0
 800759a:	76fb      	strb	r3, [r7, #27]
 800759c:	e038      	b.n	8007610 <UART_SetConfig+0x28c>
 800759e:	2302      	movs	r3, #2
 80075a0:	76fb      	strb	r3, [r7, #27]
 80075a2:	e035      	b.n	8007610 <UART_SetConfig+0x28c>
 80075a4:	2304      	movs	r3, #4
 80075a6:	76fb      	strb	r3, [r7, #27]
 80075a8:	e032      	b.n	8007610 <UART_SetConfig+0x28c>
 80075aa:	2308      	movs	r3, #8
 80075ac:	76fb      	strb	r3, [r7, #27]
 80075ae:	e02f      	b.n	8007610 <UART_SetConfig+0x28c>
 80075b0:	2310      	movs	r3, #16
 80075b2:	76fb      	strb	r3, [r7, #27]
 80075b4:	bf00      	nop
 80075b6:	e02b      	b.n	8007610 <UART_SetConfig+0x28c>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a2c      	ldr	r2, [pc, #176]	; (8007670 <UART_SetConfig+0x2ec>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d124      	bne.n	800760c <UART_SetConfig+0x288>
 80075c2:	4b2d      	ldr	r3, [pc, #180]	; (8007678 <UART_SetConfig+0x2f4>)
 80075c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075d0:	d012      	beq.n	80075f8 <UART_SetConfig+0x274>
 80075d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075d6:	d802      	bhi.n	80075de <UART_SetConfig+0x25a>
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d007      	beq.n	80075ec <UART_SetConfig+0x268>
 80075dc:	e012      	b.n	8007604 <UART_SetConfig+0x280>
 80075de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075e2:	d006      	beq.n	80075f2 <UART_SetConfig+0x26e>
 80075e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075e8:	d009      	beq.n	80075fe <UART_SetConfig+0x27a>
 80075ea:	e00b      	b.n	8007604 <UART_SetConfig+0x280>
 80075ec:	2300      	movs	r3, #0
 80075ee:	76fb      	strb	r3, [r7, #27]
 80075f0:	e00e      	b.n	8007610 <UART_SetConfig+0x28c>
 80075f2:	2302      	movs	r3, #2
 80075f4:	76fb      	strb	r3, [r7, #27]
 80075f6:	e00b      	b.n	8007610 <UART_SetConfig+0x28c>
 80075f8:	2304      	movs	r3, #4
 80075fa:	76fb      	strb	r3, [r7, #27]
 80075fc:	e008      	b.n	8007610 <UART_SetConfig+0x28c>
 80075fe:	2308      	movs	r3, #8
 8007600:	76fb      	strb	r3, [r7, #27]
 8007602:	e005      	b.n	8007610 <UART_SetConfig+0x28c>
 8007604:	2310      	movs	r3, #16
 8007606:	76fb      	strb	r3, [r7, #27]
 8007608:	bf00      	nop
 800760a:	e001      	b.n	8007610 <UART_SetConfig+0x28c>
 800760c:	2310      	movs	r3, #16
 800760e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a16      	ldr	r2, [pc, #88]	; (8007670 <UART_SetConfig+0x2ec>)
 8007616:	4293      	cmp	r3, r2
 8007618:	f040 80fa 	bne.w	8007810 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800761c:	7efb      	ldrb	r3, [r7, #27]
 800761e:	2b08      	cmp	r3, #8
 8007620:	d836      	bhi.n	8007690 <UART_SetConfig+0x30c>
 8007622:	a201      	add	r2, pc, #4	; (adr r2, 8007628 <UART_SetConfig+0x2a4>)
 8007624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007628:	0800764d 	.word	0x0800764d
 800762c:	08007691 	.word	0x08007691
 8007630:	08007655 	.word	0x08007655
 8007634:	08007691 	.word	0x08007691
 8007638:	0800765b 	.word	0x0800765b
 800763c:	08007691 	.word	0x08007691
 8007640:	08007691 	.word	0x08007691
 8007644:	08007691 	.word	0x08007691
 8007648:	08007663 	.word	0x08007663
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800764c:	f7fd ff32 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8007650:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007652:	e020      	b.n	8007696 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8007654:	4b0d      	ldr	r3, [pc, #52]	; (800768c <UART_SetConfig+0x308>)
 8007656:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007658:	e01d      	b.n	8007696 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800765a:	f7fd fe95 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 800765e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007660:	e019      	b.n	8007696 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8007662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007666:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007668:	e015      	b.n	8007696 <UART_SetConfig+0x312>
 800766a:	bf00      	nop
 800766c:	efff69f3 	.word	0xefff69f3
 8007670:	40008000 	.word	0x40008000
 8007674:	40013800 	.word	0x40013800
 8007678:	40021000 	.word	0x40021000
 800767c:	40004400 	.word	0x40004400
 8007680:	40004800 	.word	0x40004800
 8007684:	40004c00 	.word	0x40004c00
 8007688:	40005000 	.word	0x40005000
 800768c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	74fb      	strb	r3, [r7, #19]
        break;
 8007694:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 81ac 	beq.w	80079f6 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	4613      	mov	r3, r2
 80076a4:	005b      	lsls	r3, r3, #1
 80076a6:	4413      	add	r3, r2
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d305      	bcc.n	80076ba <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d902      	bls.n	80076c0 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	74fb      	strb	r3, [r7, #19]
 80076be:	e19a      	b.n	80079f6 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 80076c0:	7efb      	ldrb	r3, [r7, #27]
 80076c2:	2b08      	cmp	r3, #8
 80076c4:	f200 8091 	bhi.w	80077ea <UART_SetConfig+0x466>
 80076c8:	a201      	add	r2, pc, #4	; (adr r2, 80076d0 <UART_SetConfig+0x34c>)
 80076ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ce:	bf00      	nop
 80076d0:	080076f5 	.word	0x080076f5
 80076d4:	080077eb 	.word	0x080077eb
 80076d8:	08007741 	.word	0x08007741
 80076dc:	080077eb 	.word	0x080077eb
 80076e0:	08007775 	.word	0x08007775
 80076e4:	080077eb 	.word	0x080077eb
 80076e8:	080077eb 	.word	0x080077eb
 80076ec:	080077eb 	.word	0x080077eb
 80076f0:	080077c1 	.word	0x080077c1
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80076f4:	f7fd fede 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 80076f8:	4603      	mov	r3, r0
 80076fa:	4619      	mov	r1, r3
 80076fc:	f04f 0200 	mov.w	r2, #0
 8007700:	f04f 0300 	mov.w	r3, #0
 8007704:	f04f 0400 	mov.w	r4, #0
 8007708:	0214      	lsls	r4, r2, #8
 800770a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800770e:	020b      	lsls	r3, r1, #8
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	6852      	ldr	r2, [r2, #4]
 8007714:	0852      	lsrs	r2, r2, #1
 8007716:	4611      	mov	r1, r2
 8007718:	f04f 0200 	mov.w	r2, #0
 800771c:	eb13 0b01 	adds.w	fp, r3, r1
 8007720:	eb44 0c02 	adc.w	ip, r4, r2
 8007724:	4658      	mov	r0, fp
 8007726:	4661      	mov	r1, ip
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f04f 0400 	mov.w	r4, #0
 8007730:	461a      	mov	r2, r3
 8007732:	4623      	mov	r3, r4
 8007734:	f7f8 fd48 	bl	80001c8 <__aeabi_uldivmod>
 8007738:	4603      	mov	r3, r0
 800773a:	460c      	mov	r4, r1
 800773c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800773e:	e057      	b.n	80077f0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	085b      	lsrs	r3, r3, #1
 8007746:	f04f 0400 	mov.w	r4, #0
 800774a:	49b1      	ldr	r1, [pc, #708]	; (8007a10 <UART_SetConfig+0x68c>)
 800774c:	f04f 0200 	mov.w	r2, #0
 8007750:	eb13 0b01 	adds.w	fp, r3, r1
 8007754:	eb44 0c02 	adc.w	ip, r4, r2
 8007758:	4658      	mov	r0, fp
 800775a:	4661      	mov	r1, ip
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	f04f 0400 	mov.w	r4, #0
 8007764:	461a      	mov	r2, r3
 8007766:	4623      	mov	r3, r4
 8007768:	f7f8 fd2e 	bl	80001c8 <__aeabi_uldivmod>
 800776c:	4603      	mov	r3, r0
 800776e:	460c      	mov	r4, r1
 8007770:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007772:	e03d      	b.n	80077f0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007774:	f7fd fe08 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 8007778:	4603      	mov	r3, r0
 800777a:	4619      	mov	r1, r3
 800777c:	f04f 0200 	mov.w	r2, #0
 8007780:	f04f 0300 	mov.w	r3, #0
 8007784:	f04f 0400 	mov.w	r4, #0
 8007788:	0214      	lsls	r4, r2, #8
 800778a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800778e:	020b      	lsls	r3, r1, #8
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	6852      	ldr	r2, [r2, #4]
 8007794:	0852      	lsrs	r2, r2, #1
 8007796:	4611      	mov	r1, r2
 8007798:	f04f 0200 	mov.w	r2, #0
 800779c:	eb13 0b01 	adds.w	fp, r3, r1
 80077a0:	eb44 0c02 	adc.w	ip, r4, r2
 80077a4:	4658      	mov	r0, fp
 80077a6:	4661      	mov	r1, ip
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f04f 0400 	mov.w	r4, #0
 80077b0:	461a      	mov	r2, r3
 80077b2:	4623      	mov	r3, r4
 80077b4:	f7f8 fd08 	bl	80001c8 <__aeabi_uldivmod>
 80077b8:	4603      	mov	r3, r0
 80077ba:	460c      	mov	r4, r1
 80077bc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80077be:	e017      	b.n	80077f0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	085b      	lsrs	r3, r3, #1
 80077c6:	f04f 0400 	mov.w	r4, #0
 80077ca:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80077ce:	f144 0100 	adc.w	r1, r4, #0
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	f04f 0400 	mov.w	r4, #0
 80077da:	461a      	mov	r2, r3
 80077dc:	4623      	mov	r3, r4
 80077de:	f7f8 fcf3 	bl	80001c8 <__aeabi_uldivmod>
 80077e2:	4603      	mov	r3, r0
 80077e4:	460c      	mov	r4, r1
 80077e6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80077e8:	e002      	b.n	80077f0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	74fb      	strb	r3, [r7, #19]
            break;
 80077ee:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077f6:	d308      	bcc.n	800780a <UART_SetConfig+0x486>
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077fe:	d204      	bcs.n	800780a <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	60da      	str	r2, [r3, #12]
 8007808:	e0f5      	b.n	80079f6 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	74fb      	strb	r3, [r7, #19]
 800780e:	e0f2      	b.n	80079f6 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	69db      	ldr	r3, [r3, #28]
 8007814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007818:	d17f      	bne.n	800791a <UART_SetConfig+0x596>
  {
    switch (clocksource)
 800781a:	7efb      	ldrb	r3, [r7, #27]
 800781c:	2b08      	cmp	r3, #8
 800781e:	d85c      	bhi.n	80078da <UART_SetConfig+0x556>
 8007820:	a201      	add	r2, pc, #4	; (adr r2, 8007828 <UART_SetConfig+0x4a4>)
 8007822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007826:	bf00      	nop
 8007828:	0800784d 	.word	0x0800784d
 800782c:	0800786b 	.word	0x0800786b
 8007830:	08007889 	.word	0x08007889
 8007834:	080078db 	.word	0x080078db
 8007838:	080078a5 	.word	0x080078a5
 800783c:	080078db 	.word	0x080078db
 8007840:	080078db 	.word	0x080078db
 8007844:	080078db 	.word	0x080078db
 8007848:	080078c3 	.word	0x080078c3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800784c:	f7fd fe32 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8007850:	4603      	mov	r3, r0
 8007852:	005a      	lsls	r2, r3, #1
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	085b      	lsrs	r3, r3, #1
 800785a:	441a      	add	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	fbb2 f3f3 	udiv	r3, r2, r3
 8007864:	b29b      	uxth	r3, r3
 8007866:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007868:	e03a      	b.n	80078e0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800786a:	f7fd fe39 	bl	80054e0 <HAL_RCC_GetPCLK2Freq>
 800786e:	4603      	mov	r3, r0
 8007870:	005a      	lsls	r2, r3, #1
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	085b      	lsrs	r3, r3, #1
 8007878:	441a      	add	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007882:	b29b      	uxth	r3, r3
 8007884:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007886:	e02b      	b.n	80078e0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	085b      	lsrs	r3, r3, #1
 800788e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8007892:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	6852      	ldr	r2, [r2, #4]
 800789a:	fbb3 f3f2 	udiv	r3, r3, r2
 800789e:	b29b      	uxth	r3, r3
 80078a0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80078a2:	e01d      	b.n	80078e0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80078a4:	f7fd fd70 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 80078a8:	4603      	mov	r3, r0
 80078aa:	005a      	lsls	r2, r3, #1
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	085b      	lsrs	r3, r3, #1
 80078b2:	441a      	add	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078bc:	b29b      	uxth	r3, r3
 80078be:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80078c0:	e00e      	b.n	80078e0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	085b      	lsrs	r3, r3, #1
 80078c8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80078d8:	e002      	b.n	80078e0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	74fb      	strb	r3, [r7, #19]
        break;
 80078de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	2b0f      	cmp	r3, #15
 80078e4:	d916      	bls.n	8007914 <UART_SetConfig+0x590>
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ec:	d212      	bcs.n	8007914 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	f023 030f 	bic.w	r3, r3, #15
 80078f6:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	085b      	lsrs	r3, r3, #1
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	f003 0307 	and.w	r3, r3, #7
 8007902:	b29a      	uxth	r2, r3
 8007904:	897b      	ldrh	r3, [r7, #10]
 8007906:	4313      	orrs	r3, r2
 8007908:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	897a      	ldrh	r2, [r7, #10]
 8007910:	60da      	str	r2, [r3, #12]
 8007912:	e070      	b.n	80079f6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	74fb      	strb	r3, [r7, #19]
 8007918:	e06d      	b.n	80079f6 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 800791a:	7efb      	ldrb	r3, [r7, #27]
 800791c:	2b08      	cmp	r3, #8
 800791e:	d859      	bhi.n	80079d4 <UART_SetConfig+0x650>
 8007920:	a201      	add	r2, pc, #4	; (adr r2, 8007928 <UART_SetConfig+0x5a4>)
 8007922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007926:	bf00      	nop
 8007928:	0800794d 	.word	0x0800794d
 800792c:	08007969 	.word	0x08007969
 8007930:	08007985 	.word	0x08007985
 8007934:	080079d5 	.word	0x080079d5
 8007938:	080079a1 	.word	0x080079a1
 800793c:	080079d5 	.word	0x080079d5
 8007940:	080079d5 	.word	0x080079d5
 8007944:	080079d5 	.word	0x080079d5
 8007948:	080079bd 	.word	0x080079bd
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800794c:	f7fd fdb2 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8007950:	4602      	mov	r2, r0
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	085b      	lsrs	r3, r3, #1
 8007958:	441a      	add	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007962:	b29b      	uxth	r3, r3
 8007964:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007966:	e038      	b.n	80079da <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007968:	f7fd fdba 	bl	80054e0 <HAL_RCC_GetPCLK2Freq>
 800796c:	4602      	mov	r2, r0
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	085b      	lsrs	r3, r3, #1
 8007974:	441a      	add	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	fbb2 f3f3 	udiv	r3, r2, r3
 800797e:	b29b      	uxth	r3, r3
 8007980:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007982:	e02a      	b.n	80079da <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	085b      	lsrs	r3, r3, #1
 800798a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800798e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	6852      	ldr	r2, [r2, #4]
 8007996:	fbb3 f3f2 	udiv	r3, r3, r2
 800799a:	b29b      	uxth	r3, r3
 800799c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800799e:	e01c      	b.n	80079da <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80079a0:	f7fd fcf2 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 80079a4:	4602      	mov	r2, r0
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	085b      	lsrs	r3, r3, #1
 80079ac:	441a      	add	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80079ba:	e00e      	b.n	80079da <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	085b      	lsrs	r3, r3, #1
 80079c2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80079d2:	e002      	b.n	80079da <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	74fb      	strb	r3, [r7, #19]
        break;
 80079d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2b0f      	cmp	r3, #15
 80079de:	d908      	bls.n	80079f2 <UART_SetConfig+0x66e>
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079e6:	d204      	bcs.n	80079f2 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	60da      	str	r2, [r3, #12]
 80079f0:	e001      	b.n	80079f6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007a02:	7cfb      	ldrb	r3, [r7, #19]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3720      	adds	r7, #32
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007a0e:	bf00      	nop
 8007a10:	f4240000 	.word	0xf4240000

08007a14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00a      	beq.n	8007a3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a42:	f003 0302 	and.w	r3, r3, #2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00a      	beq.n	8007a60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	430a      	orrs	r2, r1
 8007a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a64:	f003 0304 	and.w	r3, r3, #4
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00a      	beq.n	8007a82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a86:	f003 0308 	and.w	r3, r3, #8
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa8:	f003 0310 	and.w	r3, r3, #16
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00a      	beq.n	8007ac6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aca:	f003 0320 	and.w	r3, r3, #32
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00a      	beq.n	8007ae8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d01a      	beq.n	8007b2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b12:	d10a      	bne.n	8007b2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	430a      	orrs	r2, r1
 8007b28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	605a      	str	r2, [r3, #4]
  }
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af02      	add	r7, sp, #8
 8007b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007b66:	f7fa fa13 	bl	8001f90 <HAL_GetTick>
 8007b6a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0308 	and.w	r3, r3, #8
 8007b76:	2b08      	cmp	r3, #8
 8007b78:	d10e      	bne.n	8007b98 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f82a 	bl	8007be2 <UART_WaitOnFlagUntilTimeout>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d001      	beq.n	8007b98 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	e020      	b.n	8007bda <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 0304 	and.w	r3, r3, #4
 8007ba2:	2b04      	cmp	r3, #4
 8007ba4:	d10e      	bne.n	8007bc4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ba6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f814 	bl	8007be2 <UART_WaitOnFlagUntilTimeout>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e00a      	b.n	8007bda <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2220      	movs	r2, #32
 8007bc8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2220      	movs	r2, #32
 8007bce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	60f8      	str	r0, [r7, #12]
 8007bea:	60b9      	str	r1, [r7, #8]
 8007bec:	603b      	str	r3, [r7, #0]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bf2:	e02a      	b.n	8007c4a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bfa:	d026      	beq.n	8007c4a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bfc:	f7fa f9c8 	bl	8001f90 <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	69ba      	ldr	r2, [r7, #24]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d302      	bcc.n	8007c12 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d11b      	bne.n	8007c4a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c20:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	689a      	ldr	r2, [r3, #8]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 0201 	bic.w	r2, r2, #1
 8007c30:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2220      	movs	r2, #32
 8007c36:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e00f      	b.n	8007c6a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	69da      	ldr	r2, [r3, #28]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	4013      	ands	r3, r2
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	bf0c      	ite	eq
 8007c5a:	2301      	moveq	r3, #1
 8007c5c:	2300      	movne	r3, #0
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	461a      	mov	r2, r3
 8007c62:	79fb      	ldrb	r3, [r7, #7]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d0c5      	beq.n	8007bf4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c72:	b084      	sub	sp, #16
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	f107 001c 	add.w	r0, r7, #28
 8007c80:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d122      	bne.n	8007cd0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d105      	bne.n	8007cc4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f937 	bl	8007f38 <USB_CoreReset>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	73fb      	strb	r3, [r7, #15]
 8007cce:	e01a      	b.n	8007d06 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f92b 	bl	8007f38 <USB_CoreReset>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d106      	bne.n	8007cfa <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	639a      	str	r2, [r3, #56]	; 0x38
 8007cf8:	e005      	b.n	8007d06 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8007d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d12:	b004      	add	sp, #16
 8007d14:	4770      	bx	lr

08007d16 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d16:	b480      	push	{r7}
 8007d18:	b083      	sub	sp, #12
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f043 0201 	orr.w	r2, r3, #1
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f023 0201 	bic.w	r2, r3, #1
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b082      	sub	sp, #8
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	460b      	mov	r3, r1
 8007d64:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d72:	78fb      	ldrb	r3, [r7, #3]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d106      	bne.n	8007d86 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	60da      	str	r2, [r3, #12]
 8007d84:	e00b      	b.n	8007d9e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d86:	78fb      	ldrb	r3, [r7, #3]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d106      	bne.n	8007d9a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	60da      	str	r2, [r3, #12]
 8007d98:	e001      	b.n	8007d9e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e003      	b.n	8007da6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007d9e:	2032      	movs	r0, #50	; 0x32
 8007da0:	f7fa f902 	bl	8001fa8 <HAL_Delay>

  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	019b      	lsls	r3, r3, #6
 8007dc2:	f043 0220 	orr.w	r2, r3, #32
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	60fb      	str	r3, [r7, #12]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	4a09      	ldr	r2, [pc, #36]	; (8007df8 <USB_FlushTxFifo+0x48>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d901      	bls.n	8007ddc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e006      	b.n	8007dea <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	f003 0320 	and.w	r3, r3, #32
 8007de4:	2b20      	cmp	r3, #32
 8007de6:	d0f0      	beq.n	8007dca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3714      	adds	r7, #20
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	00030d40 	.word	0x00030d40

08007dfc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2210      	movs	r2, #16
 8007e0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	3301      	adds	r3, #1
 8007e12:	60fb      	str	r3, [r7, #12]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	4a09      	ldr	r2, [pc, #36]	; (8007e3c <USB_FlushRxFifo+0x40>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d901      	bls.n	8007e20 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	e006      	b.n	8007e2e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	f003 0310 	and.w	r3, r3, #16
 8007e28:	2b10      	cmp	r3, #16
 8007e2a:	d0f0      	beq.n	8007e0e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	00030d40 	.word	0x00030d40

08007e40 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b089      	sub	sp, #36	; 0x24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	4611      	mov	r1, r2
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	460b      	mov	r3, r1
 8007e50:	71fb      	strb	r3, [r7, #7]
 8007e52:	4613      	mov	r3, r2
 8007e54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8007e5e:	88bb      	ldrh	r3, [r7, #4]
 8007e60:	3303      	adds	r3, #3
 8007e62:	089b      	lsrs	r3, r3, #2
 8007e64:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8007e66:	2300      	movs	r3, #0
 8007e68:	61bb      	str	r3, [r7, #24]
 8007e6a:	e00f      	b.n	8007e8c <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e6c:	79fb      	ldrb	r3, [r7, #7]
 8007e6e:	031a      	lsls	r2, r3, #12
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e78:	461a      	mov	r2, r3
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	3304      	adds	r3, #4
 8007e84:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	61bb      	str	r3, [r7, #24]
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d3eb      	bcc.n	8007e6c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3724      	adds	r7, #36	; 0x24
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b089      	sub	sp, #36	; 0x24
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	4613      	mov	r3, r2
 8007eae:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007eb8:	88fb      	ldrh	r3, [r7, #6]
 8007eba:	3303      	adds	r3, #3
 8007ebc:	089b      	lsrs	r3, r3, #2
 8007ebe:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	61bb      	str	r3, [r7, #24]
 8007ec4:	e00b      	b.n	8007ede <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	601a      	str	r2, [r3, #0]
    pDest++;
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	3301      	adds	r3, #1
 8007edc:	61bb      	str	r3, [r7, #24]
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d3ef      	bcc.n	8007ec6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007ee6:	69fb      	ldr	r3, [r7, #28]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3724      	adds	r7, #36	; 0x24
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	695b      	ldr	r3, [r3, #20]
 8007f00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	4013      	ands	r3, r2
 8007f0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3714      	adds	r7, #20
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b083      	sub	sp, #12
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	f003 0301 	and.w	r3, r3, #1
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	370c      	adds	r7, #12
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
	...

08007f38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	3301      	adds	r3, #1
 8007f48:	60fb      	str	r3, [r7, #12]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	4a13      	ldr	r2, [pc, #76]	; (8007f9c <USB_CoreReset+0x64>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d901      	bls.n	8007f56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e01b      	b.n	8007f8e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	daf2      	bge.n	8007f44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	f043 0201 	orr.w	r2, r3, #1
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	3301      	adds	r3, #1
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4a09      	ldr	r2, [pc, #36]	; (8007f9c <USB_CoreReset+0x64>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d901      	bls.n	8007f80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e006      	b.n	8007f8e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d0f0      	beq.n	8007f6e <USB_CoreReset+0x36>

  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	00030d40 	.word	0x00030d40

08007fa0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fa0:	b084      	sub	sp, #16
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b084      	sub	sp, #16
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	f107 001c 	add.w	r0, r7, #28
 8007fae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007fe8:	f023 0304 	bic.w	r3, r3, #4
 8007fec:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007fee:	2110      	movs	r1, #16
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7ff fedd 	bl	8007db0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7ff ff00 	bl	8007dfc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	e015      	b.n	800802e <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	015a      	lsls	r2, r3, #5
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	4413      	add	r3, r2
 800800a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800800e:	461a      	mov	r2, r3
 8008010:	f04f 33ff 	mov.w	r3, #4294967295
 8008014:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	4413      	add	r3, r2
 800801e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008022:	461a      	mov	r2, r3
 8008024:	2300      	movs	r3, #0
 8008026:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	3301      	adds	r3, #1
 800802c:	60fb      	str	r3, [r7, #12]
 800802e:	6a3b      	ldr	r3, [r7, #32]
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	429a      	cmp	r2, r3
 8008034:	d3e5      	bcc.n	8008002 <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008036:	2101      	movs	r1, #1
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f893 	bl	8008164 <USB_DriveVbus>

  HAL_Delay(200U);
 800803e:	20c8      	movs	r0, #200	; 0xc8
 8008040:	f7f9 ffb2 	bl	8001fa8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f04f 32ff 	mov.w	r2, #4294967295
 8008050:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2280      	movs	r2, #128	; 0x80
 8008056:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a0d      	ldr	r2, [pc, #52]	; (8008090 <USB_HostInit+0xf0>)
 800805c:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a0c      	ldr	r2, [pc, #48]	; (8008094 <USB_HostInit+0xf4>)
 8008062:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	f043 0210 	orr.w	r2, r3, #16
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	699a      	ldr	r2, [r3, #24]
 8008076:	4b08      	ldr	r3, [pc, #32]	; (8008098 <USB_HostInit+0xf8>)
 8008078:	4313      	orrs	r3, r2
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800808a:	b004      	add	sp, #16
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	00600080 	.word	0x00600080
 8008094:	004000e0 	.word	0x004000e0
 8008098:	a3200008 	.word	0xa3200008

0800809c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	460b      	mov	r3, r1
 80080a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080ba:	f023 0303 	bic.w	r3, r3, #3
 80080be:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	78fb      	ldrb	r3, [r7, #3]
 80080ca:	f003 0303 	and.w	r3, r3, #3
 80080ce:	68f9      	ldr	r1, [r7, #12]
 80080d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80080d4:	4313      	orrs	r3, r2
 80080d6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80080d8:	78fb      	ldrb	r3, [r7, #3]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d107      	bne.n	80080ee <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080e4:	461a      	mov	r2, r3
 80080e6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80080ea:	6053      	str	r3, [r2, #4]
 80080ec:	e009      	b.n	8008102 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80080ee:	78fb      	ldrb	r3, [r7, #3]
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d106      	bne.n	8008102 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080fa:	461a      	mov	r2, r3
 80080fc:	f241 7370 	movw	r3, #6000	; 0x1770
 8008100:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800811c:	2300      	movs	r3, #0
 800811e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008130:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800813a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800813e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008140:	2064      	movs	r0, #100	; 0x64
 8008142:	f7f9 ff31 	bl	8001fa8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800814e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008152:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008154:	200a      	movs	r0, #10
 8008156:	f7f9 ff27 	bl	8001fa8 <HAL_Delay>

  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	460b      	mov	r3, r1
 800816e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008188:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d109      	bne.n	80081a8 <USB_DriveVbus+0x44>
 8008194:	78fb      	ldrb	r3, [r7, #3]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d106      	bne.n	80081a8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80081a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80081a6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081b2:	d109      	bne.n	80081c8 <USB_DriveVbus+0x64>
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d106      	bne.n	80081c8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80081c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081c6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3714      	adds	r7, #20
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b085      	sub	sp, #20
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	0c5b      	lsrs	r3, r3, #17
 80081f4:	f003 0303 	and.w	r3, r3, #3
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	b29b      	uxth	r3, r3
}
 800821a:	4618      	mov	r0, r3
 800821c:	3714      	adds	r7, #20
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
	...

08008228 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8008228:	b480      	push	{r7}
 800822a:	b087      	sub	sp, #28
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	4608      	mov	r0, r1
 8008232:	4611      	mov	r1, r2
 8008234:	461a      	mov	r2, r3
 8008236:	4603      	mov	r3, r0
 8008238:	70fb      	strb	r3, [r7, #3]
 800823a:	460b      	mov	r3, r1
 800823c:	70bb      	strb	r3, [r7, #2]
 800823e:	4613      	mov	r3, r2
 8008240:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008242:	2300      	movs	r3, #0
 8008244:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800824a:	78fb      	ldrb	r3, [r7, #3]
 800824c:	015a      	lsls	r2, r3, #5
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	4413      	add	r3, r2
 8008252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008256:	461a      	mov	r2, r3
 8008258:	f04f 33ff 	mov.w	r3, #4294967295
 800825c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800825e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008262:	2b03      	cmp	r3, #3
 8008264:	d867      	bhi.n	8008336 <USB_HC_Init+0x10e>
 8008266:	a201      	add	r2, pc, #4	; (adr r2, 800826c <USB_HC_Init+0x44>)
 8008268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826c:	0800827d 	.word	0x0800827d
 8008270:	080082f9 	.word	0x080082f9
 8008274:	0800827d 	.word	0x0800827d
 8008278:	080082bb 	.word	0x080082bb
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800827c:	78fb      	ldrb	r3, [r7, #3]
 800827e:	015a      	lsls	r2, r3, #5
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	4413      	add	r3, r2
 8008284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008288:	461a      	mov	r2, r3
 800828a:	f240 439d 	movw	r3, #1181	; 0x49d
 800828e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008290:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008294:	2b00      	cmp	r3, #0
 8008296:	da51      	bge.n	800833c <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008298:	78fb      	ldrb	r3, [r7, #3]
 800829a:	015a      	lsls	r2, r3, #5
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	4413      	add	r3, r2
 80082a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	78fa      	ldrb	r2, [r7, #3]
 80082a8:	0151      	lsls	r1, r2, #5
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	440a      	add	r2, r1
 80082ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082b6:	60d3      	str	r3, [r2, #12]
      }
      break;
 80082b8:	e040      	b.n	800833c <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80082ba:	78fb      	ldrb	r3, [r7, #3]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082c6:	461a      	mov	r2, r3
 80082c8:	f240 639d 	movw	r3, #1693	; 0x69d
 80082cc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80082ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	da34      	bge.n	8008340 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80082d6:	78fb      	ldrb	r3, [r7, #3]
 80082d8:	015a      	lsls	r2, r3, #5
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	4413      	add	r3, r2
 80082de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	78fa      	ldrb	r2, [r7, #3]
 80082e6:	0151      	lsls	r1, r2, #5
 80082e8:	68ba      	ldr	r2, [r7, #8]
 80082ea:	440a      	add	r2, r1
 80082ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082f4:	60d3      	str	r3, [r2, #12]
      }

      break;
 80082f6:	e023      	b.n	8008340 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80082f8:	78fb      	ldrb	r3, [r7, #3]
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008304:	461a      	mov	r2, r3
 8008306:	f240 2325 	movw	r3, #549	; 0x225
 800830a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800830c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008310:	2b00      	cmp	r3, #0
 8008312:	da17      	bge.n	8008344 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008314:	78fb      	ldrb	r3, [r7, #3]
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	4413      	add	r3, r2
 800831c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	78fa      	ldrb	r2, [r7, #3]
 8008324:	0151      	lsls	r1, r2, #5
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	440a      	add	r2, r1
 800832a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800832e:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008332:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008334:	e006      	b.n	8008344 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	75fb      	strb	r3, [r7, #23]
      break;
 800833a:	e004      	b.n	8008346 <USB_HC_Init+0x11e>
      break;
 800833c:	bf00      	nop
 800833e:	e002      	b.n	8008346 <USB_HC_Init+0x11e>
      break;
 8008340:	bf00      	nop
 8008342:	e000      	b.n	8008346 <USB_HC_Init+0x11e>
      break;
 8008344:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800834c:	699a      	ldr	r2, [r3, #24]
 800834e:	78fb      	ldrb	r3, [r7, #3]
 8008350:	f003 030f 	and.w	r3, r3, #15
 8008354:	2101      	movs	r1, #1
 8008356:	fa01 f303 	lsl.w	r3, r1, r3
 800835a:	68b9      	ldr	r1, [r7, #8]
 800835c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008360:	4313      	orrs	r3, r2
 8008362:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008370:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008374:	2b00      	cmp	r3, #0
 8008376:	da03      	bge.n	8008380 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800837c:	613b      	str	r3, [r7, #16]
 800837e:	e001      	b.n	8008384 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8008380:	2300      	movs	r3, #0
 8008382:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8008384:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008388:	2b02      	cmp	r3, #2
 800838a:	d103      	bne.n	8008394 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800838c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008390:	60fb      	str	r3, [r7, #12]
 8008392:	e001      	b.n	8008398 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008394:	2300      	movs	r3, #0
 8008396:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008398:	787b      	ldrb	r3, [r7, #1]
 800839a:	059b      	lsls	r3, r3, #22
 800839c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80083a0:	78bb      	ldrb	r3, [r7, #2]
 80083a2:	02db      	lsls	r3, r3, #11
 80083a4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083a8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80083aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80083ae:	049b      	lsls	r3, r3, #18
 80083b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80083b4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80083bc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083c2:	78fb      	ldrb	r3, [r7, #3]
 80083c4:	0159      	lsls	r1, r3, #5
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	440b      	add	r3, r1
 80083ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ce:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083d4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80083d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80083da:	2b03      	cmp	r3, #3
 80083dc:	d10f      	bne.n	80083fe <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80083de:	78fb      	ldrb	r3, [r7, #3]
 80083e0:	015a      	lsls	r2, r3, #5
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	4413      	add	r3, r2
 80083e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	78fa      	ldrb	r2, [r7, #3]
 80083ee:	0151      	lsls	r1, r2, #5
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	440a      	add	r2, r1
 80083f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083fc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008400:	4618      	mov	r0, r3
 8008402:	371c      	adds	r7, #28
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b088      	sub	sp, #32
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	785b      	ldrb	r3, [r3, #1]
 800841e:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008420:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008424:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d018      	beq.n	8008460 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	8912      	ldrh	r2, [r2, #8]
 8008436:	4413      	add	r3, r2
 8008438:	3b01      	subs	r3, #1
 800843a:	683a      	ldr	r2, [r7, #0]
 800843c:	8912      	ldrh	r2, [r2, #8]
 800843e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008442:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8008444:	8bfa      	ldrh	r2, [r7, #30]
 8008446:	8a7b      	ldrh	r3, [r7, #18]
 8008448:	429a      	cmp	r2, r3
 800844a:	d90b      	bls.n	8008464 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 800844c:	8a7b      	ldrh	r3, [r7, #18]
 800844e:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008450:	8bfb      	ldrh	r3, [r7, #30]
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	8912      	ldrh	r2, [r2, #8]
 8008456:	fb02 f203 	mul.w	r2, r2, r3
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	611a      	str	r2, [r3, #16]
 800845e:	e001      	b.n	8008464 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8008460:	2301      	movs	r3, #1
 8008462:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	78db      	ldrb	r3, [r3, #3]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d006      	beq.n	800847a <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800846c:	8bfb      	ldrh	r3, [r7, #30]
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	8912      	ldrh	r2, [r2, #8]
 8008472:	fb02 f203 	mul.w	r2, r2, r3
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008482:	8bfb      	ldrh	r3, [r7, #30]
 8008484:	04d9      	lsls	r1, r3, #19
 8008486:	4b5f      	ldr	r3, [pc, #380]	; (8008604 <USB_HC_StartXfer+0x1f8>)
 8008488:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800848a:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	7a9b      	ldrb	r3, [r3, #10]
 8008490:	075b      	lsls	r3, r3, #29
 8008492:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008496:	6979      	ldr	r1, [r7, #20]
 8008498:	0148      	lsls	r0, r1, #5
 800849a:	69b9      	ldr	r1, [r7, #24]
 800849c:	4401      	add	r1, r0
 800849e:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80084a2:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80084a4:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	f003 0301 	and.w	r3, r3, #1
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	bf0c      	ite	eq
 80084b6:	2301      	moveq	r3, #1
 80084b8:	2300      	movne	r3, #0
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	015a      	lsls	r2, r3, #5
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	4413      	add	r3, r2
 80084c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	697a      	ldr	r2, [r7, #20]
 80084ce:	0151      	lsls	r1, r2, #5
 80084d0:	69ba      	ldr	r2, [r7, #24]
 80084d2:	440a      	add	r2, r1
 80084d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80084dc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	015a      	lsls	r2, r3, #5
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	7c7b      	ldrb	r3, [r7, #17]
 80084ee:	075b      	lsls	r3, r3, #29
 80084f0:	6979      	ldr	r1, [r7, #20]
 80084f2:	0148      	lsls	r0, r1, #5
 80084f4:	69b9      	ldr	r1, [r7, #24]
 80084f6:	4401      	add	r1, r0
 80084f8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80084fc:	4313      	orrs	r3, r2
 80084fe:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	4413      	add	r3, r2
 8008508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a3e      	ldr	r2, [pc, #248]	; (8008608 <USB_HC_StartXfer+0x1fc>)
 8008510:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008512:	4b3d      	ldr	r3, [pc, #244]	; (8008608 <USB_HC_StartXfer+0x1fc>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800851a:	4a3b      	ldr	r2, [pc, #236]	; (8008608 <USB_HC_StartXfer+0x1fc>)
 800851c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	78db      	ldrb	r3, [r3, #3]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d006      	beq.n	8008534 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008526:	4b38      	ldr	r3, [pc, #224]	; (8008608 <USB_HC_StartXfer+0x1fc>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800852e:	4a36      	ldr	r2, [pc, #216]	; (8008608 <USB_HC_StartXfer+0x1fc>)
 8008530:	6013      	str	r3, [r2, #0]
 8008532:	e005      	b.n	8008540 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008534:	4b34      	ldr	r3, [pc, #208]	; (8008608 <USB_HC_StartXfer+0x1fc>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800853c:	4a32      	ldr	r2, [pc, #200]	; (8008608 <USB_HC_StartXfer+0x1fc>)
 800853e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008540:	4b31      	ldr	r3, [pc, #196]	; (8008608 <USB_HC_StartXfer+0x1fc>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008548:	4a2f      	ldr	r2, [pc, #188]	; (8008608 <USB_HC_StartXfer+0x1fc>)
 800854a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	015a      	lsls	r2, r3, #5
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	4413      	add	r3, r2
 8008554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008558:	461a      	mov	r2, r3
 800855a:	4b2b      	ldr	r3, [pc, #172]	; (8008608 <USB_HC_StartXfer+0x1fc>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	78db      	ldrb	r3, [r3, #3]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d148      	bne.n	80085fa <USB_HC_StartXfer+0x1ee>
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d044      	beq.n	80085fa <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	79db      	ldrb	r3, [r3, #7]
 8008574:	2b03      	cmp	r3, #3
 8008576:	d831      	bhi.n	80085dc <USB_HC_StartXfer+0x1d0>
 8008578:	a201      	add	r2, pc, #4	; (adr r2, 8008580 <USB_HC_StartXfer+0x174>)
 800857a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800857e:	bf00      	nop
 8008580:	08008591 	.word	0x08008591
 8008584:	080085b5 	.word	0x080085b5
 8008588:	08008591 	.word	0x08008591
 800858c:	080085b5 	.word	0x080085b5
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	3303      	adds	r3, #3
 8008596:	089b      	lsrs	r3, r3, #2
 8008598:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800859a:	89fa      	ldrh	r2, [r7, #14]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d91c      	bls.n	80085e0 <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	f043 0220 	orr.w	r2, r3, #32
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	619a      	str	r2, [r3, #24]
          }
          break;
 80085b2:	e015      	b.n	80085e0 <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	3303      	adds	r3, #3
 80085ba:	089b      	lsrs	r3, r3, #2
 80085bc:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80085be:	89fa      	ldrh	r2, [r7, #14]
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d90a      	bls.n	80085e4 <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	619a      	str	r2, [r3, #24]
          }
          break;
 80085da:	e003      	b.n	80085e4 <USB_HC_StartXfer+0x1d8>

        default:
          break;
 80085dc:	bf00      	nop
 80085de:	e002      	b.n	80085e6 <USB_HC_StartXfer+0x1da>
          break;
 80085e0:	bf00      	nop
 80085e2:	e000      	b.n	80085e6 <USB_HC_StartXfer+0x1da>
          break;
 80085e4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	68d9      	ldr	r1, [r3, #12]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	785a      	ldrb	r2, [r3, #1]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f7ff fc23 	bl	8007e40 <USB_WritePacket>
    }

  return HAL_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3720      	adds	r7, #32
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	1ff80000 	.word	0x1ff80000
 8008608:	200004d8 	.word	0x200004d8

0800860c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800860c:	b480      	push	{r7}
 800860e:	b085      	sub	sp, #20
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800861e:	695b      	ldr	r3, [r3, #20]
 8008620:	b29b      	uxth	r3, r3
}
 8008622:	4618      	mov	r0, r3
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800862e:	b480      	push	{r7}
 8008630:	b087      	sub	sp, #28
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	460b      	mov	r3, r1
 8008638:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800863e:	78fb      	ldrb	r3, [r7, #3]
 8008640:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008642:	2300      	movs	r3, #0
 8008644:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	015a      	lsls	r2, r3, #5
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	4413      	add	r3, r2
 800864e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	0c9b      	lsrs	r3, r3, #18
 8008656:	f003 0303 	and.w	r3, r3, #3
 800865a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d002      	beq.n	8008668 <USB_HC_Halt+0x3a>
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	2b02      	cmp	r3, #2
 8008666:	d16c      	bne.n	8008742 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	015a      	lsls	r2, r3, #5
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	4413      	add	r3, r2
 8008670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	0151      	lsls	r1, r2, #5
 800867a:	693a      	ldr	r2, [r7, #16]
 800867c:	440a      	add	r2, r1
 800867e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008682:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008686:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d143      	bne.n	800871c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	015a      	lsls	r2, r3, #5
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	4413      	add	r3, r2
 800869c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	0151      	lsls	r1, r2, #5
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	440a      	add	r2, r1
 80086aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	015a      	lsls	r2, r3, #5
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	4413      	add	r3, r2
 80086bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	0151      	lsls	r1, r2, #5
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	440a      	add	r2, r1
 80086ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	015a      	lsls	r2, r3, #5
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	4413      	add	r3, r2
 80086dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	0151      	lsls	r1, r2, #5
 80086e6:	693a      	ldr	r2, [r7, #16]
 80086e8:	440a      	add	r2, r1
 80086ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086f2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	3301      	adds	r3, #1
 80086f8:	617b      	str	r3, [r7, #20]
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008700:	d81d      	bhi.n	800873e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	015a      	lsls	r2, r3, #5
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	4413      	add	r3, r2
 800870a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008714:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008718:	d0ec      	beq.n	80086f4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800871a:	e080      	b.n	800881e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	015a      	lsls	r2, r3, #5
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	4413      	add	r3, r2
 8008724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	0151      	lsls	r1, r2, #5
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	440a      	add	r2, r1
 8008732:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800873a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800873c:	e06f      	b.n	800881e <USB_HC_Halt+0x1f0>
          break;
 800873e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008740:	e06d      	b.n	800881e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	015a      	lsls	r2, r3, #5
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	4413      	add	r3, r2
 800874a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	0151      	lsls	r1, r2, #5
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	440a      	add	r2, r1
 8008758:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800875c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008760:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800876e:	2b00      	cmp	r3, #0
 8008770:	d143      	bne.n	80087fa <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	015a      	lsls	r2, r3, #5
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	4413      	add	r3, r2
 800877a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	0151      	lsls	r1, r2, #5
 8008784:	693a      	ldr	r2, [r7, #16]
 8008786:	440a      	add	r2, r1
 8008788:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800878c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008790:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	015a      	lsls	r2, r3, #5
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	4413      	add	r3, r2
 800879a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	0151      	lsls	r1, r2, #5
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	440a      	add	r2, r1
 80087a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087b0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	015a      	lsls	r2, r3, #5
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	4413      	add	r3, r2
 80087ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	0151      	lsls	r1, r2, #5
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	440a      	add	r2, r1
 80087c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087d0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	3301      	adds	r3, #1
 80087d6:	617b      	str	r3, [r7, #20]
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087de:	d81d      	bhi.n	800881c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087f6:	d0ec      	beq.n	80087d2 <USB_HC_Halt+0x1a4>
 80087f8:	e011      	b.n	800881e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	4413      	add	r3, r2
 8008802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	0151      	lsls	r1, r2, #5
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	440a      	add	r2, r1
 8008810:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008814:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008818:	6013      	str	r3, [r2, #0]
 800881a:	e000      	b.n	800881e <USB_HC_Halt+0x1f0>
          break;
 800881c:	bf00      	nop
    }
  }

  return HAL_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	371c      	adds	r7, #28
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b086      	sub	sp, #24
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008838:	2300      	movs	r3, #0
 800883a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7ff fa7b 	bl	8007d38 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008842:	2110      	movs	r1, #16
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f7ff fab3 	bl	8007db0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7ff fad6 	bl	8007dfc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008850:	2300      	movs	r3, #0
 8008852:	613b      	str	r3, [r7, #16]
 8008854:	e01f      	b.n	8008896 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	4413      	add	r3, r2
 800885e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800886c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008874:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800887c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	4413      	add	r3, r2
 8008886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800888a:	461a      	mov	r2, r3
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	3301      	adds	r3, #1
 8008894:	613b      	str	r3, [r7, #16]
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	2b0f      	cmp	r3, #15
 800889a:	d9dc      	bls.n	8008856 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800889c:	2300      	movs	r3, #0
 800889e:	613b      	str	r3, [r7, #16]
 80088a0:	e034      	b.n	800890c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	015a      	lsls	r2, r3, #5
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	4413      	add	r3, r2
 80088aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088b8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088c0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088c8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	015a      	lsls	r2, r3, #5
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	4413      	add	r3, r2
 80088d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088d6:	461a      	mov	r2, r3
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	3301      	adds	r3, #1
 80088e0:	617b      	str	r3, [r7, #20]
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088e8:	d80c      	bhi.n	8008904 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	015a      	lsls	r2, r3, #5
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	4413      	add	r3, r2
 80088f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008900:	d0ec      	beq.n	80088dc <USB_StopHost+0xb0>
 8008902:	e000      	b.n	8008906 <USB_StopHost+0xda>
        break;
 8008904:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	3301      	adds	r3, #1
 800890a:	613b      	str	r3, [r7, #16]
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	2b0f      	cmp	r3, #15
 8008910:	d9c7      	bls.n	80088a2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008918:	461a      	mov	r2, r3
 800891a:	f04f 33ff 	mov.w	r3, #4294967295
 800891e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f04f 32ff 	mov.w	r2, #4294967295
 8008926:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7ff f9f4 	bl	8007d16 <USB_EnableGlobalInt>

  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3718      	adds	r7, #24
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8008938:	b590      	push	{r4, r7, lr}
 800893a:	b089      	sub	sp, #36	; 0x24
 800893c:	af04      	add	r7, sp, #16
 800893e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8008940:	2302      	movs	r3, #2
 8008942:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8008944:	2301      	movs	r3, #1
 8008946:	2202      	movs	r2, #2
 8008948:	2102      	movs	r1, #2
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fc3a 	bl	80091c4 <USBH_FindInterface>
 8008950:	4603      	mov	r3, r0
 8008952:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8008954:	7bbb      	ldrb	r3, [r7, #14]
 8008956:	2bff      	cmp	r3, #255	; 0xff
 8008958:	f000 812a 	beq.w	8008bb0 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800895c:	7bbb      	ldrb	r3, [r7, #14]
 800895e:	4619      	mov	r1, r3
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fc13 	bl	800918c <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800896c:	2050      	movs	r0, #80	; 0x50
 800896e:	f002 f8e3 	bl	800ab38 <malloc>
 8008972:	4603      	mov	r3, r0
 8008974:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800897c:	69db      	ldr	r3, [r3, #28]
 800897e:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008980:	7bbb      	ldrb	r3, [r7, #14]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	211a      	movs	r1, #26
 8008986:	fb01 f303 	mul.w	r3, r1, r3
 800898a:	4413      	add	r3, r2
 800898c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	b25b      	sxtb	r3, r3
 8008994:	2b00      	cmp	r3, #0
 8008996:	da15      	bge.n	80089c4 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008998:	7bbb      	ldrb	r3, [r7, #14]
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	211a      	movs	r1, #26
 800899e:	fb01 f303 	mul.w	r3, r1, r3
 80089a2:	4413      	add	r3, r2
 80089a4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80089a8:	781a      	ldrb	r2, [r3, #0]
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	211a      	movs	r1, #26
 80089b4:	fb01 f303 	mul.w	r3, r1, r3
 80089b8:	4413      	add	r3, r2
 80089ba:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80089be:	881a      	ldrh	r2, [r3, #0]
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	785b      	ldrb	r3, [r3, #1]
 80089c8:	4619      	mov	r1, r3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f001 fd21 	bl	800a412 <USBH_AllocPipe>
 80089d0:	4603      	mov	r3, r0
 80089d2:	461a      	mov	r2, r3
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	7819      	ldrb	r1, [r3, #0]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	7858      	ldrb	r0, [r3, #1]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	8952      	ldrh	r2, [r2, #10]
 80089f0:	9202      	str	r2, [sp, #8]
 80089f2:	2203      	movs	r2, #3
 80089f4:	9201      	str	r2, [sp, #4]
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	4623      	mov	r3, r4
 80089fa:	4602      	mov	r2, r0
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f001 fcd9 	bl	800a3b4 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	2200      	movs	r2, #0
 8008a08:	4619      	mov	r1, r3
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f001 ffe4 	bl	800a9d8 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8008a10:	2300      	movs	r3, #0
 8008a12:	2200      	movs	r2, #0
 8008a14:	210a      	movs	r1, #10
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 fbd4 	bl	80091c4 <USBH_FindInterface>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8008a20:	7bbb      	ldrb	r3, [r7, #14]
 8008a22:	2bff      	cmp	r3, #255	; 0xff
 8008a24:	f000 80c4 	beq.w	8008bb0 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008a28:	7bbb      	ldrb	r3, [r7, #14]
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	211a      	movs	r1, #26
 8008a2e:	fb01 f303 	mul.w	r3, r1, r3
 8008a32:	4413      	add	r3, r2
 8008a34:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	b25b      	sxtb	r3, r3
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	da16      	bge.n	8008a6e <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	211a      	movs	r1, #26
 8008a46:	fb01 f303 	mul.w	r3, r1, r3
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008a50:	781a      	ldrb	r2, [r3, #0]
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008a56:	7bbb      	ldrb	r3, [r7, #14]
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	211a      	movs	r1, #26
 8008a5c:	fb01 f303 	mul.w	r3, r1, r3
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008a66:	881a      	ldrh	r2, [r3, #0]
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	835a      	strh	r2, [r3, #26]
 8008a6c:	e015      	b.n	8008a9a <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008a6e:	7bbb      	ldrb	r3, [r7, #14]
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	211a      	movs	r1, #26
 8008a74:	fb01 f303 	mul.w	r3, r1, r3
 8008a78:	4413      	add	r3, r2
 8008a7a:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008a7e:	781a      	ldrb	r2, [r3, #0]
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008a84:	7bbb      	ldrb	r3, [r7, #14]
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	211a      	movs	r1, #26
 8008a8a:	fb01 f303 	mul.w	r3, r1, r3
 8008a8e:	4413      	add	r3, r2
 8008a90:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008a94:	881a      	ldrh	r2, [r3, #0]
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008a9a:	7bbb      	ldrb	r3, [r7, #14]
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	211a      	movs	r1, #26
 8008aa0:	fb01 f303 	mul.w	r3, r1, r3
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f203 3352 	addw	r3, r3, #850	; 0x352
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	b25b      	sxtb	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	da16      	bge.n	8008ae0 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008ab2:	7bbb      	ldrb	r3, [r7, #14]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	211a      	movs	r1, #26
 8008ab8:	fb01 f303 	mul.w	r3, r1, r3
 8008abc:	4413      	add	r3, r2
 8008abe:	f203 3352 	addw	r3, r3, #850	; 0x352
 8008ac2:	781a      	ldrb	r2, [r3, #0]
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	211a      	movs	r1, #26
 8008ace:	fb01 f303 	mul.w	r3, r1, r3
 8008ad2:	4413      	add	r3, r2
 8008ad4:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8008ad8:	881a      	ldrh	r2, [r3, #0]
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	835a      	strh	r2, [r3, #26]
 8008ade:	e015      	b.n	8008b0c <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008ae0:	7bbb      	ldrb	r3, [r7, #14]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	211a      	movs	r1, #26
 8008ae6:	fb01 f303 	mul.w	r3, r1, r3
 8008aea:	4413      	add	r3, r2
 8008aec:	f203 3352 	addw	r3, r3, #850	; 0x352
 8008af0:	781a      	ldrb	r2, [r3, #0]
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008af6:	7bbb      	ldrb	r3, [r7, #14]
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	211a      	movs	r1, #26
 8008afc:	fb01 f303 	mul.w	r3, r1, r3
 8008b00:	4413      	add	r3, r2
 8008b02:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8008b06:	881a      	ldrh	r2, [r3, #0]
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	7b9b      	ldrb	r3, [r3, #14]
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f001 fc7d 	bl	800a412 <USBH_AllocPipe>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	7bdb      	ldrb	r3, [r3, #15]
 8008b24:	4619      	mov	r1, r3
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f001 fc73 	bl	800a412 <USBH_AllocPipe>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	461a      	mov	r2, r3
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	7b59      	ldrb	r1, [r3, #13]
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	7b98      	ldrb	r0, [r3, #14]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	8b12      	ldrh	r2, [r2, #24]
 8008b4c:	9202      	str	r2, [sp, #8]
 8008b4e:	2202      	movs	r2, #2
 8008b50:	9201      	str	r2, [sp, #4]
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	4623      	mov	r3, r4
 8008b56:	4602      	mov	r2, r0
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f001 fc2b 	bl	800a3b4 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	7b19      	ldrb	r1, [r3, #12]
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	7bd8      	ldrb	r0, [r3, #15]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	8b52      	ldrh	r2, [r2, #26]
 8008b76:	9202      	str	r2, [sp, #8]
 8008b78:	2202      	movs	r2, #2
 8008b7a:	9201      	str	r2, [sp, #4]
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	4623      	mov	r3, r4
 8008b80:	4602      	mov	r2, r0
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f001 fc16 	bl	800a3b4 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	7b5b      	ldrb	r3, [r3, #13]
 8008b94:	2200      	movs	r2, #0
 8008b96:	4619      	mov	r1, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f001 ff1d 	bl	800a9d8 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	7b1b      	ldrb	r3, [r3, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f001 ff16 	bl	800a9d8 <USBH_LL_SetToggle>
      status = USBH_OK;
 8008bac:	2300      	movs	r3, #0
 8008bae:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3714      	adds	r7, #20
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd90      	pop	{r4, r7, pc}

08008bba <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008bc8:	69db      	ldr	r3, [r3, #28]
 8008bca:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00e      	beq.n	8008bf2 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	4619      	mov	r1, r3
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f001 fc09 	bl	800a3f2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	4619      	mov	r1, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f001 fc31 	bl	800a44e <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	7b1b      	ldrb	r3, [r3, #12]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00e      	beq.n	8008c18 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	7b1b      	ldrb	r3, [r3, #12]
 8008bfe:	4619      	mov	r1, r3
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f001 fbf6 	bl	800a3f2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	7b1b      	ldrb	r3, [r3, #12]
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f001 fc1e 	bl	800a44e <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	7b5b      	ldrb	r3, [r3, #13]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00e      	beq.n	8008c3e <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	7b5b      	ldrb	r3, [r3, #13]
 8008c24:	4619      	mov	r1, r3
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f001 fbe3 	bl	800a3f2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	7b5b      	ldrb	r3, [r3, #13]
 8008c30:	4619      	mov	r1, r3
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f001 fc0b 	bl	800a44e <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008c44:	69db      	ldr	r3, [r3, #28]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00b      	beq.n	8008c62 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f001 ff78 	bl	800ab48 <free>
    phost->pActiveClass->pData = 0U;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008c5e:	2200      	movs	r2, #0
 8008c60:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8008c74:	2302      	movs	r3, #2
 8008c76:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008c7e:	69db      	ldr	r3, [r3, #28]
 8008c80:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	3340      	adds	r3, #64	; 0x40
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f8b2 	bl	8008df2 <GetLineCoding>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8008c92:	7bfb      	ldrb	r3, [r7, #15]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d105      	bne.n	8008ca4 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008c9e:	2102      	movs	r1, #2
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	4798      	blx	r3
  }
  return status;
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
	...

08008cb0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008cc6:	69db      	ldr	r3, [r3, #28]
 8008cc8:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008cd0:	2b04      	cmp	r3, #4
 8008cd2:	d877      	bhi.n	8008dc4 <USBH_CDC_Process+0x114>
 8008cd4:	a201      	add	r2, pc, #4	; (adr r2, 8008cdc <USBH_CDC_Process+0x2c>)
 8008cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cda:	bf00      	nop
 8008cdc:	08008cf1 	.word	0x08008cf1
 8008ce0:	08008cf7 	.word	0x08008cf7
 8008ce4:	08008d27 	.word	0x08008d27
 8008ce8:	08008d9b 	.word	0x08008d9b
 8008cec:	08008da9 	.word	0x08008da9
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	73fb      	strb	r3, [r7, #15]
    break;
 8008cf4:	e06d      	b.n	8008dd2 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f897 	bl	8008e30 <SetLineCoding>
 8008d02:	4603      	mov	r3, r0
 8008d04:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8008d06:	7bbb      	ldrb	r3, [r7, #14]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d104      	bne.n	8008d16 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	2202      	movs	r2, #2
 8008d10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8008d14:	e058      	b.n	8008dc8 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8008d16:	7bbb      	ldrb	r3, [r7, #14]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d055      	beq.n	8008dc8 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	2204      	movs	r2, #4
 8008d20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8008d24:	e050      	b.n	8008dc8 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	3340      	adds	r3, #64	; 0x40
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f860 	bl	8008df2 <GetLineCoding>
 8008d32:	4603      	mov	r3, r0
 8008d34:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8008d36:	7bbb      	ldrb	r3, [r7, #14]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d126      	bne.n	8008d8a <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d4e:	791b      	ldrb	r3, [r3, #4]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d13b      	bne.n	8008dcc <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d5e:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d133      	bne.n	8008dcc <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d6e:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d12b      	bne.n	8008dcc <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d7c:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d124      	bne.n	8008dcc <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f95a 	bl	800903c <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8008d88:	e020      	b.n	8008dcc <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8008d8a:	7bbb      	ldrb	r3, [r7, #14]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d01d      	beq.n	8008dcc <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	2204      	movs	r2, #4
 8008d94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8008d98:	e018      	b.n	8008dcc <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f867 	bl	8008e6e <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f8dc 	bl	8008f5e <CDC_ProcessReception>
    break;
 8008da6:	e014      	b.n	8008dd2 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8008da8:	2100      	movs	r1, #0
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fece 	bl	8009b4c <USBH_ClrFeature>
 8008db0:	4603      	mov	r3, r0
 8008db2:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8008db4:	7bbb      	ldrb	r3, [r7, #14]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d10a      	bne.n	8008dd0 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8008dc2:	e005      	b.n	8008dd0 <USBH_CDC_Process+0x120>

  default:
    break;
 8008dc4:	bf00      	nop
 8008dc6:	e004      	b.n	8008dd2 <USBH_CDC_Process+0x122>
    break;
 8008dc8:	bf00      	nop
 8008dca:	e002      	b.n	8008dd2 <USBH_CDC_Process+0x122>
    break;
 8008dcc:	bf00      	nop
 8008dce:	e000      	b.n	8008dd2 <USBH_CDC_Process+0x122>
    break;
 8008dd0:	bf00      	nop

  }

  return status;
 8008dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3710      	adds	r7, #16
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	370c      	adds	r7, #12
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b082      	sub	sp, #8
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	22a1      	movs	r2, #161	; 0xa1
 8008e00:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2221      	movs	r2, #33	; 0x21
 8008e06:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2207      	movs	r2, #7
 8008e18:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	2207      	movs	r2, #7
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f001 f873 	bl	8009f0c <USBH_CtlReq>
 8008e26:	4603      	mov	r3, r0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2221      	movs	r2, #33	; 0x21
 8008e3e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2220      	movs	r2, #32
 8008e44:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2207      	movs	r2, #7
 8008e56:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	2207      	movs	r2, #7
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f001 f854 	bl	8009f0c <USBH_CtlReq>
 8008e64:	4603      	mov	r3, r0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b086      	sub	sp, #24
 8008e72:	af02      	add	r7, sp, #8
 8008e74:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e80:	2300      	movs	r3, #0
 8008e82:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d002      	beq.n	8008e94 <CDC_ProcessTransmission+0x26>
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d025      	beq.n	8008ede <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8008e92:	e060      	b.n	8008f56 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	8b12      	ldrh	r2, [r2, #24]
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d90c      	bls.n	8008eba <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	69d9      	ldr	r1, [r3, #28]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	8b1a      	ldrh	r2, [r3, #24]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	7b58      	ldrb	r0, [r3, #13]
 8008eac:	2301      	movs	r3, #1
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f001 fa3b 	bl	800a32e <USBH_BulkSendData>
 8008eb8:	e00c      	b.n	8008ed4 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	7b58      	ldrb	r0, [r3, #13]
 8008ec8:	2301      	movs	r3, #1
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	4603      	mov	r3, r0
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f001 fa2d 	bl	800a32e <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8008edc:	e03b      	b.n	8008f56 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	7b5b      	ldrb	r3, [r3, #13]
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f001 fd4d 	bl	800a984 <USBH_LL_GetURBState>
 8008eea:	4603      	mov	r3, r0
 8008eec:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8008eee:	7afb      	ldrb	r3, [r7, #11]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d128      	bne.n	8008f46 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	8b12      	ldrh	r2, [r2, #24]
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d90e      	bls.n	8008f1e <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	8b12      	ldrh	r2, [r2, #24]
 8008f08:	1a9a      	subs	r2, r3, r2
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	69db      	ldr	r3, [r3, #28]
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	8b12      	ldrh	r2, [r2, #24]
 8008f16:	441a      	add	r2, r3
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	61da      	str	r2, [r3, #28]
 8008f1c:	e002      	b.n	8008f24 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d004      	beq.n	8008f36 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8008f34:	e00e      	b.n	8008f54 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f868 	bl	8009014 <USBH_CDC_TransmitCallback>
    break;
 8008f44:	e006      	b.n	8008f54 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8008f46:	7afb      	ldrb	r3, [r7, #11]
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d103      	bne.n	8008f54 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8008f54:	bf00      	nop
  }
}
 8008f56:	bf00      	nop
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b086      	sub	sp, #24
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008f6c:	69db      	ldr	r3, [r3, #28]
 8008f6e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008f70:	2300      	movs	r3, #0
 8008f72:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008f7a:	2b03      	cmp	r3, #3
 8008f7c:	d002      	beq.n	8008f84 <CDC_ProcessReception+0x26>
 8008f7e:	2b04      	cmp	r3, #4
 8008f80:	d00e      	beq.n	8008fa0 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8008f82:	e043      	b.n	800900c <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	6a19      	ldr	r1, [r3, #32]
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	8b5a      	ldrh	r2, [r3, #26]
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	7b1b      	ldrb	r3, [r3, #12]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f001 f9f1 	bl	800a378 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	2204      	movs	r2, #4
 8008f9a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8008f9e:	e035      	b.n	800900c <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	7b1b      	ldrb	r3, [r3, #12]
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f001 fcec 	bl	800a984 <USBH_LL_GetURBState>
 8008fac:	4603      	mov	r3, r0
 8008fae:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8008fb0:	7cfb      	ldrb	r3, [r7, #19]
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d129      	bne.n	800900a <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	7b1b      	ldrb	r3, [r3, #12]
 8008fba:	4619      	mov	r1, r3
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f001 fc4f 	bl	800a860 <USBH_LL_GetLastXferSize>
 8008fc2:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d016      	beq.n	8008ffc <CDC_ProcessReception+0x9e>
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	8b5b      	ldrh	r3, [r3, #26]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d910      	bls.n	8008ffc <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	1ad2      	subs	r2, r2, r3
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	6a1a      	ldr	r2, [r3, #32]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	441a      	add	r2, r3
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	2203      	movs	r2, #3
 8008ff6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8008ffa:	e006      	b.n	800900a <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f80f 	bl	8009028 <USBH_CDC_ReceiveCallback>
    break;
 800900a:	bf00      	nop
  }
}
 800900c:	bf00      	nop
 800900e:	3718      	adds	r7, #24
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]

}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]

}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]

}
 8009044:	bf00      	nop
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	4613      	mov	r3, r2
 800905c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d101      	bne.n	8009068 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009064:	2302      	movs	r3, #2
 8009066:	e019      	b.n	800909c <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	79fa      	ldrb	r2, [r7, #7]
 800906c:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f000 f80f 	bl	80090a4 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d003      	beq.n	8009094 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f001 fb31 	bl	800a6fc <USBH_LL_Init>

  return USBH_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80090ac:	2300      	movs	r3, #0
 80090ae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80090b0:	e008      	b.n	80090c4 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	32e0      	adds	r2, #224	; 0xe0
 80090b8:	2100      	movs	r1, #0
 80090ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	3301      	adds	r3, #1
 80090c2:	60fb      	str	r3, [r7, #12]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2b0e      	cmp	r3, #14
 80090c8:	d9f3      	bls.n	80090b2 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80090ca:	2300      	movs	r3, #0
 80090cc:	60fb      	str	r3, [r7, #12]
 80090ce:	e009      	b.n	80090e4 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80090da:	2200      	movs	r2, #0
 80090dc:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	3301      	adds	r3, #1
 80090e2:	60fb      	str	r3, [r7, #12]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090ea:	d3f1      	bcc.n	80090d0 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2201      	movs	r2, #1
 800910a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2240      	movs	r2, #64	; 0x40
 8009110:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3714      	adds	r7, #20
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009136:	b480      	push	{r7}
 8009138:	b085      	sub	sp, #20
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8009140:	2300      	movs	r3, #0
 8009142:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d017      	beq.n	800917a <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10f      	bne.n	8009174 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800915a:	1c59      	adds	r1, r3, #1
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	33dc      	adds	r3, #220	; 0xdc
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	4413      	add	r3, r2
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	73fb      	strb	r3, [r7, #15]
 8009172:	e004      	b.n	800917e <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009174:	2302      	movs	r3, #2
 8009176:	73fb      	strb	r3, [r7, #15]
 8009178:	e001      	b.n	800917e <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800917a:	2302      	movs	r3, #2
 800917c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800917e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3714      	adds	r7, #20
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800918c:	b480      	push	{r7}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	460b      	mov	r3, r1
 8009196:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 80091a2:	78fa      	ldrb	r2, [r7, #3]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d204      	bcs.n	80091b2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	78fa      	ldrb	r2, [r7, #3]
 80091ac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 80091b0:	e001      	b.n	80091b6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 80091b2:	2302      	movs	r3, #2
 80091b4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b087      	sub	sp, #28
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	4608      	mov	r0, r1
 80091ce:	4611      	mov	r1, r2
 80091d0:	461a      	mov	r2, r3
 80091d2:	4603      	mov	r3, r0
 80091d4:	70fb      	strb	r3, [r7, #3]
 80091d6:	460b      	mov	r3, r1
 80091d8:	70bb      	strb	r3, [r7, #2]
 80091da:	4613      	mov	r3, r2
 80091dc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 80091de:	2300      	movs	r3, #0
 80091e0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80091e2:	2300      	movs	r3, #0
 80091e4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80091ec:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80091ee:	e025      	b.n	800923c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80091f0:	7dfb      	ldrb	r3, [r7, #23]
 80091f2:	221a      	movs	r2, #26
 80091f4:	fb02 f303 	mul.w	r3, r2, r3
 80091f8:	3308      	adds	r3, #8
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	4413      	add	r3, r2
 80091fe:	3302      	adds	r3, #2
 8009200:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	795b      	ldrb	r3, [r3, #5]
 8009206:	78fa      	ldrb	r2, [r7, #3]
 8009208:	429a      	cmp	r2, r3
 800920a:	d002      	beq.n	8009212 <USBH_FindInterface+0x4e>
 800920c:	78fb      	ldrb	r3, [r7, #3]
 800920e:	2bff      	cmp	r3, #255	; 0xff
 8009210:	d111      	bne.n	8009236 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8009216:	78ba      	ldrb	r2, [r7, #2]
 8009218:	429a      	cmp	r2, r3
 800921a:	d002      	beq.n	8009222 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800921c:	78bb      	ldrb	r3, [r7, #2]
 800921e:	2bff      	cmp	r3, #255	; 0xff
 8009220:	d109      	bne.n	8009236 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8009226:	787a      	ldrb	r2, [r7, #1]
 8009228:	429a      	cmp	r2, r3
 800922a:	d002      	beq.n	8009232 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800922c:	787b      	ldrb	r3, [r7, #1]
 800922e:	2bff      	cmp	r3, #255	; 0xff
 8009230:	d101      	bne.n	8009236 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009232:	7dfb      	ldrb	r3, [r7, #23]
 8009234:	e006      	b.n	8009244 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009236:	7dfb      	ldrb	r3, [r7, #23]
 8009238:	3301      	adds	r3, #1
 800923a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800923c:	7dfb      	ldrb	r3, [r7, #23]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d9d6      	bls.n	80091f0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009242:	23ff      	movs	r3, #255	; 0xff
}
 8009244:	4618      	mov	r0, r3
 8009246:	371c      	adds	r7, #28
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f001 fa8b 	bl	800a774 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800925e:	2101      	movs	r1, #1
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f001 fba2 	bl	800a9aa <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b088      	sub	sp, #32
 8009274:	af04      	add	r7, sp, #16
 8009276:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009278:	2302      	movs	r3, #2
 800927a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800927c:	2300      	movs	r3, #0
 800927e:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 faec 	bl	800985e <USBH_IsPortEnabled>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10c      	bne.n	80092a6 <USBH_Process+0x36>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	b2db      	uxtb	r3, r3
 8009292:	2b00      	cmp	r3, #0
 8009294:	d007      	beq.n	80092a6 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b03      	cmp	r3, #3
 800929e:	d002      	beq.n	80092a6 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2203      	movs	r2, #3
 80092a4:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b0b      	cmp	r3, #11
 80092ae:	f200 814c 	bhi.w	800954a <USBH_Process+0x2da>
 80092b2:	a201      	add	r2, pc, #4	; (adr r2, 80092b8 <USBH_Process+0x48>)
 80092b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b8:	080092e9 	.word	0x080092e9
 80092bc:	0800930b 	.word	0x0800930b
 80092c0:	0800931f 	.word	0x0800931f
 80092c4:	08009525 	.word	0x08009525
 80092c8:	0800954b 	.word	0x0800954b
 80092cc:	080093ad 	.word	0x080093ad
 80092d0:	080094db 	.word	0x080094db
 80092d4:	080093dd 	.word	0x080093dd
 80092d8:	080093fd 	.word	0x080093fd
 80092dc:	0800941d 	.word	0x0800941d
 80092e0:	0800944b 	.word	0x0800944b
 80092e4:	0800950d 	.word	0x0800950d
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f000 812c 	beq.w	800954e <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 80092fc:	20c8      	movs	r0, #200	; 0xc8
 80092fe:	f001 fb9e 	bl	800aa3e <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f001 fa91 	bl	800a82a <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009308:	e121      	b.n	800954e <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009310:	2b01      	cmp	r3, #1
 8009312:	f040 811e 	bne.w	8009552 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2202      	movs	r2, #2
 800931a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800931c:	e119      	b.n	8009552 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800931e:	2064      	movs	r0, #100	; 0x64
 8009320:	f001 fb8d 	bl	800aa3e <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f001 fa5b 	bl	800a7e0 <USBH_LL_GetSpeed>
 800932a:	4603      	mov	r3, r0
 800932c:	461a      	mov	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2205      	movs	r2, #5
 8009338:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800933a:	2100      	movs	r1, #0
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f001 f868 	bl	800a412 <USBH_AllocPipe>
 8009342:	4603      	mov	r3, r0
 8009344:	461a      	mov	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800934a:	2180      	movs	r1, #128	; 0x80
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f001 f860 	bl	800a412 <USBH_AllocPipe>
 8009352:	4603      	mov	r3, r0
 8009354:	461a      	mov	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	7919      	ldrb	r1, [r3, #4]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800936e:	b292      	uxth	r2, r2
 8009370:	9202      	str	r2, [sp, #8]
 8009372:	2200      	movs	r2, #0
 8009374:	9201      	str	r2, [sp, #4]
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	4603      	mov	r3, r0
 800937a:	2280      	movs	r2, #128	; 0x80
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f001 f819 	bl	800a3b4 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	7959      	ldrb	r1, [r3, #5]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8009396:	b292      	uxth	r2, r2
 8009398:	9202      	str	r2, [sp, #8]
 800939a:	2200      	movs	r2, #0
 800939c:	9201      	str	r2, [sp, #4]
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	4603      	mov	r3, r0
 80093a2:	2200      	movs	r2, #0
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f001 f805 	bl	800a3b4 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80093aa:	e0e3      	b.n	8009574 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f8e7 	bl	8009580 <USBH_HandleEnum>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f040 80ce 	bne.w	8009556 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d103      	bne.n	80093d4 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2208      	movs	r2, #8
 80093d0:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 80093d2:	e0c0      	b.n	8009556 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2207      	movs	r2, #7
 80093d8:	701a      	strb	r2, [r3, #0]
    break;
 80093da:	e0bc      	b.n	8009556 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f000 80b9 	beq.w	800955a <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80093ee:	2101      	movs	r1, #1
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2208      	movs	r2, #8
 80093f8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80093fa:	e0ae      	b.n	800955a <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8009402:	b29b      	uxth	r3, r3
 8009404:	4619      	mov	r1, r3
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 fb59 	bl	8009abe <USBH_SetCfg>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	f040 80a5 	bne.w	800955e <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2209      	movs	r2, #9
 8009418:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800941a:	e0a0      	b.n	800955e <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8009422:	f003 0320 	and.w	r3, r3, #32
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00b      	beq.n	8009442 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800942a:	2101      	movs	r1, #1
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fb69 	bl	8009b04 <USBH_SetFeature>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	f040 8094 	bne.w	8009562 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	220a      	movs	r2, #10
 800943e:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8009440:	e08f      	b.n	8009562 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	220a      	movs	r2, #10
 8009446:	701a      	strb	r2, [r3, #0]
    break;
 8009448:	e08b      	b.n	8009562 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 8088 	beq.w	8009566 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800945e:	2300      	movs	r3, #0
 8009460:	73fb      	strb	r3, [r7, #15]
 8009462:	e017      	b.n	8009494 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009464:	7bfb      	ldrb	r3, [r7, #15]
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	33dc      	adds	r3, #220	; 0xdc
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	4413      	add	r3, r2
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	791a      	ldrb	r2, [r3, #4]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8009478:	429a      	cmp	r2, r3
 800947a:	d108      	bne.n	800948e <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 800947c:	7bfb      	ldrb	r3, [r7, #15]
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	33dc      	adds	r3, #220	; 0xdc
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4413      	add	r3, r2
 8009486:	685a      	ldr	r2, [r3, #4]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800948e:	7bfb      	ldrb	r3, [r7, #15]
 8009490:	3301      	adds	r3, #1
 8009492:	73fb      	strb	r3, [r7, #15]
 8009494:	7bfb      	ldrb	r3, [r7, #15]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d0e4      	beq.n	8009464 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d016      	beq.n	80094d2 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	4798      	blx	r3
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d109      	bne.n	80094ca <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2206      	movs	r2, #6
 80094ba:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80094c2:	2103      	movs	r1, #3
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80094c8:	e04d      	b.n	8009566 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	220d      	movs	r2, #13
 80094ce:	701a      	strb	r2, [r3, #0]
    break;
 80094d0:	e049      	b.n	8009566 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	220d      	movs	r2, #13
 80094d6:	701a      	strb	r2, [r3, #0]
    break;
 80094d8:	e045      	b.n	8009566 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00f      	beq.n	8009504 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	4798      	blx	r3
 80094f0:	4603      	mov	r3, r0
 80094f2:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 80094f4:	7bbb      	ldrb	r3, [r7, #14]
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d136      	bne.n	800956a <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	220b      	movs	r2, #11
 8009500:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8009502:	e032      	b.n	800956a <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	220d      	movs	r2, #13
 8009508:	701a      	strb	r2, [r3, #0]
    break;
 800950a:	e02e      	b.n	800956a <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009512:	2b00      	cmp	r3, #0
 8009514:	d02b      	beq.n	800956e <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800951c:	695b      	ldr	r3, [r3, #20]
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	4798      	blx	r3
    }
    break;
 8009522:	e024      	b.n	800956e <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f7ff fdbd 	bl	80090a4 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009530:	2b00      	cmp	r3, #0
 8009532:	d01e      	beq.n	8009572 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8009548:	e013      	b.n	8009572 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 800954a:	bf00      	nop
 800954c:	e012      	b.n	8009574 <USBH_Process+0x304>
    break;
 800954e:	bf00      	nop
 8009550:	e010      	b.n	8009574 <USBH_Process+0x304>
    break;
 8009552:	bf00      	nop
 8009554:	e00e      	b.n	8009574 <USBH_Process+0x304>
    break;
 8009556:	bf00      	nop
 8009558:	e00c      	b.n	8009574 <USBH_Process+0x304>
    break;
 800955a:	bf00      	nop
 800955c:	e00a      	b.n	8009574 <USBH_Process+0x304>
    break;
 800955e:	bf00      	nop
 8009560:	e008      	b.n	8009574 <USBH_Process+0x304>
    break;
 8009562:	bf00      	nop
 8009564:	e006      	b.n	8009574 <USBH_Process+0x304>
    break;
 8009566:	bf00      	nop
 8009568:	e004      	b.n	8009574 <USBH_Process+0x304>
    break;
 800956a:	bf00      	nop
 800956c:	e002      	b.n	8009574 <USBH_Process+0x304>
    break;
 800956e:	bf00      	nop
 8009570:	e000      	b.n	8009574 <USBH_Process+0x304>
    break;
 8009572:	bf00      	nop
  }
 return USBH_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop

08009580 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b088      	sub	sp, #32
 8009584:	af04      	add	r7, sp, #16
 8009586:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009588:	2301      	movs	r3, #1
 800958a:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	785b      	ldrb	r3, [r3, #1]
 8009590:	2b07      	cmp	r3, #7
 8009592:	f200 80f8 	bhi.w	8009786 <USBH_HandleEnum+0x206>
 8009596:	a201      	add	r2, pc, #4	; (adr r2, 800959c <USBH_HandleEnum+0x1c>)
 8009598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959c:	080095bd 	.word	0x080095bd
 80095a0:	0800962f 	.word	0x0800962f
 80095a4:	08009647 	.word	0x08009647
 80095a8:	080096bd 	.word	0x080096bd
 80095ac:	080096d3 	.word	0x080096d3
 80095b0:	080096ef 	.word	0x080096ef
 80095b4:	08009723 	.word	0x08009723
 80095b8:	08009757 	.word	0x08009757
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80095bc:	2108      	movs	r1, #8
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f9ad 	bl	800991e <USBH_Get_DevDesc>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	f040 80df 	bne.w	800978a <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	7919      	ldrb	r1, [r3, #4]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80095f0:	b292      	uxth	r2, r2
 80095f2:	9202      	str	r2, [sp, #8]
 80095f4:	2200      	movs	r2, #0
 80095f6:	9201      	str	r2, [sp, #4]
 80095f8:	9300      	str	r3, [sp, #0]
 80095fa:	4603      	mov	r3, r0
 80095fc:	2280      	movs	r2, #128	; 0x80
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 fed8 	bl	800a3b4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	7959      	ldrb	r1, [r3, #5]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009618:	b292      	uxth	r2, r2
 800961a:	9202      	str	r2, [sp, #8]
 800961c:	2200      	movs	r2, #0
 800961e:	9201      	str	r2, [sp, #4]
 8009620:	9300      	str	r3, [sp, #0]
 8009622:	4603      	mov	r3, r0
 8009624:	2200      	movs	r2, #0
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fec4 	bl	800a3b4 <USBH_OpenPipe>

    }
    break;
 800962c:	e0ad      	b.n	800978a <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800962e:	2112      	movs	r1, #18
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f974 	bl	800991e <USBH_Get_DevDesc>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	f040 80a8 	bne.w	800978e <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2202      	movs	r2, #2
 8009642:	705a      	strb	r2, [r3, #1]

    }
    break;
 8009644:	e0a3      	b.n	800978e <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8009646:	2101      	movs	r1, #1
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fa14 	bl	8009a76 <USBH_SetAddress>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	f040 809e 	bne.w	8009792 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8009656:	2002      	movs	r0, #2
 8009658:	f001 f9f1 	bl	800aa3e <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2203      	movs	r2, #3
 8009668:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	7919      	ldrb	r1, [r3, #4]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800967e:	b292      	uxth	r2, r2
 8009680:	9202      	str	r2, [sp, #8]
 8009682:	2200      	movs	r2, #0
 8009684:	9201      	str	r2, [sp, #4]
 8009686:	9300      	str	r3, [sp, #0]
 8009688:	4603      	mov	r3, r0
 800968a:	2280      	movs	r2, #128	; 0x80
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 fe91 	bl	800a3b4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	7959      	ldrb	r1, [r3, #5]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80096a6:	b292      	uxth	r2, r2
 80096a8:	9202      	str	r2, [sp, #8]
 80096aa:	2200      	movs	r2, #0
 80096ac:	9201      	str	r2, [sp, #4]
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	4603      	mov	r3, r0
 80096b2:	2200      	movs	r2, #0
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 fe7d 	bl	800a3b4 <USBH_OpenPipe>
    }
    break;
 80096ba:	e06a      	b.n	8009792 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80096bc:	2109      	movs	r1, #9
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f955 	bl	800996e <USBH_Get_CfgDesc>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d165      	bne.n	8009796 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2204      	movs	r2, #4
 80096ce:	705a      	strb	r2, [r3, #1]
    }
    break;
 80096d0:	e061      	b.n	8009796 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 80096d8:	4619      	mov	r1, r3
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 f947 	bl	800996e <USBH_Get_CfgDesc>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d159      	bne.n	800979a <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2205      	movs	r2, #5
 80096ea:	705a      	strb	r2, [r3, #1]
    }
    break;
 80096ec:	e055      	b.n	800979a <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d010      	beq.n	800971a <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009704:	23ff      	movs	r3, #255	; 0xff
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f955 	bl	80099b6 <USBH_Get_StringDesc>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d145      	bne.n	800979e <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2206      	movs	r2, #6
 8009716:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009718:	e041      	b.n	800979e <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2206      	movs	r2, #6
 800971e:	705a      	strb	r2, [r3, #1]
    break;
 8009720:	e03d      	b.n	800979e <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8009728:	2b00      	cmp	r3, #0
 800972a:	d010      	beq.n	800974e <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009738:	23ff      	movs	r3, #255	; 0xff
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f93b 	bl	80099b6 <USBH_Get_StringDesc>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d12d      	bne.n	80097a2 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2207      	movs	r2, #7
 800974a:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800974c:	e029      	b.n	80097a2 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2207      	movs	r2, #7
 8009752:	705a      	strb	r2, [r3, #1]
    break;
 8009754:	e025      	b.n	80097a2 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00f      	beq.n	8009780 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800976c:	23ff      	movs	r3, #255	; 0xff
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f921 	bl	80099b6 <USBH_Get_StringDesc>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d115      	bne.n	80097a6 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800977a:	2300      	movs	r3, #0
 800977c:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800977e:	e012      	b.n	80097a6 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8009780:	2300      	movs	r3, #0
 8009782:	73fb      	strb	r3, [r7, #15]
    break;
 8009784:	e00f      	b.n	80097a6 <USBH_HandleEnum+0x226>

  default:
    break;
 8009786:	bf00      	nop
 8009788:	e00e      	b.n	80097a8 <USBH_HandleEnum+0x228>
    break;
 800978a:	bf00      	nop
 800978c:	e00c      	b.n	80097a8 <USBH_HandleEnum+0x228>
    break;
 800978e:	bf00      	nop
 8009790:	e00a      	b.n	80097a8 <USBH_HandleEnum+0x228>
    break;
 8009792:	bf00      	nop
 8009794:	e008      	b.n	80097a8 <USBH_HandleEnum+0x228>
    break;
 8009796:	bf00      	nop
 8009798:	e006      	b.n	80097a8 <USBH_HandleEnum+0x228>
    break;
 800979a:	bf00      	nop
 800979c:	e004      	b.n	80097a8 <USBH_HandleEnum+0x228>
    break;
 800979e:	bf00      	nop
 80097a0:	e002      	b.n	80097a8 <USBH_HandleEnum+0x228>
    break;
 80097a2:	bf00      	nop
 80097a4:	e000      	b.n	80097a8 <USBH_HandleEnum+0x228>
    break;
 80097a6:	bf00      	nop
  }
  return Status;
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop

080097b4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	683a      	ldr	r2, [r7, #0]
 80097c2:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80097c6:	bf00      	nop
 80097c8:	370c      	adds	r7, #12
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b082      	sub	sp, #8
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80097e0:	1c5a      	adds	r2, r3, #1
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 f804 	bl	80097f6 <USBH_HandleSof>
}
 80097ee:	bf00      	nop
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b082      	sub	sp, #8
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	b2db      	uxtb	r3, r3
 8009804:	2b0b      	cmp	r3, #11
 8009806:	d10a      	bne.n	800981e <USBH_HandleSof+0x28>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800980e:	2b00      	cmp	r3, #0
 8009810:	d005      	beq.n	800981e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009818:	699b      	ldr	r3, [r3, #24]
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	4798      	blx	r3
  }
}
 800981e:	bf00      	nop
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8009826:	b480      	push	{r7}
 8009828:	b083      	sub	sp, #12
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8009836:	bf00      	nop
}
 8009838:	370c      	adds	r7, #12
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr

08009842 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8009842:	b480      	push	{r7}
 8009844:	b083      	sub	sp, #12
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8009852:	bf00      	nop
}
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr

0800985e <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800985e:	b480      	push	{r7}
 8009860:	b083      	sub	sp, #12
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800986c:	4618      	mov	r0, r3
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b00      	cmp	r3, #0
 8009888:	d10f      	bne.n	80098aa <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2201      	movs	r2, #1
 800988e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009898:	2b00      	cmp	r3, #0
 800989a:	d00e      	beq.n	80098ba <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80098a2:	2104      	movs	r1, #4
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	4798      	blx	r3
 80098a8:	e007      	b.n	80098ba <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d102      	bne.n	80098ba <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2202      	movs	r2, #2
 80098b8:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80098ba:	2300      	movs	r3, #0
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3708      	adds	r7, #8
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 ff6c 	bl	800a7aa <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	791b      	ldrb	r3, [r3, #4]
 80098d6:	4619      	mov	r1, r3
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fdb8 	bl	800a44e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	795b      	ldrb	r3, [r3, #5]
 80098e2:	4619      	mov	r1, r3
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 fdb2 	bl	800a44e <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d005      	beq.n	8009908 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009902:	2105      	movs	r1, #5
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 ff33 	bl	800a774 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2203      	movs	r2, #3
 8009912:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3708      	adds	r7, #8
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b086      	sub	sp, #24
 8009922:	af02      	add	r7, sp, #8
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	460b      	mov	r3, r1
 8009928:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8009930:	78fb      	ldrb	r3, [r7, #3]
 8009932:	b29b      	uxth	r3, r3
 8009934:	9300      	str	r3, [sp, #0]
 8009936:	4613      	mov	r3, r2
 8009938:	f44f 7280 	mov.w	r2, #256	; 0x100
 800993c:	2100      	movs	r1, #0
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f864 	bl	8009a0c <USBH_GetDescriptor>
 8009944:	4603      	mov	r3, r0
 8009946:	73fb      	strb	r3, [r7, #15]
 8009948:	7bfb      	ldrb	r3, [r7, #15]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d10a      	bne.n	8009964 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f203 3022 	addw	r0, r3, #802	; 0x322
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800995a:	78fa      	ldrb	r2, [r7, #3]
 800995c:	b292      	uxth	r2, r2
 800995e:	4619      	mov	r1, r3
 8009960:	f000 f918 	bl	8009b94 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8009964:	7bfb      	ldrb	r3, [r7, #15]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800996e:	b580      	push	{r7, lr}
 8009970:	b086      	sub	sp, #24
 8009972:	af02      	add	r7, sp, #8
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	460b      	mov	r3, r1
 8009978:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	331c      	adds	r3, #28
 800997e:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8009980:	887b      	ldrh	r3, [r7, #2]
 8009982:	9300      	str	r3, [sp, #0]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800998a:	2100      	movs	r1, #0
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f83d 	bl	8009a0c <USBH_GetDescriptor>
 8009992:	4603      	mov	r3, r0
 8009994:	72fb      	strb	r3, [r7, #11]
 8009996:	7afb      	ldrb	r3, [r7, #11]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d107      	bne.n	80099ac <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80099a2:	887a      	ldrh	r2, [r7, #2]
 80099a4:	68f9      	ldr	r1, [r7, #12]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 f964 	bl	8009c74 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 80099ac:	7afb      	ldrb	r3, [r7, #11]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b088      	sub	sp, #32
 80099ba:	af02      	add	r7, sp, #8
 80099bc:	60f8      	str	r0, [r7, #12]
 80099be:	607a      	str	r2, [r7, #4]
 80099c0:	461a      	mov	r2, r3
 80099c2:	460b      	mov	r3, r1
 80099c4:	72fb      	strb	r3, [r7, #11]
 80099c6:	4613      	mov	r3, r2
 80099c8:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80099ca:	7afb      	ldrb	r3, [r7, #11]
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80099d2:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80099da:	893b      	ldrh	r3, [r7, #8]
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	460b      	mov	r3, r1
 80099e0:	2100      	movs	r1, #0
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f000 f812 	bl	8009a0c <USBH_GetDescriptor>
 80099e8:	4603      	mov	r3, r0
 80099ea:	75fb      	strb	r3, [r7, #23]
 80099ec:	7dfb      	ldrb	r3, [r7, #23]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d107      	bne.n	8009a02 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80099f8:	893a      	ldrh	r2, [r7, #8]
 80099fa:	6879      	ldr	r1, [r7, #4]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 fa37 	bl	8009e70 <USBH_ParseStringDesc>
  }
  return status;
 8009a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3718      	adds	r7, #24
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	607b      	str	r3, [r7, #4]
 8009a16:	460b      	mov	r3, r1
 8009a18:	72fb      	strb	r3, [r7, #11]
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	789b      	ldrb	r3, [r3, #2]
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d11c      	bne.n	8009a60 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009a26:	7afb      	ldrb	r3, [r7, #11]
 8009a28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009a2c:	b2da      	uxtb	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2206      	movs	r2, #6
 8009a36:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	893a      	ldrh	r2, [r7, #8]
 8009a3c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009a3e:	893b      	ldrh	r3, [r7, #8]
 8009a40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009a44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a48:	d104      	bne.n	8009a54 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f240 4209 	movw	r2, #1033	; 0x409
 8009a50:	829a      	strh	r2, [r3, #20]
 8009a52:	e002      	b.n	8009a5a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2200      	movs	r2, #0
 8009a58:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	8b3a      	ldrh	r2, [r7, #24]
 8009a5e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8009a60:	8b3b      	ldrh	r3, [r7, #24]
 8009a62:	461a      	mov	r2, r3
 8009a64:	6879      	ldr	r1, [r7, #4]
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f000 fa50 	bl	8009f0c <USBH_CtlReq>
 8009a6c:	4603      	mov	r3, r0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b082      	sub	sp, #8
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
 8009a7e:	460b      	mov	r3, r1
 8009a80:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	789b      	ldrb	r3, [r3, #2]
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d10f      	bne.n	8009aaa <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2205      	movs	r2, #5
 8009a94:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009a96:	78fb      	ldrb	r3, [r7, #3]
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009aaa:	2200      	movs	r2, #0
 8009aac:	2100      	movs	r1, #0
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 fa2c 	bl	8009f0c <USBH_CtlReq>
 8009ab4:	4603      	mov	r3, r0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3708      	adds	r7, #8
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b082      	sub	sp, #8
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	789b      	ldrb	r3, [r3, #2]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d10e      	bne.n	8009af0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2209      	movs	r2, #9
 8009adc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	887a      	ldrh	r2, [r7, #2]
 8009ae2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8009af0:	2200      	movs	r2, #0
 8009af2:	2100      	movs	r1, #0
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fa09 	bl	8009f0c <USBH_CtlReq>
 8009afa:	4603      	mov	r3, r0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	789b      	ldrb	r3, [r3, #2]
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d10f      	bne.n	8009b38 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2203      	movs	r2, #3
 8009b22:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009b24:	78fb      	ldrb	r3, [r7, #3]
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009b38:	2200      	movs	r2, #0
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 f9e5 	bl	8009f0c <USBH_CtlReq>
 8009b42:	4603      	mov	r3, r0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	460b      	mov	r3, r1
 8009b56:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	789b      	ldrb	r3, [r3, #2]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d10f      	bne.n	8009b80 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2202      	movs	r2, #2
 8009b64:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009b72:	78fb      	ldrb	r3, [r7, #3]
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8009b80:	2200      	movs	r2, #0
 8009b82:	2100      	movs	r1, #0
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f9c1 	bl	8009f0c <USBH_CtlReq>
 8009b8a:	4603      	mov	r3, r0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	781a      	ldrb	r2, [r3, #0]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	785a      	ldrb	r2, [r3, #1]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	3302      	adds	r3, #2
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	3303      	adds	r3, #3
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	021b      	lsls	r3, r3, #8
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	b29a      	uxth	r2, r3
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	791a      	ldrb	r2, [r3, #4]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	795a      	ldrb	r2, [r3, #5]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	799a      	ldrb	r2, [r3, #6]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	79da      	ldrb	r2, [r3, #7]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009bee:	88fb      	ldrh	r3, [r7, #6]
 8009bf0:	2b08      	cmp	r3, #8
 8009bf2:	d939      	bls.n	8009c68 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	3308      	adds	r3, #8
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	b29a      	uxth	r2, r3
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	3309      	adds	r3, #9
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	021b      	lsls	r3, r3, #8
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	330a      	adds	r3, #10
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	330b      	adds	r3, #11
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	021b      	lsls	r3, r3, #8
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	4313      	orrs	r3, r2
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	330c      	adds	r3, #12
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	b29a      	uxth	r2, r3
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	330d      	adds	r3, #13
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	021b      	lsls	r3, r3, #8
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	4313      	orrs	r3, r2
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	7b9a      	ldrb	r2, [r3, #14]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	7bda      	ldrb	r2, [r3, #15]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	7c1a      	ldrb	r2, [r3, #16]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	7c5a      	ldrb	r2, [r3, #17]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	745a      	strb	r2, [r3, #17]
  }
}
 8009c68:	bf00      	nop
 8009c6a:	3714      	adds	r7, #20
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b08a      	sub	sp, #40	; 0x28
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009c86:	2300      	movs	r3, #0
 8009c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	781a      	ldrb	r2, [r3, #0]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	785a      	ldrb	r2, [r3, #1]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	3302      	adds	r3, #2
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	b29a      	uxth	r2, r3
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	3303      	adds	r3, #3
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	021b      	lsls	r3, r3, #8
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	791a      	ldrb	r2, [r3, #4]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	795a      	ldrb	r2, [r3, #5]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	799a      	ldrb	r2, [r3, #6]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	79da      	ldrb	r2, [r3, #7]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	7a1a      	ldrb	r2, [r3, #8]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009cea:	88fb      	ldrh	r3, [r7, #6]
 8009cec:	2b09      	cmp	r3, #9
 8009cee:	d95f      	bls.n	8009db0 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009cf0:	2309      	movs	r3, #9
 8009cf2:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009cf8:	e051      	b.n	8009d9e <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009cfa:	f107 0316 	add.w	r3, r7, #22
 8009cfe:	4619      	mov	r1, r3
 8009d00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d02:	f000 f8e8 	bl	8009ed6 <USBH_GetNextDesc>
 8009d06:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0a:	785b      	ldrb	r3, [r3, #1]
 8009d0c:	2b04      	cmp	r3, #4
 8009d0e:	d146      	bne.n	8009d9e <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009d10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d14:	221a      	movs	r2, #26
 8009d16:	fb02 f303 	mul.w	r3, r2, r3
 8009d1a:	3308      	adds	r3, #8
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	4413      	add	r3, r2
 8009d20:	3302      	adds	r3, #2
 8009d22:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8009d24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d26:	69f8      	ldr	r0, [r7, #28]
 8009d28:	f000 f846 	bl	8009db8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009d32:	2300      	movs	r3, #0
 8009d34:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009d36:	e022      	b.n	8009d7e <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8009d38:	f107 0316 	add.w	r3, r7, #22
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d40:	f000 f8c9 	bl	8009ed6 <USBH_GetNextDesc>
 8009d44:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d48:	785b      	ldrb	r3, [r3, #1]
 8009d4a:	2b05      	cmp	r3, #5
 8009d4c:	d117      	bne.n	8009d7e <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d52:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009d56:	3201      	adds	r2, #1
 8009d58:	00d2      	lsls	r2, r2, #3
 8009d5a:	211a      	movs	r1, #26
 8009d5c:	fb01 f303 	mul.w	r3, r1, r3
 8009d60:	4413      	add	r3, r2
 8009d62:	3308      	adds	r3, #8
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	4413      	add	r3, r2
 8009d68:	3304      	adds	r3, #4
 8009d6a:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8009d6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d6e:	69b8      	ldr	r0, [r7, #24]
 8009d70:	f000 f851 	bl	8009e16 <USBH_ParseEPDesc>
            ep_ix++;
 8009d74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009d78:	3301      	adds	r3, #1
 8009d7a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	791b      	ldrb	r3, [r3, #4]
 8009d82:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d204      	bcs.n	8009d94 <USBH_ParseCfgDesc+0x120>
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	885a      	ldrh	r2, [r3, #2]
 8009d8e:	8afb      	ldrh	r3, [r7, #22]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d8d1      	bhi.n	8009d38 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009d94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d98:	3301      	adds	r3, #1
 8009d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009d9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d804      	bhi.n	8009db0 <USBH_ParseCfgDesc+0x13c>
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	885a      	ldrh	r2, [r3, #2]
 8009daa:	8afb      	ldrh	r3, [r7, #22]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d8a4      	bhi.n	8009cfa <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009db0:	bf00      	nop
 8009db2:	3728      	adds	r7, #40	; 0x28
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	781a      	ldrb	r2, [r3, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	785a      	ldrb	r2, [r3, #1]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	789a      	ldrb	r2, [r3, #2]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	78da      	ldrb	r2, [r3, #3]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	791a      	ldrb	r2, [r3, #4]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	795a      	ldrb	r2, [r3, #5]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	799a      	ldrb	r2, [r3, #6]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	79da      	ldrb	r2, [r3, #7]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	7a1a      	ldrb	r2, [r3, #8]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	721a      	strb	r2, [r3, #8]
}
 8009e0a:	bf00      	nop
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8009e16:	b480      	push	{r7}
 8009e18:	b083      	sub	sp, #12
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	781a      	ldrb	r2, [r3, #0]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	785a      	ldrb	r2, [r3, #1]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	789a      	ldrb	r2, [r3, #2]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	78da      	ldrb	r2, [r3, #3]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	3304      	adds	r3, #4
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	b29a      	uxth	r2, r3
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	3305      	adds	r3, #5
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	021b      	lsls	r3, r3, #8
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	4313      	orrs	r3, r2
 8009e56:	b29a      	uxth	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	799a      	ldrb	r2, [r3, #6]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	719a      	strb	r2, [r3, #6]
}
 8009e64:	bf00      	nop
 8009e66:	370c      	adds	r7, #12
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b087      	sub	sp, #28
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	3301      	adds	r3, #1
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	2b03      	cmp	r3, #3
 8009e86:	d120      	bne.n	8009eca <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	1e9a      	subs	r2, r3, #2
 8009e8e:	88fb      	ldrh	r3, [r7, #6]
 8009e90:	4293      	cmp	r3, r2
 8009e92:	bf28      	it	cs
 8009e94:	4613      	movcs	r3, r2
 8009e96:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	3302      	adds	r3, #2
 8009e9c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	82fb      	strh	r3, [r7, #22]
 8009ea2:	e00b      	b.n	8009ebc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009ea4:	8afb      	ldrh	r3, [r7, #22]
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	781a      	ldrb	r2, [r3, #0]
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009eb6:	8afb      	ldrh	r3, [r7, #22]
 8009eb8:	3302      	adds	r3, #2
 8009eba:	82fb      	strh	r3, [r7, #22]
 8009ebc:	8afa      	ldrh	r2, [r7, #22]
 8009ebe:	8abb      	ldrh	r3, [r7, #20]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d3ef      	bcc.n	8009ea4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	701a      	strb	r2, [r3, #0]
  }
}
 8009eca:	bf00      	nop
 8009ecc:	371c      	adds	r7, #28
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b085      	sub	sp, #20
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
 8009ede:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	881a      	ldrh	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	4413      	add	r3, r2
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4413      	add	r3, r2
 8009efc:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8009efe:	68fb      	ldr	r3, [r7, #12]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3714      	adds	r7, #20
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b086      	sub	sp, #24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	4613      	mov	r3, r2
 8009f18:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	789b      	ldrb	r3, [r3, #2]
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d002      	beq.n	8009f2c <USBH_CtlReq+0x20>
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	d00f      	beq.n	8009f4a <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8009f2a:	e034      	b.n	8009f96 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	88fa      	ldrh	r2, [r7, #6]
 8009f36:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2202      	movs	r2, #2
 8009f42:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8009f44:	2301      	movs	r3, #1
 8009f46:	75fb      	strb	r3, [r7, #23]
    break;
 8009f48:	e025      	b.n	8009f96 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f000 f828 	bl	8009fa0 <USBH_HandleControl>
 8009f50:	4603      	mov	r3, r0
 8009f52:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8009f54:	7dfb      	ldrb	r3, [r7, #23]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d108      	bne.n	8009f6c <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2200      	movs	r2, #0
 8009f64:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8009f66:	2300      	movs	r3, #0
 8009f68:	75fb      	strb	r3, [r7, #23]
    break;
 8009f6a:	e013      	b.n	8009f94 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8009f6c:	7dfb      	ldrb	r3, [r7, #23]
 8009f6e:	2b03      	cmp	r3, #3
 8009f70:	d108      	bne.n	8009f84 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2201      	movs	r2, #1
 8009f76:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	75fb      	strb	r3, [r7, #23]
    break;
 8009f82:	e007      	b.n	8009f94 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8009f84:	7dfb      	ldrb	r3, [r7, #23]
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	d104      	bne.n	8009f94 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8009f90:	2302      	movs	r3, #2
 8009f92:	75fb      	strb	r3, [r7, #23]
    break;
 8009f94:	bf00      	nop
  }
  return status;
 8009f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3718      	adds	r7, #24
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af02      	add	r7, sp, #8
 8009fa6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009fac:	2300      	movs	r3, #0
 8009fae:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	7e1b      	ldrb	r3, [r3, #24]
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	2b0a      	cmp	r3, #10
 8009fb8:	f200 814c 	bhi.w	800a254 <USBH_HandleControl+0x2b4>
 8009fbc:	a201      	add	r2, pc, #4	; (adr r2, 8009fc4 <USBH_HandleControl+0x24>)
 8009fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc2:	bf00      	nop
 8009fc4:	08009ff1 	.word	0x08009ff1
 8009fc8:	0800a00b 	.word	0x0800a00b
 8009fcc:	0800a075 	.word	0x0800a075
 8009fd0:	0800a09b 	.word	0x0800a09b
 8009fd4:	0800a0d3 	.word	0x0800a0d3
 8009fd8:	0800a0ff 	.word	0x0800a0ff
 8009fdc:	0800a151 	.word	0x0800a151
 8009fe0:	0800a173 	.word	0x0800a173
 8009fe4:	0800a1af 	.word	0x0800a1af
 8009fe8:	0800a1d7 	.word	0x0800a1d7
 8009fec:	0800a215 	.word	0x0800a215
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f103 0110 	add.w	r1, r3, #16
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	795b      	ldrb	r3, [r3, #5]
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 f939 	bl	800a274 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2202      	movs	r2, #2
 800a006:	761a      	strb	r2, [r3, #24]
    break;
 800a008:	e12f      	b.n	800a26a <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	795b      	ldrb	r3, [r3, #5]
 800a00e:	4619      	mov	r1, r3
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 fcb7 	bl	800a984 <USBH_LL_GetURBState>
 800a016:	4603      	mov	r3, r0
 800a018:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800a01a:	7bbb      	ldrb	r3, [r7, #14]
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d11e      	bne.n	800a05e <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	7c1b      	ldrb	r3, [r3, #16]
 800a024:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a028:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	8adb      	ldrh	r3, [r3, #22]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00a      	beq.n	800a048 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800a032:	7b7b      	ldrb	r3, [r7, #13]
 800a034:	2b80      	cmp	r3, #128	; 0x80
 800a036:	d103      	bne.n	800a040 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2203      	movs	r2, #3
 800a03c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a03e:	e10b      	b.n	800a258 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2205      	movs	r2, #5
 800a044:	761a      	strb	r2, [r3, #24]
    break;
 800a046:	e107      	b.n	800a258 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 800a048:	7b7b      	ldrb	r3, [r7, #13]
 800a04a:	2b80      	cmp	r3, #128	; 0x80
 800a04c:	d103      	bne.n	800a056 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2209      	movs	r2, #9
 800a052:	761a      	strb	r2, [r3, #24]
    break;
 800a054:	e100      	b.n	800a258 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2207      	movs	r2, #7
 800a05a:	761a      	strb	r2, [r3, #24]
    break;
 800a05c:	e0fc      	b.n	800a258 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a05e:	7bbb      	ldrb	r3, [r7, #14]
 800a060:	2b04      	cmp	r3, #4
 800a062:	d003      	beq.n	800a06c <USBH_HandleControl+0xcc>
 800a064:	7bbb      	ldrb	r3, [r7, #14]
 800a066:	2b02      	cmp	r3, #2
 800a068:	f040 80f6 	bne.w	800a258 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	220b      	movs	r2, #11
 800a070:	761a      	strb	r2, [r3, #24]
    break;
 800a072:	e0f1      	b.n	800a258 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a07a:	b29a      	uxth	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6899      	ldr	r1, [r3, #8]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	899a      	ldrh	r2, [r3, #12]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	791b      	ldrb	r3, [r3, #4]
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 f930 	bl	800a2f2 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2204      	movs	r2, #4
 800a096:	761a      	strb	r2, [r3, #24]
    break;
 800a098:	e0e7      	b.n	800a26a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	791b      	ldrb	r3, [r3, #4]
 800a09e:	4619      	mov	r1, r3
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 fc6f 	bl	800a984 <USBH_LL_GetURBState>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800a0aa:	7bbb      	ldrb	r3, [r7, #14]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d102      	bne.n	800a0b6 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2209      	movs	r2, #9
 800a0b4:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800a0b6:	7bbb      	ldrb	r3, [r7, #14]
 800a0b8:	2b05      	cmp	r3, #5
 800a0ba:	d102      	bne.n	800a0c2 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a0c0:	e0cc      	b.n	800a25c <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 800a0c2:	7bbb      	ldrb	r3, [r7, #14]
 800a0c4:	2b04      	cmp	r3, #4
 800a0c6:	f040 80c9 	bne.w	800a25c <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	220b      	movs	r2, #11
 800a0ce:	761a      	strb	r2, [r3, #24]
    break;
 800a0d0:	e0c4      	b.n	800a25c <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6899      	ldr	r1, [r3, #8]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	899a      	ldrh	r2, [r3, #12]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	7958      	ldrb	r0, [r3, #5]
 800a0de:	2301      	movs	r3, #1
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 f8df 	bl	800a2a8 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2206      	movs	r2, #6
 800a0fa:	761a      	strb	r2, [r3, #24]
    break;
 800a0fc:	e0b5      	b.n	800a26a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	795b      	ldrb	r3, [r3, #5]
 800a102:	4619      	mov	r1, r3
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 fc3d 	bl	800a984 <USBH_LL_GetURBState>
 800a10a:	4603      	mov	r3, r0
 800a10c:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800a10e:	7bbb      	ldrb	r3, [r7, #14]
 800a110:	2b01      	cmp	r3, #1
 800a112:	d103      	bne.n	800a11c <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2207      	movs	r2, #7
 800a118:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a11a:	e0a1      	b.n	800a260 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 800a11c:	7bbb      	ldrb	r3, [r7, #14]
 800a11e:	2b05      	cmp	r3, #5
 800a120:	d105      	bne.n	800a12e <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	220c      	movs	r2, #12
 800a126:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800a128:	2303      	movs	r3, #3
 800a12a:	73fb      	strb	r3, [r7, #15]
    break;
 800a12c:	e098      	b.n	800a260 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800a12e:	7bbb      	ldrb	r3, [r7, #14]
 800a130:	2b02      	cmp	r3, #2
 800a132:	d103      	bne.n	800a13c <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2205      	movs	r2, #5
 800a138:	761a      	strb	r2, [r3, #24]
    break;
 800a13a:	e091      	b.n	800a260 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 800a13c:	7bbb      	ldrb	r3, [r7, #14]
 800a13e:	2b04      	cmp	r3, #4
 800a140:	f040 808e 	bne.w	800a260 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	220b      	movs	r2, #11
 800a148:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800a14a:	2302      	movs	r3, #2
 800a14c:	73fb      	strb	r3, [r7, #15]
    break;
 800a14e:	e087      	b.n	800a260 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	791b      	ldrb	r3, [r3, #4]
 800a154:	2200      	movs	r2, #0
 800a156:	2100      	movs	r1, #0
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 f8ca 	bl	800a2f2 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a164:	b29a      	uxth	r2, r3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2208      	movs	r2, #8
 800a16e:	761a      	strb	r2, [r3, #24]

    break;
 800a170:	e07b      	b.n	800a26a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	791b      	ldrb	r3, [r3, #4]
 800a176:	4619      	mov	r1, r3
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fc03 	bl	800a984 <USBH_LL_GetURBState>
 800a17e:	4603      	mov	r3, r0
 800a180:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800a182:	7bbb      	ldrb	r3, [r7, #14]
 800a184:	2b01      	cmp	r3, #1
 800a186:	d105      	bne.n	800a194 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	220d      	movs	r2, #13
 800a18c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800a18e:	2300      	movs	r3, #0
 800a190:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a192:	e067      	b.n	800a264 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 800a194:	7bbb      	ldrb	r3, [r7, #14]
 800a196:	2b04      	cmp	r3, #4
 800a198:	d103      	bne.n	800a1a2 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	220b      	movs	r2, #11
 800a19e:	761a      	strb	r2, [r3, #24]
    break;
 800a1a0:	e060      	b.n	800a264 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 800a1a2:	7bbb      	ldrb	r3, [r7, #14]
 800a1a4:	2b05      	cmp	r3, #5
 800a1a6:	d15d      	bne.n	800a264 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 800a1a8:	2303      	movs	r3, #3
 800a1aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a1ac:	e05a      	b.n	800a264 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	795a      	ldrb	r2, [r3, #5]
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	2100      	movs	r1, #0
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 f873 	bl	800a2a8 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	220a      	movs	r2, #10
 800a1d2:	761a      	strb	r2, [r3, #24]
    break;
 800a1d4:	e049      	b.n	800a26a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	795b      	ldrb	r3, [r3, #5]
 800a1da:	4619      	mov	r1, r3
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 fbd1 	bl	800a984 <USBH_LL_GetURBState>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800a1e6:	7bbb      	ldrb	r3, [r7, #14]
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d105      	bne.n	800a1f8 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	220d      	movs	r2, #13
 800a1f4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800a1f6:	e037      	b.n	800a268 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800a1f8:	7bbb      	ldrb	r3, [r7, #14]
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d103      	bne.n	800a206 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2209      	movs	r2, #9
 800a202:	761a      	strb	r2, [r3, #24]
    break;
 800a204:	e030      	b.n	800a268 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800a206:	7bbb      	ldrb	r3, [r7, #14]
 800a208:	2b04      	cmp	r3, #4
 800a20a:	d12d      	bne.n	800a268 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	220b      	movs	r2, #11
 800a210:	761a      	strb	r2, [r3, #24]
    break;
 800a212:	e029      	b.n	800a268 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	7e5b      	ldrb	r3, [r3, #25]
 800a218:	3301      	adds	r3, #1
 800a21a:	b2da      	uxtb	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	765a      	strb	r2, [r3, #25]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	7e5b      	ldrb	r3, [r3, #25]
 800a224:	2b02      	cmp	r3, #2
 800a226:	d809      	bhi.n	800a23c <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 fabe 	bl	800a7aa <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2201      	movs	r2, #1
 800a232:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2201      	movs	r2, #1
 800a238:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800a23a:	e016      	b.n	800a26a <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a242:	2106      	movs	r1, #6
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800a24e:	2302      	movs	r3, #2
 800a250:	73fb      	strb	r3, [r7, #15]
    break;
 800a252:	e00a      	b.n	800a26a <USBH_HandleControl+0x2ca>

  default:
    break;
 800a254:	bf00      	nop
 800a256:	e008      	b.n	800a26a <USBH_HandleControl+0x2ca>
    break;
 800a258:	bf00      	nop
 800a25a:	e006      	b.n	800a26a <USBH_HandleControl+0x2ca>
    break;
 800a25c:	bf00      	nop
 800a25e:	e004      	b.n	800a26a <USBH_HandleControl+0x2ca>
    break;
 800a260:	bf00      	nop
 800a262:	e002      	b.n	800a26a <USBH_HandleControl+0x2ca>
    break;
 800a264:	bf00      	nop
 800a266:	e000      	b.n	800a26a <USBH_HandleControl+0x2ca>
    break;
 800a268:	bf00      	nop
  }
  return status;
 800a26a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <USBH_CtlSendSetup>:
 800a274:	b580      	push	{r7, lr}
 800a276:	b088      	sub	sp, #32
 800a278:	af04      	add	r7, sp, #16
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	4613      	mov	r3, r2
 800a280:	71fb      	strb	r3, [r7, #7]
 800a282:	79f9      	ldrb	r1, [r7, #7]
 800a284:	2300      	movs	r3, #0
 800a286:	9303      	str	r3, [sp, #12]
 800a288:	2308      	movs	r3, #8
 800a28a:	9302      	str	r3, [sp, #8]
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	9301      	str	r3, [sp, #4]
 800a290:	2300      	movs	r3, #0
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	2300      	movs	r3, #0
 800a296:	2200      	movs	r2, #0
 800a298:	68f8      	ldr	r0, [r7, #12]
 800a29a:	f000 fb42 	bl	800a922 <USBH_LL_SubmitURB>
 800a29e:	2300      	movs	r3, #0
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3710      	adds	r7, #16
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <USBH_CtlSendData>:
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b088      	sub	sp, #32
 800a2ac:	af04      	add	r7, sp, #16
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	80fb      	strh	r3, [r7, #6]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	717b      	strb	r3, [r7, #5]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d001      	beq.n	800a2cc <USBH_CtlSendData+0x24>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	763b      	strb	r3, [r7, #24]
 800a2cc:	7979      	ldrb	r1, [r7, #5]
 800a2ce:	7e3b      	ldrb	r3, [r7, #24]
 800a2d0:	9303      	str	r3, [sp, #12]
 800a2d2:	88fb      	ldrh	r3, [r7, #6]
 800a2d4:	9302      	str	r3, [sp, #8]
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	9301      	str	r3, [sp, #4]
 800a2da:	2301      	movs	r3, #1
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	2300      	movs	r3, #0
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f000 fb1d 	bl	800a922 <USBH_LL_SubmitURB>
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <USBH_CtlReceiveData>:
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b088      	sub	sp, #32
 800a2f6:	af04      	add	r7, sp, #16
 800a2f8:	60f8      	str	r0, [r7, #12]
 800a2fa:	60b9      	str	r1, [r7, #8]
 800a2fc:	4611      	mov	r1, r2
 800a2fe:	461a      	mov	r2, r3
 800a300:	460b      	mov	r3, r1
 800a302:	80fb      	strh	r3, [r7, #6]
 800a304:	4613      	mov	r3, r2
 800a306:	717b      	strb	r3, [r7, #5]
 800a308:	7979      	ldrb	r1, [r7, #5]
 800a30a:	2300      	movs	r3, #0
 800a30c:	9303      	str	r3, [sp, #12]
 800a30e:	88fb      	ldrh	r3, [r7, #6]
 800a310:	9302      	str	r3, [sp, #8]
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	9301      	str	r3, [sp, #4]
 800a316:	2301      	movs	r3, #1
 800a318:	9300      	str	r3, [sp, #0]
 800a31a:	2300      	movs	r3, #0
 800a31c:	2201      	movs	r2, #1
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f000 faff 	bl	800a922 <USBH_LL_SubmitURB>
 800a324:	2300      	movs	r3, #0
 800a326:	4618      	mov	r0, r3
 800a328:	3710      	adds	r7, #16
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <USBH_BulkSendData>:
 800a32e:	b580      	push	{r7, lr}
 800a330:	b088      	sub	sp, #32
 800a332:	af04      	add	r7, sp, #16
 800a334:	60f8      	str	r0, [r7, #12]
 800a336:	60b9      	str	r1, [r7, #8]
 800a338:	4611      	mov	r1, r2
 800a33a:	461a      	mov	r2, r3
 800a33c:	460b      	mov	r3, r1
 800a33e:	80fb      	strh	r3, [r7, #6]
 800a340:	4613      	mov	r3, r2
 800a342:	717b      	strb	r3, [r7, #5]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d001      	beq.n	800a352 <USBH_BulkSendData+0x24>
 800a34e:	2300      	movs	r3, #0
 800a350:	763b      	strb	r3, [r7, #24]
 800a352:	7979      	ldrb	r1, [r7, #5]
 800a354:	7e3b      	ldrb	r3, [r7, #24]
 800a356:	9303      	str	r3, [sp, #12]
 800a358:	88fb      	ldrh	r3, [r7, #6]
 800a35a:	9302      	str	r3, [sp, #8]
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	9301      	str	r3, [sp, #4]
 800a360:	2301      	movs	r3, #1
 800a362:	9300      	str	r3, [sp, #0]
 800a364:	2302      	movs	r3, #2
 800a366:	2200      	movs	r2, #0
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f000 fada 	bl	800a922 <USBH_LL_SubmitURB>
 800a36e:	2300      	movs	r3, #0
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <USBH_BulkReceiveData>:
 800a378:	b580      	push	{r7, lr}
 800a37a:	b088      	sub	sp, #32
 800a37c:	af04      	add	r7, sp, #16
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	4611      	mov	r1, r2
 800a384:	461a      	mov	r2, r3
 800a386:	460b      	mov	r3, r1
 800a388:	80fb      	strh	r3, [r7, #6]
 800a38a:	4613      	mov	r3, r2
 800a38c:	717b      	strb	r3, [r7, #5]
 800a38e:	7979      	ldrb	r1, [r7, #5]
 800a390:	2300      	movs	r3, #0
 800a392:	9303      	str	r3, [sp, #12]
 800a394:	88fb      	ldrh	r3, [r7, #6]
 800a396:	9302      	str	r3, [sp, #8]
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	9301      	str	r3, [sp, #4]
 800a39c:	2301      	movs	r3, #1
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f000 fabc 	bl	800a922 <USBH_LL_SubmitURB>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3710      	adds	r7, #16
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <USBH_OpenPipe>:
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b086      	sub	sp, #24
 800a3b8:	af04      	add	r7, sp, #16
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	4608      	mov	r0, r1
 800a3be:	4611      	mov	r1, r2
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	70fb      	strb	r3, [r7, #3]
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	70bb      	strb	r3, [r7, #2]
 800a3ca:	4613      	mov	r3, r2
 800a3cc:	707b      	strb	r3, [r7, #1]
 800a3ce:	7878      	ldrb	r0, [r7, #1]
 800a3d0:	78ba      	ldrb	r2, [r7, #2]
 800a3d2:	78f9      	ldrb	r1, [r7, #3]
 800a3d4:	8b3b      	ldrh	r3, [r7, #24]
 800a3d6:	9302      	str	r3, [sp, #8]
 800a3d8:	7d3b      	ldrb	r3, [r7, #20]
 800a3da:	9301      	str	r3, [sp, #4]
 800a3dc:	7c3b      	ldrb	r3, [r7, #16]
 800a3de:	9300      	str	r3, [sp, #0]
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 fa4f 	bl	800a886 <USBH_LL_OpenPipe>
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <USBH_ClosePipe>:
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b082      	sub	sp, #8
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	70fb      	strb	r3, [r7, #3]
 800a3fe:	78fb      	ldrb	r3, [r7, #3]
 800a400:	4619      	mov	r1, r3
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 fa6e 	bl	800a8e4 <USBH_LL_ClosePipe>
 800a408:	2300      	movs	r3, #0
 800a40a:	4618      	mov	r0, r3
 800a40c:	3708      	adds	r7, #8
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <USBH_AllocPipe>:
 800a412:	b580      	push	{r7, lr}
 800a414:	b084      	sub	sp, #16
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
 800a41a:	460b      	mov	r3, r1
 800a41c:	70fb      	strb	r3, [r7, #3]
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 f831 	bl	800a486 <USBH_GetFreePipe>
 800a424:	4603      	mov	r3, r0
 800a426:	81fb      	strh	r3, [r7, #14]
 800a428:	89fb      	ldrh	r3, [r7, #14]
 800a42a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a42e:	4293      	cmp	r3, r2
 800a430:	d007      	beq.n	800a442 <USBH_AllocPipe+0x30>
 800a432:	78fb      	ldrb	r3, [r7, #3]
 800a434:	89fa      	ldrh	r2, [r7, #14]
 800a436:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	32e0      	adds	r2, #224	; 0xe0
 800a43e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a442:	89fb      	ldrh	r3, [r7, #14]
 800a444:	b2db      	uxtb	r3, r3
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <USBH_FreePipe>:
 800a44e:	b480      	push	{r7}
 800a450:	b083      	sub	sp, #12
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
 800a456:	460b      	mov	r3, r1
 800a458:	70fb      	strb	r3, [r7, #3]
 800a45a:	78fb      	ldrb	r3, [r7, #3]
 800a45c:	2b0a      	cmp	r3, #10
 800a45e:	d80b      	bhi.n	800a478 <USBH_FreePipe+0x2a>
 800a460:	78fa      	ldrb	r2, [r7, #3]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	32e0      	adds	r2, #224	; 0xe0
 800a466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a46a:	78fa      	ldrb	r2, [r7, #3]
 800a46c:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	32e0      	adds	r2, #224	; 0xe0
 800a474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a478:	2300      	movs	r3, #0
 800a47a:	4618      	mov	r0, r3
 800a47c:	370c      	adds	r7, #12
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr

0800a486 <USBH_GetFreePipe>:
 800a486:	b480      	push	{r7}
 800a488:	b085      	sub	sp, #20
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
 800a48e:	2300      	movs	r3, #0
 800a490:	73fb      	strb	r3, [r7, #15]
 800a492:	2300      	movs	r3, #0
 800a494:	73fb      	strb	r3, [r7, #15]
 800a496:	e00e      	b.n	800a4b6 <USBH_GetFreePipe+0x30>
 800a498:	7bfa      	ldrb	r2, [r7, #15]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	32e0      	adds	r2, #224	; 0xe0
 800a49e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d102      	bne.n	800a4b0 <USBH_GetFreePipe+0x2a>
 800a4aa:	7bfb      	ldrb	r3, [r7, #15]
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	e007      	b.n	800a4c0 <USBH_GetFreePipe+0x3a>
 800a4b0:	7bfb      	ldrb	r3, [r7, #15]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	73fb      	strb	r3, [r7, #15]
 800a4b6:	7bfb      	ldrb	r3, [r7, #15]
 800a4b8:	2b0a      	cmp	r3, #10
 800a4ba:	d9ed      	bls.n	800a498 <USBH_GetFreePipe+0x12>
 800a4bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3714      	adds	r7, #20
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <MX_USB_HOST_Init>:
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	490e      	ldr	r1, [pc, #56]	; (800a50c <MX_USB_HOST_Init+0x40>)
 800a4d4:	480e      	ldr	r0, [pc, #56]	; (800a510 <MX_USB_HOST_Init+0x44>)
 800a4d6:	f7fe fdbb 	bl	8009050 <USBH_Init>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d001      	beq.n	800a4e4 <MX_USB_HOST_Init+0x18>
 800a4e0:	f7f6 fe28 	bl	8001134 <Error_Handler>
 800a4e4:	490b      	ldr	r1, [pc, #44]	; (800a514 <MX_USB_HOST_Init+0x48>)
 800a4e6:	480a      	ldr	r0, [pc, #40]	; (800a510 <MX_USB_HOST_Init+0x44>)
 800a4e8:	f7fe fe25 	bl	8009136 <USBH_RegisterClass>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d001      	beq.n	800a4f6 <MX_USB_HOST_Init+0x2a>
 800a4f2:	f7f6 fe1f 	bl	8001134 <Error_Handler>
 800a4f6:	4806      	ldr	r0, [pc, #24]	; (800a510 <MX_USB_HOST_Init+0x44>)
 800a4f8:	f7fe feaa 	bl	8009250 <USBH_Start>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d001      	beq.n	800a506 <MX_USB_HOST_Init+0x3a>
 800a502:	f7f6 fe17 	bl	8001134 <Error_Handler>
 800a506:	bf00      	nop
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	0800a52d 	.word	0x0800a52d
 800a510:	20000814 	.word	0x20000814
 800a514:	20000028 	.word	0x20000028

0800a518 <MX_USB_HOST_Process>:
 800a518:	b580      	push	{r7, lr}
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	4802      	ldr	r0, [pc, #8]	; (800a528 <MX_USB_HOST_Process+0x10>)
 800a51e:	f7fe fea7 	bl	8009270 <USBH_Process>
 800a522:	bf00      	nop
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	20000814 	.word	0x20000814

0800a52c <USBH_UserProcess>:
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	460b      	mov	r3, r1
 800a536:	70fb      	strb	r3, [r7, #3]
 800a538:	78fb      	ldrb	r3, [r7, #3]
 800a53a:	3b01      	subs	r3, #1
 800a53c:	2b04      	cmp	r3, #4
 800a53e:	d819      	bhi.n	800a574 <USBH_UserProcess+0x48>
 800a540:	a201      	add	r2, pc, #4	; (adr r2, 800a548 <USBH_UserProcess+0x1c>)
 800a542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a546:	bf00      	nop
 800a548:	0800a575 	.word	0x0800a575
 800a54c:	0800a565 	.word	0x0800a565
 800a550:	0800a575 	.word	0x0800a575
 800a554:	0800a56d 	.word	0x0800a56d
 800a558:	0800a55d 	.word	0x0800a55d
 800a55c:	4b09      	ldr	r3, [pc, #36]	; (800a584 <USBH_UserProcess+0x58>)
 800a55e:	2203      	movs	r2, #3
 800a560:	701a      	strb	r2, [r3, #0]
 800a562:	e008      	b.n	800a576 <USBH_UserProcess+0x4a>
 800a564:	4b07      	ldr	r3, [pc, #28]	; (800a584 <USBH_UserProcess+0x58>)
 800a566:	2202      	movs	r2, #2
 800a568:	701a      	strb	r2, [r3, #0]
 800a56a:	e004      	b.n	800a576 <USBH_UserProcess+0x4a>
 800a56c:	4b05      	ldr	r3, [pc, #20]	; (800a584 <USBH_UserProcess+0x58>)
 800a56e:	2201      	movs	r2, #1
 800a570:	701a      	strb	r2, [r3, #0]
 800a572:	e000      	b.n	800a576 <USBH_UserProcess+0x4a>
 800a574:	bf00      	nop
 800a576:	bf00      	nop
 800a578:	370c      	adds	r7, #12
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	200004dc 	.word	0x200004dc

0800a588 <HAL_HCD_MspInit>:
 800a588:	b580      	push	{r7, lr}
 800a58a:	b08a      	sub	sp, #40	; 0x28
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	f107 0314 	add.w	r3, r7, #20
 800a594:	2200      	movs	r2, #0
 800a596:	601a      	str	r2, [r3, #0]
 800a598:	605a      	str	r2, [r3, #4]
 800a59a:	609a      	str	r2, [r3, #8]
 800a59c:	60da      	str	r2, [r3, #12]
 800a59e:	611a      	str	r2, [r3, #16]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5a8:	d14e      	bne.n	800a648 <HAL_HCD_MspInit+0xc0>
 800a5aa:	4b29      	ldr	r3, [pc, #164]	; (800a650 <HAL_HCD_MspInit+0xc8>)
 800a5ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ae:	4a28      	ldr	r2, [pc, #160]	; (800a650 <HAL_HCD_MspInit+0xc8>)
 800a5b0:	f043 0301 	orr.w	r3, r3, #1
 800a5b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a5b6:	4b26      	ldr	r3, [pc, #152]	; (800a650 <HAL_HCD_MspInit+0xc8>)
 800a5b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ba:	f003 0301 	and.w	r3, r3, #1
 800a5be:	613b      	str	r3, [r7, #16]
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a5c6:	617b      	str	r3, [r7, #20]
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	61bb      	str	r3, [r7, #24]
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	61fb      	str	r3, [r7, #28]
 800a5d0:	2303      	movs	r3, #3
 800a5d2:	623b      	str	r3, [r7, #32]
 800a5d4:	230a      	movs	r3, #10
 800a5d6:	627b      	str	r3, [r7, #36]	; 0x24
 800a5d8:	f107 0314 	add.w	r3, r7, #20
 800a5dc:	4619      	mov	r1, r3
 800a5de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a5e2:	f7f7 fe15 	bl	8002210 <HAL_GPIO_Init>
 800a5e6:	4b1a      	ldr	r3, [pc, #104]	; (800a650 <HAL_HCD_MspInit+0xc8>)
 800a5e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ea:	4a19      	ldr	r2, [pc, #100]	; (800a650 <HAL_HCD_MspInit+0xc8>)
 800a5ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a5f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a5f2:	4b17      	ldr	r3, [pc, #92]	; (800a650 <HAL_HCD_MspInit+0xc8>)
 800a5f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a5fa:	60fb      	str	r3, [r7, #12]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	4b14      	ldr	r3, [pc, #80]	; (800a650 <HAL_HCD_MspInit+0xc8>)
 800a600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a606:	2b00      	cmp	r3, #0
 800a608:	d114      	bne.n	800a634 <HAL_HCD_MspInit+0xac>
 800a60a:	4b11      	ldr	r3, [pc, #68]	; (800a650 <HAL_HCD_MspInit+0xc8>)
 800a60c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a60e:	4a10      	ldr	r2, [pc, #64]	; (800a650 <HAL_HCD_MspInit+0xc8>)
 800a610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a614:	6593      	str	r3, [r2, #88]	; 0x58
 800a616:	4b0e      	ldr	r3, [pc, #56]	; (800a650 <HAL_HCD_MspInit+0xc8>)
 800a618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a61a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a61e:	60bb      	str	r3, [r7, #8]
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	f7fa f947 	bl	80048b4 <HAL_PWREx_EnableVddUSB>
 800a626:	4b0a      	ldr	r3, [pc, #40]	; (800a650 <HAL_HCD_MspInit+0xc8>)
 800a628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a62a:	4a09      	ldr	r2, [pc, #36]	; (800a650 <HAL_HCD_MspInit+0xc8>)
 800a62c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a630:	6593      	str	r3, [r2, #88]	; 0x58
 800a632:	e001      	b.n	800a638 <HAL_HCD_MspInit+0xb0>
 800a634:	f7fa f93e 	bl	80048b4 <HAL_PWREx_EnableVddUSB>
 800a638:	2200      	movs	r2, #0
 800a63a:	2100      	movs	r1, #0
 800a63c:	2043      	movs	r0, #67	; 0x43
 800a63e:	f7f7 fdb0 	bl	80021a2 <HAL_NVIC_SetPriority>
 800a642:	2043      	movs	r0, #67	; 0x43
 800a644:	f7f7 fdc9 	bl	80021da <HAL_NVIC_EnableIRQ>
 800a648:	bf00      	nop
 800a64a:	3728      	adds	r7, #40	; 0x28
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	40021000 	.word	0x40021000

0800a654 <HAL_HCD_SOF_Callback>:
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a662:	4618      	mov	r0, r3
 800a664:	f7ff f8b5 	bl	80097d2 <USBH_LL_IncTimer>
 800a668:	bf00      	nop
 800a66a:	3708      	adds	r7, #8
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <HAL_HCD_Connect_Callback>:
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a67e:	4618      	mov	r0, r3
 800a680:	f7ff f8fa 	bl	8009878 <USBH_LL_Connect>
 800a684:	bf00      	nop
 800a686:	3708      	adds	r7, #8
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <HAL_HCD_Disconnect_Callback>:
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7ff f912 	bl	80098c4 <USBH_LL_Disconnect>
 800a6a0:	bf00      	nop
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <HAL_HCD_HC_NotifyURBChange_Callback>:
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	70fb      	strb	r3, [r7, #3]
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	70bb      	strb	r3, [r7, #2]
 800a6b8:	bf00      	nop
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <HAL_HCD_PortEnabled_Callback>:
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7ff f8a7 	bl	8009826 <USBH_LL_PortEnabled>
 800a6d8:	bf00      	nop
 800a6da:	3708      	adds	r7, #8
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <HAL_HCD_PortDisabled_Callback>:
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7ff f8a7 	bl	8009842 <USBH_LL_PortDisabled>
 800a6f4:	bf00      	nop
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <USBH_LL_Init>:
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d12a      	bne.n	800a764 <USBH_LL_Init+0x68>
 800a70e:	4a18      	ldr	r2, [pc, #96]	; (800a770 <USBH_LL_Init+0x74>)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4a15      	ldr	r2, [pc, #84]	; (800a770 <USBH_LL_Init+0x74>)
 800a71a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
 800a71e:	4b14      	ldr	r3, [pc, #80]	; (800a770 <USBH_LL_Init+0x74>)
 800a720:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a724:	601a      	str	r2, [r3, #0]
 800a726:	4b12      	ldr	r3, [pc, #72]	; (800a770 <USBH_LL_Init+0x74>)
 800a728:	2208      	movs	r2, #8
 800a72a:	609a      	str	r2, [r3, #8]
 800a72c:	4b10      	ldr	r3, [pc, #64]	; (800a770 <USBH_LL_Init+0x74>)
 800a72e:	2201      	movs	r2, #1
 800a730:	60da      	str	r2, [r3, #12]
 800a732:	4b0f      	ldr	r3, [pc, #60]	; (800a770 <USBH_LL_Init+0x74>)
 800a734:	2200      	movs	r2, #0
 800a736:	611a      	str	r2, [r3, #16]
 800a738:	4b0d      	ldr	r3, [pc, #52]	; (800a770 <USBH_LL_Init+0x74>)
 800a73a:	2202      	movs	r2, #2
 800a73c:	619a      	str	r2, [r3, #24]
 800a73e:	4b0c      	ldr	r3, [pc, #48]	; (800a770 <USBH_LL_Init+0x74>)
 800a740:	2200      	movs	r2, #0
 800a742:	61da      	str	r2, [r3, #28]
 800a744:	480a      	ldr	r0, [pc, #40]	; (800a770 <USBH_LL_Init+0x74>)
 800a746:	f7f7 ff3b 	bl	80025c0 <HAL_HCD_Init>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d001      	beq.n	800a754 <USBH_LL_Init+0x58>
 800a750:	f7f6 fcf0 	bl	8001134 <Error_Handler>
 800a754:	4806      	ldr	r0, [pc, #24]	; (800a770 <USBH_LL_Init+0x74>)
 800a756:	f7f8 fb33 	bl	8002dc0 <HAL_HCD_GetCurrentFrame>
 800a75a:	4603      	mov	r3, r0
 800a75c:	4619      	mov	r1, r3
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f7ff f828 	bl	80097b4 <USBH_LL_SetTimer>
 800a764:	2300      	movs	r3, #0
 800a766:	4618      	mov	r0, r3
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	20000be0 	.word	0x20000be0

0800a774 <USBH_LL_Start>:
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	2300      	movs	r3, #0
 800a77e:	73fb      	strb	r3, [r7, #15]
 800a780:	2300      	movs	r3, #0
 800a782:	73bb      	strb	r3, [r7, #14]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7f8 faa0 	bl	8002cd0 <HAL_HCD_Start>
 800a790:	4603      	mov	r3, r0
 800a792:	73fb      	strb	r3, [r7, #15]
 800a794:	7bfb      	ldrb	r3, [r7, #15]
 800a796:	4618      	mov	r0, r3
 800a798:	f000 f95c 	bl	800aa54 <USBH_Get_USB_Status>
 800a79c:	4603      	mov	r3, r0
 800a79e:	73bb      	strb	r3, [r7, #14]
 800a7a0:	7bbb      	ldrb	r3, [r7, #14]
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <USBH_LL_Stop>:
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b084      	sub	sp, #16
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	73fb      	strb	r3, [r7, #15]
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	73bb      	strb	r3, [r7, #14]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7f8 faa8 	bl	8002d16 <HAL_HCD_Stop>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	73fb      	strb	r3, [r7, #15]
 800a7ca:	7bfb      	ldrb	r3, [r7, #15]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 f941 	bl	800aa54 <USBH_Get_USB_Status>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	73bb      	strb	r3, [r7, #14]
 800a7d6:	7bbb      	ldrb	r3, [r7, #14]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3710      	adds	r7, #16
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <USBH_LL_GetSpeed>:
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	73fb      	strb	r3, [r7, #15]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7f8 faf2 	bl	8002ddc <HAL_HCD_GetCurrentSpeed>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d007      	beq.n	800a80e <USBH_LL_GetSpeed+0x2e>
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d302      	bcc.n	800a808 <USBH_LL_GetSpeed+0x28>
 800a802:	2b02      	cmp	r3, #2
 800a804:	d006      	beq.n	800a814 <USBH_LL_GetSpeed+0x34>
 800a806:	e008      	b.n	800a81a <USBH_LL_GetSpeed+0x3a>
 800a808:	2300      	movs	r3, #0
 800a80a:	73fb      	strb	r3, [r7, #15]
 800a80c:	e008      	b.n	800a820 <USBH_LL_GetSpeed+0x40>
 800a80e:	2301      	movs	r3, #1
 800a810:	73fb      	strb	r3, [r7, #15]
 800a812:	e005      	b.n	800a820 <USBH_LL_GetSpeed+0x40>
 800a814:	2302      	movs	r3, #2
 800a816:	73fb      	strb	r3, [r7, #15]
 800a818:	e002      	b.n	800a820 <USBH_LL_GetSpeed+0x40>
 800a81a:	2301      	movs	r3, #1
 800a81c:	73fb      	strb	r3, [r7, #15]
 800a81e:	bf00      	nop
 800a820:	7bfb      	ldrb	r3, [r7, #15]
 800a822:	4618      	mov	r0, r3
 800a824:	3710      	adds	r7, #16
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <USBH_LL_ResetPort>:
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b084      	sub	sp, #16
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
 800a832:	2300      	movs	r3, #0
 800a834:	73fb      	strb	r3, [r7, #15]
 800a836:	2300      	movs	r3, #0
 800a838:	73bb      	strb	r3, [r7, #14]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a840:	4618      	mov	r0, r3
 800a842:	f7f8 fa85 	bl	8002d50 <HAL_HCD_ResetPort>
 800a846:	4603      	mov	r3, r0
 800a848:	73fb      	strb	r3, [r7, #15]
 800a84a:	7bfb      	ldrb	r3, [r7, #15]
 800a84c:	4618      	mov	r0, r3
 800a84e:	f000 f901 	bl	800aa54 <USBH_Get_USB_Status>
 800a852:	4603      	mov	r3, r0
 800a854:	73bb      	strb	r3, [r7, #14]
 800a856:	7bbb      	ldrb	r3, [r7, #14]
 800a858:	4618      	mov	r0, r3
 800a85a:	3710      	adds	r7, #16
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <USBH_LL_GetLastXferSize>:
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	460b      	mov	r3, r1
 800a86a:	70fb      	strb	r3, [r7, #3]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a872:	78fa      	ldrb	r2, [r7, #3]
 800a874:	4611      	mov	r1, r2
 800a876:	4618      	mov	r0, r3
 800a878:	f7f8 fa8d 	bl	8002d96 <HAL_HCD_HC_GetXferCount>
 800a87c:	4603      	mov	r3, r0
 800a87e:	4618      	mov	r0, r3
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <USBH_LL_OpenPipe>:
 800a886:	b590      	push	{r4, r7, lr}
 800a888:	b089      	sub	sp, #36	; 0x24
 800a88a:	af04      	add	r7, sp, #16
 800a88c:	6078      	str	r0, [r7, #4]
 800a88e:	4608      	mov	r0, r1
 800a890:	4611      	mov	r1, r2
 800a892:	461a      	mov	r2, r3
 800a894:	4603      	mov	r3, r0
 800a896:	70fb      	strb	r3, [r7, #3]
 800a898:	460b      	mov	r3, r1
 800a89a:	70bb      	strb	r3, [r7, #2]
 800a89c:	4613      	mov	r3, r2
 800a89e:	707b      	strb	r3, [r7, #1]
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	73fb      	strb	r3, [r7, #15]
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	73bb      	strb	r3, [r7, #14]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800a8ae:	787c      	ldrb	r4, [r7, #1]
 800a8b0:	78ba      	ldrb	r2, [r7, #2]
 800a8b2:	78f9      	ldrb	r1, [r7, #3]
 800a8b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a8b6:	9302      	str	r3, [sp, #8]
 800a8b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a8bc:	9301      	str	r3, [sp, #4]
 800a8be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	4623      	mov	r3, r4
 800a8c6:	f7f7 fedd 	bl	8002684 <HAL_HCD_HC_Init>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	73fb      	strb	r3, [r7, #15]
 800a8ce:	7bfb      	ldrb	r3, [r7, #15]
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f000 f8bf 	bl	800aa54 <USBH_Get_USB_Status>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	73bb      	strb	r3, [r7, #14]
 800a8da:	7bbb      	ldrb	r3, [r7, #14]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3714      	adds	r7, #20
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd90      	pop	{r4, r7, pc}

0800a8e4 <USBH_LL_ClosePipe>:
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	70fb      	strb	r3, [r7, #3]
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	73fb      	strb	r3, [r7, #15]
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	73bb      	strb	r3, [r7, #14]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a8fe:	78fa      	ldrb	r2, [r7, #3]
 800a900:	4611      	mov	r1, r2
 800a902:	4618      	mov	r0, r3
 800a904:	f7f7 ff56 	bl	80027b4 <HAL_HCD_HC_Halt>
 800a908:	4603      	mov	r3, r0
 800a90a:	73fb      	strb	r3, [r7, #15]
 800a90c:	7bfb      	ldrb	r3, [r7, #15]
 800a90e:	4618      	mov	r0, r3
 800a910:	f000 f8a0 	bl	800aa54 <USBH_Get_USB_Status>
 800a914:	4603      	mov	r3, r0
 800a916:	73bb      	strb	r3, [r7, #14]
 800a918:	7bbb      	ldrb	r3, [r7, #14]
 800a91a:	4618      	mov	r0, r3
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <USBH_LL_SubmitURB>:
 800a922:	b590      	push	{r4, r7, lr}
 800a924:	b089      	sub	sp, #36	; 0x24
 800a926:	af04      	add	r7, sp, #16
 800a928:	6078      	str	r0, [r7, #4]
 800a92a:	4608      	mov	r0, r1
 800a92c:	4611      	mov	r1, r2
 800a92e:	461a      	mov	r2, r3
 800a930:	4603      	mov	r3, r0
 800a932:	70fb      	strb	r3, [r7, #3]
 800a934:	460b      	mov	r3, r1
 800a936:	70bb      	strb	r3, [r7, #2]
 800a938:	4613      	mov	r3, r2
 800a93a:	707b      	strb	r3, [r7, #1]
 800a93c:	2300      	movs	r3, #0
 800a93e:	73fb      	strb	r3, [r7, #15]
 800a940:	2300      	movs	r3, #0
 800a942:	73bb      	strb	r3, [r7, #14]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800a94a:	787c      	ldrb	r4, [r7, #1]
 800a94c:	78ba      	ldrb	r2, [r7, #2]
 800a94e:	78f9      	ldrb	r1, [r7, #3]
 800a950:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a954:	9303      	str	r3, [sp, #12]
 800a956:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a958:	9302      	str	r3, [sp, #8]
 800a95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95c:	9301      	str	r3, [sp, #4]
 800a95e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	4623      	mov	r3, r4
 800a966:	f7f7 ff49 	bl	80027fc <HAL_HCD_HC_SubmitRequest>
 800a96a:	4603      	mov	r3, r0
 800a96c:	73fb      	strb	r3, [r7, #15]
 800a96e:	7bfb      	ldrb	r3, [r7, #15]
 800a970:	4618      	mov	r0, r3
 800a972:	f000 f86f 	bl	800aa54 <USBH_Get_USB_Status>
 800a976:	4603      	mov	r3, r0
 800a978:	73bb      	strb	r3, [r7, #14]
 800a97a:	7bbb      	ldrb	r3, [r7, #14]
 800a97c:	4618      	mov	r0, r3
 800a97e:	3714      	adds	r7, #20
 800a980:	46bd      	mov	sp, r7
 800a982:	bd90      	pop	{r4, r7, pc}

0800a984 <USBH_LL_GetURBState>:
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	460b      	mov	r3, r1
 800a98e:	70fb      	strb	r3, [r7, #3]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a996:	78fa      	ldrb	r2, [r7, #3]
 800a998:	4611      	mov	r1, r2
 800a99a:	4618      	mov	r0, r3
 800a99c:	f7f8 f9e6 	bl	8002d6c <HAL_HCD_HC_GetURBState>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3708      	adds	r7, #8
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <USBH_LL_DriverVBUS>:
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b082      	sub	sp, #8
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	70fb      	strb	r3, [r7, #3]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d103      	bne.n	800a9c8 <USBH_LL_DriverVBUS+0x1e>
 800a9c0:	78fb      	ldrb	r3, [r7, #3]
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f000 f872 	bl	800aaac <MX_DriverVbusFS>
 800a9c8:	20c8      	movs	r0, #200	; 0xc8
 800a9ca:	f7f7 faed 	bl	8001fa8 <HAL_Delay>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <USBH_LL_SetToggle>:
 800a9d8:	b480      	push	{r7}
 800a9da:	b085      	sub	sp, #20
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	70fb      	strb	r3, [r7, #3]
 800a9e4:	4613      	mov	r3, r2
 800a9e6:	70bb      	strb	r3, [r7, #2]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a9ee:	60fb      	str	r3, [r7, #12]
 800a9f0:	78fa      	ldrb	r2, [r7, #3]
 800a9f2:	68f9      	ldr	r1, [r7, #12]
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	4413      	add	r3, r2
 800a9fa:	00db      	lsls	r3, r3, #3
 800a9fc:	440b      	add	r3, r1
 800a9fe:	333b      	adds	r3, #59	; 0x3b
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d00a      	beq.n	800aa1c <USBH_LL_SetToggle+0x44>
 800aa06:	78fa      	ldrb	r2, [r7, #3]
 800aa08:	68f9      	ldr	r1, [r7, #12]
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	009b      	lsls	r3, r3, #2
 800aa0e:	4413      	add	r3, r2
 800aa10:	00db      	lsls	r3, r3, #3
 800aa12:	440b      	add	r3, r1
 800aa14:	3350      	adds	r3, #80	; 0x50
 800aa16:	78ba      	ldrb	r2, [r7, #2]
 800aa18:	701a      	strb	r2, [r3, #0]
 800aa1a:	e009      	b.n	800aa30 <USBH_LL_SetToggle+0x58>
 800aa1c:	78fa      	ldrb	r2, [r7, #3]
 800aa1e:	68f9      	ldr	r1, [r7, #12]
 800aa20:	4613      	mov	r3, r2
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	4413      	add	r3, r2
 800aa26:	00db      	lsls	r3, r3, #3
 800aa28:	440b      	add	r3, r1
 800aa2a:	3351      	adds	r3, #81	; 0x51
 800aa2c:	78ba      	ldrb	r2, [r7, #2]
 800aa2e:	701a      	strb	r2, [r3, #0]
 800aa30:	2300      	movs	r3, #0
 800aa32:	4618      	mov	r0, r3
 800aa34:	3714      	adds	r7, #20
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <USBH_Delay>:
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b082      	sub	sp, #8
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f7f7 faae 	bl	8001fa8 <HAL_Delay>
 800aa4c:	bf00      	nop
 800aa4e:	3708      	adds	r7, #8
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <USBH_Get_USB_Status>:
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	71fb      	strb	r3, [r7, #7]
 800aa5e:	2300      	movs	r3, #0
 800aa60:	73fb      	strb	r3, [r7, #15]
 800aa62:	79fb      	ldrb	r3, [r7, #7]
 800aa64:	2b03      	cmp	r3, #3
 800aa66:	d817      	bhi.n	800aa98 <USBH_Get_USB_Status+0x44>
 800aa68:	a201      	add	r2, pc, #4	; (adr r2, 800aa70 <USBH_Get_USB_Status+0x1c>)
 800aa6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa6e:	bf00      	nop
 800aa70:	0800aa81 	.word	0x0800aa81
 800aa74:	0800aa87 	.word	0x0800aa87
 800aa78:	0800aa8d 	.word	0x0800aa8d
 800aa7c:	0800aa93 	.word	0x0800aa93
 800aa80:	2300      	movs	r3, #0
 800aa82:	73fb      	strb	r3, [r7, #15]
 800aa84:	e00b      	b.n	800aa9e <USBH_Get_USB_Status+0x4a>
 800aa86:	2302      	movs	r3, #2
 800aa88:	73fb      	strb	r3, [r7, #15]
 800aa8a:	e008      	b.n	800aa9e <USBH_Get_USB_Status+0x4a>
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	73fb      	strb	r3, [r7, #15]
 800aa90:	e005      	b.n	800aa9e <USBH_Get_USB_Status+0x4a>
 800aa92:	2302      	movs	r3, #2
 800aa94:	73fb      	strb	r3, [r7, #15]
 800aa96:	e002      	b.n	800aa9e <USBH_Get_USB_Status+0x4a>
 800aa98:	2302      	movs	r3, #2
 800aa9a:	73fb      	strb	r3, [r7, #15]
 800aa9c:	bf00      	nop
 800aa9e:	7bfb      	ldrb	r3, [r7, #15]
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3714      	adds	r7, #20
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <MX_DriverVbusFS>:
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	4603      	mov	r3, r0
 800aab4:	71fb      	strb	r3, [r7, #7]
 800aab6:	79fb      	ldrb	r3, [r7, #7]
 800aab8:	73fb      	strb	r3, [r7, #15]
 800aaba:	79fb      	ldrb	r3, [r7, #7]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d102      	bne.n	800aac6 <MX_DriverVbusFS+0x1a>
 800aac0:	2301      	movs	r3, #1
 800aac2:	73fb      	strb	r3, [r7, #15]
 800aac4:	e001      	b.n	800aaca <MX_DriverVbusFS+0x1e>
 800aac6:	2300      	movs	r3, #0
 800aac8:	73fb      	strb	r3, [r7, #15]
 800aaca:	7bfb      	ldrb	r3, [r7, #15]
 800aacc:	461a      	mov	r2, r3
 800aace:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aad2:	4803      	ldr	r0, [pc, #12]	; (800aae0 <MX_DriverVbusFS+0x34>)
 800aad4:	f7f7 fd5c 	bl	8002590 <HAL_GPIO_WritePin>
 800aad8:	bf00      	nop
 800aada:	3710      	adds	r7, #16
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	48000800 	.word	0x48000800

0800aae4 <__errno>:
 800aae4:	4b01      	ldr	r3, [pc, #4]	; (800aaec <__errno+0x8>)
 800aae6:	6818      	ldr	r0, [r3, #0]
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop
 800aaec:	20000048 	.word	0x20000048

0800aaf0 <__libc_init_array>:
 800aaf0:	b570      	push	{r4, r5, r6, lr}
 800aaf2:	4e0d      	ldr	r6, [pc, #52]	; (800ab28 <__libc_init_array+0x38>)
 800aaf4:	4c0d      	ldr	r4, [pc, #52]	; (800ab2c <__libc_init_array+0x3c>)
 800aaf6:	1ba4      	subs	r4, r4, r6
 800aaf8:	10a4      	asrs	r4, r4, #2
 800aafa:	2500      	movs	r5, #0
 800aafc:	42a5      	cmp	r5, r4
 800aafe:	d109      	bne.n	800ab14 <__libc_init_array+0x24>
 800ab00:	4e0b      	ldr	r6, [pc, #44]	; (800ab30 <__libc_init_array+0x40>)
 800ab02:	4c0c      	ldr	r4, [pc, #48]	; (800ab34 <__libc_init_array+0x44>)
 800ab04:	f000 f8ea 	bl	800acdc <_init>
 800ab08:	1ba4      	subs	r4, r4, r6
 800ab0a:	10a4      	asrs	r4, r4, #2
 800ab0c:	2500      	movs	r5, #0
 800ab0e:	42a5      	cmp	r5, r4
 800ab10:	d105      	bne.n	800ab1e <__libc_init_array+0x2e>
 800ab12:	bd70      	pop	{r4, r5, r6, pc}
 800ab14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ab18:	4798      	blx	r3
 800ab1a:	3501      	adds	r5, #1
 800ab1c:	e7ee      	b.n	800aafc <__libc_init_array+0xc>
 800ab1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ab22:	4798      	blx	r3
 800ab24:	3501      	adds	r5, #1
 800ab26:	e7f2      	b.n	800ab0e <__libc_init_array+0x1e>
 800ab28:	0800b868 	.word	0x0800b868
 800ab2c:	0800b868 	.word	0x0800b868
 800ab30:	0800b868 	.word	0x0800b868
 800ab34:	0800b86c 	.word	0x0800b86c

0800ab38 <malloc>:
 800ab38:	4b02      	ldr	r3, [pc, #8]	; (800ab44 <malloc+0xc>)
 800ab3a:	4601      	mov	r1, r0
 800ab3c:	6818      	ldr	r0, [r3, #0]
 800ab3e:	f000 b861 	b.w	800ac04 <_malloc_r>
 800ab42:	bf00      	nop
 800ab44:	20000048 	.word	0x20000048

0800ab48 <free>:
 800ab48:	4b02      	ldr	r3, [pc, #8]	; (800ab54 <free+0xc>)
 800ab4a:	4601      	mov	r1, r0
 800ab4c:	6818      	ldr	r0, [r3, #0]
 800ab4e:	f000 b80b 	b.w	800ab68 <_free_r>
 800ab52:	bf00      	nop
 800ab54:	20000048 	.word	0x20000048

0800ab58 <memset>:
 800ab58:	4402      	add	r2, r0
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d100      	bne.n	800ab62 <memset+0xa>
 800ab60:	4770      	bx	lr
 800ab62:	f803 1b01 	strb.w	r1, [r3], #1
 800ab66:	e7f9      	b.n	800ab5c <memset+0x4>

0800ab68 <_free_r>:
 800ab68:	b538      	push	{r3, r4, r5, lr}
 800ab6a:	4605      	mov	r5, r0
 800ab6c:	2900      	cmp	r1, #0
 800ab6e:	d045      	beq.n	800abfc <_free_r+0x94>
 800ab70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab74:	1f0c      	subs	r4, r1, #4
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	bfb8      	it	lt
 800ab7a:	18e4      	addlt	r4, r4, r3
 800ab7c:	f000 f8ac 	bl	800acd8 <__malloc_lock>
 800ab80:	4a1f      	ldr	r2, [pc, #124]	; (800ac00 <_free_r+0x98>)
 800ab82:	6813      	ldr	r3, [r2, #0]
 800ab84:	4610      	mov	r0, r2
 800ab86:	b933      	cbnz	r3, 800ab96 <_free_r+0x2e>
 800ab88:	6063      	str	r3, [r4, #4]
 800ab8a:	6014      	str	r4, [r2, #0]
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab92:	f000 b8a2 	b.w	800acda <__malloc_unlock>
 800ab96:	42a3      	cmp	r3, r4
 800ab98:	d90c      	bls.n	800abb4 <_free_r+0x4c>
 800ab9a:	6821      	ldr	r1, [r4, #0]
 800ab9c:	1862      	adds	r2, r4, r1
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	bf04      	itt	eq
 800aba2:	681a      	ldreq	r2, [r3, #0]
 800aba4:	685b      	ldreq	r3, [r3, #4]
 800aba6:	6063      	str	r3, [r4, #4]
 800aba8:	bf04      	itt	eq
 800abaa:	1852      	addeq	r2, r2, r1
 800abac:	6022      	streq	r2, [r4, #0]
 800abae:	6004      	str	r4, [r0, #0]
 800abb0:	e7ec      	b.n	800ab8c <_free_r+0x24>
 800abb2:	4613      	mov	r3, r2
 800abb4:	685a      	ldr	r2, [r3, #4]
 800abb6:	b10a      	cbz	r2, 800abbc <_free_r+0x54>
 800abb8:	42a2      	cmp	r2, r4
 800abba:	d9fa      	bls.n	800abb2 <_free_r+0x4a>
 800abbc:	6819      	ldr	r1, [r3, #0]
 800abbe:	1858      	adds	r0, r3, r1
 800abc0:	42a0      	cmp	r0, r4
 800abc2:	d10b      	bne.n	800abdc <_free_r+0x74>
 800abc4:	6820      	ldr	r0, [r4, #0]
 800abc6:	4401      	add	r1, r0
 800abc8:	1858      	adds	r0, r3, r1
 800abca:	4282      	cmp	r2, r0
 800abcc:	6019      	str	r1, [r3, #0]
 800abce:	d1dd      	bne.n	800ab8c <_free_r+0x24>
 800abd0:	6810      	ldr	r0, [r2, #0]
 800abd2:	6852      	ldr	r2, [r2, #4]
 800abd4:	605a      	str	r2, [r3, #4]
 800abd6:	4401      	add	r1, r0
 800abd8:	6019      	str	r1, [r3, #0]
 800abda:	e7d7      	b.n	800ab8c <_free_r+0x24>
 800abdc:	d902      	bls.n	800abe4 <_free_r+0x7c>
 800abde:	230c      	movs	r3, #12
 800abe0:	602b      	str	r3, [r5, #0]
 800abe2:	e7d3      	b.n	800ab8c <_free_r+0x24>
 800abe4:	6820      	ldr	r0, [r4, #0]
 800abe6:	1821      	adds	r1, r4, r0
 800abe8:	428a      	cmp	r2, r1
 800abea:	bf04      	itt	eq
 800abec:	6811      	ldreq	r1, [r2, #0]
 800abee:	6852      	ldreq	r2, [r2, #4]
 800abf0:	6062      	str	r2, [r4, #4]
 800abf2:	bf04      	itt	eq
 800abf4:	1809      	addeq	r1, r1, r0
 800abf6:	6021      	streq	r1, [r4, #0]
 800abf8:	605c      	str	r4, [r3, #4]
 800abfa:	e7c7      	b.n	800ab8c <_free_r+0x24>
 800abfc:	bd38      	pop	{r3, r4, r5, pc}
 800abfe:	bf00      	nop
 800ac00:	200004e0 	.word	0x200004e0

0800ac04 <_malloc_r>:
 800ac04:	b570      	push	{r4, r5, r6, lr}
 800ac06:	1ccd      	adds	r5, r1, #3
 800ac08:	f025 0503 	bic.w	r5, r5, #3
 800ac0c:	3508      	adds	r5, #8
 800ac0e:	2d0c      	cmp	r5, #12
 800ac10:	bf38      	it	cc
 800ac12:	250c      	movcc	r5, #12
 800ac14:	2d00      	cmp	r5, #0
 800ac16:	4606      	mov	r6, r0
 800ac18:	db01      	blt.n	800ac1e <_malloc_r+0x1a>
 800ac1a:	42a9      	cmp	r1, r5
 800ac1c:	d903      	bls.n	800ac26 <_malloc_r+0x22>
 800ac1e:	230c      	movs	r3, #12
 800ac20:	6033      	str	r3, [r6, #0]
 800ac22:	2000      	movs	r0, #0
 800ac24:	bd70      	pop	{r4, r5, r6, pc}
 800ac26:	f000 f857 	bl	800acd8 <__malloc_lock>
 800ac2a:	4a21      	ldr	r2, [pc, #132]	; (800acb0 <_malloc_r+0xac>)
 800ac2c:	6814      	ldr	r4, [r2, #0]
 800ac2e:	4621      	mov	r1, r4
 800ac30:	b991      	cbnz	r1, 800ac58 <_malloc_r+0x54>
 800ac32:	4c20      	ldr	r4, [pc, #128]	; (800acb4 <_malloc_r+0xb0>)
 800ac34:	6823      	ldr	r3, [r4, #0]
 800ac36:	b91b      	cbnz	r3, 800ac40 <_malloc_r+0x3c>
 800ac38:	4630      	mov	r0, r6
 800ac3a:	f000 f83d 	bl	800acb8 <_sbrk_r>
 800ac3e:	6020      	str	r0, [r4, #0]
 800ac40:	4629      	mov	r1, r5
 800ac42:	4630      	mov	r0, r6
 800ac44:	f000 f838 	bl	800acb8 <_sbrk_r>
 800ac48:	1c43      	adds	r3, r0, #1
 800ac4a:	d124      	bne.n	800ac96 <_malloc_r+0x92>
 800ac4c:	230c      	movs	r3, #12
 800ac4e:	6033      	str	r3, [r6, #0]
 800ac50:	4630      	mov	r0, r6
 800ac52:	f000 f842 	bl	800acda <__malloc_unlock>
 800ac56:	e7e4      	b.n	800ac22 <_malloc_r+0x1e>
 800ac58:	680b      	ldr	r3, [r1, #0]
 800ac5a:	1b5b      	subs	r3, r3, r5
 800ac5c:	d418      	bmi.n	800ac90 <_malloc_r+0x8c>
 800ac5e:	2b0b      	cmp	r3, #11
 800ac60:	d90f      	bls.n	800ac82 <_malloc_r+0x7e>
 800ac62:	600b      	str	r3, [r1, #0]
 800ac64:	50cd      	str	r5, [r1, r3]
 800ac66:	18cc      	adds	r4, r1, r3
 800ac68:	4630      	mov	r0, r6
 800ac6a:	f000 f836 	bl	800acda <__malloc_unlock>
 800ac6e:	f104 000b 	add.w	r0, r4, #11
 800ac72:	1d23      	adds	r3, r4, #4
 800ac74:	f020 0007 	bic.w	r0, r0, #7
 800ac78:	1ac3      	subs	r3, r0, r3
 800ac7a:	d0d3      	beq.n	800ac24 <_malloc_r+0x20>
 800ac7c:	425a      	negs	r2, r3
 800ac7e:	50e2      	str	r2, [r4, r3]
 800ac80:	e7d0      	b.n	800ac24 <_malloc_r+0x20>
 800ac82:	428c      	cmp	r4, r1
 800ac84:	684b      	ldr	r3, [r1, #4]
 800ac86:	bf16      	itet	ne
 800ac88:	6063      	strne	r3, [r4, #4]
 800ac8a:	6013      	streq	r3, [r2, #0]
 800ac8c:	460c      	movne	r4, r1
 800ac8e:	e7eb      	b.n	800ac68 <_malloc_r+0x64>
 800ac90:	460c      	mov	r4, r1
 800ac92:	6849      	ldr	r1, [r1, #4]
 800ac94:	e7cc      	b.n	800ac30 <_malloc_r+0x2c>
 800ac96:	1cc4      	adds	r4, r0, #3
 800ac98:	f024 0403 	bic.w	r4, r4, #3
 800ac9c:	42a0      	cmp	r0, r4
 800ac9e:	d005      	beq.n	800acac <_malloc_r+0xa8>
 800aca0:	1a21      	subs	r1, r4, r0
 800aca2:	4630      	mov	r0, r6
 800aca4:	f000 f808 	bl	800acb8 <_sbrk_r>
 800aca8:	3001      	adds	r0, #1
 800acaa:	d0cf      	beq.n	800ac4c <_malloc_r+0x48>
 800acac:	6025      	str	r5, [r4, #0]
 800acae:	e7db      	b.n	800ac68 <_malloc_r+0x64>
 800acb0:	200004e0 	.word	0x200004e0
 800acb4:	200004e4 	.word	0x200004e4

0800acb8 <_sbrk_r>:
 800acb8:	b538      	push	{r3, r4, r5, lr}
 800acba:	4c06      	ldr	r4, [pc, #24]	; (800acd4 <_sbrk_r+0x1c>)
 800acbc:	2300      	movs	r3, #0
 800acbe:	4605      	mov	r5, r0
 800acc0:	4608      	mov	r0, r1
 800acc2:	6023      	str	r3, [r4, #0]
 800acc4:	f7f6 fffa 	bl	8001cbc <_sbrk>
 800acc8:	1c43      	adds	r3, r0, #1
 800acca:	d102      	bne.n	800acd2 <_sbrk_r+0x1a>
 800accc:	6823      	ldr	r3, [r4, #0]
 800acce:	b103      	cbz	r3, 800acd2 <_sbrk_r+0x1a>
 800acd0:	602b      	str	r3, [r5, #0]
 800acd2:	bd38      	pop	{r3, r4, r5, pc}
 800acd4:	20000ea4 	.word	0x20000ea4

0800acd8 <__malloc_lock>:
 800acd8:	4770      	bx	lr

0800acda <__malloc_unlock>:
 800acda:	4770      	bx	lr

0800acdc <_init>:
 800acdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acde:	bf00      	nop
 800ace0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ace2:	bc08      	pop	{r3}
 800ace4:	469e      	mov	lr, r3
 800ace6:	4770      	bx	lr

0800ace8 <_fini>:
 800ace8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acea:	bf00      	nop
 800acec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acee:	bc08      	pop	{r3}
 800acf0:	469e      	mov	lr, r3
 800acf2:	4770      	bx	lr
