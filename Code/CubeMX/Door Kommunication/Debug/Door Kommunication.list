
Door Kommunication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a250  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e90  0800a3d8  0800a3d8  0001a3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d268  0800d268  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d268  0800d268  0001d268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d270  0800d270  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d270  0800d270  0001d270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d274  0800d274  0001d274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800d278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ed8  200000b0  0800d328  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f88  0800d328  00020f88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a520  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000520f  00000000  00000000  0004a600  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001938  00000000  00000000  0004f810  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016d0  00000000  00000000  00051148  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002db17  00000000  00000000  00052818  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e159  00000000  00000000  0008032f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd5d6  00000000  00000000  0009e488  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019ba5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067a0  00000000  00000000  0019badc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b0 	.word	0x200000b0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a3c0 	.word	0x0800a3c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b4 	.word	0x200000b4
 80001c4:	0800a3c0 	.word	0x0800a3c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <test_disp>:
#define Font_S (Font_6x8)
#define Font_M (Font_7x10)
#define Font_L (Font_11x18)
#define Font_XL (Font_16x26)

void test_disp(void) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	ssd1306_Init();
 80004cc:	f000 fe86 	bl	80011dc <ssd1306_Init>
	test_OLED();
 80004d0:	f000 f802 	bl	80004d8 <test_OLED>
	//I2C_Scan();
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <test_OLED>:

void test_OLED() {
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	while (1) {
		ssd1306_Fill(Black);
 80004dc:	2000      	movs	r0, #0
 80004de:	f000 feeb 	bl	80012b8 <ssd1306_Fill>
		ssd1306_SetCursor(2, 0);
 80004e2:	2100      	movs	r1, #0
 80004e4:	2002      	movs	r0, #2
 80004e6:	f001 f83d 	bl	8001564 <ssd1306_SetCursor>
		ssd1306_WriteString("Hello World", Font_S, White);
 80004ea:	4a23      	ldr	r2, [pc, #140]	; (8000578 <test_OLED+0xa0>)
 80004ec:	2301      	movs	r3, #1
 80004ee:	ca06      	ldmia	r2, {r1, r2}
 80004f0:	4822      	ldr	r0, [pc, #136]	; (800057c <test_OLED+0xa4>)
 80004f2:	f001 f811 	bl	8001518 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80004f6:	f000 ff01 	bl	80012fc <ssd1306_UpdateScreen>
		HAL_Delay(1000);
 80004fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004fe:	f001 fae1 	bl	8001ac4 <HAL_Delay>
		ssd1306_Fill(Black);
 8000502:	2000      	movs	r0, #0
 8000504:	f000 fed8 	bl	80012b8 <ssd1306_Fill>
		ssd1306_SetCursor(2, 0);
 8000508:	2100      	movs	r1, #0
 800050a:	2002      	movs	r0, #2
 800050c:	f001 f82a 	bl	8001564 <ssd1306_SetCursor>
		ssd1306_WriteString("Hello World", Font_M, White);
 8000510:	4a1b      	ldr	r2, [pc, #108]	; (8000580 <test_OLED+0xa8>)
 8000512:	2301      	movs	r3, #1
 8000514:	ca06      	ldmia	r2, {r1, r2}
 8000516:	4819      	ldr	r0, [pc, #100]	; (800057c <test_OLED+0xa4>)
 8000518:	f000 fffe 	bl	8001518 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800051c:	f000 feee 	bl	80012fc <ssd1306_UpdateScreen>
		HAL_Delay(1000);
 8000520:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000524:	f001 face 	bl	8001ac4 <HAL_Delay>
		ssd1306_Fill(Black);
 8000528:	2000      	movs	r0, #0
 800052a:	f000 fec5 	bl	80012b8 <ssd1306_Fill>
		ssd1306_SetCursor(2, 0);
 800052e:	2100      	movs	r1, #0
 8000530:	2002      	movs	r0, #2
 8000532:	f001 f817 	bl	8001564 <ssd1306_SetCursor>
		ssd1306_WriteString("Hello World", Font_L, White);
 8000536:	4a13      	ldr	r2, [pc, #76]	; (8000584 <test_OLED+0xac>)
 8000538:	2301      	movs	r3, #1
 800053a:	ca06      	ldmia	r2, {r1, r2}
 800053c:	480f      	ldr	r0, [pc, #60]	; (800057c <test_OLED+0xa4>)
 800053e:	f000 ffeb 	bl	8001518 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000542:	f000 fedb 	bl	80012fc <ssd1306_UpdateScreen>
		HAL_Delay(1000);
 8000546:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800054a:	f001 fabb 	bl	8001ac4 <HAL_Delay>
		ssd1306_Fill(Black);
 800054e:	2000      	movs	r0, #0
 8000550:	f000 feb2 	bl	80012b8 <ssd1306_Fill>
		ssd1306_SetCursor(2, 0);
 8000554:	2100      	movs	r1, #0
 8000556:	2002      	movs	r0, #2
 8000558:	f001 f804 	bl	8001564 <ssd1306_SetCursor>
		ssd1306_WriteString("Hello World", Font_XL, White);
 800055c:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <test_OLED+0xb0>)
 800055e:	2301      	movs	r3, #1
 8000560:	ca06      	ldmia	r2, {r1, r2}
 8000562:	4806      	ldr	r0, [pc, #24]	; (800057c <test_OLED+0xa4>)
 8000564:	f000 ffd8 	bl	8001518 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000568:	f000 fec8 	bl	80012fc <ssd1306_UpdateScreen>
		HAL_Delay(1000);
 800056c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000570:	f001 faa8 	bl	8001ac4 <HAL_Delay>
		ssd1306_Fill(Black);
 8000574:	e7b2      	b.n	80004dc <test_OLED+0x4>
 8000576:	bf00      	nop
 8000578:	20000000 	.word	0x20000000
 800057c:	0800a3d8 	.word	0x0800a3d8
 8000580:	20000008 	.word	0x20000008
 8000584:	20000010 	.word	0x20000010
 8000588:	20000018 	.word	0x20000018

0800058c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08c      	sub	sp, #48	; 0x30
 8000590:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	f107 031c 	add.w	r3, r7, #28
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005a2:	4b92      	ldr	r3, [pc, #584]	; (80007ec <MX_GPIO_Init+0x260>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	4a91      	ldr	r2, [pc, #580]	; (80007ec <MX_GPIO_Init+0x260>)
 80005a8:	f043 0310 	orr.w	r3, r3, #16
 80005ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ae:	4b8f      	ldr	r3, [pc, #572]	; (80007ec <MX_GPIO_Init+0x260>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	f003 0310 	and.w	r3, r3, #16
 80005b6:	61bb      	str	r3, [r7, #24]
 80005b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ba:	4b8c      	ldr	r3, [pc, #560]	; (80007ec <MX_GPIO_Init+0x260>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	4a8b      	ldr	r2, [pc, #556]	; (80007ec <MX_GPIO_Init+0x260>)
 80005c0:	f043 0304 	orr.w	r3, r3, #4
 80005c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c6:	4b89      	ldr	r3, [pc, #548]	; (80007ec <MX_GPIO_Init+0x260>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	f003 0304 	and.w	r3, r3, #4
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	4b86      	ldr	r3, [pc, #536]	; (80007ec <MX_GPIO_Init+0x260>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	4a85      	ldr	r2, [pc, #532]	; (80007ec <MX_GPIO_Init+0x260>)
 80005d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005de:	4b83      	ldr	r3, [pc, #524]	; (80007ec <MX_GPIO_Init+0x260>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	4b80      	ldr	r3, [pc, #512]	; (80007ec <MX_GPIO_Init+0x260>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	4a7f      	ldr	r2, [pc, #508]	; (80007ec <MX_GPIO_Init+0x260>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f6:	4b7d      	ldr	r3, [pc, #500]	; (80007ec <MX_GPIO_Init+0x260>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000602:	4b7a      	ldr	r3, [pc, #488]	; (80007ec <MX_GPIO_Init+0x260>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	4a79      	ldr	r2, [pc, #484]	; (80007ec <MX_GPIO_Init+0x260>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060e:	4b77      	ldr	r3, [pc, #476]	; (80007ec <MX_GPIO_Init+0x260>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061a:	4b74      	ldr	r3, [pc, #464]	; (80007ec <MX_GPIO_Init+0x260>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	4a73      	ldr	r2, [pc, #460]	; (80007ec <MX_GPIO_Init+0x260>)
 8000620:	f043 0308 	orr.w	r3, r3, #8
 8000624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000626:	4b71      	ldr	r3, [pc, #452]	; (80007ec <MX_GPIO_Init+0x260>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	f003 0308 	and.w	r3, r3, #8
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f240 1109 	movw	r1, #265	; 0x109
 8000638:	486d      	ldr	r0, [pc, #436]	; (80007f0 <MX_GPIO_Init+0x264>)
 800063a:	f001 fd1f 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	210c      	movs	r1, #12
 8000642:	486c      	ldr	r0, [pc, #432]	; (80007f4 <MX_GPIO_Init+0x268>)
 8000644:	f001 fd1a 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800064e:	486a      	ldr	r0, [pc, #424]	; (80007f8 <MX_GPIO_Init+0x26c>)
 8000650:	f001 fd14 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800065a:	4867      	ldr	r0, [pc, #412]	; (80007f8 <MX_GPIO_Init+0x26c>)
 800065c:	f001 fd0e 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2180      	movs	r1, #128	; 0x80
 8000664:	4865      	ldr	r0, [pc, #404]	; (80007fc <MX_GPIO_Init+0x270>)
 8000666:	f001 fd09 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 800066a:	2308      	movs	r3, #8
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000676:	2302      	movs	r3, #2
 8000678:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4619      	mov	r1, r3
 8000680:	485b      	ldr	r0, [pc, #364]	; (80007f0 <MX_GPIO_Init+0x264>)
 8000682:	f001 fb53 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8000686:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800068a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800068c:	4b5c      	ldr	r3, [pc, #368]	; (8000800 <MX_GPIO_Init+0x274>)
 800068e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4619      	mov	r1, r3
 800069a:	4857      	ldr	r0, [pc, #348]	; (80007f8 <MX_GPIO_Init+0x26c>)
 800069c:	f001 fb46 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 80006a0:	2307      	movs	r3, #7
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4619      	mov	r1, r3
 80006b2:	4851      	ldr	r0, [pc, #324]	; (80007f8 <MX_GPIO_Init+0x26c>)
 80006b4:	f001 fb3a 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin|JOY_UP_Pin|JOY_DOWN_Pin;
 80006b8:	232c      	movs	r3, #44	; 0x2c
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006c0:	2302      	movs	r3, #2
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ce:	f001 fb2d 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 80006d2:	2310      	movs	r3, #16
 80006d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006d6:	4b4a      	ldr	r3, [pc, #296]	; (8000800 <MX_GPIO_Init+0x274>)
 80006d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4619      	mov	r1, r3
 80006e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e8:	f001 fb20 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 80006ec:	2304      	movs	r3, #4
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f8:	2303      	movs	r3, #3
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4619      	mov	r1, r3
 8000702:	483c      	ldr	r0, [pc, #240]	; (80007f4 <MX_GPIO_Init+0x268>)
 8000704:	f001 fb12 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800070c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	2301      	movs	r3, #1
 8000710:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000712:	2301      	movs	r3, #1
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000716:	2303      	movs	r3, #3
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	4619      	mov	r1, r3
 8000720:	4833      	ldr	r0, [pc, #204]	; (80007f0 <MX_GPIO_Init+0x264>)
 8000722:	f001 fb03 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8000726:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072c:	2301      	movs	r3, #1
 800072e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4619      	mov	r1, r3
 800073e:	482e      	ldr	r0, [pc, #184]	; (80007f8 <MX_GPIO_Init+0x26c>)
 8000740:	f001 faf4 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8000744:	2305      	movs	r3, #5
 8000746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000748:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <MX_GPIO_Init+0x274>)
 800074a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4619      	mov	r1, r3
 8000756:	4829      	ldr	r0, [pc, #164]	; (80007fc <MX_GPIO_Init+0x270>)
 8000758:	f001 fae8 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	2301      	movs	r3, #1
 8000762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000768:	2303      	movs	r3, #3
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	4619      	mov	r1, r3
 8000772:	4822      	ldr	r0, [pc, #136]	; (80007fc <MX_GPIO_Init+0x270>)
 8000774:	f001 fada 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8000778:	2308      	movs	r3, #8
 800077a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	4819      	ldr	r0, [pc, #100]	; (80007f4 <MX_GPIO_Init+0x268>)
 8000790:	f001 facc 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000794:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_GPIO_Init+0x274>)
 800079c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	4619      	mov	r1, r3
 80007a8:	4812      	ldr	r0, [pc, #72]	; (80007f4 <MX_GPIO_Init+0x268>)
 80007aa:	f001 fabf 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 80007ae:	2301      	movs	r3, #1
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4619      	mov	r1, r3
 80007c4:	480a      	ldr	r0, [pc, #40]	; (80007f0 <MX_GPIO_Init+0x264>)
 80007c6:	f001 fab1 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 80007ca:	2302      	movs	r3, #2
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_GPIO_Init+0x274>)
 80007d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_GPIO_Init+0x264>)
 80007de:	f001 faa5 	bl	8001d2c <HAL_GPIO_Init>

}
 80007e2:	bf00      	nop
 80007e4:	3730      	adds	r7, #48	; 0x30
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000
 80007f0:	48001000 	.word	0x48001000
 80007f4:	48000400 	.word	0x48000400
 80007f8:	48000800 	.word	0x48000800
 80007fc:	48000c00 	.word	0x48000c00
 8000800:	10120000 	.word	0x10120000

08000804 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <MX_I2C1_Init+0x74>)
 800080a:	4a1c      	ldr	r2, [pc, #112]	; (800087c <MX_I2C1_Init+0x78>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_I2C1_Init+0x74>)
 8000810:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <MX_I2C1_Init+0x7c>)
 8000812:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_I2C1_Init+0x74>)
 800081c:	2201      	movs	r2, #1
 800081e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_I2C1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_I2C1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_I2C1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800083e:	480e      	ldr	r0, [pc, #56]	; (8000878 <MX_I2C1_Init+0x74>)
 8000840:	f003 f854 	bl	80038ec <HAL_I2C_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800084a:	f000 fa79 	bl	8000d40 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800084e:	2100      	movs	r1, #0
 8000850:	4809      	ldr	r0, [pc, #36]	; (8000878 <MX_I2C1_Init+0x74>)
 8000852:	f003 fbb7 	bl	8003fc4 <HAL_I2CEx_ConfigAnalogFilter>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800085c:	f000 fa70 	bl	8000d40 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000860:	2100      	movs	r1, #0
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_I2C1_Init+0x74>)
 8000864:	f003 fbf9 	bl	800405a <HAL_I2CEx_ConfigDigitalFilter>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800086e:	f000 fa67 	bl	8000d40 <Error_Handler>
  }

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200004ec 	.word	0x200004ec
 800087c:	40005400 	.word	0x40005400
 8000880:	00404c74 	.word	0x00404c74

08000884 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_I2C2_Init+0x74>)
 800088a:	4a1c      	ldr	r2, [pc, #112]	; (80008fc <MX_I2C2_Init+0x78>)
 800088c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00404C74;
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_I2C2_Init+0x74>)
 8000890:	4a1b      	ldr	r2, [pc, #108]	; (8000900 <MX_I2C2_Init+0x7c>)
 8000892:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_I2C2_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_I2C2_Init+0x74>)
 800089c:	2201      	movs	r2, #1
 800089e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_I2C2_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_I2C2_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_I2C2_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_I2C2_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_I2C2_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008be:	480e      	ldr	r0, [pc, #56]	; (80008f8 <MX_I2C2_Init+0x74>)
 80008c0:	f003 f814 	bl	80038ec <HAL_I2C_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008ca:	f000 fa39 	bl	8000d40 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ce:	2100      	movs	r1, #0
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <MX_I2C2_Init+0x74>)
 80008d2:	f003 fb77 	bl	8003fc4 <HAL_I2CEx_ConfigAnalogFilter>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008dc:	f000 fa30 	bl	8000d40 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008e0:	2100      	movs	r1, #0
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_I2C2_Init+0x74>)
 80008e4:	f003 fbb9 	bl	800405a <HAL_I2CEx_ConfigDigitalFilter>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008ee:	f000 fa27 	bl	8000d40 <Error_Handler>
  }

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000538 	.word	0x20000538
 80008fc:	40005800 	.word	0x40005800
 8000900:	00404c74 	.word	0x00404c74

08000904 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	; 0x30
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a2e      	ldr	r2, [pc, #184]	; (80009dc <HAL_I2C_MspInit+0xd8>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d128      	bne.n	8000978 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <HAL_I2C_MspInit+0xdc>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4a2d      	ldr	r2, [pc, #180]	; (80009e0 <HAL_I2C_MspInit+0xdc>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <HAL_I2C_MspInit+0xdc>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	61bb      	str	r3, [r7, #24]
 800093c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800093e:	23c0      	movs	r3, #192	; 0xc0
 8000940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000942:	2312      	movs	r3, #18
 8000944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000946:	2301      	movs	r3, #1
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800094e:	2304      	movs	r3, #4
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4822      	ldr	r0, [pc, #136]	; (80009e4 <HAL_I2C_MspInit+0xe0>)
 800095a:	f001 f9e7 	bl	8001d2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <HAL_I2C_MspInit+0xdc>)
 8000960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000962:	4a1f      	ldr	r2, [pc, #124]	; (80009e0 <HAL_I2C_MspInit+0xdc>)
 8000964:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000968:	6593      	str	r3, [r2, #88]	; 0x58
 800096a:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <HAL_I2C_MspInit+0xdc>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000976:	e02d      	b.n	80009d4 <HAL_I2C_MspInit+0xd0>
  else if(i2cHandle->Instance==I2C2)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a1a      	ldr	r2, [pc, #104]	; (80009e8 <HAL_I2C_MspInit+0xe4>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d128      	bne.n	80009d4 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <HAL_I2C_MspInit+0xdc>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4a16      	ldr	r2, [pc, #88]	; (80009e0 <HAL_I2C_MspInit+0xdc>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <HAL_I2C_MspInit+0xdc>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 800099a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800099e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a0:	2312      	movs	r3, #18
 80009a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a8:	2303      	movs	r3, #3
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009ac:	2304      	movs	r3, #4
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	480b      	ldr	r0, [pc, #44]	; (80009e4 <HAL_I2C_MspInit+0xe0>)
 80009b8:	f001 f9b8 	bl	8001d2c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <HAL_I2C_MspInit+0xdc>)
 80009be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c0:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <HAL_I2C_MspInit+0xdc>)
 80009c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009c6:	6593      	str	r3, [r2, #88]	; 0x58
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <HAL_I2C_MspInit+0xdc>)
 80009ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	bf00      	nop
 80009d6:	3730      	adds	r7, #48	; 0x30
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40005400 	.word	0x40005400
 80009e0:	40021000 	.word	0x40021000
 80009e4:	48000400 	.word	0x48000400
 80009e8:	40005800 	.word	0x40005800

080009ec <MX_LCD_Init>:

LCD_HandleTypeDef hlcd;

/* LCD init function */
void MX_LCD_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

  hlcd.Instance = LCD;
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_LCD_Init+0x68>)
 80009f2:	4a19      	ldr	r2, [pc, #100]	; (8000a58 <MX_LCD_Init+0x6c>)
 80009f4:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_LCD_Init+0x68>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_LCD_Init+0x68>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_LCD_Init+0x68>)
 8000a04:	220c      	movs	r2, #12
 8000a06:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_LCD_Init+0x68>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_LCD_Init+0x68>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_LCD_Init+0x68>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_LCD_Init+0x68>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_LCD_Init+0x68>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_LCD_Init+0x68>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_LCD_Init+0x68>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_LCD_Init+0x68>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_LCD_Init+0x68>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_LCD_Init+0x68>)
 8000a40:	f003 fb58 	bl	80040f4 <HAL_LCD_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_LCD_Init+0x62>
  {
    Error_Handler();
 8000a4a:	f000 f979 	bl	8000d40 <Error_Handler>
  }

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000584 	.word	0x20000584
 8000a58:	40002400 	.word	0x40002400

08000a5c <HAL_LCD_MspInit>:

void HAL_LCD_MspInit(LCD_HandleTypeDef* lcdHandle)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08c      	sub	sp, #48	; 0x30
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(lcdHandle->Instance==LCD)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a44      	ldr	r2, [pc, #272]	; (8000b8c <HAL_LCD_MspInit+0x130>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	f040 8081 	bne.w	8000b82 <HAL_LCD_MspInit+0x126>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* LCD clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8000a80:	4b43      	ldr	r3, [pc, #268]	; (8000b90 <HAL_LCD_MspInit+0x134>)
 8000a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a84:	4a42      	ldr	r2, [pc, #264]	; (8000b90 <HAL_LCD_MspInit+0x134>)
 8000a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a8a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a8c:	4b40      	ldr	r3, [pc, #256]	; (8000b90 <HAL_LCD_MspInit+0x134>)
 8000a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a94:	61bb      	str	r3, [r7, #24]
 8000a96:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a98:	4b3d      	ldr	r3, [pc, #244]	; (8000b90 <HAL_LCD_MspInit+0x134>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9c:	4a3c      	ldr	r2, [pc, #240]	; (8000b90 <HAL_LCD_MspInit+0x134>)
 8000a9e:	f043 0304 	orr.w	r3, r3, #4
 8000aa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa4:	4b3a      	ldr	r3, [pc, #232]	; (8000b90 <HAL_LCD_MspInit+0x134>)
 8000aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa8:	f003 0304 	and.w	r3, r3, #4
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab0:	4b37      	ldr	r3, [pc, #220]	; (8000b90 <HAL_LCD_MspInit+0x134>)
 8000ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab4:	4a36      	ldr	r2, [pc, #216]	; (8000b90 <HAL_LCD_MspInit+0x134>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abc:	4b34      	ldr	r3, [pc, #208]	; (8000b90 <HAL_LCD_MspInit+0x134>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac8:	4b31      	ldr	r3, [pc, #196]	; (8000b90 <HAL_LCD_MspInit+0x134>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000acc:	4a30      	ldr	r2, [pc, #192]	; (8000b90 <HAL_LCD_MspInit+0x134>)
 8000ace:	f043 0302 	orr.w	r3, r3, #2
 8000ad2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad4:	4b2e      	ldr	r3, [pc, #184]	; (8000b90 <HAL_LCD_MspInit+0x134>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae0:	4b2b      	ldr	r3, [pc, #172]	; (8000b90 <HAL_LCD_MspInit+0x134>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae4:	4a2a      	ldr	r2, [pc, #168]	; (8000b90 <HAL_LCD_MspInit+0x134>)
 8000ae6:	f043 0308 	orr.w	r3, r3, #8
 8000aea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aec:	4b28      	ldr	r3, [pc, #160]	; (8000b90 <HAL_LCD_MspInit+0x134>)
 8000aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af0:	f003 0308 	and.w	r3, r3, #8
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3 
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 8000af8:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000afc:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000b0a:	230b      	movs	r3, #11
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	481f      	ldr	r0, [pc, #124]	; (8000b94 <HAL_LCD_MspInit+0x138>)
 8000b16:	f001 f909 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 8000b1a:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000b1e:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000b2c:	230b      	movs	r3, #11
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3a:	f001 f8f7 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 8000b3e:	f24f 2333 	movw	r3, #62003	; 0xf233
 8000b42:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin 
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000b50:	230b      	movs	r3, #11
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480f      	ldr	r0, [pc, #60]	; (8000b98 <HAL_LCD_MspInit+0x13c>)
 8000b5c:	f001 f8e6 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8000b60:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000b64:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000b72:	230b      	movs	r3, #11
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4807      	ldr	r0, [pc, #28]	; (8000b9c <HAL_LCD_MspInit+0x140>)
 8000b7e:	f001 f8d5 	bl	8001d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }
}
 8000b82:	bf00      	nop
 8000b84:	3730      	adds	r7, #48	; 0x30
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40002400 	.word	0x40002400
 8000b90:	40021000 	.word	0x40021000
 8000b94:	48000800 	.word	0x48000800
 8000b98:	48000400 	.word	0x48000400
 8000b9c:	48000c00 	.word	0x48000c00

08000ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba4:	f000 ff16 	bl	80019d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba8:	f000 f81c 	bl	8000be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bac:	f7ff fcee 	bl	800058c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bb0:	f7ff fe28 	bl	8000804 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000bb4:	f7ff fe66 	bl	8000884 <MX_I2C2_Init>
  MX_LCD_Init();
 8000bb8:	f7ff ff18 	bl	80009ec <MX_LCD_Init>
  MX_QUADSPI_Init();
 8000bbc:	f000 f8c8 	bl	8000d50 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000bc0:	f000 f930 	bl	8000e24 <MX_SAI1_Init>
  MX_SPI2_Init();
 8000bc4:	f000 fa4e 	bl	8001064 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000bc8:	f000 fe02 	bl	80017d0 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 8000bcc:	f008 fff0 	bl	8009bb0 <MX_USB_HOST_Init>
  MX_UART5_Init();
 8000bd0:	f000 fdce 	bl	8001770 <MX_UART5_Init>
  MX_UART4_Init();
 8000bd4:	f000 fd9c 	bl	8001710 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
#ifdef RUN_TEST_PROGRAM
  //Test_program();
  test_disp();
 8000bd8:	f7ff fc76 	bl	80004c8 <test_disp>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000bdc:	f009 f80e 	bl	8009bfc <MX_USB_HOST_Process>
 8000be0:	e7fc      	b.n	8000bdc <main+0x3c>
	...

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0b8      	sub	sp, #224	; 0xe0
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bee:	2244      	movs	r2, #68	; 0x44
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f009 fb22 	bl	800a23c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c08:	463b      	mov	r3, r7
 8000c0a:	2288      	movs	r2, #136	; 0x88
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f009 fb14 	bl	800a23c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000c14:	f003 fb50 	bl	80042b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c18:	4b47      	ldr	r3, [pc, #284]	; (8000d38 <SystemClock_Config+0x154>)
 8000c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c1e:	4a46      	ldr	r2, [pc, #280]	; (8000d38 <SystemClock_Config+0x154>)
 8000c20:	f023 0318 	bic.w	r3, r3, #24
 8000c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000c28:	231c      	movs	r3, #28
 8000c2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c34:	2301      	movs	r3, #1
 8000c36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c46:	2360      	movs	r3, #96	; 0x60
 8000c48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c52:	2301      	movs	r3, #1
 8000c54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000c5e:	2314      	movs	r3, #20
 8000c60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c64:	2307      	movs	r3, #7
 8000c66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c70:	2302      	movs	r3, #2
 8000c72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f003 fc68 	bl	8004550 <HAL_RCC_OscConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c86:	f000 f85b 	bl	8000d40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c90:	2303      	movs	r3, #3
 8000c92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000c96:	2380      	movs	r3, #128	; 0x80
 8000c98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ca8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000cac:	2101      	movs	r1, #1
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f003 fffe 	bl	8004cb0 <HAL_RCC_ClockConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000cba:	f000 f841 	bl	8000d40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8000cbe:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <SystemClock_Config+0x158>)
 8000cc0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000ce2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ce6:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000cec:	2301      	movs	r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000cf0:	2318      	movs	r3, #24
 8000cf2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000cf4:	2307      	movs	r3, #7
 8000cf6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 8000d00:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d04:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d06:	463b      	mov	r3, r7
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f004 f9d5 	bl	80050b8 <HAL_RCCEx_PeriphCLKConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SystemClock_Config+0x134>
  {
    Error_Handler();
 8000d14:	f000 f814 	bl	8000d40 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d18:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d1c:	f003 faea 	bl	80042f4 <HAL_PWREx_ControlVoltageScaling>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0x146>
  {
    Error_Handler();
 8000d26:	f000 f80b 	bl	8000d40 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000d2a:	f005 f923 	bl	8005f74 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000d2e:	bf00      	nop
 8000d30:	37e0      	adds	r7, #224	; 0xe0
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	000228da 	.word	0x000228da

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_QUADSPI_Init+0x44>)
 8000d56:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <MX_QUADSPI_Init+0x48>)
 8000d58:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_QUADSPI_Init+0x44>)
 8000d5c:	22ff      	movs	r2, #255	; 0xff
 8000d5e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_QUADSPI_Init+0x44>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_QUADSPI_Init+0x44>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_QUADSPI_Init+0x44>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_QUADSPI_Init+0x44>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_QUADSPI_Init+0x44>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_QUADSPI_Init+0x44>)
 8000d80:	f003 fb1e 	bl	80043c0 <HAL_QSPI_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000d8a:	f7ff ffd9 	bl	8000d40 <Error_Handler>
  }

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200005c0 	.word	0x200005c0
 8000d98:	a0001000 	.word	0xa0001000

08000d9c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a17      	ldr	r2, [pc, #92]	; (8000e18 <HAL_QSPI_MspInit+0x7c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d128      	bne.n	8000e10 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000dbe:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <HAL_QSPI_MspInit+0x80>)
 8000dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dc2:	4a16      	ldr	r2, [pc, #88]	; (8000e1c <HAL_QSPI_MspInit+0x80>)
 8000dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc8:	6513      	str	r3, [r2, #80]	; 0x50
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_QSPI_MspInit+0x80>)
 8000dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_QSPI_MspInit+0x80>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a10      	ldr	r2, [pc, #64]	; (8000e1c <HAL_QSPI_MspInit+0x80>)
 8000ddc:	f043 0310 	orr.w	r3, r3, #16
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_QSPI_MspInit+0x80>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0310 	and.w	r3, r3, #16
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 8000dee:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000df2:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e00:	230a      	movs	r3, #10
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <HAL_QSPI_MspInit+0x84>)
 8000e0c:	f000 ff8e 	bl	8001d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000e10:	bf00      	nop
 8000e12:	3728      	adds	r7, #40	; 0x28
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	a0001000 	.word	0xa0001000
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	48001000 	.word	0x48001000

08000e24 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0

  hsai_BlockA1.Instance = SAI1_Block_A;
 8000e28:	4b4d      	ldr	r3, [pc, #308]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000e2a:	4a4e      	ldr	r2, [pc, #312]	; (8000f64 <MX_SAI1_Init+0x140>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e2e:	4b4c      	ldr	r3, [pc, #304]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000e34:	4b4a      	ldr	r3, [pc, #296]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000e3a:	4b49      	ldr	r3, [pc, #292]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000e3c:	2240      	movs	r2, #64	; 0x40
 8000e3e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e40:	4b47      	ldr	r3, [pc, #284]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e46:	4b46      	ldr	r3, [pc, #280]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e4c:	4b44      	ldr	r3, [pc, #272]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e52:	4b43      	ldr	r3, [pc, #268]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e58:	4b41      	ldr	r3, [pc, #260]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e5e:	4b40      	ldr	r3, [pc, #256]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000e64:	4b3e      	ldr	r3, [pc, #248]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000e66:	4a40      	ldr	r2, [pc, #256]	; (8000f68 <MX_SAI1_Init+0x144>)
 8000e68:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e6a:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e70:	4b3b      	ldr	r3, [pc, #236]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e76:	4b3a      	ldr	r3, [pc, #232]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e7c:	4b38      	ldr	r3, [pc, #224]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000e82:	4b37      	ldr	r3, [pc, #220]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000e84:	2208      	movs	r2, #8
 8000e86:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000e88:	4b35      	ldr	r3, [pc, #212]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e8e:	4b34      	ldr	r3, [pc, #208]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e94:	4b32      	ldr	r3, [pc, #200]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e9a:	4b31      	ldr	r3, [pc, #196]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000ea0:	4b2f      	ldr	r3, [pc, #188]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ea6:	4b2e      	ldr	r3, [pc, #184]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000eac:	4b2c      	ldr	r3, [pc, #176]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000eb2:	4b2b      	ldr	r3, [pc, #172]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000eb8:	4829      	ldr	r0, [pc, #164]	; (8000f60 <MX_SAI1_Init+0x13c>)
 8000eba:	f005 fb0d 	bl	80064d8 <HAL_SAI_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8000ec4:	f7ff ff3c 	bl	8000d40 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8000ec8:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <MX_SAI1_Init+0x148>)
 8000eca:	4a29      	ldr	r2, [pc, #164]	; (8000f70 <MX_SAI1_Init+0x14c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000ece:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <MX_SAI1_Init+0x148>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000ed4:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <MX_SAI1_Init+0x148>)
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000eda:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <MX_SAI1_Init+0x148>)
 8000edc:	2240      	movs	r2, #64	; 0x40
 8000ede:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000ee0:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <MX_SAI1_Init+0x148>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <MX_SAI1_Init+0x148>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000eec:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <MX_SAI1_Init+0x148>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <MX_SAI1_Init+0x148>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <MX_SAI1_Init+0x148>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000efe:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <MX_SAI1_Init+0x148>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f04:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <MX_SAI1_Init+0x148>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <MX_SAI1_Init+0x148>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f10:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <MX_SAI1_Init+0x148>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <MX_SAI1_Init+0x148>)
 8000f18:	2208      	movs	r2, #8
 8000f1a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <MX_SAI1_Init+0x148>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <MX_SAI1_Init+0x148>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <MX_SAI1_Init+0x148>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <MX_SAI1_Init+0x148>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <MX_SAI1_Init+0x148>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <MX_SAI1_Init+0x148>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000f40:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <MX_SAI1_Init+0x148>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <MX_SAI1_Init+0x148>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000f4c:	4807      	ldr	r0, [pc, #28]	; (8000f6c <MX_SAI1_Init+0x148>)
 8000f4e:	f005 fac3 	bl	80064d8 <HAL_SAI_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8000f58:	f7ff fef2 	bl	8000d40 <Error_Handler>
  }

}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000688 	.word	0x20000688
 8000f64:	40015404 	.word	0x40015404
 8000f68:	0002ee00 	.word	0x0002ee00
 8000f6c:	20000604 	.word	0x20000604
 8000f70:	40015424 	.word	0x40015424

08000f74 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a33      	ldr	r2, [pc, #204]	; (8001050 <HAL_SAI_MspInit+0xdc>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d135      	bne.n	8000ff2 <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8000f86:	4b33      	ldr	r3, [pc, #204]	; (8001054 <HAL_SAI_MspInit+0xe0>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10b      	bne.n	8000fa6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000f8e:	4b32      	ldr	r3, [pc, #200]	; (8001058 <HAL_SAI_MspInit+0xe4>)
 8000f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f92:	4a31      	ldr	r2, [pc, #196]	; (8001058 <HAL_SAI_MspInit+0xe4>)
 8000f94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f98:	6613      	str	r3, [r2, #96]	; 0x60
 8000f9a:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <HAL_SAI_MspInit+0xe4>)
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8000fa6:	4b2b      	ldr	r3, [pc, #172]	; (8001054 <HAL_SAI_MspInit+0xe0>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	3301      	adds	r3, #1
 8000fac:	4a29      	ldr	r2, [pc, #164]	; (8001054 <HAL_SAI_MspInit+0xe0>)
 8000fae:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B 
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 8000fb0:	2374      	movs	r3, #116	; 0x74
 8000fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000fc0:	230d      	movs	r3, #13
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4824      	ldr	r0, [pc, #144]	; (800105c <HAL_SAI_MspInit+0xe8>)
 8000fcc:	f000 feae 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8000fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000fe2:	230d      	movs	r3, #13
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	481b      	ldr	r0, [pc, #108]	; (800105c <HAL_SAI_MspInit+0xe8>)
 8000fee:	f000 fe9d 	bl	8001d2c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a1a      	ldr	r2, [pc, #104]	; (8001060 <HAL_SAI_MspInit+0xec>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d124      	bne.n	8001046 <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_SAI_MspInit+0xe0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d10b      	bne.n	800101c <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_SAI_MspInit+0xe4>)
 8001006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001008:	4a13      	ldr	r2, [pc, #76]	; (8001058 <HAL_SAI_MspInit+0xe4>)
 800100a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800100e:	6613      	str	r3, [r2, #96]	; 0x60
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_SAI_MspInit+0xe4>)
 8001012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800101c:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <HAL_SAI_MspInit+0xe0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	4a0c      	ldr	r2, [pc, #48]	; (8001054 <HAL_SAI_MspInit+0xe0>)
 8001024:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE7     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001036:	230d      	movs	r3, #13
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	4806      	ldr	r0, [pc, #24]	; (800105c <HAL_SAI_MspInit+0xe8>)
 8001042:	f000 fe73 	bl	8001d2c <HAL_GPIO_Init>

    }
}
 8001046:	bf00      	nop
 8001048:	3728      	adds	r7, #40	; 0x28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40015404 	.word	0x40015404
 8001054:	200000cc 	.word	0x200000cc
 8001058:	40021000 	.word	0x40021000
 800105c:	48001000 	.word	0x48001000
 8001060:	40015424 	.word	0x40015424

08001064 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <MX_SPI2_Init+0x74>)
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <MX_SPI2_Init+0x78>)
 800106c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_SPI2_Init+0x74>)
 8001070:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001074:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_SPI2_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_SPI2_Init+0x74>)
 800107e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001082:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_SPI2_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <MX_SPI2_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_SPI2_Init+0x74>)
 8001092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001096:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_SPI2_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_SPI2_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_SPI2_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <MX_SPI2_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_SPI2_Init+0x74>)
 80010b2:	2207      	movs	r2, #7
 80010b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <MX_SPI2_Init+0x74>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_SPI2_Init+0x74>)
 80010be:	2208      	movs	r2, #8
 80010c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_SPI2_Init+0x74>)
 80010c4:	f005 fba2 	bl	800680c <HAL_SPI_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80010ce:	f7ff fe37 	bl	8000d40 <Error_Handler>
  }

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000070c 	.word	0x2000070c
 80010dc:	40003800 	.word	0x40003800

080010e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a17      	ldr	r2, [pc, #92]	; (800115c <HAL_SPI_MspInit+0x7c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d127      	bne.n	8001152 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <HAL_SPI_MspInit+0x80>)
 8001104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001106:	4a16      	ldr	r2, [pc, #88]	; (8001160 <HAL_SPI_MspInit+0x80>)
 8001108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110c:	6593      	str	r3, [r2, #88]	; 0x58
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <HAL_SPI_MspInit+0x80>)
 8001110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <HAL_SPI_MspInit+0x80>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	4a10      	ldr	r2, [pc, #64]	; (8001160 <HAL_SPI_MspInit+0x80>)
 8001120:	f043 0308 	orr.w	r3, r3, #8
 8001124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_SPI_MspInit+0x80>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8001132:	231a      	movs	r3, #26
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001142:	2305      	movs	r3, #5
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <HAL_SPI_MspInit+0x84>)
 800114e:	f000 fded 	bl	8001d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001152:	bf00      	nop
 8001154:	3728      	adds	r7, #40	; 0x28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40003800 	.word	0x40003800
 8001160:	40021000 	.word	0x40021000
 8001164:	48000c00 	.word	0x48000c00

08001168 <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af04      	add	r7, sp, #16
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	9302      	str	r3, [sp, #8]
 8001188:	2301      	movs	r3, #1
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	1dfb      	adds	r3, r7, #7
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2301      	movs	r3, #1
 8001192:	2200      	movs	r2, #0
 8001194:	2178      	movs	r1, #120	; 0x78
 8001196:	4803      	ldr	r0, [pc, #12]	; (80011a4 <ssd1306_WriteCommand+0x2c>)
 8001198:	f002 fc38 	bl	8003a0c <HAL_I2C_Mem_Write>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200004ec 	.word	0x200004ec

080011a8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af04      	add	r7, sp, #16
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	f04f 32ff 	mov.w	r2, #4294967295
 80011ba:	9202      	str	r2, [sp, #8]
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2301      	movs	r3, #1
 80011c4:	2240      	movs	r2, #64	; 0x40
 80011c6:	2178      	movs	r1, #120	; 0x78
 80011c8:	4803      	ldr	r0, [pc, #12]	; (80011d8 <ssd1306_WriteData+0x30>)
 80011ca:	f002 fc1f 	bl	8003a0c <HAL_I2C_Mem_Write>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200004ec 	.word	0x200004ec

080011dc <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 80011e0:	f7ff ffc2 	bl	8001168 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80011e4:	2064      	movs	r0, #100	; 0x64
 80011e6:	f000 fc6d 	bl	8001ac4 <HAL_Delay>

    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 80011ea:	20ae      	movs	r0, #174	; 0xae
 80011ec:	f7ff ffc4 	bl	8001178 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80011f0:	2020      	movs	r0, #32
 80011f2:	f7ff ffc1 	bl	8001178 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80011f6:	2000      	movs	r0, #0
 80011f8:	f7ff ffbe 	bl	8001178 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80011fc:	20b0      	movs	r0, #176	; 0xb0
 80011fe:	f7ff ffbb 	bl	8001178 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001202:	20c8      	movs	r0, #200	; 0xc8
 8001204:	f7ff ffb8 	bl	8001178 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001208:	2000      	movs	r0, #0
 800120a:	f7ff ffb5 	bl	8001178 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800120e:	2010      	movs	r0, #16
 8001210:	f7ff ffb2 	bl	8001178 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001214:	2040      	movs	r0, #64	; 0x40
 8001216:	f7ff ffaf 	bl	8001178 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 800121a:	2081      	movs	r0, #129	; 0x81
 800121c:	f7ff ffac 	bl	8001178 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8001220:	20ff      	movs	r0, #255	; 0xff
 8001222:	f7ff ffa9 	bl	8001178 <ssd1306_WriteCommand>


#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001226:	20a1      	movs	r0, #161	; 0xa1
 8001228:	f7ff ffa6 	bl	8001178 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800122c:	20a6      	movs	r0, #166	; 0xa6
 800122e:	f7ff ffa3 	bl	8001178 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001232:	20a8      	movs	r0, #168	; 0xa8
 8001234:	f7ff ffa0 	bl	8001178 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001238:	203f      	movs	r0, #63	; 0x3f
 800123a:	f7ff ff9d 	bl	8001178 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800123e:	20a4      	movs	r0, #164	; 0xa4
 8001240:	f7ff ff9a 	bl	8001178 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001244:	20d3      	movs	r0, #211	; 0xd3
 8001246:	f7ff ff97 	bl	8001178 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800124a:	2000      	movs	r0, #0
 800124c:	f7ff ff94 	bl	8001178 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001250:	20d5      	movs	r0, #213	; 0xd5
 8001252:	f7ff ff91 	bl	8001178 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001256:	20f0      	movs	r0, #240	; 0xf0
 8001258:	f7ff ff8e 	bl	8001178 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800125c:	20d9      	movs	r0, #217	; 0xd9
 800125e:	f7ff ff8b 	bl	8001178 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001262:	2022      	movs	r0, #34	; 0x22
 8001264:	f7ff ff88 	bl	8001178 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001268:	20da      	movs	r0, #218	; 0xda
 800126a:	f7ff ff85 	bl	8001178 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800126e:	2012      	movs	r0, #18
 8001270:	f7ff ff82 	bl	8001178 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001274:	20db      	movs	r0, #219	; 0xdb
 8001276:	f7ff ff7f 	bl	8001178 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800127a:	2020      	movs	r0, #32
 800127c:	f7ff ff7c 	bl	8001178 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001280:	208d      	movs	r0, #141	; 0x8d
 8001282:	f7ff ff79 	bl	8001178 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001286:	2014      	movs	r0, #20
 8001288:	f7ff ff76 	bl	8001178 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800128c:	20af      	movs	r0, #175	; 0xaf
 800128e:	f7ff ff73 	bl	8001178 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8001292:	2000      	movs	r0, #0
 8001294:	f000 f810 	bl	80012b8 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001298:	f000 f830 	bl	80012fc <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <ssd1306_Init+0xd8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <ssd1306_Init+0xd8>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80012a8:	4b02      	ldr	r3, [pc, #8]	; (80012b4 <ssd1306_Init+0xd8>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	715a      	strb	r2, [r3, #5]
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200004d0 	.word	0x200004d0

080012b8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	e00d      	b.n	80012e4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <ssd1306_Fill+0x1a>
 80012ce:	2100      	movs	r1, #0
 80012d0:	e000      	b.n	80012d4 <ssd1306_Fill+0x1c>
 80012d2:	21ff      	movs	r1, #255	; 0xff
 80012d4:	4a08      	ldr	r2, [pc, #32]	; (80012f8 <ssd1306_Fill+0x40>)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4413      	add	r3, r2
 80012da:	460a      	mov	r2, r1
 80012dc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	3301      	adds	r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ea:	d3ed      	bcc.n	80012c8 <ssd1306_Fill+0x10>
    }
}
 80012ec:	bf00      	nop
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	200000d0 	.word	0x200000d0

080012fc <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001302:	2300      	movs	r3, #0
 8001304:	71fb      	strb	r3, [r7, #7]
 8001306:	e016      	b.n	8001336 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	3b50      	subs	r3, #80	; 0x50
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff32 	bl	8001178 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001314:	2000      	movs	r0, #0
 8001316:	f7ff ff2f 	bl	8001178 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800131a:	2010      	movs	r0, #16
 800131c:	f7ff ff2c 	bl	8001178 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	01db      	lsls	r3, r3, #7
 8001324:	4a07      	ldr	r2, [pc, #28]	; (8001344 <ssd1306_UpdateScreen+0x48>)
 8001326:	4413      	add	r3, r2
 8001328:	2180      	movs	r1, #128	; 0x80
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff3c 	bl	80011a8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	3301      	adds	r3, #1
 8001334:	71fb      	strb	r3, [r7, #7]
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b07      	cmp	r3, #7
 800133a:	d9e5      	bls.n	8001308 <ssd1306_UpdateScreen+0xc>
    }
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200000d0 	.word	0x200000d0

08001348 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
 8001352:	460b      	mov	r3, r1
 8001354:	71bb      	strb	r3, [r7, #6]
 8001356:	4613      	mov	r3, r2
 8001358:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	2b00      	cmp	r3, #0
 8001360:	db48      	blt.n	80013f4 <ssd1306_DrawPixel+0xac>
 8001362:	79bb      	ldrb	r3, [r7, #6]
 8001364:	2b3f      	cmp	r3, #63	; 0x3f
 8001366:	d845      	bhi.n	80013f4 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8001368:	4b25      	ldr	r3, [pc, #148]	; (8001400 <ssd1306_DrawPixel+0xb8>)
 800136a:	791b      	ldrb	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d006      	beq.n	800137e <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8001370:	797b      	ldrb	r3, [r7, #5]
 8001372:	2b00      	cmp	r3, #0
 8001374:	bf0c      	ite	eq
 8001376:	2301      	moveq	r3, #1
 8001378:	2300      	movne	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the right color
    if(color == White) {
 800137e:	797b      	ldrb	r3, [r7, #5]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d11a      	bne.n	80013ba <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001384:	79fa      	ldrb	r2, [r7, #7]
 8001386:	79bb      	ldrb	r3, [r7, #6]
 8001388:	08db      	lsrs	r3, r3, #3
 800138a:	b2d8      	uxtb	r0, r3
 800138c:	4603      	mov	r3, r0
 800138e:	01db      	lsls	r3, r3, #7
 8001390:	4413      	add	r3, r2
 8001392:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <ssd1306_DrawPixel+0xbc>)
 8001394:	5cd3      	ldrb	r3, [r2, r3]
 8001396:	b25a      	sxtb	r2, r3
 8001398:	79bb      	ldrb	r3, [r7, #6]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	2101      	movs	r1, #1
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	b25b      	sxtb	r3, r3
 80013a6:	4313      	orrs	r3, r2
 80013a8:	b259      	sxtb	r1, r3
 80013aa:	79fa      	ldrb	r2, [r7, #7]
 80013ac:	4603      	mov	r3, r0
 80013ae:	01db      	lsls	r3, r3, #7
 80013b0:	4413      	add	r3, r2
 80013b2:	b2c9      	uxtb	r1, r1
 80013b4:	4a13      	ldr	r2, [pc, #76]	; (8001404 <ssd1306_DrawPixel+0xbc>)
 80013b6:	54d1      	strb	r1, [r2, r3]
 80013b8:	e01d      	b.n	80013f6 <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013ba:	79fa      	ldrb	r2, [r7, #7]
 80013bc:	79bb      	ldrb	r3, [r7, #6]
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	b2d8      	uxtb	r0, r3
 80013c2:	4603      	mov	r3, r0
 80013c4:	01db      	lsls	r3, r3, #7
 80013c6:	4413      	add	r3, r2
 80013c8:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <ssd1306_DrawPixel+0xbc>)
 80013ca:	5cd3      	ldrb	r3, [r2, r3]
 80013cc:	b25a      	sxtb	r2, r3
 80013ce:	79bb      	ldrb	r3, [r7, #6]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	4013      	ands	r3, r2
 80013e2:	b259      	sxtb	r1, r3
 80013e4:	79fa      	ldrb	r2, [r7, #7]
 80013e6:	4603      	mov	r3, r0
 80013e8:	01db      	lsls	r3, r3, #7
 80013ea:	4413      	add	r3, r2
 80013ec:	b2c9      	uxtb	r1, r1
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <ssd1306_DrawPixel+0xbc>)
 80013f0:	54d1      	strb	r1, [r2, r3]
 80013f2:	e000      	b.n	80013f6 <ssd1306_DrawPixel+0xae>
        return;
 80013f4:	bf00      	nop
    }
}
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	200004d0 	.word	0x200004d0
 8001404:	200000d0 	.word	0x200000d0

08001408 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	4604      	mov	r4, r0
 8001410:	1d38      	adds	r0, r7, #4
 8001412:	e880 0006 	stmia.w	r0, {r1, r2}
 8001416:	461a      	mov	r2, r3
 8001418:	4623      	mov	r3, r4
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	4613      	mov	r3, r2
 800141e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	2b1f      	cmp	r3, #31
 8001424:	d902      	bls.n	800142c <ssd1306_WriteChar+0x24>
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	2b7e      	cmp	r3, #126	; 0x7e
 800142a:	d901      	bls.n	8001430 <ssd1306_WriteChar+0x28>
        return 0;
 800142c:	2300      	movs	r3, #0
 800142e:	e06d      	b.n	800150c <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001430:	4b38      	ldr	r3, [pc, #224]	; (8001514 <ssd1306_WriteChar+0x10c>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	793b      	ldrb	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	2b80      	cmp	r3, #128	; 0x80
 800143c:	dc06      	bgt.n	800144c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800143e:	4b35      	ldr	r3, [pc, #212]	; (8001514 <ssd1306_WriteChar+0x10c>)
 8001440:	885b      	ldrh	r3, [r3, #2]
 8001442:	461a      	mov	r2, r3
 8001444:	797b      	ldrb	r3, [r7, #5]
 8001446:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001448:	2b40      	cmp	r3, #64	; 0x40
 800144a:	dd01      	ble.n	8001450 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800144c:	2300      	movs	r3, #0
 800144e:	e05d      	b.n	800150c <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	e04c      	b.n	80014f0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	3b20      	subs	r3, #32
 800145c:	7979      	ldrb	r1, [r7, #5]
 800145e:	fb01 f303 	mul.w	r3, r1, r3
 8001462:	4619      	mov	r1, r3
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	440b      	add	r3, r1
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001470:	2300      	movs	r3, #0
 8001472:	61bb      	str	r3, [r7, #24]
 8001474:	e034      	b.n	80014e0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d012      	beq.n	80014ac <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <ssd1306_WriteChar+0x10c>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	4413      	add	r3, r2
 8001492:	b2d8      	uxtb	r0, r3
 8001494:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <ssd1306_WriteChar+0x10c>)
 8001496:	885b      	ldrh	r3, [r3, #2]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	4413      	add	r3, r2
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	7bba      	ldrb	r2, [r7, #14]
 80014a4:	4619      	mov	r1, r3
 80014a6:	f7ff ff4f 	bl	8001348 <ssd1306_DrawPixel>
 80014aa:	e016      	b.n	80014da <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80014ac:	4b19      	ldr	r3, [pc, #100]	; (8001514 <ssd1306_WriteChar+0x10c>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	4413      	add	r3, r2
 80014b8:	b2d8      	uxtb	r0, r3
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <ssd1306_WriteChar+0x10c>)
 80014bc:	885b      	ldrh	r3, [r3, #2]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	4413      	add	r3, r2
 80014c6:	b2d9      	uxtb	r1, r3
 80014c8:	7bbb      	ldrb	r3, [r7, #14]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bf0c      	ite	eq
 80014ce:	2301      	moveq	r3, #1
 80014d0:	2300      	movne	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	f7ff ff37 	bl	8001348 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	3301      	adds	r3, #1
 80014de:	61bb      	str	r3, [r7, #24]
 80014e0:	793b      	ldrb	r3, [r7, #4]
 80014e2:	461a      	mov	r2, r3
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d3c5      	bcc.n	8001476 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3301      	adds	r3, #1
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	797b      	ldrb	r3, [r7, #5]
 80014f2:	461a      	mov	r2, r3
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d3ad      	bcc.n	8001456 <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <ssd1306_WriteChar+0x10c>)
 80014fc:	881a      	ldrh	r2, [r3, #0]
 80014fe:	793b      	ldrb	r3, [r7, #4]
 8001500:	b29b      	uxth	r3, r3
 8001502:	4413      	add	r3, r2
 8001504:	b29a      	uxth	r2, r3
 8001506:	4b03      	ldr	r3, [pc, #12]	; (8001514 <ssd1306_WriteChar+0x10c>)
 8001508:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800150a:	7bfb      	ldrb	r3, [r7, #15]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3724      	adds	r7, #36	; 0x24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd90      	pop	{r4, r7, pc}
 8001514:	200004d0 	.word	0x200004d0

08001518 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	1d38      	adds	r0, r7, #4
 8001522:	e880 0006 	stmia.w	r0, {r1, r2}
 8001526:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001528:	e012      	b.n	8001550 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	7818      	ldrb	r0, [r3, #0]
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	1d3a      	adds	r2, r7, #4
 8001532:	ca06      	ldmia	r2, {r1, r2}
 8001534:	f7ff ff68 	bl	8001408 <ssd1306_WriteChar>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d002      	beq.n	800154a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	e008      	b.n	800155c <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3301      	adds	r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e8      	bne.n	800152a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	781b      	ldrb	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	460a      	mov	r2, r1
 800156e:	71fb      	strb	r3, [r7, #7]
 8001570:	4613      	mov	r3, r2
 8001572:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	b29a      	uxth	r2, r3
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <ssd1306_SetCursor+0x2c>)
 800157a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800157c:	79bb      	ldrb	r3, [r7, #6]
 800157e:	b29a      	uxth	r2, r3
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <ssd1306_SetCursor+0x2c>)
 8001582:	805a      	strh	r2, [r3, #2]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	200004d0 	.word	0x200004d0

08001594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <HAL_MspInit+0x44>)
 800159c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <HAL_MspInit+0x44>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6613      	str	r3, [r2, #96]	; 0x60
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <HAL_MspInit+0x44>)
 80015a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_MspInit+0x44>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_MspInit+0x44>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	6593      	str	r3, [r2, #88]	; 0x58
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_MspInit+0x44>)
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <MemManage_Handler+0x4>

080015f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <UsageFault_Handler+0x4>

08001602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001630:	f000 fa2a 	bl	8001a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <OTG_FS_IRQHandler+0x10>)
 800163e:	f000 ffb7 	bl	80025b0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000cc0 	.word	0x20000cc0

0800164c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <_sbrk+0x50>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <_sbrk+0x16>
		heap_end = &end;
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <_sbrk+0x50>)
 800165e:	4a10      	ldr	r2, [pc, #64]	; (80016a0 <_sbrk+0x54>)
 8001660:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <_sbrk+0x50>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <_sbrk+0x50>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	466a      	mov	r2, sp
 8001672:	4293      	cmp	r3, r2
 8001674:	d907      	bls.n	8001686 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001676:	f008 fda7 	bl	800a1c8 <__errno>
 800167a:	4602      	mov	r2, r0
 800167c:	230c      	movs	r3, #12
 800167e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001680:	f04f 33ff 	mov.w	r3, #4294967295
 8001684:	e006      	b.n	8001694 <_sbrk+0x48>
	}

	heap_end += incr;
 8001686:	4b05      	ldr	r3, [pc, #20]	; (800169c <_sbrk+0x50>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	4a03      	ldr	r2, [pc, #12]	; (800169c <_sbrk+0x50>)
 8001690:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200004d8 	.word	0x200004d8
 80016a0:	20000f88 	.word	0x20000f88

080016a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <SystemInit+0x64>)
 80016aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ae:	4a16      	ldr	r2, [pc, #88]	; (8001708 <SystemInit+0x64>)
 80016b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <SystemInit+0x68>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a13      	ldr	r2, [pc, #76]	; (800170c <SystemInit+0x68>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <SystemInit+0x68>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <SystemInit+0x68>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a0f      	ldr	r2, [pc, #60]	; (800170c <SystemInit+0x68>)
 80016d0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80016d4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80016d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <SystemInit+0x68>)
 80016dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016e0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <SystemInit+0x68>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a09      	ldr	r2, [pc, #36]	; (800170c <SystemInit+0x68>)
 80016e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80016ee:	4b07      	ldr	r3, [pc, #28]	; (800170c <SystemInit+0x68>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <SystemInit+0x64>)
 80016f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016fa:	609a      	str	r2, [r3, #8]
#endif
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00
 800170c:	40021000 	.word	0x40021000

08001710 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <MX_UART4_Init+0x58>)
 8001716:	4a15      	ldr	r2, [pc, #84]	; (800176c <MX_UART4_Init+0x5c>)
 8001718:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <MX_UART4_Init+0x58>)
 800171c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001720:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MX_UART4_Init+0x58>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <MX_UART4_Init+0x58>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_UART4_Init+0x58>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <MX_UART4_Init+0x58>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <MX_UART4_Init+0x58>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_UART4_Init+0x58>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <MX_UART4_Init+0x58>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MX_UART4_Init+0x58>)
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <MX_UART4_Init+0x58>)
 8001754:	f005 f8e4 	bl	8006920 <HAL_UART_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800175e:	f7ff faef 	bl	8000d40 <Error_Handler>
  }

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200007f0 	.word	0x200007f0
 800176c:	40004c00 	.word	0x40004c00

08001770 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_UART5_Init+0x58>)
 8001776:	4a15      	ldr	r2, [pc, #84]	; (80017cc <MX_UART5_Init+0x5c>)
 8001778:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800177a:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <MX_UART5_Init+0x58>)
 800177c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001780:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_UART5_Init+0x58>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_UART5_Init+0x58>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_UART5_Init+0x58>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MX_UART5_Init+0x58>)
 8001796:	220c      	movs	r2, #12
 8001798:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <MX_UART5_Init+0x58>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_UART5_Init+0x58>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <MX_UART5_Init+0x58>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_UART5_Init+0x58>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart5) != HAL_OK)
 80017b2:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_UART5_Init+0x58>)
 80017b4:	f005 f902 	bl	80069bc <HAL_HalfDuplex_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80017be:	f7ff fabf 	bl	8000d40 <Error_Handler>
  }

}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000770 	.word	0x20000770
 80017cc:	40005000 	.word	0x40005000

080017d0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017d6:	4a15      	ldr	r2, [pc, #84]	; (800182c <MX_USART2_UART_Init+0x5c>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <MX_USART2_UART_Init+0x58>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <MX_USART2_UART_Init+0x58>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <MX_USART2_UART_Init+0x58>)
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_USART2_UART_Init+0x58>)
 8001814:	f005 f884 	bl	8006920 <HAL_UART_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800181e:	f7ff fa8f 	bl	8000d40 <Error_Handler>
  }

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000870 	.word	0x20000870
 800182c:	40004400 	.word	0x40004400

08001830 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08e      	sub	sp, #56	; 0x38
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a46      	ldr	r2, [pc, #280]	; (8001968 <HAL_UART_MspInit+0x138>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d129      	bne.n	80018a6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001852:	4b46      	ldr	r3, [pc, #280]	; (800196c <HAL_UART_MspInit+0x13c>)
 8001854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001856:	4a45      	ldr	r2, [pc, #276]	; (800196c <HAL_UART_MspInit+0x13c>)
 8001858:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800185c:	6593      	str	r3, [r2, #88]	; 0x58
 800185e:	4b43      	ldr	r3, [pc, #268]	; (800196c <HAL_UART_MspInit+0x13c>)
 8001860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001866:	623b      	str	r3, [r7, #32]
 8001868:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	4b40      	ldr	r3, [pc, #256]	; (800196c <HAL_UART_MspInit+0x13c>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	4a3f      	ldr	r2, [pc, #252]	; (800196c <HAL_UART_MspInit+0x13c>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001876:	4b3d      	ldr	r3, [pc, #244]	; (800196c <HAL_UART_MspInit+0x13c>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	61fb      	str	r3, [r7, #28]
 8001880:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001882:	2303      	movs	r3, #3
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001892:	2308      	movs	r3, #8
 8001894:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189a:	4619      	mov	r1, r3
 800189c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a0:	f000 fa44 	bl	8001d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018a4:	e05b      	b.n	800195e <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==UART5)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a31      	ldr	r2, [pc, #196]	; (8001970 <HAL_UART_MspInit+0x140>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d129      	bne.n	8001904 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_UART5_CLK_ENABLE();
 80018b0:	4b2e      	ldr	r3, [pc, #184]	; (800196c <HAL_UART_MspInit+0x13c>)
 80018b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b4:	4a2d      	ldr	r2, [pc, #180]	; (800196c <HAL_UART_MspInit+0x13c>)
 80018b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018ba:	6593      	str	r3, [r2, #88]	; 0x58
 80018bc:	4b2b      	ldr	r3, [pc, #172]	; (800196c <HAL_UART_MspInit+0x13c>)
 80018be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c4:	61bb      	str	r3, [r7, #24]
 80018c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c8:	4b28      	ldr	r3, [pc, #160]	; (800196c <HAL_UART_MspInit+0x13c>)
 80018ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018cc:	4a27      	ldr	r2, [pc, #156]	; (800196c <HAL_UART_MspInit+0x13c>)
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d4:	4b25      	ldr	r3, [pc, #148]	; (800196c <HAL_UART_MspInit+0x13c>)
 80018d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e6:	2312      	movs	r3, #18
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80018f2:	2308      	movs	r3, #8
 80018f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fa:	4619      	mov	r1, r3
 80018fc:	481d      	ldr	r0, [pc, #116]	; (8001974 <HAL_UART_MspInit+0x144>)
 80018fe:	f000 fa15 	bl	8001d2c <HAL_GPIO_Init>
}
 8001902:	e02c      	b.n	800195e <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a1b      	ldr	r2, [pc, #108]	; (8001978 <HAL_UART_MspInit+0x148>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d127      	bne.n	800195e <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <HAL_UART_MspInit+0x13c>)
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001912:	4a16      	ldr	r2, [pc, #88]	; (800196c <HAL_UART_MspInit+0x13c>)
 8001914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001918:	6593      	str	r3, [r2, #88]	; 0x58
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <HAL_UART_MspInit+0x13c>)
 800191c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <HAL_UART_MspInit+0x13c>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	4a10      	ldr	r2, [pc, #64]	; (800196c <HAL_UART_MspInit+0x13c>)
 800192c:	f043 0308 	orr.w	r3, r3, #8
 8001930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <HAL_UART_MspInit+0x13c>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800193e:	2360      	movs	r3, #96	; 0x60
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001946:	2301      	movs	r3, #1
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800194e:	2307      	movs	r3, #7
 8001950:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001956:	4619      	mov	r1, r3
 8001958:	4808      	ldr	r0, [pc, #32]	; (800197c <HAL_UART_MspInit+0x14c>)
 800195a:	f000 f9e7 	bl	8001d2c <HAL_GPIO_Init>
}
 800195e:	bf00      	nop
 8001960:	3738      	adds	r7, #56	; 0x38
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40004c00 	.word	0x40004c00
 800196c:	40021000 	.word	0x40021000
 8001970:	40005000 	.word	0x40005000
 8001974:	48000800 	.word	0x48000800
 8001978:	40004400 	.word	0x40004400
 800197c:	48000c00 	.word	0x48000c00

08001980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001984:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001986:	e003      	b.n	8001990 <LoopCopyDataInit>

08001988 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800198a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800198c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800198e:	3104      	adds	r1, #4

08001990 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001990:	480b      	ldr	r0, [pc, #44]	; (80019c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001994:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001996:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001998:	d3f6      	bcc.n	8001988 <CopyDataInit>
	ldr	r2, =_sbss
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800199c:	e002      	b.n	80019a4 <LoopFillZerobss>

0800199e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800199e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80019a0:	f842 3b04 	str.w	r3, [r2], #4

080019a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <LoopForever+0x16>)
	cmp	r2, r3
 80019a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80019a8:	d3f9      	bcc.n	800199e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019aa:	f7ff fe7b 	bl	80016a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ae:	f008 fc11 	bl	800a1d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019b2:	f7ff f8f5 	bl	8000ba0 <main>

080019b6 <LoopForever>:

LoopForever:
    b LoopForever
 80019b6:	e7fe      	b.n	80019b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019b8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80019bc:	0800d278 	.word	0x0800d278
	ldr	r0, =_sdata
 80019c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80019c4:	200000b0 	.word	0x200000b0
	ldr	r2, =_sbss
 80019c8:	200000b0 	.word	0x200000b0
	ldr	r3, = _ebss
 80019cc:	20000f88 	.word	0x20000f88

080019d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC1_2_IRQHandler>
	...

080019d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <HAL_Init+0x3c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <HAL_Init+0x3c>)
 80019e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ea:	2003      	movs	r0, #3
 80019ec:	f000 f95c 	bl	8001ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019f0:	2000      	movs	r0, #0
 80019f2:	f000 f80f 	bl	8001a14 <HAL_InitTick>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d002      	beq.n	8001a02 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	71fb      	strb	r3, [r7, #7]
 8001a00:	e001      	b.n	8001a06 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a02:	f7ff fdc7 	bl	8001594 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a06:	79fb      	ldrb	r3, [r7, #7]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40022000 	.word	0x40022000

08001a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <HAL_InitTick+0x68>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d022      	beq.n	8001a6e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a28:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_InitTick+0x6c>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <HAL_InitTick+0x68>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a34:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 f968 	bl	8001d12 <HAL_SYSTICK_Config>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10f      	bne.n	8001a68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b0f      	cmp	r3, #15
 8001a4c:	d809      	bhi.n	8001a62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	f04f 30ff 	mov.w	r0, #4294967295
 8001a56:	f000 f932 	bl	8001cbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_InitTick+0x70>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	e007      	b.n	8001a72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	73fb      	strb	r3, [r7, #15]
 8001a66:	e004      	b.n	8001a72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	73fb      	strb	r3, [r7, #15]
 8001a6c:	e001      	b.n	8001a72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000028 	.word	0x20000028
 8001a80:	20000020 	.word	0x20000020
 8001a84:	20000024 	.word	0x20000024

08001a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <HAL_IncTick+0x1c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_IncTick+0x20>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4413      	add	r3, r2
 8001a96:	4a03      	ldr	r2, [pc, #12]	; (8001aa4 <HAL_IncTick+0x1c>)
 8001a98:	6013      	str	r3, [r2, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	200008f0 	.word	0x200008f0
 8001aa8:	20000028 	.word	0x20000028

08001aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <HAL_GetTick+0x14>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	200008f0 	.word	0x200008f0

08001ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001acc:	f7ff ffee 	bl	8001aac <HAL_GetTick>
 8001ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001adc:	d004      	beq.n	8001ae8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_Delay+0x40>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ae8:	bf00      	nop
 8001aea:	f7ff ffdf 	bl	8001aac <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d8f7      	bhi.n	8001aea <HAL_Delay+0x26>
  {
  }
}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000028 	.word	0x20000028

08001b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b24:	4013      	ands	r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3a:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	60d3      	str	r3, [r2, #12]
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <__NVIC_GetPriorityGrouping+0x18>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	f003 0307 	and.w	r3, r3, #7
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	db0b      	blt.n	8001b96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	f003 021f 	and.w	r2, r3, #31
 8001b84:	4907      	ldr	r1, [pc, #28]	; (8001ba4 <__NVIC_EnableIRQ+0x38>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000e100 	.word	0xe000e100

08001ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	6039      	str	r1, [r7, #0]
 8001bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	db0a      	blt.n	8001bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	490c      	ldr	r1, [pc, #48]	; (8001bf4 <__NVIC_SetPriority+0x4c>)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	0112      	lsls	r2, r2, #4
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	440b      	add	r3, r1
 8001bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd0:	e00a      	b.n	8001be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4908      	ldr	r1, [pc, #32]	; (8001bf8 <__NVIC_SetPriority+0x50>)
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	3b04      	subs	r3, #4
 8001be0:	0112      	lsls	r2, r2, #4
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	440b      	add	r3, r1
 8001be6:	761a      	strb	r2, [r3, #24]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000e100 	.word	0xe000e100
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b089      	sub	sp, #36	; 0x24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f1c3 0307 	rsb	r3, r3, #7
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	bf28      	it	cs
 8001c1a:	2304      	movcs	r3, #4
 8001c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3304      	adds	r3, #4
 8001c22:	2b06      	cmp	r3, #6
 8001c24:	d902      	bls.n	8001c2c <NVIC_EncodePriority+0x30>
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3b03      	subs	r3, #3
 8001c2a:	e000      	b.n	8001c2e <NVIC_EncodePriority+0x32>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	f04f 32ff 	mov.w	r2, #4294967295
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	401a      	ands	r2, r3
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c44:	f04f 31ff 	mov.w	r1, #4294967295
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4e:	43d9      	mvns	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c54:	4313      	orrs	r3, r2
         );
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3724      	adds	r7, #36	; 0x24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c74:	d301      	bcc.n	8001c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c76:	2301      	movs	r3, #1
 8001c78:	e00f      	b.n	8001c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <SysTick_Config+0x40>)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c82:	210f      	movs	r1, #15
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295
 8001c88:	f7ff ff8e 	bl	8001ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <SysTick_Config+0x40>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c92:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <SysTick_Config+0x40>)
 8001c94:	2207      	movs	r2, #7
 8001c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	e000e010 	.word	0xe000e010

08001ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ff29 	bl	8001b08 <__NVIC_SetPriorityGrouping>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
 8001cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd0:	f7ff ff3e 	bl	8001b50 <__NVIC_GetPriorityGrouping>
 8001cd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	6978      	ldr	r0, [r7, #20]
 8001cdc:	f7ff ff8e 	bl	8001bfc <NVIC_EncodePriority>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff5d 	bl	8001ba8 <__NVIC_SetPriority>
}
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff31 	bl	8001b6c <__NVIC_EnableIRQ>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ffa2 	bl	8001c64 <SysTick_Config>
 8001d20:	4603      	mov	r3, r0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3a:	e17f      	b.n	800203c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	2101      	movs	r1, #1
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 8171 	beq.w	8002036 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x38>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b12      	cmp	r3, #18
 8001d62:	d123      	bne.n	8001dac <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	08da      	lsrs	r2, r3, #3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3208      	adds	r2, #8
 8001d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	220f      	movs	r2, #15
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	691a      	ldr	r2, [r3, #16]
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	08da      	lsrs	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3208      	adds	r2, #8
 8001da6:	6939      	ldr	r1, [r7, #16]
 8001da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0203 	and.w	r2, r3, #3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d00b      	beq.n	8001e00 <HAL_GPIO_Init+0xd4>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d007      	beq.n	8001e00 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001df4:	2b11      	cmp	r3, #17
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b12      	cmp	r3, #18
 8001dfe:	d130      	bne.n	8001e62 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e36:	2201      	movs	r2, #1
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	091b      	lsrs	r3, r3, #4
 8001e4c:	f003 0201 	and.w	r2, r3, #1
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d118      	bne.n	8001ea0 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e74:	2201      	movs	r2, #1
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	08db      	lsrs	r3, r3, #3
 8001e8a:	f003 0201 	and.w	r2, r3, #1
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 80ac 	beq.w	8002036 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ede:	4b5e      	ldr	r3, [pc, #376]	; (8002058 <HAL_GPIO_Init+0x32c>)
 8001ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee2:	4a5d      	ldr	r2, [pc, #372]	; (8002058 <HAL_GPIO_Init+0x32c>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6613      	str	r3, [r2, #96]	; 0x60
 8001eea:	4b5b      	ldr	r3, [pc, #364]	; (8002058 <HAL_GPIO_Init+0x32c>)
 8001eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ef6:	4a59      	ldr	r2, [pc, #356]	; (800205c <HAL_GPIO_Init+0x330>)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	3302      	adds	r3, #2
 8001efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f02:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f20:	d025      	beq.n	8001f6e <HAL_GPIO_Init+0x242>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4e      	ldr	r2, [pc, #312]	; (8002060 <HAL_GPIO_Init+0x334>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01f      	beq.n	8001f6a <HAL_GPIO_Init+0x23e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4d      	ldr	r2, [pc, #308]	; (8002064 <HAL_GPIO_Init+0x338>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d019      	beq.n	8001f66 <HAL_GPIO_Init+0x23a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4c      	ldr	r2, [pc, #304]	; (8002068 <HAL_GPIO_Init+0x33c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x236>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4b      	ldr	r2, [pc, #300]	; (800206c <HAL_GPIO_Init+0x340>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00d      	beq.n	8001f5e <HAL_GPIO_Init+0x232>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4a      	ldr	r2, [pc, #296]	; (8002070 <HAL_GPIO_Init+0x344>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <HAL_GPIO_Init+0x22e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a49      	ldr	r2, [pc, #292]	; (8002074 <HAL_GPIO_Init+0x348>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_GPIO_Init+0x22a>
 8001f52:	2306      	movs	r3, #6
 8001f54:	e00c      	b.n	8001f70 <HAL_GPIO_Init+0x244>
 8001f56:	2307      	movs	r3, #7
 8001f58:	e00a      	b.n	8001f70 <HAL_GPIO_Init+0x244>
 8001f5a:	2305      	movs	r3, #5
 8001f5c:	e008      	b.n	8001f70 <HAL_GPIO_Init+0x244>
 8001f5e:	2304      	movs	r3, #4
 8001f60:	e006      	b.n	8001f70 <HAL_GPIO_Init+0x244>
 8001f62:	2303      	movs	r3, #3
 8001f64:	e004      	b.n	8001f70 <HAL_GPIO_Init+0x244>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e002      	b.n	8001f70 <HAL_GPIO_Init+0x244>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_GPIO_Init+0x244>
 8001f6e:	2300      	movs	r3, #0
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	f002 0203 	and.w	r2, r2, #3
 8001f76:	0092      	lsls	r2, r2, #2
 8001f78:	4093      	lsls	r3, r2
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f80:	4936      	ldr	r1, [pc, #216]	; (800205c <HAL_GPIO_Init+0x330>)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	089b      	lsrs	r3, r3, #2
 8001f86:	3302      	adds	r3, #2
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f8e:	4b3a      	ldr	r3, [pc, #232]	; (8002078 <HAL_GPIO_Init+0x34c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fb2:	4a31      	ldr	r2, [pc, #196]	; (8002078 <HAL_GPIO_Init+0x34c>)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001fb8:	4b2f      	ldr	r3, [pc, #188]	; (8002078 <HAL_GPIO_Init+0x34c>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fdc:	4a26      	ldr	r2, [pc, #152]	; (8002078 <HAL_GPIO_Init+0x34c>)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fe2:	4b25      	ldr	r3, [pc, #148]	; (8002078 <HAL_GPIO_Init+0x34c>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002006:	4a1c      	ldr	r2, [pc, #112]	; (8002078 <HAL_GPIO_Init+0x34c>)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800200c:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <HAL_GPIO_Init+0x34c>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	43db      	mvns	r3, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4313      	orrs	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002030:	4a11      	ldr	r2, [pc, #68]	; (8002078 <HAL_GPIO_Init+0x34c>)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	3301      	adds	r3, #1
 800203a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa22 f303 	lsr.w	r3, r2, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	f47f ae78 	bne.w	8001d3c <HAL_GPIO_Init+0x10>
  }
}
 800204c:	bf00      	nop
 800204e:	371c      	adds	r7, #28
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	40021000 	.word	0x40021000
 800205c:	40010000 	.word	0x40010000
 8002060:	48000400 	.word	0x48000400
 8002064:	48000800 	.word	0x48000800
 8002068:	48000c00 	.word	0x48000c00
 800206c:	48001000 	.word	0x48001000
 8002070:	48001400 	.word	0x48001400
 8002074:	48001800 	.word	0x48001800
 8002078:	40010400 	.word	0x40010400

0800207c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	807b      	strh	r3, [r7, #2]
 8002088:	4613      	mov	r3, r2
 800208a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800208c:	787b      	ldrb	r3, [r7, #1]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002092:	887a      	ldrh	r2, [r7, #2]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002098:	e002      	b.n	80020a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800209a:	887a      	ldrh	r2, [r7, #2]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80020ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ae:	b08f      	sub	sp, #60	; 0x3c
 80020b0:	af0a      	add	r7, sp, #40	; 0x28
 80020b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e054      	b.n	8002168 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d106      	bne.n	80020de <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f007 fdc7 	bl	8009c6c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2203      	movs	r2, #3
 80020e2:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d102      	bne.n	80020f8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f005 f98d 	bl	800741c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	687e      	ldr	r6, [r7, #4]
 800210a:	466d      	mov	r5, sp
 800210c:	f106 0410 	add.w	r4, r6, #16
 8002110:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002118:	e894 0003 	ldmia.w	r4, {r0, r1}
 800211c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002120:	1d33      	adds	r3, r6, #4
 8002122:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002124:	6838      	ldr	r0, [r7, #0]
 8002126:	f005 f916 	bl	8007356 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2101      	movs	r1, #1
 8002130:	4618      	mov	r0, r3
 8002132:	f005 f984 	bl	800743e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	687e      	ldr	r6, [r7, #4]
 800213e:	466d      	mov	r5, sp
 8002140:	f106 0410 	add.w	r4, r6, #16
 8002144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800214a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800214c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002150:	e885 0003 	stmia.w	r5, {r0, r1}
 8002154:	1d33      	adds	r3, r6, #4
 8002156:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002158:	6838      	ldr	r0, [r7, #0]
 800215a:	f005 fa93 	bl	8007684 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002170 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002170:	b590      	push	{r4, r7, lr}
 8002172:	b089      	sub	sp, #36	; 0x24
 8002174:	af04      	add	r7, sp, #16
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	4608      	mov	r0, r1
 800217a:	4611      	mov	r1, r2
 800217c:	461a      	mov	r2, r3
 800217e:	4603      	mov	r3, r0
 8002180:	70fb      	strb	r3, [r7, #3]
 8002182:	460b      	mov	r3, r1
 8002184:	70bb      	strb	r3, [r7, #2]
 8002186:	4613      	mov	r3, r2
 8002188:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_HCD_HC_Init+0x28>
 8002194:	2302      	movs	r3, #2
 8002196:	e07f      	b.n	8002298 <HAL_HCD_HC_Init+0x128>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80021a0:	78fa      	ldrb	r2, [r7, #3]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	440b      	add	r3, r1
 80021ae:	333d      	adds	r3, #61	; 0x3d
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	440b      	add	r3, r1
 80021c2:	3338      	adds	r3, #56	; 0x38
 80021c4:	787a      	ldrb	r2, [r7, #1]
 80021c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80021c8:	78fa      	ldrb	r2, [r7, #3]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	440b      	add	r3, r1
 80021d6:	3340      	adds	r3, #64	; 0x40
 80021d8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80021da:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021dc:	78fa      	ldrb	r2, [r7, #3]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	440b      	add	r3, r1
 80021ea:	3339      	adds	r3, #57	; 0x39
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80021f0:	78fa      	ldrb	r2, [r7, #3]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	440b      	add	r3, r1
 80021fe:	333f      	adds	r3, #63	; 0x3f
 8002200:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002204:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002206:	78fa      	ldrb	r2, [r7, #3]
 8002208:	78bb      	ldrb	r3, [r7, #2]
 800220a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800220e:	b2d8      	uxtb	r0, r3
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	440b      	add	r3, r1
 800221c:	333a      	adds	r3, #58	; 0x3a
 800221e:	4602      	mov	r2, r0
 8002220:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002222:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002226:	2b00      	cmp	r3, #0
 8002228:	da0a      	bge.n	8002240 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800222a:	78fa      	ldrb	r2, [r7, #3]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	440b      	add	r3, r1
 8002238:	333b      	adds	r3, #59	; 0x3b
 800223a:	2201      	movs	r2, #1
 800223c:	701a      	strb	r2, [r3, #0]
 800223e:	e009      	b.n	8002254 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002240:	78fa      	ldrb	r2, [r7, #3]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	440b      	add	r3, r1
 800224e:	333b      	adds	r3, #59	; 0x3b
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	440b      	add	r3, r1
 8002262:	333c      	adds	r3, #60	; 0x3c
 8002264:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002268:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	787c      	ldrb	r4, [r7, #1]
 8002270:	78ba      	ldrb	r2, [r7, #2]
 8002272:	78f9      	ldrb	r1, [r7, #3]
 8002274:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002276:	9302      	str	r3, [sp, #8]
 8002278:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	4623      	mov	r3, r4
 8002286:	f005 fb41 	bl	800790c <USB_HC_Init>
 800228a:	4603      	mov	r3, r0
 800228c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002296:	7bfb      	ldrb	r3, [r7, #15]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	bd90      	pop	{r4, r7, pc}

080022a0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_HCD_HC_Halt+0x1e>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e00f      	b.n	80022de <HAL_HCD_HC_Halt+0x3e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	78fa      	ldrb	r2, [r7, #3]
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f005 fd1f 	bl	8007d12 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	4608      	mov	r0, r1
 80022f2:	4611      	mov	r1, r2
 80022f4:	461a      	mov	r2, r3
 80022f6:	4603      	mov	r3, r0
 80022f8:	70fb      	strb	r3, [r7, #3]
 80022fa:	460b      	mov	r3, r1
 80022fc:	70bb      	strb	r3, [r7, #2]
 80022fe:	4613      	mov	r3, r2
 8002300:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8002302:	78fa      	ldrb	r2, [r7, #3]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	440b      	add	r3, r1
 8002310:	333b      	adds	r3, #59	; 0x3b
 8002312:	78ba      	ldrb	r2, [r7, #2]
 8002314:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002316:	78fa      	ldrb	r2, [r7, #3]
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	440b      	add	r3, r1
 8002324:	333f      	adds	r3, #63	; 0x3f
 8002326:	787a      	ldrb	r2, [r7, #1]
 8002328:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800232a:	7c3b      	ldrb	r3, [r7, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10a      	bne.n	8002346 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002330:	78fa      	ldrb	r2, [r7, #3]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	440b      	add	r3, r1
 800233e:	3342      	adds	r3, #66	; 0x42
 8002340:	2203      	movs	r2, #3
 8002342:	701a      	strb	r2, [r3, #0]
 8002344:	e009      	b.n	800235a <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002346:	78fa      	ldrb	r2, [r7, #3]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	440b      	add	r3, r1
 8002354:	3342      	adds	r3, #66	; 0x42
 8002356:	2202      	movs	r2, #2
 8002358:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800235a:	787b      	ldrb	r3, [r7, #1]
 800235c:	2b03      	cmp	r3, #3
 800235e:	f200 80d6 	bhi.w	800250e <HAL_HCD_HC_SubmitRequest+0x226>
 8002362:	a201      	add	r2, pc, #4	; (adr r2, 8002368 <HAL_HCD_HC_SubmitRequest+0x80>)
 8002364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002368:	08002379 	.word	0x08002379
 800236c:	080024f9 	.word	0x080024f9
 8002370:	080023e5 	.word	0x080023e5
 8002374:	0800246f 	.word	0x0800246f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002378:	7c3b      	ldrb	r3, [r7, #16]
 800237a:	2b01      	cmp	r3, #1
 800237c:	f040 80c9 	bne.w	8002512 <HAL_HCD_HC_SubmitRequest+0x22a>
 8002380:	78bb      	ldrb	r3, [r7, #2]
 8002382:	2b00      	cmp	r3, #0
 8002384:	f040 80c5 	bne.w	8002512 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8002388:	8b3b      	ldrh	r3, [r7, #24]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d109      	bne.n	80023a2 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	440b      	add	r3, r1
 800239c:	3351      	adds	r3, #81	; 0x51
 800239e:	2201      	movs	r2, #1
 80023a0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023a2:	78fa      	ldrb	r2, [r7, #3]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	440b      	add	r3, r1
 80023b0:	3351      	adds	r3, #81	; 0x51
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10a      	bne.n	80023ce <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023b8:	78fa      	ldrb	r2, [r7, #3]
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	440b      	add	r3, r1
 80023c6:	3342      	adds	r3, #66	; 0x42
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023cc:	e0a1      	b.n	8002512 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	440b      	add	r3, r1
 80023dc:	3342      	adds	r3, #66	; 0x42
 80023de:	2202      	movs	r2, #2
 80023e0:	701a      	strb	r2, [r3, #0]
      break;
 80023e2:	e096      	b.n	8002512 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80023e4:	78bb      	ldrb	r3, [r7, #2]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d120      	bne.n	800242c <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023ea:	78fa      	ldrb	r2, [r7, #3]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	440b      	add	r3, r1
 80023f8:	3351      	adds	r3, #81	; 0x51
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10a      	bne.n	8002416 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	440b      	add	r3, r1
 800240e:	3342      	adds	r3, #66	; 0x42
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002414:	e07e      	b.n	8002514 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	440b      	add	r3, r1
 8002424:	3342      	adds	r3, #66	; 0x42
 8002426:	2202      	movs	r2, #2
 8002428:	701a      	strb	r2, [r3, #0]
      break;
 800242a:	e073      	b.n	8002514 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800242c:	78fa      	ldrb	r2, [r7, #3]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	440b      	add	r3, r1
 800243a:	3350      	adds	r3, #80	; 0x50
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10a      	bne.n	8002458 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002442:	78fa      	ldrb	r2, [r7, #3]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	3342      	adds	r3, #66	; 0x42
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]
      break;
 8002456:	e05d      	b.n	8002514 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	440b      	add	r3, r1
 8002466:	3342      	adds	r3, #66	; 0x42
 8002468:	2202      	movs	r2, #2
 800246a:	701a      	strb	r2, [r3, #0]
      break;
 800246c:	e052      	b.n	8002514 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800246e:	78bb      	ldrb	r3, [r7, #2]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d120      	bne.n	80024b6 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	440b      	add	r3, r1
 8002482:	3351      	adds	r3, #81	; 0x51
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10a      	bne.n	80024a0 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800248a:	78fa      	ldrb	r2, [r7, #3]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	440b      	add	r3, r1
 8002498:	3342      	adds	r3, #66	; 0x42
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800249e:	e039      	b.n	8002514 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024a0:	78fa      	ldrb	r2, [r7, #3]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	440b      	add	r3, r1
 80024ae:	3342      	adds	r3, #66	; 0x42
 80024b0:	2202      	movs	r2, #2
 80024b2:	701a      	strb	r2, [r3, #0]
      break;
 80024b4:	e02e      	b.n	8002514 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024b6:	78fa      	ldrb	r2, [r7, #3]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	440b      	add	r3, r1
 80024c4:	3350      	adds	r3, #80	; 0x50
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10a      	bne.n	80024e2 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	440b      	add	r3, r1
 80024da:	3342      	adds	r3, #66	; 0x42
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
      break;
 80024e0:	e018      	b.n	8002514 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	440b      	add	r3, r1
 80024f0:	3342      	adds	r3, #66	; 0x42
 80024f2:	2202      	movs	r2, #2
 80024f4:	701a      	strb	r2, [r3, #0]
      break;
 80024f6:	e00d      	b.n	8002514 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	440b      	add	r3, r1
 8002506:	3342      	adds	r3, #66	; 0x42
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
      break;
 800250c:	e002      	b.n	8002514 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800250e:	bf00      	nop
 8002510:	e000      	b.n	8002514 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8002512:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002514:	78fa      	ldrb	r2, [r7, #3]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	440b      	add	r3, r1
 8002522:	3344      	adds	r3, #68	; 0x44
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	8b39      	ldrh	r1, [r7, #24]
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4403      	add	r3, r0
 8002538:	3348      	adds	r3, #72	; 0x48
 800253a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	440b      	add	r3, r1
 800254a:	335c      	adds	r3, #92	; 0x5c
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	440b      	add	r3, r1
 800255e:	334c      	adds	r3, #76	; 0x4c
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002564:	78fa      	ldrb	r2, [r7, #3]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	440b      	add	r3, r1
 8002572:	3339      	adds	r3, #57	; 0x39
 8002574:	78fa      	ldrb	r2, [r7, #3]
 8002576:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002578:	78fa      	ldrb	r2, [r7, #3]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	440b      	add	r3, r1
 8002586:	335d      	adds	r3, #93	; 0x5d
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	3338      	adds	r3, #56	; 0x38
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	4413      	add	r3, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	f005 faa5 	bl	8007af0 <USB_HC_StartXfer>
 80025a6:	4603      	mov	r3, r0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f005 f819 	bl	80075fe <USB_GetMode>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	f040 80f1 	bne.w	80027b6 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f004 fffd 	bl	80075d8 <USB_ReadInterrupts>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80e7 	beq.w	80027b4 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f004 fff4 	bl	80075d8 <USB_ReadInterrupts>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025fa:	d104      	bne.n	8002606 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002604:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f004 ffe4 	bl	80075d8 <USB_ReadInterrupts>
 8002610:	4603      	mov	r3, r0
 8002612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800261a:	d104      	bne.n	8002626 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002624:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f004 ffd4 	bl	80075d8 <USB_ReadInterrupts>
 8002630:	4603      	mov	r3, r0
 8002632:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002636:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800263a:	d104      	bne.n	8002646 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002644:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f004 ffc4 	bl	80075d8 <USB_ReadInterrupts>
 8002650:	4603      	mov	r3, r0
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b02      	cmp	r3, #2
 8002658:	d103      	bne.n	8002662 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2202      	movs	r2, #2
 8002660:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f004 ffb6 	bl	80075d8 <USB_ReadInterrupts>
 800266c:	4603      	mov	r3, r0
 800266e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002672:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002676:	d117      	bne.n	80026a8 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002686:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800268a:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f007 fb6f 	bl	8009d70 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2101      	movs	r1, #1
 8002698:	4618      	mov	r0, r3
 800269a:	f005 f871 	bl	8007780 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80026a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f004 ff93 	bl	80075d8 <USB_ReadInterrupts>
 80026b2:	4603      	mov	r3, r0
 80026b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026bc:	d102      	bne.n	80026c4 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f001 f884 	bl	80037cc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f004 ff85 	bl	80075d8 <USB_ReadInterrupts>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d106      	bne.n	80026e6 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f007 fb2d 	bl	8009d38 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2208      	movs	r2, #8
 80026e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f004 ff74 	bl	80075d8 <USB_ReadInterrupts>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026fa:	d138      	bne.n	800276e <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f005 faf5 	bl	8007cf0 <USB_HC_ReadInterrupt>
 8002706:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	e025      	b.n	800275a <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f003 030f 	and.w	r3, r3, #15
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	fa22 f303 	lsr.w	r3, r2, r3
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d018      	beq.n	8002754 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4413      	add	r3, r2
 800272a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002738:	d106      	bne.n	8002748 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	4619      	mov	r1, r3
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f8cf 	bl	80028e4 <HCD_HC_IN_IRQHandler>
 8002746:	e005      	b.n	8002754 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	b2db      	uxtb	r3, r3
 800274c:	4619      	mov	r1, r3
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 fc3b 	bl	8002fca <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	3301      	adds	r3, #1
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	429a      	cmp	r2, r3
 8002762:	d3d4      	bcc.n	800270e <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800276c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f004 ff30 	bl	80075d8 <USB_ReadInterrupts>
 8002778:	4603      	mov	r3, r0
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	2b10      	cmp	r3, #16
 8002780:	d101      	bne.n	8002786 <HAL_HCD_IRQHandler+0x1d6>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <HAL_HCD_IRQHandler+0x1d8>
 8002786:	2300      	movs	r3, #0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d014      	beq.n	80027b6 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699a      	ldr	r2, [r3, #24]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0210 	bic.w	r2, r2, #16
 800279a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 ff69 	bl	8003674 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699a      	ldr	r2, [r3, #24]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0210 	orr.w	r2, r2, #16
 80027b0:	619a      	str	r2, [r3, #24]
 80027b2:	e000      	b.n	80027b6 <HAL_HCD_IRQHandler+0x206>
      return;
 80027b4:	bf00      	nop
    }
  }
}
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_HCD_Start+0x16>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e013      	b.n	80027fa <HAL_HCD_Start+0x3e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f004 fe0b 	bl	80073fa <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2101      	movs	r1, #1
 80027ea:	4618      	mov	r0, r3
 80027ec:	f005 f82c 	bl	8007848 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_HCD_Stop+0x16>
 8002814:	2302      	movs	r3, #2
 8002816:	e00d      	b.n	8002834 <HAL_HCD_Stop+0x32>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f005 fb73 	bl	8007f10 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f004 ffd3 	bl	80077f4 <USB_ResetPort>
 800284e:	4603      	mov	r3, r0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002864:	78fa      	ldrb	r2, [r7, #3]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	440b      	add	r3, r1
 8002872:	335c      	adds	r3, #92	; 0x5c
 8002874:	781b      	ldrb	r3, [r3, #0]
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	460b      	mov	r3, r1
 800288c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800288e:	78fa      	ldrb	r2, [r7, #3]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	440b      	add	r3, r1
 800289c:	334c      	adds	r3, #76	; 0x4c
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f005 f815 	bl	80078e8 <USB_GetCurrentFrame>
 80028be:	4603      	mov	r3, r0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f004 fff0 	bl	80078ba <USB_GetHostSpeed>
 80028da:	4603      	mov	r3, r0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80028fa:	78fb      	ldrb	r3, [r7, #3]
 80028fc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4413      	add	r3, r2
 8002906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b04      	cmp	r3, #4
 8002912:	d119      	bne.n	8002948 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4413      	add	r3, r2
 800291c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002920:	461a      	mov	r2, r3
 8002922:	2304      	movs	r3, #4
 8002924:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4413      	add	r3, r2
 800292e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	0151      	lsls	r1, r2, #5
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	440a      	add	r2, r1
 800293c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	60d3      	str	r3, [r2, #12]
 8002946:	e095      	b.n	8002a74 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4413      	add	r3, r2
 8002950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b20      	cmp	r3, #32
 800295c:	d109      	bne.n	8002972 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	015a      	lsls	r2, r3, #5
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	4413      	add	r3, r2
 8002966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296a:	461a      	mov	r2, r3
 800296c:	2320      	movs	r3, #32
 800296e:	6093      	str	r3, [r2, #8]
 8002970:	e080      	b.n	8002a74 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4413      	add	r3, r2
 800297a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b08      	cmp	r3, #8
 8002986:	d134      	bne.n	80029f2 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4413      	add	r3, r2
 8002990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	0151      	lsls	r1, r2, #5
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	440a      	add	r2, r1
 800299e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029a2:	f043 0302 	orr.w	r3, r3, #2
 80029a6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	440b      	add	r3, r1
 80029b6:	335d      	adds	r3, #93	; 0x5d
 80029b8:	2205      	movs	r2, #5
 80029ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c8:	461a      	mov	r2, r3
 80029ca:	2310      	movs	r3, #16
 80029cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029da:	461a      	mov	r2, r3
 80029dc:	2308      	movs	r3, #8
 80029de:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	4611      	mov	r1, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f005 f991 	bl	8007d12 <USB_HC_Halt>
 80029f0:	e040      	b.n	8002a74 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a08:	d134      	bne.n	8002a74 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	015a      	lsls	r2, r3, #5
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	4413      	add	r3, r2
 8002a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	0151      	lsls	r1, r2, #5
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	440a      	add	r2, r1
 8002a20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a24:	f043 0302 	orr.w	r3, r3, #2
 8002a28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f005 f96c 	bl	8007d12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a46:	461a      	mov	r2, r3
 8002a48:	2310      	movs	r3, #16
 8002a4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	440b      	add	r3, r1
 8002a5a:	335d      	adds	r3, #93	; 0x5d
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a72:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a8a:	d122      	bne.n	8002ad2 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	0151      	lsls	r1, r2, #5
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	440a      	add	r2, r1
 8002aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aa6:	f043 0302 	orr.w	r3, r3, #2
 8002aaa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f005 f92b 	bl	8007d12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac8:	461a      	mov	r2, r3
 8002aca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ace:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002ad0:	e277      	b.n	8002fc2 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	015a      	lsls	r2, r3, #5
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	f040 80a1 	bne.w	8002c2c <HCD_HC_IN_IRQHandler+0x348>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	440b      	add	r3, r1
 8002af8:	335d      	adds	r3, #93	; 0x5d
 8002afa:	2201      	movs	r2, #1
 8002afc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	440b      	add	r3, r1
 8002b0c:	3358      	adds	r3, #88	; 0x58
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1e:	461a      	mov	r2, r3
 8002b20:	2301      	movs	r3, #1
 8002b22:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	333f      	adds	r3, #63	; 0x3f
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <HCD_HC_IN_IRQHandler+0x26c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	440b      	add	r3, r1
 8002b48:	333f      	adds	r3, #63	; 0x3f
 8002b4a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d121      	bne.n	8002b94 <HCD_HC_IN_IRQHandler+0x2b0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	0151      	lsls	r1, r2, #5
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	440a      	add	r2, r1
 8002b66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b6a:	f043 0302 	orr.w	r3, r3, #2
 8002b6e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f005 f8c9 	bl	8007d12 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	2310      	movs	r3, #16
 8002b90:	6093      	str	r3, [r2, #8]
 8002b92:	e034      	b.n	8002bfe <HCD_HC_IN_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	440b      	add	r3, r1
 8002ba2:	333f      	adds	r3, #63	; 0x3f
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d129      	bne.n	8002bfe <HCD_HC_IN_IRQHandler+0x31a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	0151      	lsls	r1, r2, #5
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	440a      	add	r2, r1
 8002bc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002bc8:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	440b      	add	r3, r1
 8002bd8:	335c      	adds	r3, #92	; 0x5c
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	b2d8      	uxtb	r0, r3
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	440b      	add	r3, r1
 8002bf0:	335c      	adds	r3, #92	; 0x5c
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4601      	mov	r1, r0
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f007 f8c7 	bl	8009d8c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	440b      	add	r3, r1
 8002c0c:	3350      	adds	r3, #80	; 0x50
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	f083 0301 	eor.w	r3, r3, #1
 8002c14:	b2d8      	uxtb	r0, r3
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	440b      	add	r3, r1
 8002c24:	3350      	adds	r3, #80	; 0x50
 8002c26:	4602      	mov	r2, r0
 8002c28:	701a      	strb	r2, [r3, #0]
}
 8002c2a:	e1ca      	b.n	8002fc2 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	f040 80f1 	bne.w	8002e26 <HCD_HC_IN_IRQHandler+0x542>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	0151      	lsls	r1, r2, #5
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	440a      	add	r2, r1
 8002c5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c5e:	f023 0302 	bic.w	r3, r3, #2
 8002c62:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	440b      	add	r3, r1
 8002c72:	335d      	adds	r3, #93	; 0x5d
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d10a      	bne.n	8002c90 <HCD_HC_IN_IRQHandler+0x3ac>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	440b      	add	r3, r1
 8002c88:	335c      	adds	r3, #92	; 0x5c
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	e0b0      	b.n	8002df2 <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	440b      	add	r3, r1
 8002c9e:	335d      	adds	r3, #93	; 0x5d
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b05      	cmp	r3, #5
 8002ca4:	d10a      	bne.n	8002cbc <HCD_HC_IN_IRQHandler+0x3d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	440b      	add	r3, r1
 8002cb4:	335c      	adds	r3, #92	; 0x5c
 8002cb6:	2205      	movs	r2, #5
 8002cb8:	701a      	strb	r2, [r3, #0]
 8002cba:	e09a      	b.n	8002df2 <HCD_HC_IN_IRQHandler+0x50e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	440b      	add	r3, r1
 8002cca:	335d      	adds	r3, #93	; 0x5d
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b06      	cmp	r3, #6
 8002cd0:	d00a      	beq.n	8002ce8 <HCD_HC_IN_IRQHandler+0x404>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	440b      	add	r3, r1
 8002ce0:	335d      	adds	r3, #93	; 0x5d
 8002ce2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d156      	bne.n	8002d96 <HCD_HC_IN_IRQHandler+0x4b2>
      hhcd->hc[ch_num].ErrCnt++;
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3358      	adds	r3, #88	; 0x58
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	1c59      	adds	r1, r3, #1
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4403      	add	r3, r0
 8002d0a:	3358      	adds	r3, #88	; 0x58
 8002d0c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3358      	adds	r3, #88	; 0x58
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d914      	bls.n	8002d4e <HCD_HC_IN_IRQHandler+0x46a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	3358      	adds	r3, #88	; 0x58
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	440b      	add	r3, r1
 8002d46:	335c      	adds	r3, #92	; 0x5c
 8002d48:	2204      	movs	r2, #4
 8002d4a:	701a      	strb	r2, [r3, #0]
 8002d4c:	e009      	b.n	8002d62 <HCD_HC_IN_IRQHandler+0x47e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	440b      	add	r3, r1
 8002d5c:	335c      	adds	r3, #92	; 0x5c
 8002d5e:	2202      	movs	r2, #2
 8002d60:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d78:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d80:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	e02d      	b.n	8002df2 <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	440b      	add	r3, r1
 8002da4:	335d      	adds	r3, #93	; 0x5d
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d122      	bne.n	8002df2 <HCD_HC_IN_IRQHandler+0x50e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	440b      	add	r3, r1
 8002dba:	335c      	adds	r3, #92	; 0x5c
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dd6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dde:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dec:	461a      	mov	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfe:	461a      	mov	r2, r3
 8002e00:	2302      	movs	r3, #2
 8002e02:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	b2d8      	uxtb	r0, r3
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	440b      	add	r3, r1
 8002e16:	335c      	adds	r3, #92	; 0x5c
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4601      	mov	r1, r0
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f006 ffb4 	bl	8009d8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e24:	e0cd      	b.n	8002fc2 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e38:	2b80      	cmp	r3, #128	; 0x80
 8002e3a:	d13e      	bne.n	8002eba <HCD_HC_IN_IRQHandler+0x5d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	0151      	lsls	r1, r2, #5
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	440a      	add	r2, r1
 8002e52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e56:	f043 0302 	orr.w	r3, r3, #2
 8002e5a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	440b      	add	r3, r1
 8002e6a:	3358      	adds	r3, #88	; 0x58
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	1c59      	adds	r1, r3, #1
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4403      	add	r3, r0
 8002e7e:	3358      	adds	r3, #88	; 0x58
 8002e80:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	440b      	add	r3, r1
 8002e90:	335d      	adds	r3, #93	; 0x5d
 8002e92:	2206      	movs	r2, #6
 8002e94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f004 ff36 	bl	8007d12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2380      	movs	r3, #128	; 0x80
 8002eb6:	6093      	str	r3, [r2, #8]
}
 8002eb8:	e083      	b.n	8002fc2 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2b10      	cmp	r3, #16
 8002ece:	d178      	bne.n	8002fc2 <HCD_HC_IN_IRQHandler+0x6de>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	440b      	add	r3, r1
 8002ede:	333f      	adds	r3, #63	; 0x3f
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d122      	bne.n	8002f2c <HCD_HC_IN_IRQHandler+0x648>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	440b      	add	r3, r1
 8002ef4:	3358      	adds	r3, #88	; 0x58
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	0151      	lsls	r1, r2, #5
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	440a      	add	r2, r1
 8002f10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f14:	f043 0302 	orr.w	r3, r3, #2
 8002f18:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f004 fef4 	bl	8007d12 <USB_HC_Halt>
 8002f2a:	e041      	b.n	8002fb0 <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	440b      	add	r3, r1
 8002f3a:	333f      	adds	r3, #63	; 0x3f
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <HCD_HC_IN_IRQHandler+0x674>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	440b      	add	r3, r1
 8002f50:	333f      	adds	r3, #63	; 0x3f
 8002f52:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d12b      	bne.n	8002fb0 <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	440b      	add	r3, r1
 8002f66:	3358      	adds	r3, #88	; 0x58
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	440b      	add	r3, r1
 8002f7a:	335d      	adds	r3, #93	; 0x5d
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	0151      	lsls	r1, r2, #5
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	440a      	add	r2, r1
 8002f96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f9a:	f043 0302 	orr.w	r3, r3, #2
 8002f9e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f004 feb1 	bl	8007d12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2310      	movs	r3, #16
 8002fc0:	6093      	str	r3, [r2, #8]
}
 8002fc2:	bf00      	nop
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b086      	sub	sp, #24
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d119      	bne.n	800302e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4413      	add	r3, r2
 8003002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003006:	461a      	mov	r2, r3
 8003008:	2304      	movs	r3, #4
 800300a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4413      	add	r3, r2
 8003014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	0151      	lsls	r1, r2, #5
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	440a      	add	r2, r1
 8003022:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003026:	f043 0302 	orr.w	r3, r3, #2
 800302a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800302c:	e31e      	b.n	800366c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4413      	add	r3, r2
 8003036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	2b20      	cmp	r3, #32
 8003042:	d141      	bne.n	80030c8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4413      	add	r3, r2
 800304c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003050:	461a      	mov	r2, r3
 8003052:	2320      	movs	r3, #32
 8003054:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4613      	mov	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	440b      	add	r3, r1
 8003064:	333d      	adds	r3, #61	; 0x3d
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b01      	cmp	r3, #1
 800306a:	f040 82ff 	bne.w	800366c <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	440b      	add	r3, r1
 800307c:	333d      	adds	r3, #61	; 0x3d
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	440b      	add	r3, r1
 8003090:	335c      	adds	r3, #92	; 0x5c
 8003092:	2202      	movs	r2, #2
 8003094:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	4413      	add	r3, r2
 800309e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	0151      	lsls	r1, r2, #5
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	440a      	add	r2, r1
 80030ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030b0:	f043 0302 	orr.w	r3, r3, #2
 80030b4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	4611      	mov	r1, r2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f004 fe26 	bl	8007d12 <USB_HC_Halt>
}
 80030c6:	e2d1      	b.n	800366c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030da:	2b40      	cmp	r3, #64	; 0x40
 80030dc:	d13f      	bne.n	800315e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	440b      	add	r3, r1
 80030ec:	335d      	adds	r3, #93	; 0x5d
 80030ee:	2204      	movs	r2, #4
 80030f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	440b      	add	r3, r1
 8003100:	333d      	adds	r3, #61	; 0x3d
 8003102:	2201      	movs	r2, #1
 8003104:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	440b      	add	r3, r1
 8003114:	3358      	adds	r3, #88	; 0x58
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	4413      	add	r3, r2
 8003122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	0151      	lsls	r1, r2, #5
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	440a      	add	r2, r1
 8003130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003134:	f043 0302 	orr.w	r3, r3, #2
 8003138:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	4611      	mov	r1, r2
 8003144:	4618      	mov	r0, r3
 8003146:	f004 fde4 	bl	8007d12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4413      	add	r3, r2
 8003152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003156:	461a      	mov	r2, r3
 8003158:	2340      	movs	r3, #64	; 0x40
 800315a:	6093      	str	r3, [r2, #8]
}
 800315c:	e286      	b.n	800366c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003174:	d122      	bne.n	80031bc <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	015a      	lsls	r2, r3, #5
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4413      	add	r3, r2
 800317e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	0151      	lsls	r1, r2, #5
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	440a      	add	r2, r1
 800318c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003190:	f043 0302 	orr.w	r3, r3, #2
 8003194:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	4611      	mov	r1, r2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f004 fdb6 	bl	8007d12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b2:	461a      	mov	r2, r3
 80031b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031b8:	6093      	str	r3, [r2, #8]
}
 80031ba:	e257      	b.n	800366c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d135      	bne.n	800323e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	440b      	add	r3, r1
 80031e0:	3358      	adds	r3, #88	; 0x58
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	0151      	lsls	r1, r2, #5
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	440a      	add	r2, r1
 80031fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003200:	f043 0302 	orr.w	r3, r3, #2
 8003204:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	4611      	mov	r1, r2
 8003210:	4618      	mov	r0, r3
 8003212:	f004 fd7e 	bl	8007d12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	015a      	lsls	r2, r3, #5
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4413      	add	r3, r2
 800321e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003222:	461a      	mov	r2, r3
 8003224:	2301      	movs	r3, #1
 8003226:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	440b      	add	r3, r1
 8003236:	335d      	adds	r3, #93	; 0x5d
 8003238:	2201      	movs	r2, #1
 800323a:	701a      	strb	r2, [r3, #0]
}
 800323c:	e216      	b.n	800366c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4413      	add	r3, r2
 8003246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 0308 	and.w	r3, r3, #8
 8003250:	2b08      	cmp	r3, #8
 8003252:	d12b      	bne.n	80032ac <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4413      	add	r3, r2
 800325c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003260:	461a      	mov	r2, r3
 8003262:	2308      	movs	r3, #8
 8003264:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4413      	add	r3, r2
 800326e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	0151      	lsls	r1, r2, #5
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	440a      	add	r2, r1
 800327c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003280:	f043 0302 	orr.w	r3, r3, #2
 8003284:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	4611      	mov	r1, r2
 8003290:	4618      	mov	r0, r3
 8003292:	f004 fd3e 	bl	8007d12 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4613      	mov	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	440b      	add	r3, r1
 80032a4:	335d      	adds	r3, #93	; 0x5d
 80032a6:	2205      	movs	r2, #5
 80032a8:	701a      	strb	r2, [r3, #0]
}
 80032aa:	e1df      	b.n	800366c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 0310 	and.w	r3, r3, #16
 80032be:	2b10      	cmp	r3, #16
 80032c0:	d135      	bne.n	800332e <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	440b      	add	r3, r1
 80032d0:	3358      	adds	r3, #88	; 0x58
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	440b      	add	r3, r1
 80032e4:	335d      	adds	r3, #93	; 0x5d
 80032e6:	2203      	movs	r2, #3
 80032e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	0151      	lsls	r1, r2, #5
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	440a      	add	r2, r1
 8003300:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003304:	f043 0302 	orr.w	r3, r3, #2
 8003308:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	4611      	mov	r1, r2
 8003314:	4618      	mov	r0, r3
 8003316:	f004 fcfc 	bl	8007d12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4413      	add	r3, r2
 8003322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003326:	461a      	mov	r2, r3
 8003328:	2310      	movs	r3, #16
 800332a:	6093      	str	r3, [r2, #8]
}
 800332c:	e19e      	b.n	800366c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4413      	add	r3, r2
 8003336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003340:	2b80      	cmp	r3, #128	; 0x80
 8003342:	d12b      	bne.n	800339c <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	4413      	add	r3, r2
 800334c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	0151      	lsls	r1, r2, #5
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	440a      	add	r2, r1
 800335a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800335e:	f043 0302 	orr.w	r3, r3, #2
 8003362:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	4611      	mov	r1, r2
 800336e:	4618      	mov	r0, r3
 8003370:	f004 fccf 	bl	8007d12 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	440b      	add	r3, r1
 8003382:	335d      	adds	r3, #93	; 0x5d
 8003384:	2206      	movs	r2, #6
 8003386:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4413      	add	r3, r2
 8003390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003394:	461a      	mov	r2, r3
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	6093      	str	r3, [r2, #8]
}
 800339a:	e167      	b.n	800366c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b2:	d135      	bne.n	8003420 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	0151      	lsls	r1, r2, #5
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	440a      	add	r2, r1
 80033ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033ce:	f043 0302 	orr.w	r3, r3, #2
 80033d2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	4611      	mov	r1, r2
 80033de:	4618      	mov	r0, r3
 80033e0:	f004 fc97 	bl	8007d12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f0:	461a      	mov	r2, r3
 80033f2:	2310      	movs	r3, #16
 80033f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003402:	461a      	mov	r2, r3
 8003404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003408:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	440b      	add	r3, r1
 8003418:	335d      	adds	r3, #93	; 0x5d
 800341a:	2208      	movs	r2, #8
 800341c:	701a      	strb	r2, [r3, #0]
}
 800341e:	e125      	b.n	800366c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4413      	add	r3, r2
 8003428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b02      	cmp	r3, #2
 8003434:	f040 811a 	bne.w	800366c <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4413      	add	r3, r2
 8003440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	0151      	lsls	r1, r2, #5
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	440a      	add	r2, r1
 800344e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003452:	f023 0302 	bic.w	r3, r3, #2
 8003456:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	440b      	add	r3, r1
 8003466:	335d      	adds	r3, #93	; 0x5d
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d137      	bne.n	80034de <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	440b      	add	r3, r1
 800347c:	335c      	adds	r3, #92	; 0x5c
 800347e:	2201      	movs	r2, #1
 8003480:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	440b      	add	r3, r1
 8003490:	333f      	adds	r3, #63	; 0x3f
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d00b      	beq.n	80034b0 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	440b      	add	r3, r1
 80034a6:	333f      	adds	r3, #63	; 0x3f
 80034a8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	f040 80c5 	bne.w	800363a <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	440b      	add	r3, r1
 80034be:	3351      	adds	r3, #81	; 0x51
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	f083 0301 	eor.w	r3, r3, #1
 80034c6:	b2d8      	uxtb	r0, r3
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	440b      	add	r3, r1
 80034d6:	3351      	adds	r3, #81	; 0x51
 80034d8:	4602      	mov	r2, r0
 80034da:	701a      	strb	r2, [r3, #0]
 80034dc:	e0ad      	b.n	800363a <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	440b      	add	r3, r1
 80034ec:	335d      	adds	r3, #93	; 0x5d
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d10a      	bne.n	800350a <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	440b      	add	r3, r1
 8003502:	335c      	adds	r3, #92	; 0x5c
 8003504:	2202      	movs	r2, #2
 8003506:	701a      	strb	r2, [r3, #0]
 8003508:	e097      	b.n	800363a <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	440b      	add	r3, r1
 8003518:	335d      	adds	r3, #93	; 0x5d
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b04      	cmp	r3, #4
 800351e:	d10a      	bne.n	8003536 <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	440b      	add	r3, r1
 800352e:	335c      	adds	r3, #92	; 0x5c
 8003530:	2202      	movs	r2, #2
 8003532:	701a      	strb	r2, [r3, #0]
 8003534:	e081      	b.n	800363a <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	440b      	add	r3, r1
 8003544:	335d      	adds	r3, #93	; 0x5d
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b05      	cmp	r3, #5
 800354a:	d10a      	bne.n	8003562 <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	440b      	add	r3, r1
 800355a:	335c      	adds	r3, #92	; 0x5c
 800355c:	2205      	movs	r2, #5
 800355e:	701a      	strb	r2, [r3, #0]
 8003560:	e06b      	b.n	800363a <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	440b      	add	r3, r1
 8003570:	335d      	adds	r3, #93	; 0x5d
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b06      	cmp	r3, #6
 8003576:	d00a      	beq.n	800358e <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	440b      	add	r3, r1
 8003586:	335d      	adds	r3, #93	; 0x5d
 8003588:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800358a:	2b08      	cmp	r3, #8
 800358c:	d155      	bne.n	800363a <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	440b      	add	r3, r1
 800359c:	3358      	adds	r3, #88	; 0x58
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	1c59      	adds	r1, r3, #1
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4403      	add	r3, r0
 80035b0:	3358      	adds	r3, #88	; 0x58
 80035b2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	440b      	add	r3, r1
 80035c2:	3358      	adds	r3, #88	; 0x58
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d914      	bls.n	80035f4 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	440b      	add	r3, r1
 80035d8:	3358      	adds	r3, #88	; 0x58
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	440b      	add	r3, r1
 80035ec:	335c      	adds	r3, #92	; 0x5c
 80035ee:	2204      	movs	r2, #4
 80035f0:	701a      	strb	r2, [r3, #0]
 80035f2:	e009      	b.n	8003608 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	440b      	add	r3, r1
 8003602:	335c      	adds	r3, #92	; 0x5c
 8003604:	2202      	movs	r2, #2
 8003606:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	4413      	add	r3, r2
 8003610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800361e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003626:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4413      	add	r3, r2
 8003630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003634:	461a      	mov	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4413      	add	r3, r2
 8003642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003646:	461a      	mov	r2, r3
 8003648:	2302      	movs	r3, #2
 800364a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	b2d8      	uxtb	r0, r3
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	440b      	add	r3, r1
 800365e:	335c      	adds	r3, #92	; 0x5c
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	4601      	mov	r1, r0
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f006 fb90 	bl	8009d8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800366c:	bf00      	nop
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08a      	sub	sp, #40	; 0x28
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	0c5b      	lsrs	r3, r3, #17
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	091b      	lsrs	r3, r3, #4
 80036a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036a8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d003      	beq.n	80036b8 <HCD_RXQLVL_IRQHandler+0x44>
 80036b0:	2b05      	cmp	r3, #5
 80036b2:	f000 8082 	beq.w	80037ba <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80036b6:	e083      	b.n	80037c0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d07f      	beq.n	80037be <HCD_RXQLVL_IRQHandler+0x14a>
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	440b      	add	r3, r1
 80036cc:	3344      	adds	r3, #68	; 0x44
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d074      	beq.n	80037be <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	440b      	add	r3, r1
 80036e6:	3344      	adds	r3, #68	; 0x44
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	b292      	uxth	r2, r2
 80036ee:	4619      	mov	r1, r3
 80036f0:	f003 ff49 	bl	8007586 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	440b      	add	r3, r1
 8003702:	3344      	adds	r3, #68	; 0x44
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	18d1      	adds	r1, r2, r3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4403      	add	r3, r0
 8003718:	3344      	adds	r3, #68	; 0x44
 800371a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	440b      	add	r3, r1
 800372a:	334c      	adds	r3, #76	; 0x4c
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	18d1      	adds	r1, r2, r3
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4403      	add	r3, r0
 8003740:	334c      	adds	r3, #76	; 0x4c
 8003742:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	4413      	add	r3, r2
 800374c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003750:	691a      	ldr	r2, [r3, #16]
 8003752:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <HCD_RXQLVL_IRQHandler+0x154>)
 8003754:	4013      	ands	r3, r2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d031      	beq.n	80037be <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	015a      	lsls	r2, r3, #5
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	4413      	add	r3, r2
 8003762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003770:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003778:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	4413      	add	r3, r2
 8003782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003786:	461a      	mov	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	440b      	add	r3, r1
 800379a:	3350      	adds	r3, #80	; 0x50
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	f083 0301 	eor.w	r3, r3, #1
 80037a2:	b2d8      	uxtb	r0, r3
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	440b      	add	r3, r1
 80037b2:	3350      	adds	r3, #80	; 0x50
 80037b4:	4602      	mov	r2, r0
 80037b6:	701a      	strb	r2, [r3, #0]
      break;
 80037b8:	e001      	b.n	80037be <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80037ba:	bf00      	nop
 80037bc:	e000      	b.n	80037c0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80037be:	bf00      	nop
  }
}
 80037c0:	bf00      	nop
 80037c2:	3728      	adds	r7, #40	; 0x28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	1ff80000 	.word	0x1ff80000

080037cc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80037f8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b02      	cmp	r3, #2
 8003802:	d113      	bne.n	800382c <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b01      	cmp	r3, #1
 800380c:	d10a      	bne.n	8003824 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699a      	ldr	r2, [r3, #24]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800381c:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f006 fa98 	bl	8009d54 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f043 0302 	orr.w	r3, r3, #2
 800382a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b08      	cmp	r3, #8
 8003834:	d147      	bne.n	80038c6 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f043 0308 	orr.w	r3, r3, #8
 800383c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b04      	cmp	r3, #4
 8003846:	d129      	bne.n	800389c <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d113      	bne.n	8003878 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003856:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800385a:	d106      	bne.n	800386a <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2102      	movs	r1, #2
 8003862:	4618      	mov	r0, r3
 8003864:	f003 ff8c 	bl	8007780 <USB_InitFSLSPClkSel>
 8003868:	e011      	b.n	800388e <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2101      	movs	r1, #1
 8003870:	4618      	mov	r0, r3
 8003872:	f003 ff85 	bl	8007780 <USB_InitFSLSPClkSel>
 8003876:	e00a      	b.n	800388e <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d106      	bne.n	800388e <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003886:	461a      	mov	r2, r3
 8003888:	f64e 2360 	movw	r3, #60000	; 0xea60
 800388c:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f006 fa8a 	bl	8009da8 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f006 fa5d 	bl	8009d54 <HAL_HCD_Connect_Callback>
 800389a:	e014      	b.n	80038c6 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f006 fa91 	bl	8009dc4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80038b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80038b4:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699a      	ldr	r2, [r3, #24]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80038c4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f003 0320 	and.w	r3, r3, #32
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	d103      	bne.n	80038d8 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f043 0320 	orr.w	r3, r3, #32
 80038d6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038de:	461a      	mov	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	6013      	str	r3, [r2, #0]
}
 80038e4:	bf00      	nop
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e081      	b.n	8003a02 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fc fff6 	bl	8000904 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2224      	movs	r2, #36	; 0x24
 800391c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0201 	bic.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800393c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800394c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d107      	bne.n	8003966 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	e006      	b.n	8003974 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003972:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d104      	bne.n	8003986 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003984:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003998:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	ea42 0103 	orr.w	r1, r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	021a      	lsls	r2, r3, #8
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69d9      	ldr	r1, [r3, #28]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1a      	ldr	r2, [r3, #32]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	4608      	mov	r0, r1
 8003a16:	4611      	mov	r1, r2
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	817b      	strh	r3, [r7, #10]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	813b      	strh	r3, [r7, #8]
 8003a22:	4613      	mov	r3, r2
 8003a24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	f040 80f9 	bne.w	8003c26 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_I2C_Mem_Write+0x34>
 8003a3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d105      	bne.n	8003a4c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0ed      	b.n	8003c28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_I2C_Mem_Write+0x4e>
 8003a56:	2302      	movs	r3, #2
 8003a58:	e0e6      	b.n	8003c28 <HAL_I2C_Mem_Write+0x21c>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a62:	f7fe f823 	bl	8001aac <HAL_GetTick>
 8003a66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	2319      	movs	r3, #25
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f955 	bl	8003d24 <I2C_WaitOnFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0d1      	b.n	8003c28 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2221      	movs	r2, #33	; 0x21
 8003a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2240      	movs	r2, #64	; 0x40
 8003a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a3a      	ldr	r2, [r7, #32]
 8003a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003aac:	88f8      	ldrh	r0, [r7, #6]
 8003aae:	893a      	ldrh	r2, [r7, #8]
 8003ab0:	8979      	ldrh	r1, [r7, #10]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	4603      	mov	r3, r0
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 f8b9 	bl	8003c34 <I2C_RequestMemoryWrite>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0a9      	b.n	8003c28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2bff      	cmp	r3, #255	; 0xff
 8003adc:	d90e      	bls.n	8003afc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	22ff      	movs	r2, #255	; 0xff
 8003ae2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	8979      	ldrh	r1, [r7, #10]
 8003aec:	2300      	movs	r3, #0
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 fa37 	bl	8003f68 <I2C_TransferConfig>
 8003afa:	e00f      	b.n	8003b1c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	8979      	ldrh	r1, [r7, #10]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 fa26 	bl	8003f68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f93f 	bl	8003da4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e07b      	b.n	8003c28 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	781a      	ldrb	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d034      	beq.n	8003bd4 <HAL_I2C_Mem_Write+0x1c8>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d130      	bne.n	8003bd4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2180      	movs	r1, #128	; 0x80
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f8d1 	bl	8003d24 <I2C_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e04d      	b.n	8003c28 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2bff      	cmp	r3, #255	; 0xff
 8003b94:	d90e      	bls.n	8003bb4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	22ff      	movs	r2, #255	; 0xff
 8003b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	8979      	ldrh	r1, [r7, #10]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f9db 	bl	8003f68 <I2C_TransferConfig>
 8003bb2:	e00f      	b.n	8003bd4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	8979      	ldrh	r1, [r7, #10]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f9ca 	bl	8003f68 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d19e      	bne.n	8003b1c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f91e 	bl	8003e24 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e01a      	b.n	8003c28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6859      	ldr	r1, [r3, #4]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <HAL_I2C_Mem_Write+0x224>)
 8003c06:	400b      	ands	r3, r1
 8003c08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	e000      	b.n	8003c28 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003c26:	2302      	movs	r3, #2
  }
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	fe00e800 	.word	0xfe00e800

08003c34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	4608      	mov	r0, r1
 8003c3e:	4611      	mov	r1, r2
 8003c40:	461a      	mov	r2, r3
 8003c42:	4603      	mov	r3, r0
 8003c44:	817b      	strh	r3, [r7, #10]
 8003c46:	460b      	mov	r3, r1
 8003c48:	813b      	strh	r3, [r7, #8]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	8979      	ldrh	r1, [r7, #10]
 8003c54:	4b20      	ldr	r3, [pc, #128]	; (8003cd8 <I2C_RequestMemoryWrite+0xa4>)
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 f983 	bl	8003f68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	69b9      	ldr	r1, [r7, #24]
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f89c 	bl	8003da4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e02c      	b.n	8003cd0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d105      	bne.n	8003c88 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c7c:	893b      	ldrh	r3, [r7, #8]
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	629a      	str	r2, [r3, #40]	; 0x28
 8003c86:	e015      	b.n	8003cb4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c88:	893b      	ldrh	r3, [r7, #8]
 8003c8a:	0a1b      	lsrs	r3, r3, #8
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c96:	69fa      	ldr	r2, [r7, #28]
 8003c98:	69b9      	ldr	r1, [r7, #24]
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 f882 	bl	8003da4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e012      	b.n	8003cd0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003caa:	893b      	ldrh	r3, [r7, #8]
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2180      	movs	r1, #128	; 0x80
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f830 	bl	8003d24 <I2C_WaitOnFlagUntilTimeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	80002000 	.word	0x80002000

08003cdc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d103      	bne.n	8003cfa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d007      	beq.n	8003d18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699a      	ldr	r2, [r3, #24]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0201 	orr.w	r2, r2, #1
 8003d16:	619a      	str	r2, [r3, #24]
  }
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	603b      	str	r3, [r7, #0]
 8003d30:	4613      	mov	r3, r2
 8003d32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d34:	e022      	b.n	8003d7c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3c:	d01e      	beq.n	8003d7c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3e:	f7fd feb5 	bl	8001aac <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d302      	bcc.n	8003d54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d113      	bne.n	8003d7c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d58:	f043 0220 	orr.w	r2, r3, #32
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e00f      	b.n	8003d9c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	4013      	ands	r3, r2
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	bf0c      	ite	eq
 8003d8c:	2301      	moveq	r3, #1
 8003d8e:	2300      	movne	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	79fb      	ldrb	r3, [r7, #7]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d0cd      	beq.n	8003d36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003db0:	e02c      	b.n	8003e0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f870 	bl	8003e9c <I2C_IsAcknowledgeFailed>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e02a      	b.n	8003e1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dcc:	d01e      	beq.n	8003e0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dce:	f7fd fe6d 	bl	8001aac <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d302      	bcc.n	8003de4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d113      	bne.n	8003e0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de8:	f043 0220 	orr.w	r2, r3, #32
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e007      	b.n	8003e1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d1cb      	bne.n	8003db2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e30:	e028      	b.n	8003e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f830 	bl	8003e9c <I2C_IsAcknowledgeFailed>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e026      	b.n	8003e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e46:	f7fd fe31 	bl	8001aac <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d302      	bcc.n	8003e5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d113      	bne.n	8003e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e60:	f043 0220 	orr.w	r2, r3, #32
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e007      	b.n	8003e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	d1cf      	bne.n	8003e32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f003 0310 	and.w	r3, r3, #16
 8003eb2:	2b10      	cmp	r3, #16
 8003eb4:	d151      	bne.n	8003f5a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eb6:	e022      	b.n	8003efe <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d01e      	beq.n	8003efe <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec0:	f7fd fdf4 	bl	8001aac <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d302      	bcc.n	8003ed6 <I2C_IsAcknowledgeFailed+0x3a>
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d113      	bne.n	8003efe <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eda:	f043 0220 	orr.w	r2, r3, #32
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e02e      	b.n	8003f5c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b20      	cmp	r3, #32
 8003f0a:	d1d5      	bne.n	8003eb8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2210      	movs	r2, #16
 8003f12:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f7ff fedd 	bl	8003cdc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6859      	ldr	r1, [r3, #4]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <I2C_IsAcknowledgeFailed+0xc8>)
 8003f2e:	400b      	ands	r3, r1
 8003f30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	f043 0204 	orr.w	r2, r3, #4
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e000      	b.n	8003f5c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	fe00e800 	.word	0xfe00e800

08003f68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	607b      	str	r3, [r7, #4]
 8003f72:	460b      	mov	r3, r1
 8003f74:	817b      	strh	r3, [r7, #10]
 8003f76:	4613      	mov	r3, r2
 8003f78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	0d5b      	lsrs	r3, r3, #21
 8003f84:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f88:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <I2C_TransferConfig+0x58>)
 8003f8a:	430b      	orrs	r3, r1
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	ea02 0103 	and.w	r1, r2, r3
 8003f92:	897b      	ldrh	r3, [r7, #10]
 8003f94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f98:	7a7b      	ldrb	r3, [r7, #9]
 8003f9a:	041b      	lsls	r3, r3, #16
 8003f9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003fb2:	bf00      	nop
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	03ff63ff 	.word	0x03ff63ff

08003fc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	d138      	bne.n	800404c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e032      	b.n	800404e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2224      	movs	r2, #36	; 0x24
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0201 	bic.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004016:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6819      	ldr	r1, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	e000      	b.n	800404e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800404c:	2302      	movs	r3, #2
  }
}
 800404e:	4618      	mov	r0, r3
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800405a:	b480      	push	{r7}
 800405c:	b085      	sub	sp, #20
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b20      	cmp	r3, #32
 800406e:	d139      	bne.n	80040e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800407a:	2302      	movs	r3, #2
 800407c:	e033      	b.n	80040e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2224      	movs	r2, #36	; 0x24
 800408a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0201 	bic.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	021b      	lsls	r3, r3, #8
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	e000      	b.n	80040e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040e4:	2302      	movs	r3, #2
  }
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e0af      	b.n	8004266 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fc fc9e 	bl	8000a5c <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0201 	bic.w	r2, r2, #1
 8004136:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	e00a      	b.n	8004154 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	3304      	adds	r3, #4
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	2200      	movs	r2, #0
 800414c:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	3301      	adds	r3, #1
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2b0f      	cmp	r3, #15
 8004158:	d9f1      	bls.n	800413e <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0204 	orr.w	r2, r2, #4
 8004168:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	4b3f      	ldr	r3, [pc, #252]	; (8004270 <HAL_LCD_Init+0x17c>)
 8004172:	4013      	ands	r3, r2
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6851      	ldr	r1, [r2, #4]
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6892      	ldr	r2, [r2, #8]
 800417c:	4311      	orrs	r1, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004182:	4311      	orrs	r1, r2
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004188:	4311      	orrs	r1, r2
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	69d2      	ldr	r2, [r2, #28]
 800418e:	4311      	orrs	r1, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6a12      	ldr	r2, [r2, #32]
 8004194:	4311      	orrs	r1, r2
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6992      	ldr	r2, [r2, #24]
 800419a:	4311      	orrs	r1, r2
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041a0:	4311      	orrs	r1, r2
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6812      	ldr	r2, [r2, #0]
 80041a6:	430b      	orrs	r3, r1
 80041a8:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f862 	bl	8004274 <LCD_WaitForSynchro>
 80041b0:	4603      	mov	r3, r0
 80041b2:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 80041b4:	7cfb      	ldrb	r3, [r7, #19]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_LCD_Init+0xca>
  {
    return status;
 80041ba:	7cfb      	ldrb	r3, [r7, #19]
 80041bc:	e053      	b.n	8004266 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	431a      	orrs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0201 	orr.w	r2, r2, #1
 80041f4:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80041f6:	f7fd fc59 	bl	8001aac <HAL_GetTick>
 80041fa:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80041fc:	e00c      	b.n	8004218 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80041fe:	f7fd fc55 	bl	8001aac <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800420c:	d904      	bls.n	8004218 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2208      	movs	r2, #8
 8004212:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e026      	b.n	8004266 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b01      	cmp	r3, #1
 8004224:	d1eb      	bne.n	80041fe <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8004226:	f7fd fc41 	bl	8001aac <HAL_GetTick>
 800422a:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 800422c:	e00c      	b.n	8004248 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800422e:	f7fd fc3d 	bl	8001aac <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800423c:	d904      	bls.n	8004248 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2210      	movs	r2, #16
 8004242:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e00e      	b.n	8004266 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	2b10      	cmp	r3, #16
 8004254:	d1eb      	bne.n	800422e <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8004264:	7cfb      	ldrb	r3, [r7, #19]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	fc00000e 	.word	0xfc00000e

08004274 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 800427c:	f7fd fc16 	bl	8001aac <HAL_GetTick>
 8004280:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8004282:	e00c      	b.n	800429e <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8004284:	f7fd fc12 	bl	8001aac <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004292:	d904      	bls.n	800429e <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e007      	b.n	80042ae <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d1eb      	bne.n	8004284 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a04      	ldr	r2, [pc, #16]	; (80042d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c6:	6013      	str	r3, [r2, #0]
}
 80042c8:	bf00      	nop
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40007000 	.word	0x40007000

080042d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042dc:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40007000 	.word	0x40007000

080042f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004302:	d130      	bne.n	8004366 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004304:	4b23      	ldr	r3, [pc, #140]	; (8004394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800430c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004310:	d038      	beq.n	8004384 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004312:	4b20      	ldr	r3, [pc, #128]	; (8004394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800431a:	4a1e      	ldr	r2, [pc, #120]	; (8004394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800431c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004320:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004322:	4b1d      	ldr	r3, [pc, #116]	; (8004398 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2232      	movs	r2, #50	; 0x32
 8004328:	fb02 f303 	mul.w	r3, r2, r3
 800432c:	4a1b      	ldr	r2, [pc, #108]	; (800439c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800432e:	fba2 2303 	umull	r2, r3, r2, r3
 8004332:	0c9b      	lsrs	r3, r3, #18
 8004334:	3301      	adds	r3, #1
 8004336:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004338:	e002      	b.n	8004340 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3b01      	subs	r3, #1
 800433e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004340:	4b14      	ldr	r3, [pc, #80]	; (8004394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800434c:	d102      	bne.n	8004354 <HAL_PWREx_ControlVoltageScaling+0x60>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1f2      	bne.n	800433a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004354:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800435c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004360:	d110      	bne.n	8004384 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e00f      	b.n	8004386 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004366:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800436e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004372:	d007      	beq.n	8004384 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004374:	4b07      	ldr	r3, [pc, #28]	; (8004394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800437c:	4a05      	ldr	r2, [pc, #20]	; (8004394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800437e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004382:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40007000 	.word	0x40007000
 8004398:	20000020 	.word	0x20000020
 800439c:	431bde83 	.word	0x431bde83

080043a0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	4a04      	ldr	r2, [pc, #16]	; (80043bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80043aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043ae:	6053      	str	r3, [r2, #4]
}
 80043b0:	bf00      	nop
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40007000 	.word	0x40007000

080043c0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80043c8:	f7fd fb70 	bl	8001aac <HAL_GetTick>
 80043cc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e06f      	b.n	80044b8 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_QSPI_Init+0x28>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e067      	b.n	80044b8 <HAL_QSPI_Init+0xf8>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10b      	bne.n	8004414 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7fc fcc9 	bl	8000d9c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800440a:	f241 3188 	movw	r1, #5000	; 0x1388
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f858 	bl	80044c4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	3b01      	subs	r3, #1
 8004424:	021a      	lsls	r2, r3, #8
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	2120      	movs	r1, #32
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f850 	bl	80044e0 <QSPI_WaitFlagStateUntilTimeout>
 8004440:	4603      	mov	r3, r0
 8004442:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004444:	7afb      	ldrb	r3, [r7, #11]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d131      	bne.n	80044ae <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004454:	f023 0310 	bic.w	r3, r3, #16
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6852      	ldr	r2, [r2, #4]
 800445c:	0611      	lsls	r1, r2, #24
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	68d2      	ldr	r2, [r2, #12]
 8004462:	4311      	orrs	r1, r2
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	430b      	orrs	r3, r1
 800446a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	4b13      	ldr	r3, [pc, #76]	; (80044c0 <HAL_QSPI_Init+0x100>)
 8004474:	4013      	ands	r3, r2
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6912      	ldr	r2, [r2, #16]
 800447a:	0411      	lsls	r1, r2, #16
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6952      	ldr	r2, [r2, #20]
 8004480:	4311      	orrs	r1, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6992      	ldr	r2, [r2, #24]
 8004486:	4311      	orrs	r1, r2
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	430b      	orrs	r3, r1
 800448e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80044b6:	7afb      	ldrb	r3, [r7, #11]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	ffe0f8fe 	.word	0xffe0f8fe

080044c4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	4613      	mov	r3, r2
 80044ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80044f0:	e01a      	b.n	8004528 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f8:	d016      	beq.n	8004528 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fa:	f7fd fad7 	bl	8001aac <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	429a      	cmp	r2, r3
 8004508:	d302      	bcc.n	8004510 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10b      	bne.n	8004528 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2204      	movs	r2, #4
 8004514:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451c:	f043 0201 	orr.w	r2, r3, #1
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e00e      	b.n	8004546 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4013      	ands	r3, r2
 8004532:	2b00      	cmp	r3, #0
 8004534:	bf14      	ite	ne
 8004536:	2301      	movne	r3, #1
 8004538:	2300      	moveq	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	429a      	cmp	r2, r3
 8004542:	d1d6      	bne.n	80044f2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e39d      	b.n	8004c9e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004562:	4ba4      	ldr	r3, [pc, #656]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800456c:	4ba1      	ldr	r3, [pc, #644]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f003 0303 	and.w	r3, r3, #3
 8004574:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 80e1 	beq.w	8004746 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d007      	beq.n	800459a <HAL_RCC_OscConfig+0x4a>
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2b0c      	cmp	r3, #12
 800458e:	f040 8088 	bne.w	80046a2 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b01      	cmp	r3, #1
 8004596:	f040 8084 	bne.w	80046a2 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800459a:	4b96      	ldr	r3, [pc, #600]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d005      	beq.n	80045b2 <HAL_RCC_OscConfig+0x62>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e375      	b.n	8004c9e <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1a      	ldr	r2, [r3, #32]
 80045b6:	4b8f      	ldr	r3, [pc, #572]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d004      	beq.n	80045cc <HAL_RCC_OscConfig+0x7c>
 80045c2:	4b8c      	ldr	r3, [pc, #560]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ca:	e005      	b.n	80045d8 <HAL_RCC_OscConfig+0x88>
 80045cc:	4b89      	ldr	r3, [pc, #548]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 80045ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d2:	091b      	lsrs	r3, r3, #4
 80045d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045d8:	4293      	cmp	r3, r2
 80045da:	d223      	bcs.n	8004624 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fd09 	bl	8004ff8 <RCC_SetFlashLatencyFromMSIRange>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e356      	b.n	8004c9e <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045f0:	4b80      	ldr	r3, [pc, #512]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a7f      	ldr	r2, [pc, #508]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 80045f6:	f043 0308 	orr.w	r3, r3, #8
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	4b7d      	ldr	r3, [pc, #500]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	497a      	ldr	r1, [pc, #488]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 800460a:	4313      	orrs	r3, r2
 800460c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800460e:	4b79      	ldr	r3, [pc, #484]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	4975      	ldr	r1, [pc, #468]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 800461e:	4313      	orrs	r3, r2
 8004620:	604b      	str	r3, [r1, #4]
 8004622:	e022      	b.n	800466a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004624:	4b73      	ldr	r3, [pc, #460]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a72      	ldr	r2, [pc, #456]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 800462a:	f043 0308 	orr.w	r3, r3, #8
 800462e:	6013      	str	r3, [r2, #0]
 8004630:	4b70      	ldr	r3, [pc, #448]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	496d      	ldr	r1, [pc, #436]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 800463e:	4313      	orrs	r3, r2
 8004640:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004642:	4b6c      	ldr	r3, [pc, #432]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	021b      	lsls	r3, r3, #8
 8004650:	4968      	ldr	r1, [pc, #416]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 8004652:	4313      	orrs	r3, r2
 8004654:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fccc 	bl	8004ff8 <RCC_SetFlashLatencyFromMSIRange>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e319      	b.n	8004c9e <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800466a:	f000 fc03 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 800466e:	4601      	mov	r1, r0
 8004670:	4b60      	ldr	r3, [pc, #384]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	091b      	lsrs	r3, r3, #4
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	4a5f      	ldr	r2, [pc, #380]	; (80047f8 <HAL_RCC_OscConfig+0x2a8>)
 800467c:	5cd3      	ldrb	r3, [r2, r3]
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	fa21 f303 	lsr.w	r3, r1, r3
 8004686:	4a5d      	ldr	r2, [pc, #372]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 8004688:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800468a:	4b5d      	ldr	r3, [pc, #372]	; (8004800 <HAL_RCC_OscConfig+0x2b0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7fd f9c0 	bl	8001a14 <HAL_InitTick>
 8004694:	4603      	mov	r3, r0
 8004696:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d052      	beq.n	8004744 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	e2fd      	b.n	8004c9e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d032      	beq.n	8004710 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80046aa:	4b52      	ldr	r3, [pc, #328]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a51      	ldr	r2, [pc, #324]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046b6:	f7fd f9f9 	bl	8001aac <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046be:	f7fd f9f5 	bl	8001aac <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e2e6      	b.n	8004c9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046d0:	4b48      	ldr	r3, [pc, #288]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0f0      	beq.n	80046be <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046dc:	4b45      	ldr	r3, [pc, #276]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a44      	ldr	r2, [pc, #272]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 80046e2:	f043 0308 	orr.w	r3, r3, #8
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	4b42      	ldr	r3, [pc, #264]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	493f      	ldr	r1, [pc, #252]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046fa:	4b3e      	ldr	r3, [pc, #248]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	021b      	lsls	r3, r3, #8
 8004708:	493a      	ldr	r1, [pc, #232]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 800470a:	4313      	orrs	r3, r2
 800470c:	604b      	str	r3, [r1, #4]
 800470e:	e01a      	b.n	8004746 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004710:	4b38      	ldr	r3, [pc, #224]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a37      	ldr	r2, [pc, #220]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 8004716:	f023 0301 	bic.w	r3, r3, #1
 800471a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800471c:	f7fd f9c6 	bl	8001aac <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004724:	f7fd f9c2 	bl	8001aac <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e2b3      	b.n	8004c9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004736:	4b2f      	ldr	r3, [pc, #188]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x1d4>
 8004742:	e000      	b.n	8004746 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004744:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d074      	beq.n	800483c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	2b08      	cmp	r3, #8
 8004756:	d005      	beq.n	8004764 <HAL_RCC_OscConfig+0x214>
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	2b0c      	cmp	r3, #12
 800475c:	d10e      	bne.n	800477c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2b03      	cmp	r3, #3
 8004762:	d10b      	bne.n	800477c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004764:	4b23      	ldr	r3, [pc, #140]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d064      	beq.n	800483a <HAL_RCC_OscConfig+0x2ea>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d160      	bne.n	800483a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e290      	b.n	8004c9e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004784:	d106      	bne.n	8004794 <HAL_RCC_OscConfig+0x244>
 8004786:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1a      	ldr	r2, [pc, #104]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 800478c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	e01d      	b.n	80047d0 <HAL_RCC_OscConfig+0x280>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800479c:	d10c      	bne.n	80047b8 <HAL_RCC_OscConfig+0x268>
 800479e:	4b15      	ldr	r3, [pc, #84]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a14      	ldr	r2, [pc, #80]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 80047a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	4b12      	ldr	r3, [pc, #72]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a11      	ldr	r2, [pc, #68]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 80047b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	e00b      	b.n	80047d0 <HAL_RCC_OscConfig+0x280>
 80047b8:	4b0e      	ldr	r3, [pc, #56]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a0d      	ldr	r2, [pc, #52]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 80047be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047c2:	6013      	str	r3, [r2, #0]
 80047c4:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a0a      	ldr	r2, [pc, #40]	; (80047f4 <HAL_RCC_OscConfig+0x2a4>)
 80047ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01c      	beq.n	8004812 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d8:	f7fd f968 	bl	8001aac <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047de:	e011      	b.n	8004804 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e0:	f7fd f964 	bl	8001aac <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b64      	cmp	r3, #100	; 0x64
 80047ec:	d90a      	bls.n	8004804 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e255      	b.n	8004c9e <HAL_RCC_OscConfig+0x74e>
 80047f2:	bf00      	nop
 80047f4:	40021000 	.word	0x40021000
 80047f8:	0800d220 	.word	0x0800d220
 80047fc:	20000020 	.word	0x20000020
 8004800:	20000024 	.word	0x20000024
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004804:	4bae      	ldr	r3, [pc, #696]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0e7      	beq.n	80047e0 <HAL_RCC_OscConfig+0x290>
 8004810:	e014      	b.n	800483c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004812:	f7fd f94b 	bl	8001aac <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800481a:	f7fd f947 	bl	8001aac <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b64      	cmp	r3, #100	; 0x64
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e238      	b.n	8004c9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800482c:	4ba4      	ldr	r3, [pc, #656]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1f0      	bne.n	800481a <HAL_RCC_OscConfig+0x2ca>
 8004838:	e000      	b.n	800483c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800483a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d060      	beq.n	800490a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	2b04      	cmp	r3, #4
 800484c:	d005      	beq.n	800485a <HAL_RCC_OscConfig+0x30a>
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	2b0c      	cmp	r3, #12
 8004852:	d119      	bne.n	8004888 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d116      	bne.n	8004888 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800485a:	4b99      	ldr	r3, [pc, #612]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004862:	2b00      	cmp	r3, #0
 8004864:	d005      	beq.n	8004872 <HAL_RCC_OscConfig+0x322>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e215      	b.n	8004c9e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004872:	4b93      	ldr	r3, [pc, #588]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	061b      	lsls	r3, r3, #24
 8004880:	498f      	ldr	r1, [pc, #572]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 8004882:	4313      	orrs	r3, r2
 8004884:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004886:	e040      	b.n	800490a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d023      	beq.n	80048d8 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004890:	4b8b      	ldr	r3, [pc, #556]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a8a      	ldr	r2, [pc, #552]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 8004896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800489a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489c:	f7fd f906 	bl	8001aac <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048a4:	f7fd f902 	bl	8001aac <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e1f3      	b.n	8004c9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048b6:	4b82      	ldr	r3, [pc, #520]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c2:	4b7f      	ldr	r3, [pc, #508]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	061b      	lsls	r3, r3, #24
 80048d0:	497b      	ldr	r1, [pc, #492]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	604b      	str	r3, [r1, #4]
 80048d6:	e018      	b.n	800490a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048d8:	4b79      	ldr	r3, [pc, #484]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a78      	ldr	r2, [pc, #480]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 80048de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e4:	f7fd f8e2 	bl	8001aac <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ec:	f7fd f8de 	bl	8001aac <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e1cf      	b.n	8004c9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048fe:	4b70      	ldr	r3, [pc, #448]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d03c      	beq.n	8004990 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d01c      	beq.n	8004958 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800491e:	4b68      	ldr	r3, [pc, #416]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 8004920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004924:	4a66      	ldr	r2, [pc, #408]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 8004926:	f043 0301 	orr.w	r3, r3, #1
 800492a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492e:	f7fd f8bd 	bl	8001aac <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004936:	f7fd f8b9 	bl	8001aac <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e1aa      	b.n	8004c9e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004948:	4b5d      	ldr	r3, [pc, #372]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 800494a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0ef      	beq.n	8004936 <HAL_RCC_OscConfig+0x3e6>
 8004956:	e01b      	b.n	8004990 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004958:	4b59      	ldr	r3, [pc, #356]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 800495a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800495e:	4a58      	ldr	r2, [pc, #352]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 8004960:	f023 0301 	bic.w	r3, r3, #1
 8004964:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004968:	f7fd f8a0 	bl	8001aac <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004970:	f7fd f89c 	bl	8001aac <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e18d      	b.n	8004c9e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004982:	4b4f      	ldr	r3, [pc, #316]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 8004984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1ef      	bne.n	8004970 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 80a5 	beq.w	8004ae8 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800499e:	2300      	movs	r3, #0
 80049a0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80049a2:	4b47      	ldr	r3, [pc, #284]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 80049a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10d      	bne.n	80049ca <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ae:	4b44      	ldr	r3, [pc, #272]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 80049b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b2:	4a43      	ldr	r2, [pc, #268]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 80049b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049b8:	6593      	str	r3, [r2, #88]	; 0x58
 80049ba:	4b41      	ldr	r3, [pc, #260]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 80049bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c2:	60bb      	str	r3, [r7, #8]
 80049c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049c6:	2301      	movs	r3, #1
 80049c8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ca:	4b3e      	ldr	r3, [pc, #248]	; (8004ac4 <HAL_RCC_OscConfig+0x574>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d118      	bne.n	8004a08 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049d6:	4b3b      	ldr	r3, [pc, #236]	; (8004ac4 <HAL_RCC_OscConfig+0x574>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a3a      	ldr	r2, [pc, #232]	; (8004ac4 <HAL_RCC_OscConfig+0x574>)
 80049dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049e2:	f7fd f863 	bl	8001aac <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ea:	f7fd f85f 	bl	8001aac <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e150      	b.n	8004c9e <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049fc:	4b31      	ldr	r3, [pc, #196]	; (8004ac4 <HAL_RCC_OscConfig+0x574>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0f0      	beq.n	80049ea <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d108      	bne.n	8004a22 <HAL_RCC_OscConfig+0x4d2>
 8004a10:	4b2b      	ldr	r3, [pc, #172]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a16:	4a2a      	ldr	r2, [pc, #168]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a20:	e024      	b.n	8004a6c <HAL_RCC_OscConfig+0x51c>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2b05      	cmp	r3, #5
 8004a28:	d110      	bne.n	8004a4c <HAL_RCC_OscConfig+0x4fc>
 8004a2a:	4b25      	ldr	r3, [pc, #148]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 8004a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a30:	4a23      	ldr	r2, [pc, #140]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 8004a32:	f043 0304 	orr.w	r3, r3, #4
 8004a36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a3a:	4b21      	ldr	r3, [pc, #132]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 8004a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a40:	4a1f      	ldr	r2, [pc, #124]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 8004a42:	f043 0301 	orr.w	r3, r3, #1
 8004a46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a4a:	e00f      	b.n	8004a6c <HAL_RCC_OscConfig+0x51c>
 8004a4c:	4b1c      	ldr	r3, [pc, #112]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 8004a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a52:	4a1b      	ldr	r2, [pc, #108]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 8004a54:	f023 0301 	bic.w	r3, r3, #1
 8004a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a5c:	4b18      	ldr	r3, [pc, #96]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a62:	4a17      	ldr	r2, [pc, #92]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 8004a64:	f023 0304 	bic.w	r3, r3, #4
 8004a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d016      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a74:	f7fd f81a 	bl	8001aac <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a7a:	e00a      	b.n	8004a92 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a7c:	f7fd f816 	bl	8001aac <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e105      	b.n	8004c9e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a92:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <HAL_RCC_OscConfig+0x570>)
 8004a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0ed      	beq.n	8004a7c <HAL_RCC_OscConfig+0x52c>
 8004aa0:	e019      	b.n	8004ad6 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa2:	f7fd f803 	bl	8001aac <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004aa8:	e00e      	b.n	8004ac8 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aaa:	f7fc ffff 	bl	8001aac <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d905      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e0ee      	b.n	8004c9e <HAL_RCC_OscConfig+0x74e>
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ac8:	4b77      	ldr	r3, [pc, #476]	; (8004ca8 <HAL_RCC_OscConfig+0x758>)
 8004aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1e9      	bne.n	8004aaa <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ad6:	7ffb      	ldrb	r3, [r7, #31]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d105      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004adc:	4b72      	ldr	r3, [pc, #456]	; (8004ca8 <HAL_RCC_OscConfig+0x758>)
 8004ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae0:	4a71      	ldr	r2, [pc, #452]	; (8004ca8 <HAL_RCC_OscConfig+0x758>)
 8004ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ae6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 80d5 	beq.w	8004c9c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	2b0c      	cmp	r3, #12
 8004af6:	f000 808e 	beq.w	8004c16 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d15b      	bne.n	8004bba <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b02:	4b69      	ldr	r3, [pc, #420]	; (8004ca8 <HAL_RCC_OscConfig+0x758>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a68      	ldr	r2, [pc, #416]	; (8004ca8 <HAL_RCC_OscConfig+0x758>)
 8004b08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0e:	f7fc ffcd 	bl	8001aac <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b14:	e008      	b.n	8004b28 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b16:	f7fc ffc9 	bl	8001aac <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e0ba      	b.n	8004c9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b28:	4b5f      	ldr	r3, [pc, #380]	; (8004ca8 <HAL_RCC_OscConfig+0x758>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f0      	bne.n	8004b16 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b34:	4b5c      	ldr	r3, [pc, #368]	; (8004ca8 <HAL_RCC_OscConfig+0x758>)
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	4b5c      	ldr	r3, [pc, #368]	; (8004cac <HAL_RCC_OscConfig+0x75c>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b44:	3a01      	subs	r2, #1
 8004b46:	0112      	lsls	r2, r2, #4
 8004b48:	4311      	orrs	r1, r2
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b4e:	0212      	lsls	r2, r2, #8
 8004b50:	4311      	orrs	r1, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b56:	0852      	lsrs	r2, r2, #1
 8004b58:	3a01      	subs	r2, #1
 8004b5a:	0552      	lsls	r2, r2, #21
 8004b5c:	4311      	orrs	r1, r2
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b62:	0852      	lsrs	r2, r2, #1
 8004b64:	3a01      	subs	r2, #1
 8004b66:	0652      	lsls	r2, r2, #25
 8004b68:	4311      	orrs	r1, r2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b6e:	0912      	lsrs	r2, r2, #4
 8004b70:	0452      	lsls	r2, r2, #17
 8004b72:	430a      	orrs	r2, r1
 8004b74:	494c      	ldr	r1, [pc, #304]	; (8004ca8 <HAL_RCC_OscConfig+0x758>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b7a:	4b4b      	ldr	r3, [pc, #300]	; (8004ca8 <HAL_RCC_OscConfig+0x758>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a4a      	ldr	r2, [pc, #296]	; (8004ca8 <HAL_RCC_OscConfig+0x758>)
 8004b80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b84:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b86:	4b48      	ldr	r3, [pc, #288]	; (8004ca8 <HAL_RCC_OscConfig+0x758>)
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	4a47      	ldr	r2, [pc, #284]	; (8004ca8 <HAL_RCC_OscConfig+0x758>)
 8004b8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b90:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b92:	f7fc ff8b 	bl	8001aac <HAL_GetTick>
 8004b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b9a:	f7fc ff87 	bl	8001aac <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e078      	b.n	8004c9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bac:	4b3e      	ldr	r3, [pc, #248]	; (8004ca8 <HAL_RCC_OscConfig+0x758>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0f0      	beq.n	8004b9a <HAL_RCC_OscConfig+0x64a>
 8004bb8:	e070      	b.n	8004c9c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bba:	4b3b      	ldr	r3, [pc, #236]	; (8004ca8 <HAL_RCC_OscConfig+0x758>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a3a      	ldr	r2, [pc, #232]	; (8004ca8 <HAL_RCC_OscConfig+0x758>)
 8004bc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bc4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004bc6:	4b38      	ldr	r3, [pc, #224]	; (8004ca8 <HAL_RCC_OscConfig+0x758>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d105      	bne.n	8004bde <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004bd2:	4b35      	ldr	r3, [pc, #212]	; (8004ca8 <HAL_RCC_OscConfig+0x758>)
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	4a34      	ldr	r2, [pc, #208]	; (8004ca8 <HAL_RCC_OscConfig+0x758>)
 8004bd8:	f023 0303 	bic.w	r3, r3, #3
 8004bdc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004bde:	4b32      	ldr	r3, [pc, #200]	; (8004ca8 <HAL_RCC_OscConfig+0x758>)
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	4a31      	ldr	r2, [pc, #196]	; (8004ca8 <HAL_RCC_OscConfig+0x758>)
 8004be4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bee:	f7fc ff5d 	bl	8001aac <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf6:	f7fc ff59 	bl	8001aac <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e04a      	b.n	8004c9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c08:	4b27      	ldr	r3, [pc, #156]	; (8004ca8 <HAL_RCC_OscConfig+0x758>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1f0      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x6a6>
 8004c14:	e042      	b.n	8004c9c <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d101      	bne.n	8004c22 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e03d      	b.n	8004c9e <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004c22:	4b21      	ldr	r3, [pc, #132]	; (8004ca8 <HAL_RCC_OscConfig+0x758>)
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f003 0203 	and.w	r2, r3, #3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d130      	bne.n	8004c98 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	3b01      	subs	r3, #1
 8004c42:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d127      	bne.n	8004c98 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c52:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d11f      	bne.n	8004c98 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c62:	2a07      	cmp	r2, #7
 8004c64:	bf14      	ite	ne
 8004c66:	2201      	movne	r2, #1
 8004c68:	2200      	moveq	r2, #0
 8004c6a:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d113      	bne.n	8004c98 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7a:	085b      	lsrs	r3, r3, #1
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d109      	bne.n	8004c98 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	085b      	lsrs	r3, r3, #1
 8004c90:	3b01      	subs	r3, #1
 8004c92:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d001      	beq.n	8004c9c <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3720      	adds	r7, #32
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	f99d808c 	.word	0xf99d808c

08004cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e0c8      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc4:	4b66      	ldr	r3, [pc, #408]	; (8004e60 <HAL_RCC_ClockConfig+0x1b0>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d910      	bls.n	8004cf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd2:	4b63      	ldr	r3, [pc, #396]	; (8004e60 <HAL_RCC_ClockConfig+0x1b0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f023 0207 	bic.w	r2, r3, #7
 8004cda:	4961      	ldr	r1, [pc, #388]	; (8004e60 <HAL_RCC_ClockConfig+0x1b0>)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce2:	4b5f      	ldr	r3, [pc, #380]	; (8004e60 <HAL_RCC_ClockConfig+0x1b0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d001      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e0b0      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d04c      	beq.n	8004d9a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d107      	bne.n	8004d18 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d08:	4b56      	ldr	r3, [pc, #344]	; (8004e64 <HAL_RCC_ClockConfig+0x1b4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d121      	bne.n	8004d58 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e09e      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d107      	bne.n	8004d30 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d20:	4b50      	ldr	r3, [pc, #320]	; (8004e64 <HAL_RCC_ClockConfig+0x1b4>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d115      	bne.n	8004d58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e092      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d107      	bne.n	8004d48 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d38:	4b4a      	ldr	r3, [pc, #296]	; (8004e64 <HAL_RCC_ClockConfig+0x1b4>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d109      	bne.n	8004d58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e086      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d48:	4b46      	ldr	r3, [pc, #280]	; (8004e64 <HAL_RCC_ClockConfig+0x1b4>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e07e      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d58:	4b42      	ldr	r3, [pc, #264]	; (8004e64 <HAL_RCC_ClockConfig+0x1b4>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f023 0203 	bic.w	r2, r3, #3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	493f      	ldr	r1, [pc, #252]	; (8004e64 <HAL_RCC_ClockConfig+0x1b4>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d6a:	f7fc fe9f 	bl	8001aac <HAL_GetTick>
 8004d6e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d70:	e00a      	b.n	8004d88 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d72:	f7fc fe9b 	bl	8001aac <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e066      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d88:	4b36      	ldr	r3, [pc, #216]	; (8004e64 <HAL_RCC_ClockConfig+0x1b4>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 020c 	and.w	r2, r3, #12
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d1eb      	bne.n	8004d72 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d008      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004da6:	4b2f      	ldr	r3, [pc, #188]	; (8004e64 <HAL_RCC_ClockConfig+0x1b4>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	492c      	ldr	r1, [pc, #176]	; (8004e64 <HAL_RCC_ClockConfig+0x1b4>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004db8:	4b29      	ldr	r3, [pc, #164]	; (8004e60 <HAL_RCC_ClockConfig+0x1b0>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d210      	bcs.n	8004de8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc6:	4b26      	ldr	r3, [pc, #152]	; (8004e60 <HAL_RCC_ClockConfig+0x1b0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f023 0207 	bic.w	r2, r3, #7
 8004dce:	4924      	ldr	r1, [pc, #144]	; (8004e60 <HAL_RCC_ClockConfig+0x1b0>)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd6:	4b22      	ldr	r3, [pc, #136]	; (8004e60 <HAL_RCC_ClockConfig+0x1b0>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d001      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e036      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d008      	beq.n	8004e06 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004df4:	4b1b      	ldr	r3, [pc, #108]	; (8004e64 <HAL_RCC_ClockConfig+0x1b4>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	4918      	ldr	r1, [pc, #96]	; (8004e64 <HAL_RCC_ClockConfig+0x1b4>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0308 	and.w	r3, r3, #8
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d009      	beq.n	8004e26 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e12:	4b14      	ldr	r3, [pc, #80]	; (8004e64 <HAL_RCC_ClockConfig+0x1b4>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	4910      	ldr	r1, [pc, #64]	; (8004e64 <HAL_RCC_ClockConfig+0x1b4>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e26:	f000 f825 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8004e2a:	4601      	mov	r1, r0
 8004e2c:	4b0d      	ldr	r3, [pc, #52]	; (8004e64 <HAL_RCC_ClockConfig+0x1b4>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	091b      	lsrs	r3, r3, #4
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	4a0c      	ldr	r2, [pc, #48]	; (8004e68 <HAL_RCC_ClockConfig+0x1b8>)
 8004e38:	5cd3      	ldrb	r3, [r2, r3]
 8004e3a:	f003 031f 	and.w	r3, r3, #31
 8004e3e:	fa21 f303 	lsr.w	r3, r1, r3
 8004e42:	4a0a      	ldr	r2, [pc, #40]	; (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e46:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fc fde2 	bl	8001a14 <HAL_InitTick>
 8004e50:	4603      	mov	r3, r0
 8004e52:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e54:	7afb      	ldrb	r3, [r7, #11]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40022000 	.word	0x40022000
 8004e64:	40021000 	.word	0x40021000
 8004e68:	0800d220 	.word	0x0800d220
 8004e6c:	20000020 	.word	0x20000020
 8004e70:	20000024 	.word	0x20000024

08004e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b089      	sub	sp, #36	; 0x24
 8004e78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e82:	4b3d      	ldr	r3, [pc, #244]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 030c 	and.w	r3, r3, #12
 8004e8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e8c:	4b3a      	ldr	r3, [pc, #232]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f003 0303 	and.w	r3, r3, #3
 8004e94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	2b0c      	cmp	r3, #12
 8004ea0:	d121      	bne.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d11e      	bne.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ea8:	4b33      	ldr	r3, [pc, #204]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x104>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d107      	bne.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004eb4:	4b30      	ldr	r3, [pc, #192]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x104>)
 8004eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eba:	0a1b      	lsrs	r3, r3, #8
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	61fb      	str	r3, [r7, #28]
 8004ec2:	e005      	b.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ec4:	4b2c      	ldr	r3, [pc, #176]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	091b      	lsrs	r3, r3, #4
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ed0:	4a2a      	ldr	r2, [pc, #168]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10d      	bne.n	8004efc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ee4:	e00a      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d102      	bne.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004eec:	4b24      	ldr	r3, [pc, #144]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004eee:	61bb      	str	r3, [r7, #24]
 8004ef0:	e004      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d101      	bne.n	8004efc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ef8:	4b22      	ldr	r3, [pc, #136]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x110>)
 8004efa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b0c      	cmp	r3, #12
 8004f00:	d133      	bne.n	8004f6a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f02:	4b1d      	ldr	r3, [pc, #116]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d002      	beq.n	8004f18 <HAL_RCC_GetSysClockFreq+0xa4>
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	d003      	beq.n	8004f1e <HAL_RCC_GetSysClockFreq+0xaa>
 8004f16:	e005      	b.n	8004f24 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f18:	4b19      	ldr	r3, [pc, #100]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f1a:	617b      	str	r3, [r7, #20]
      break;
 8004f1c:	e005      	b.n	8004f2a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f1e:	4b19      	ldr	r3, [pc, #100]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f20:	617b      	str	r3, [r7, #20]
      break;
 8004f22:	e002      	b.n	8004f2a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	617b      	str	r3, [r7, #20]
      break;
 8004f28:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f2a:	4b13      	ldr	r3, [pc, #76]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	091b      	lsrs	r3, r3, #4
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	3301      	adds	r3, #1
 8004f36:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f38:	4b0f      	ldr	r3, [pc, #60]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	0a1b      	lsrs	r3, r3, #8
 8004f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	fb02 f203 	mul.w	r2, r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f50:	4b09      	ldr	r3, [pc, #36]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	0e5b      	lsrs	r3, r3, #25
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f68:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f6a:	69bb      	ldr	r3, [r7, #24]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3724      	adds	r7, #36	; 0x24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	0800d238 	.word	0x0800d238
 8004f80:	00f42400 	.word	0x00f42400
 8004f84:	007a1200 	.word	0x007a1200

08004f88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f8c:	4b03      	ldr	r3, [pc, #12]	; (8004f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	20000020 	.word	0x20000020

08004fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fa4:	f7ff fff0 	bl	8004f88 <HAL_RCC_GetHCLKFreq>
 8004fa8:	4601      	mov	r1, r0
 8004faa:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	0a1b      	lsrs	r3, r3, #8
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	4a04      	ldr	r2, [pc, #16]	; (8004fc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fb6:	5cd3      	ldrb	r3, [r2, r3]
 8004fb8:	f003 031f 	and.w	r3, r3, #31
 8004fbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	0800d230 	.word	0x0800d230

08004fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004fd0:	f7ff ffda 	bl	8004f88 <HAL_RCC_GetHCLKFreq>
 8004fd4:	4601      	mov	r1, r0
 8004fd6:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	0adb      	lsrs	r3, r3, #11
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	4a04      	ldr	r2, [pc, #16]	; (8004ff4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fe2:	5cd3      	ldrb	r3, [r2, r3]
 8004fe4:	f003 031f 	and.w	r3, r3, #31
 8004fe8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	0800d230 	.word	0x0800d230

08004ff8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005000:	2300      	movs	r3, #0
 8005002:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005004:	4b2a      	ldr	r3, [pc, #168]	; (80050b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005010:	f7ff f962 	bl	80042d8 <HAL_PWREx_GetVoltageRange>
 8005014:	6178      	str	r0, [r7, #20]
 8005016:	e014      	b.n	8005042 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005018:	4b25      	ldr	r3, [pc, #148]	; (80050b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800501a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501c:	4a24      	ldr	r2, [pc, #144]	; (80050b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800501e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005022:	6593      	str	r3, [r2, #88]	; 0x58
 8005024:	4b22      	ldr	r3, [pc, #136]	; (80050b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005030:	f7ff f952 	bl	80042d8 <HAL_PWREx_GetVoltageRange>
 8005034:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005036:	4b1e      	ldr	r3, [pc, #120]	; (80050b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503a:	4a1d      	ldr	r2, [pc, #116]	; (80050b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800503c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005040:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005048:	d10b      	bne.n	8005062 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b80      	cmp	r3, #128	; 0x80
 800504e:	d919      	bls.n	8005084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2ba0      	cmp	r3, #160	; 0xa0
 8005054:	d902      	bls.n	800505c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005056:	2302      	movs	r3, #2
 8005058:	613b      	str	r3, [r7, #16]
 800505a:	e013      	b.n	8005084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800505c:	2301      	movs	r3, #1
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	e010      	b.n	8005084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b80      	cmp	r3, #128	; 0x80
 8005066:	d902      	bls.n	800506e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005068:	2303      	movs	r3, #3
 800506a:	613b      	str	r3, [r7, #16]
 800506c:	e00a      	b.n	8005084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b80      	cmp	r3, #128	; 0x80
 8005072:	d102      	bne.n	800507a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005074:	2302      	movs	r3, #2
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	e004      	b.n	8005084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b70      	cmp	r3, #112	; 0x70
 800507e:	d101      	bne.n	8005084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005080:	2301      	movs	r3, #1
 8005082:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005084:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f023 0207 	bic.w	r2, r3, #7
 800508c:	4909      	ldr	r1, [pc, #36]	; (80050b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4313      	orrs	r3, r2
 8005092:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005094:	4b07      	ldr	r3, [pc, #28]	; (80050b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d001      	beq.n	80050a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40021000 	.word	0x40021000
 80050b4:	40022000 	.word	0x40022000

080050b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050c0:	2300      	movs	r3, #0
 80050c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050c4:	2300      	movs	r3, #0
 80050c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d03f      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050dc:	d01c      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80050de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050e2:	d802      	bhi.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x32>
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00e      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80050e8:	e01f      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80050ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050ee:	d003      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80050f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050f4:	d01c      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80050f6:	e018      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050f8:	4b85      	ldr	r3, [pc, #532]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	4a84      	ldr	r2, [pc, #528]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005102:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005104:	e015      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3304      	adds	r3, #4
 800510a:	2100      	movs	r1, #0
 800510c:	4618      	mov	r0, r3
 800510e:	f000 ff41 	bl	8005f94 <RCCEx_PLLSAI1_Config>
 8005112:	4603      	mov	r3, r0
 8005114:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005116:	e00c      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3320      	adds	r3, #32
 800511c:	2100      	movs	r1, #0
 800511e:	4618      	mov	r0, r3
 8005120:	f001 f828 	bl	8006174 <RCCEx_PLLSAI2_Config>
 8005124:	4603      	mov	r3, r0
 8005126:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005128:	e003      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	74fb      	strb	r3, [r7, #19]
      break;
 800512e:	e000      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005130:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005132:	7cfb      	ldrb	r3, [r7, #19]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10b      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005138:	4b75      	ldr	r3, [pc, #468]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800513a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005146:	4972      	ldr	r1, [pc, #456]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800514e:	e001      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005150:	7cfb      	ldrb	r3, [r7, #19]
 8005152:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d03f      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005168:	d01c      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800516a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800516e:	d802      	bhi.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00e      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005174:	e01f      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005176:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800517a:	d003      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800517c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005180:	d01c      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x104>
 8005182:	e018      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005184:	4b62      	ldr	r3, [pc, #392]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	4a61      	ldr	r2, [pc, #388]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800518a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800518e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005190:	e015      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3304      	adds	r3, #4
 8005196:	2100      	movs	r1, #0
 8005198:	4618      	mov	r0, r3
 800519a:	f000 fefb 	bl	8005f94 <RCCEx_PLLSAI1_Config>
 800519e:	4603      	mov	r3, r0
 80051a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051a2:	e00c      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3320      	adds	r3, #32
 80051a8:	2100      	movs	r1, #0
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 ffe2 	bl	8006174 <RCCEx_PLLSAI2_Config>
 80051b0:	4603      	mov	r3, r0
 80051b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051b4:	e003      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	74fb      	strb	r3, [r7, #19]
      break;
 80051ba:	e000      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80051bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051be:	7cfb      	ldrb	r3, [r7, #19]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10b      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051c4:	4b52      	ldr	r3, [pc, #328]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051d2:	494f      	ldr	r1, [pc, #316]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051da:	e001      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051dc:	7cfb      	ldrb	r3, [r7, #19]
 80051de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 80a0 	beq.w	800532e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ee:	2300      	movs	r3, #0
 80051f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051f2:	4b47      	ldr	r3, [pc, #284]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80051fe:	2301      	movs	r3, #1
 8005200:	e000      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005202:	2300      	movs	r3, #0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00d      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005208:	4b41      	ldr	r3, [pc, #260]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800520a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520c:	4a40      	ldr	r2, [pc, #256]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800520e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005212:	6593      	str	r3, [r2, #88]	; 0x58
 8005214:	4b3e      	ldr	r3, [pc, #248]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800521c:	60bb      	str	r3, [r7, #8]
 800521e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005220:	2301      	movs	r3, #1
 8005222:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005224:	4b3b      	ldr	r3, [pc, #236]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a3a      	ldr	r2, [pc, #232]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800522a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800522e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005230:	f7fc fc3c 	bl	8001aac <HAL_GetTick>
 8005234:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005236:	e009      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005238:	f7fc fc38 	bl	8001aac <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d902      	bls.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	74fb      	strb	r3, [r7, #19]
        break;
 800524a:	e005      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800524c:	4b31      	ldr	r3, [pc, #196]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0ef      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005258:	7cfb      	ldrb	r3, [r7, #19]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d15c      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800525e:	4b2c      	ldr	r3, [pc, #176]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005264:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005268:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01f      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	429a      	cmp	r2, r3
 800527a:	d019      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800527c:	4b24      	ldr	r3, [pc, #144]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800527e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005286:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005288:	4b21      	ldr	r3, [pc, #132]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800528a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528e:	4a20      	ldr	r2, [pc, #128]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005298:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529e:	4a1c      	ldr	r2, [pc, #112]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052a8:	4a19      	ldr	r2, [pc, #100]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d016      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ba:	f7fc fbf7 	bl	8001aac <HAL_GetTick>
 80052be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052c0:	e00b      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c2:	f7fc fbf3 	bl	8001aac <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d902      	bls.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	74fb      	strb	r3, [r7, #19]
            break;
 80052d8:	e006      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052da:	4b0d      	ldr	r3, [pc, #52]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0ec      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80052e8:	7cfb      	ldrb	r3, [r7, #19]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10c      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052ee:	4b08      	ldr	r3, [pc, #32]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052fe:	4904      	ldr	r1, [pc, #16]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005300:	4313      	orrs	r3, r2
 8005302:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005306:	e009      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005308:	7cfb      	ldrb	r3, [r7, #19]
 800530a:	74bb      	strb	r3, [r7, #18]
 800530c:	e006      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800530e:	bf00      	nop
 8005310:	40021000 	.word	0x40021000
 8005314:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005318:	7cfb      	ldrb	r3, [r7, #19]
 800531a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800531c:	7c7b      	ldrb	r3, [r7, #17]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d105      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005322:	4b9e      	ldr	r3, [pc, #632]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005326:	4a9d      	ldr	r2, [pc, #628]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800532c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800533a:	4b98      	ldr	r3, [pc, #608]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005340:	f023 0203 	bic.w	r2, r3, #3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	4994      	ldr	r1, [pc, #592]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800535c:	4b8f      	ldr	r3, [pc, #572]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005362:	f023 020c 	bic.w	r2, r3, #12
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536a:	498c      	ldr	r1, [pc, #560]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0304 	and.w	r3, r3, #4
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800537e:	4b87      	ldr	r3, [pc, #540]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005384:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	4983      	ldr	r1, [pc, #524]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800538e:	4313      	orrs	r3, r2
 8005390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0308 	and.w	r3, r3, #8
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053a0:	4b7e      	ldr	r3, [pc, #504]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ae:	497b      	ldr	r1, [pc, #492]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0310 	and.w	r3, r3, #16
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053c2:	4b76      	ldr	r3, [pc, #472]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d0:	4972      	ldr	r1, [pc, #456]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0320 	and.w	r3, r3, #32
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053e4:	4b6d      	ldr	r3, [pc, #436]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f2:	496a      	ldr	r1, [pc, #424]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005406:	4b65      	ldr	r3, [pc, #404]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005414:	4961      	ldr	r1, [pc, #388]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005416:	4313      	orrs	r3, r2
 8005418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005428:	4b5c      	ldr	r3, [pc, #368]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800542a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005436:	4959      	ldr	r1, [pc, #356]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800544a:	4b54      	ldr	r3, [pc, #336]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800544c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005450:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005458:	4950      	ldr	r1, [pc, #320]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800545a:	4313      	orrs	r3, r2
 800545c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800546c:	4b4b      	ldr	r3, [pc, #300]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800546e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005472:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547a:	4948      	ldr	r1, [pc, #288]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800547c:	4313      	orrs	r3, r2
 800547e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800548e:	4b43      	ldr	r3, [pc, #268]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005494:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549c:	493f      	ldr	r1, [pc, #252]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d028      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054b0:	4b3a      	ldr	r3, [pc, #232]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054be:	4937      	ldr	r1, [pc, #220]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054ce:	d106      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054d0:	4b32      	ldr	r3, [pc, #200]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	4a31      	ldr	r2, [pc, #196]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054da:	60d3      	str	r3, [r2, #12]
 80054dc:	e011      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054e6:	d10c      	bne.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3304      	adds	r3, #4
 80054ec:	2101      	movs	r1, #1
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fd50 	bl	8005f94 <RCCEx_PLLSAI1_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80054f8:	7cfb      	ldrb	r3, [r7, #19]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80054fe:	7cfb      	ldrb	r3, [r7, #19]
 8005500:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d028      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800550e:	4b23      	ldr	r3, [pc, #140]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005514:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551c:	491f      	ldr	r1, [pc, #124]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800551e:	4313      	orrs	r3, r2
 8005520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005528:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800552c:	d106      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800552e:	4b1b      	ldr	r3, [pc, #108]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	4a1a      	ldr	r2, [pc, #104]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005538:	60d3      	str	r3, [r2, #12]
 800553a:	e011      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005540:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005544:	d10c      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	3304      	adds	r3, #4
 800554a:	2101      	movs	r1, #1
 800554c:	4618      	mov	r0, r3
 800554e:	f000 fd21 	bl	8005f94 <RCCEx_PLLSAI1_Config>
 8005552:	4603      	mov	r3, r0
 8005554:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005556:	7cfb      	ldrb	r3, [r7, #19]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800555c:	7cfb      	ldrb	r3, [r7, #19]
 800555e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d02b      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800556c:	4b0b      	ldr	r3, [pc, #44]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800556e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005572:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800557a:	4908      	ldr	r1, [pc, #32]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005586:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800558a:	d109      	bne.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800558c:	4b03      	ldr	r3, [pc, #12]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	4a02      	ldr	r2, [pc, #8]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005596:	60d3      	str	r3, [r2, #12]
 8005598:	e014      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800559a:	bf00      	nop
 800559c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055a8:	d10c      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	3304      	adds	r3, #4
 80055ae:	2101      	movs	r1, #1
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 fcef 	bl	8005f94 <RCCEx_PLLSAI1_Config>
 80055b6:	4603      	mov	r3, r0
 80055b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055ba:	7cfb      	ldrb	r3, [r7, #19]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80055c0:	7cfb      	ldrb	r3, [r7, #19]
 80055c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d02f      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055d0:	4b2b      	ldr	r3, [pc, #172]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055de:	4928      	ldr	r1, [pc, #160]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055ee:	d10d      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3304      	adds	r3, #4
 80055f4:	2102      	movs	r1, #2
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 fccc 	bl	8005f94 <RCCEx_PLLSAI1_Config>
 80055fc:	4603      	mov	r3, r0
 80055fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005600:	7cfb      	ldrb	r3, [r7, #19]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d014      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005606:	7cfb      	ldrb	r3, [r7, #19]
 8005608:	74bb      	strb	r3, [r7, #18]
 800560a:	e011      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005614:	d10c      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	3320      	adds	r3, #32
 800561a:	2102      	movs	r1, #2
 800561c:	4618      	mov	r0, r3
 800561e:	f000 fda9 	bl	8006174 <RCCEx_PLLSAI2_Config>
 8005622:	4603      	mov	r3, r0
 8005624:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005626:	7cfb      	ldrb	r3, [r7, #19]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800562c:	7cfb      	ldrb	r3, [r7, #19]
 800562e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00a      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800563c:	4b10      	ldr	r3, [pc, #64]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800563e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005642:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800564a:	490d      	ldr	r1, [pc, #52]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800564c:	4313      	orrs	r3, r2
 800564e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00b      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800565e:	4b08      	ldr	r3, [pc, #32]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005664:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800566e:	4904      	ldr	r1, [pc, #16]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005670:	4313      	orrs	r3, r2
 8005672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005676:	7cbb      	ldrb	r3, [r7, #18]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	40021000 	.word	0x40021000

08005684 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005696:	d137      	bne.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005698:	4bb8      	ldr	r3, [pc, #736]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800569a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056a2:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056aa:	d014      	beq.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80056ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056b0:	d01e      	beq.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 80056b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b6:	d001      	beq.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80056b8:	f000 bc53 	b.w	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80056bc:	4baf      	ldr	r3, [pc, #700]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80056be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	f040 8446 	bne.w	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        frequency = LSE_VALUE;
 80056cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056d0:	61fb      	str	r3, [r7, #28]
      break;
 80056d2:	f000 bc41 	b.w	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80056d6:	4ba9      	ldr	r3, [pc, #676]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80056d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	f040 843b 	bne.w	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          frequency = LSI_VALUE;
 80056e6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80056ea:	61fb      	str	r3, [r7, #28]
      break;
 80056ec:	f000 bc36 	b.w	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80056f0:	4ba2      	ldr	r3, [pc, #648]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056fc:	f040 8430 	bne.w	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        frequency = HSE_VALUE / 32U;
 8005700:	4b9f      	ldr	r3, [pc, #636]	; (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005702:	61fb      	str	r3, [r7, #28]
      break;
 8005704:	f000 bc2c 	b.w	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005708:	4b9c      	ldr	r3, [pc, #624]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f003 0303 	and.w	r3, r3, #3
 8005710:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2b02      	cmp	r3, #2
 8005716:	d023      	beq.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005718:	2b03      	cmp	r3, #3
 800571a:	d02e      	beq.n	800577a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800571c:	2b01      	cmp	r3, #1
 800571e:	d139      	bne.n	8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005720:	4b96      	ldr	r3, [pc, #600]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b02      	cmp	r3, #2
 800572a:	d116      	bne.n	800575a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800572c:	4b93      	ldr	r3, [pc, #588]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0308 	and.w	r3, r3, #8
 8005734:	2b00      	cmp	r3, #0
 8005736:	d005      	beq.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8005738:	4b90      	ldr	r3, [pc, #576]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	091b      	lsrs	r3, r3, #4
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	e005      	b.n	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8005744:	4b8d      	ldr	r3, [pc, #564]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800574a:	0a1b      	lsrs	r3, r3, #8
 800574c:	f003 030f 	and.w	r3, r3, #15
 8005750:	4a8c      	ldr	r2, [pc, #560]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005756:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005758:	e01f      	b.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	61bb      	str	r3, [r7, #24]
      break;
 800575e:	e01c      	b.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005760:	4b86      	ldr	r3, [pc, #536]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800576c:	d102      	bne.n	8005774 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 800576e:	4b86      	ldr	r3, [pc, #536]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005770:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005772:	e012      	b.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	61bb      	str	r3, [r7, #24]
      break;
 8005778:	e00f      	b.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800577a:	4b80      	ldr	r3, [pc, #512]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005782:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005786:	d102      	bne.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8005788:	4b80      	ldr	r3, [pc, #512]	; (800598c <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 800578a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800578c:	e005      	b.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	61bb      	str	r3, [r7, #24]
      break;
 8005792:	e002      	b.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	61bb      	str	r3, [r7, #24]
      break;
 8005798:	bf00      	nop
    }

    switch(PeriphClk)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a0:	f000 8337 	beq.w	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 80057a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a8:	d825      	bhi.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 80057aa:	2b10      	cmp	r3, #16
 80057ac:	f000 81df 	beq.w	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80057b0:	2b10      	cmp	r3, #16
 80057b2:	d80f      	bhi.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	f000 8128 	beq.w	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d803      	bhi.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 80057be:	2b01      	cmp	r3, #1
 80057c0:	f000 80ec 	beq.w	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80057c4:	e3cd      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	f000 8169 	beq.w	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	f000 819a 	beq.w	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 80057d2:	e3c6      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80057d4:	2b40      	cmp	r3, #64	; 0x40
 80057d6:	f000 82b3 	beq.w	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
 80057da:	2b40      	cmp	r3, #64	; 0x40
 80057dc:	d803      	bhi.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80057de:	2b20      	cmp	r3, #32
 80057e0:	f000 81fd 	beq.w	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 80057e4:	e3bd      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80057e6:	2b80      	cmp	r3, #128	; 0x80
 80057e8:	f000 82cd 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80057ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057f0:	f000 82ec 	beq.w	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
      break;
 80057f4:	e3b5      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80057f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057fa:	f000 822d 	beq.w	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 80057fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005802:	d811      	bhi.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8005804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005808:	d021      	beq.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 800580a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800580e:	d804      	bhi.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005814:	f000 833e 	beq.w	8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
      break;
 8005818:	e3a3      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 800581a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800581e:	d01d      	beq.n	800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8005820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005824:	d021      	beq.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8005826:	e39c      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800582c:	f000 8277 	beq.w	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 8005830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005834:	d804      	bhi.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800583a:	f000 8371 	beq.w	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
      break;
 800583e:	e390      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005840:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005844:	d011      	beq.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005846:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800584a:	d00e      	beq.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 800584c:	e389      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800584e:	69b9      	ldr	r1, [r7, #24]
 8005850:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005854:	f000 fd68 	bl	8006328 <RCCEx_GetSAIxPeriphCLKFreq>
 8005858:	61f8      	str	r0, [r7, #28]
      break;
 800585a:	e382      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800585c:	69b9      	ldr	r1, [r7, #24]
 800585e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005862:	f000 fd61 	bl	8006328 <RCCEx_GetSAIxPeriphCLKFreq>
 8005866:	61f8      	str	r0, [r7, #28]
      break;
 8005868:	e37b      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800586a:	4b44      	ldr	r3, [pc, #272]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800586c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005870:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005874:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800587c:	d023      	beq.n	80058c6 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 800587e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005882:	d003      	beq.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005884:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005888:	d04a      	beq.n	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 800588a:	e086      	b.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800588c:	4b3b      	ldr	r3, [pc, #236]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b02      	cmp	r3, #2
 8005896:	d17b      	bne.n	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005898:	4b38      	ldr	r3, [pc, #224]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0308 	and.w	r3, r3, #8
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d005      	beq.n	80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80058a4:	4b35      	ldr	r3, [pc, #212]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	091b      	lsrs	r3, r3, #4
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	e005      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 80058b0:	4b32      	ldr	r3, [pc, #200]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80058b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058b6:	0a1b      	lsrs	r3, r3, #8
 80058b8:	f003 030f 	and.w	r3, r3, #15
 80058bc:	4a31      	ldr	r2, [pc, #196]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80058be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c2:	61fb      	str	r3, [r7, #28]
          break;
 80058c4:	e064      	b.n	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80058c6:	4b2d      	ldr	r3, [pc, #180]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058d2:	d15f      	bne.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80058d4:	4b29      	ldr	r3, [pc, #164]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058e0:	d158      	bne.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80058e2:	4b26      	ldr	r3, [pc, #152]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	0a1b      	lsrs	r3, r3, #8
 80058e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058ec:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	fb02 f203 	mul.w	r2, r2, r3
 80058f6:	4b21      	ldr	r3, [pc, #132]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	091b      	lsrs	r3, r3, #4
 80058fc:	f003 0307 	and.w	r3, r3, #7
 8005900:	3301      	adds	r3, #1
 8005902:	fbb2 f3f3 	udiv	r3, r2, r3
 8005906:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005908:	4b1c      	ldr	r3, [pc, #112]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	0d5b      	lsrs	r3, r3, #21
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	3301      	adds	r3, #1
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	fbb2 f3f3 	udiv	r3, r2, r3
 800591c:	61fb      	str	r3, [r7, #28]
          break;
 800591e:	e039      	b.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005920:	4b16      	ldr	r3, [pc, #88]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005928:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800592c:	d134      	bne.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800592e:	4b13      	ldr	r3, [pc, #76]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800593a:	d12d      	bne.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800593c:	4b0f      	ldr	r3, [pc, #60]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	0a1b      	lsrs	r3, r3, #8
 8005942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005946:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	fb02 f203 	mul.w	r2, r2, r3
 8005950:	4b0a      	ldr	r3, [pc, #40]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	091b      	lsrs	r3, r3, #4
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	3301      	adds	r3, #1
 800595c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005960:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005962:	4b06      	ldr	r3, [pc, #24]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	0d5b      	lsrs	r3, r3, #21
 8005968:	f003 0303 	and.w	r3, r3, #3
 800596c:	3301      	adds	r3, #1
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	fbb2 f3f3 	udiv	r3, r2, r3
 8005976:	61fb      	str	r3, [r7, #28]
          break;
 8005978:	e00e      	b.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800597a:	bf00      	nop
 800597c:	40021000 	.word	0x40021000
 8005980:	0003d090 	.word	0x0003d090
 8005984:	0800d238 	.word	0x0800d238
 8005988:	00f42400 	.word	0x00f42400
 800598c:	007a1200 	.word	0x007a1200
          break;
 8005990:	bf00      	nop
 8005992:	e2e6      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005994:	bf00      	nop
 8005996:	e2e4      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005998:	bf00      	nop
        break;
 800599a:	e2e2      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800599c:	4bac      	ldr	r3, [pc, #688]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800599e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d827      	bhi.n	80059fe <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80059ae:	a201      	add	r2, pc, #4	; (adr r2, 80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80059b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b4:	080059c5 	.word	0x080059c5
 80059b8:	080059cd 	.word	0x080059cd
 80059bc:	080059d5 	.word	0x080059d5
 80059c0:	080059e9 	.word	0x080059e9
          frequency = HAL_RCC_GetPCLK2Freq();
 80059c4:	f7ff fb02 	bl	8004fcc <HAL_RCC_GetPCLK2Freq>
 80059c8:	61f8      	str	r0, [r7, #28]
          break;
 80059ca:	e01d      	b.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 80059cc:	f7ff fa52 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 80059d0:	61f8      	str	r0, [r7, #28]
          break;
 80059d2:	e019      	b.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80059d4:	4b9e      	ldr	r3, [pc, #632]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e0:	d10f      	bne.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 80059e2:	4b9c      	ldr	r3, [pc, #624]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80059e4:	61fb      	str	r3, [r7, #28]
          break;
 80059e6:	e00c      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80059e8:	4b99      	ldr	r3, [pc, #612]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80059ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d107      	bne.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 80059f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059fa:	61fb      	str	r3, [r7, #28]
          break;
 80059fc:	e003      	b.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 80059fe:	bf00      	nop
 8005a00:	e2af      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005a02:	bf00      	nop
 8005a04:	e2ad      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005a06:	bf00      	nop
        break;
 8005a08:	e2ab      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005a0a:	4b91      	ldr	r3, [pc, #580]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a10:	f003 030c 	and.w	r3, r3, #12
 8005a14:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	2b0c      	cmp	r3, #12
 8005a1a:	d83a      	bhi.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8005a1c:	a201      	add	r2, pc, #4	; (adr r2, 8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8005a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a22:	bf00      	nop
 8005a24:	08005a59 	.word	0x08005a59
 8005a28:	08005a93 	.word	0x08005a93
 8005a2c:	08005a93 	.word	0x08005a93
 8005a30:	08005a93 	.word	0x08005a93
 8005a34:	08005a61 	.word	0x08005a61
 8005a38:	08005a93 	.word	0x08005a93
 8005a3c:	08005a93 	.word	0x08005a93
 8005a40:	08005a93 	.word	0x08005a93
 8005a44:	08005a69 	.word	0x08005a69
 8005a48:	08005a93 	.word	0x08005a93
 8005a4c:	08005a93 	.word	0x08005a93
 8005a50:	08005a93 	.word	0x08005a93
 8005a54:	08005a7d 	.word	0x08005a7d
          frequency = HAL_RCC_GetPCLK1Freq();
 8005a58:	f7ff faa2 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005a5c:	61f8      	str	r0, [r7, #28]
          break;
 8005a5e:	e01d      	b.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a60:	f7ff fa08 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8005a64:	61f8      	str	r0, [r7, #28]
          break;
 8005a66:	e019      	b.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a68:	4b79      	ldr	r3, [pc, #484]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a74:	d10f      	bne.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 8005a76:	4b77      	ldr	r3, [pc, #476]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005a78:	61fb      	str	r3, [r7, #28]
          break;
 8005a7a:	e00c      	b.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005a7c:	4b74      	ldr	r3, [pc, #464]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d107      	bne.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 8005a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a8e:	61fb      	str	r3, [r7, #28]
          break;
 8005a90:	e003      	b.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 8005a92:	bf00      	nop
 8005a94:	e265      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005a96:	bf00      	nop
 8005a98:	e263      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005a9a:	bf00      	nop
        break;
 8005a9c:	e261      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005a9e:	4b6c      	ldr	r3, [pc, #432]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005aa8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	2b10      	cmp	r3, #16
 8005aae:	d00d      	beq.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8005ab0:	2b10      	cmp	r3, #16
 8005ab2:	d802      	bhi.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d005      	beq.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 8005ab8:	e024      	b.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	d00a      	beq.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8005abe:	2b30      	cmp	r3, #48	; 0x30
 8005ac0:	d012      	beq.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 8005ac2:	e01f      	b.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ac4:	f7ff fa6c 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005ac8:	61f8      	str	r0, [r7, #28]
          break;
 8005aca:	e01b      	b.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 8005acc:	f7ff f9d2 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8005ad0:	61f8      	str	r0, [r7, #28]
          break;
 8005ad2:	e017      	b.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ad4:	4b5e      	ldr	r3, [pc, #376]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae0:	d10d      	bne.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 8005ae2:	4b5c      	ldr	r3, [pc, #368]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005ae4:	61fb      	str	r3, [r7, #28]
          break;
 8005ae6:	e00a      	b.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005ae8:	4b59      	ldr	r3, [pc, #356]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d105      	bne.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 8005af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005afa:	61fb      	str	r3, [r7, #28]
          break;
 8005afc:	e001      	b.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8005afe:	bf00      	nop
 8005b00:	e22f      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005b02:	bf00      	nop
        break;
 8005b04:	e22d      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005b06:	4b52      	ldr	r3, [pc, #328]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b10:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	2b40      	cmp	r3, #64	; 0x40
 8005b16:	d00d      	beq.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 8005b18:	2b40      	cmp	r3, #64	; 0x40
 8005b1a:	d802      	bhi.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d005      	beq.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 8005b20:	e024      	b.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 8005b22:	2b80      	cmp	r3, #128	; 0x80
 8005b24:	d00a      	beq.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8005b26:	2bc0      	cmp	r3, #192	; 0xc0
 8005b28:	d012      	beq.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 8005b2a:	e01f      	b.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b2c:	f7ff fa38 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005b30:	61f8      	str	r0, [r7, #28]
          break;
 8005b32:	e01b      	b.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b34:	f7ff f99e 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8005b38:	61f8      	str	r0, [r7, #28]
          break;
 8005b3a:	e017      	b.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b3c:	4b44      	ldr	r3, [pc, #272]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b48:	d10d      	bne.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 8005b4a:	4b42      	ldr	r3, [pc, #264]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005b4c:	61fb      	str	r3, [r7, #28]
          break;
 8005b4e:	e00a      	b.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005b50:	4b3f      	ldr	r3, [pc, #252]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d105      	bne.n	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 8005b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b62:	61fb      	str	r3, [r7, #28]
          break;
 8005b64:	e001      	b.n	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 8005b66:	bf00      	nop
 8005b68:	e1fb      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005b6a:	bf00      	nop
        break;
 8005b6c:	e1f9      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005b6e:	4b38      	ldr	r3, [pc, #224]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b78:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b80:	d010      	beq.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8005b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b86:	d802      	bhi.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d007      	beq.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 8005b8c:	e026      	b.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 8005b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b92:	d00b      	beq.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005b94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b98:	d012      	beq.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 8005b9a:	e01f      	b.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b9c:	f7ff fa00 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005ba0:	61f8      	str	r0, [r7, #28]
          break;
 8005ba2:	e01b      	b.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ba4:	f7ff f966 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8005ba8:	61f8      	str	r0, [r7, #28]
          break;
 8005baa:	e017      	b.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bac:	4b28      	ldr	r3, [pc, #160]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb8:	d10d      	bne.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 8005bba:	4b26      	ldr	r3, [pc, #152]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005bbc:	61fb      	str	r3, [r7, #28]
          break;
 8005bbe:	e00a      	b.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005bc0:	4b23      	ldr	r3, [pc, #140]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d105      	bne.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 8005bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bd2:	61fb      	str	r3, [r7, #28]
          break;
 8005bd4:	e001      	b.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 8005bd6:	bf00      	nop
 8005bd8:	e1c3      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005bda:	bf00      	nop
        break;
 8005bdc:	e1c1      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005bde:	4b1c      	ldr	r3, [pc, #112]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005be8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bf0:	d010      	beq.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8005bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bf6:	d802      	bhi.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d007      	beq.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 8005bfc:	e026      	b.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 8005bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c02:	d00b      	beq.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8005c04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c08:	d012      	beq.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 8005c0a:	e01f      	b.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c0c:	f7ff f9c8 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005c10:	61f8      	str	r0, [r7, #28]
          break;
 8005c12:	e01b      	b.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c14:	f7ff f92e 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8005c18:	61f8      	str	r0, [r7, #28]
          break;
 8005c1a:	e017      	b.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c1c:	4b0c      	ldr	r3, [pc, #48]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c28:	d10d      	bne.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 8005c2a:	4b0a      	ldr	r3, [pc, #40]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005c2c:	61fb      	str	r3, [r7, #28]
          break;
 8005c2e:	e00a      	b.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c30:	4b07      	ldr	r3, [pc, #28]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d105      	bne.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 8005c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c42:	61fb      	str	r3, [r7, #28]
          break;
 8005c44:	e001      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 8005c46:	bf00      	nop
 8005c48:	e18b      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005c4a:	bf00      	nop
        break;
 8005c4c:	e189      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8005c4e:	bf00      	nop
 8005c50:	40021000 	.word	0x40021000
 8005c54:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005c58:	4bae      	ldr	r3, [pc, #696]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c62:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c6a:	d02f      	beq.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8005c6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c70:	d003      	beq.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005c72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c76:	d004      	beq.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 8005c78:	e050      	b.n	8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c7a:	f7ff f8fb 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8005c7e:	61f8      	str	r0, [r7, #28]
          break;
 8005c80:	e04c      	b.n	8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8005c82:	4ba4      	ldr	r3, [pc, #656]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d043      	beq.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005c8e:	4ba1      	ldr	r3, [pc, #644]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	0a1b      	lsrs	r3, r3, #8
 8005c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c98:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	fb02 f203 	mul.w	r2, r2, r3
 8005ca2:	4b9c      	ldr	r3, [pc, #624]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	091b      	lsrs	r3, r3, #4
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	3301      	adds	r3, #1
 8005cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb2:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005cb4:	4b97      	ldr	r3, [pc, #604]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	0e5b      	lsrs	r3, r3, #25
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc8:	61fb      	str	r3, [r7, #28]
          break;
 8005cca:	e024      	b.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 8005ccc:	4b91      	ldr	r3, [pc, #580]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d020      	beq.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005cd8:	4b8e      	ldr	r3, [pc, #568]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	0a1b      	lsrs	r3, r3, #8
 8005cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ce2:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	fb02 f203 	mul.w	r2, r2, r3
 8005cec:	4b89      	ldr	r3, [pc, #548]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	091b      	lsrs	r3, r3, #4
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfc:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8005cfe:	4b85      	ldr	r3, [pc, #532]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	0e5b      	lsrs	r3, r3, #25
 8005d04:	f003 0303 	and.w	r3, r3, #3
 8005d08:	3301      	adds	r3, #1
 8005d0a:	005b      	lsls	r3, r3, #1
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d12:	61fb      	str	r3, [r7, #28]
          break;
 8005d14:	e001      	b.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          break;
 8005d16:	bf00      	nop
 8005d18:	e123      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005d1a:	bf00      	nop
        break;
 8005d1c:	e121      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005d1e:	4b7d      	ldr	r3, [pc, #500]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d28:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d103      	bne.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005d30:	f7ff f94c 	bl	8004fcc <HAL_RCC_GetPCLK2Freq>
 8005d34:	61f8      	str	r0, [r7, #28]
        break;
 8005d36:	e114      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d38:	f7ff f89c 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8005d3c:	61f8      	str	r0, [r7, #28]
        break;
 8005d3e:	e110      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005d40:	4b74      	ldr	r3, [pc, #464]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d46:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005d4a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d52:	d009      	beq.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8005d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d58:	d00a      	beq.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d000      	beq.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          break;
 8005d5e:	e011      	b.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d60:	f7ff f91e 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005d64:	61f8      	str	r0, [r7, #28]
          break;
 8005d66:	e00d      	b.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d68:	f7ff f884 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8005d6c:	61f8      	str	r0, [r7, #28]
          break;
 8005d6e:	e009      	b.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d70:	4b68      	ldr	r3, [pc, #416]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d7c:	d101      	bne.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
            frequency = HSI_VALUE;
 8005d7e:	4b66      	ldr	r3, [pc, #408]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8005d80:	61fb      	str	r3, [r7, #28]
          break;
 8005d82:	bf00      	nop
        break;
 8005d84:	e0ed      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005d86:	4b63      	ldr	r3, [pc, #396]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d90:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d98:	d009      	beq.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8005d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d9e:	d00a      	beq.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d000      	beq.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 8005da4:	e011      	b.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005da6:	f7ff f8fb 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005daa:	61f8      	str	r0, [r7, #28]
          break;
 8005dac:	e00d      	b.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetSysClockFreq();
 8005dae:	f7ff f861 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8005db2:	61f8      	str	r0, [r7, #28]
          break;
 8005db4:	e009      	b.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005db6:	4b57      	ldr	r3, [pc, #348]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dc2:	d101      	bne.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
            frequency = HSI_VALUE;
 8005dc4:	4b54      	ldr	r3, [pc, #336]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8005dc6:	61fb      	str	r3, [r7, #28]
          break;
 8005dc8:	bf00      	nop
        break;
 8005dca:	e0ca      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005dcc:	4b51      	ldr	r3, [pc, #324]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005dd6:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dde:	d009      	beq.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8005de0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005de4:	d00a      	beq.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x778>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d000      	beq.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 8005dea:	e011      	b.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005dec:	f7ff f8d8 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005df0:	61f8      	str	r0, [r7, #28]
          break;
 8005df2:	e00d      	b.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005df4:	f7ff f83e 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8005df8:	61f8      	str	r0, [r7, #28]
          break;
 8005dfa:	e009      	b.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005dfc:	4b45      	ldr	r3, [pc, #276]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e08:	d101      	bne.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            frequency = HSI_VALUE;
 8005e0a:	4b43      	ldr	r3, [pc, #268]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8005e0c:	61fb      	str	r3, [r7, #28]
          break;
 8005e0e:	bf00      	nop
        break;
 8005e10:	e0a7      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005e12:	4b40      	ldr	r3, [pc, #256]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e18:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005e1c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e24:	d010      	beq.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8005e26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e2a:	d802      	bhi.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d007      	beq.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
          break;
 8005e30:	e02f      	b.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
        switch(srcclk)
 8005e32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e36:	d012      	beq.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8005e38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e3c:	d019      	beq.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8005e3e:	e028      	b.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e40:	f7ff f8ae 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005e44:	61f8      	str	r0, [r7, #28]
          break;
 8005e46:	e024      	b.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005e48:	4b32      	ldr	r3, [pc, #200]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d118      	bne.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
              frequency = LSI_VALUE;
 8005e56:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005e5a:	61fb      	str	r3, [r7, #28]
          break;
 8005e5c:	e014      	b.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e5e:	4b2d      	ldr	r3, [pc, #180]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e6a:	d10f      	bne.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x808>
            frequency = HSI_VALUE;
 8005e6c:	4b2a      	ldr	r3, [pc, #168]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8005e6e:	61fb      	str	r3, [r7, #28]
          break;
 8005e70:	e00c      	b.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x808>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e72:	4b28      	ldr	r3, [pc, #160]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d107      	bne.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
            frequency = LSE_VALUE;
 8005e80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e84:	61fb      	str	r3, [r7, #28]
          break;
 8005e86:	e003      	b.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          break;
 8005e88:	bf00      	nop
 8005e8a:	e06a      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005e8c:	bf00      	nop
 8005e8e:	e068      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005e90:	bf00      	nop
        break;
 8005e92:	e066      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005e94:	4b1f      	ldr	r3, [pc, #124]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005e9e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ea6:	d010      	beq.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8005ea8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eac:	d802      	bhi.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d007      	beq.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          break;
 8005eb2:	e034      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
        switch(srcclk)
 8005eb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eb8:	d012      	beq.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8005eba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ebe:	d019      	beq.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          break;
 8005ec0:	e02d      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ec2:	f7ff f86d 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005ec6:	61f8      	str	r0, [r7, #28]
          break;
 8005ec8:	e029      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005eca:	4b12      	ldr	r3, [pc, #72]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d118      	bne.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = LSI_VALUE;
 8005ed8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005edc:	61fb      	str	r3, [r7, #28]
          break;
 8005ede:	e014      	b.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ee0:	4b0c      	ldr	r3, [pc, #48]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eec:	d10f      	bne.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
            frequency = HSI_VALUE;
 8005eee:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8005ef0:	61fb      	str	r3, [r7, #28]
          break;
 8005ef2:	e00c      	b.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005ef4:	4b07      	ldr	r3, [pc, #28]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d10c      	bne.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
            frequency = LSE_VALUE;
 8005f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f06:	61fb      	str	r3, [r7, #28]
          break;
 8005f08:	e008      	b.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          break;
 8005f0a:	bf00      	nop
 8005f0c:	e029      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005f0e:	bf00      	nop
 8005f10:	e027      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8005f12:	bf00      	nop
 8005f14:	40021000 	.word	0x40021000
 8005f18:	00f42400 	.word	0x00f42400
          break;
 8005f1c:	bf00      	nop
        break;
 8005f1e:	e020      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8005f20:	4b12      	ldr	r3, [pc, #72]	; (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8005f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f26:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f2a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
 8005f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f36:	d004      	beq.n	8005f42 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          break;
 8005f38:	e00d      	b.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f3a:	f7ff f831 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005f3e:	61f8      	str	r0, [r7, #28]
          break;
 8005f40:	e009      	b.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f42:	4b0a      	ldr	r3, [pc, #40]	; (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f4e:	d101      	bne.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
            frequency = HSI_VALUE;
 8005f50:	4b07      	ldr	r3, [pc, #28]	; (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
 8005f52:	61fb      	str	r3, [r7, #28]
          break;
 8005f54:	bf00      	nop
        break;
 8005f56:	e004      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8005f58:	bf00      	nop
 8005f5a:	e002      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8005f5c:	bf00      	nop
 8005f5e:	e000      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8005f60:	bf00      	nop
    }
  }

  return(frequency);
 8005f62:	69fb      	ldr	r3, [r7, #28]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3720      	adds	r7, #32
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	00f42400 	.word	0x00f42400

08005f74 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005f74:	b480      	push	{r7}
 8005f76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005f78:	4b05      	ldr	r3, [pc, #20]	; (8005f90 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a04      	ldr	r2, [pc, #16]	; (8005f90 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005f7e:	f043 0304 	orr.w	r3, r3, #4
 8005f82:	6013      	str	r3, [r2, #0]
}
 8005f84:	bf00      	nop
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	40021000 	.word	0x40021000

08005f94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005fa2:	4b73      	ldr	r3, [pc, #460]	; (8006170 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f003 0303 	and.w	r3, r3, #3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d018      	beq.n	8005fe0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005fae:	4b70      	ldr	r3, [pc, #448]	; (8006170 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	f003 0203 	and.w	r2, r3, #3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d10d      	bne.n	8005fda <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
       ||
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d009      	beq.n	8005fda <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005fc6:	4b6a      	ldr	r3, [pc, #424]	; (8006170 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	091b      	lsrs	r3, r3, #4
 8005fcc:	f003 0307 	and.w	r3, r3, #7
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
       ||
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d044      	beq.n	8006064 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	73fb      	strb	r3, [r7, #15]
 8005fde:	e041      	b.n	8006064 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d00c      	beq.n	8006002 <RCCEx_PLLSAI1_Config+0x6e>
 8005fe8:	2b03      	cmp	r3, #3
 8005fea:	d013      	beq.n	8006014 <RCCEx_PLLSAI1_Config+0x80>
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d120      	bne.n	8006032 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ff0:	4b5f      	ldr	r3, [pc, #380]	; (8006170 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d11d      	bne.n	8006038 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006000:	e01a      	b.n	8006038 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006002:	4b5b      	ldr	r3, [pc, #364]	; (8006170 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800600a:	2b00      	cmp	r3, #0
 800600c:	d116      	bne.n	800603c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006012:	e013      	b.n	800603c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006014:	4b56      	ldr	r3, [pc, #344]	; (8006170 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10f      	bne.n	8006040 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006020:	4b53      	ldr	r3, [pc, #332]	; (8006170 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d109      	bne.n	8006040 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006030:	e006      	b.n	8006040 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	73fb      	strb	r3, [r7, #15]
      break;
 8006036:	e004      	b.n	8006042 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006038:	bf00      	nop
 800603a:	e002      	b.n	8006042 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800603c:	bf00      	nop
 800603e:	e000      	b.n	8006042 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006040:	bf00      	nop
    }

    if(status == HAL_OK)
 8006042:	7bfb      	ldrb	r3, [r7, #15]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10d      	bne.n	8006064 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006048:	4b49      	ldr	r3, [pc, #292]	; (8006170 <RCCEx_PLLSAI1_Config+0x1dc>)
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6819      	ldr	r1, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	3b01      	subs	r3, #1
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	430b      	orrs	r3, r1
 800605e:	4944      	ldr	r1, [pc, #272]	; (8006170 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006060:	4313      	orrs	r3, r2
 8006062:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d17d      	bne.n	8006166 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800606a:	4b41      	ldr	r3, [pc, #260]	; (8006170 <RCCEx_PLLSAI1_Config+0x1dc>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a40      	ldr	r2, [pc, #256]	; (8006170 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006070:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006074:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006076:	f7fb fd19 	bl	8001aac <HAL_GetTick>
 800607a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800607c:	e009      	b.n	8006092 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800607e:	f7fb fd15 	bl	8001aac <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	2b02      	cmp	r3, #2
 800608a:	d902      	bls.n	8006092 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	73fb      	strb	r3, [r7, #15]
        break;
 8006090:	e005      	b.n	800609e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006092:	4b37      	ldr	r3, [pc, #220]	; (8006170 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1ef      	bne.n	800607e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800609e:	7bfb      	ldrb	r3, [r7, #15]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d160      	bne.n	8006166 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d111      	bne.n	80060ce <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060aa:	4b31      	ldr	r3, [pc, #196]	; (8006170 <RCCEx_PLLSAI1_Config+0x1dc>)
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80060b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	6892      	ldr	r2, [r2, #8]
 80060ba:	0211      	lsls	r1, r2, #8
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	68d2      	ldr	r2, [r2, #12]
 80060c0:	0912      	lsrs	r2, r2, #4
 80060c2:	0452      	lsls	r2, r2, #17
 80060c4:	430a      	orrs	r2, r1
 80060c6:	492a      	ldr	r1, [pc, #168]	; (8006170 <RCCEx_PLLSAI1_Config+0x1dc>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	610b      	str	r3, [r1, #16]
 80060cc:	e027      	b.n	800611e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d112      	bne.n	80060fa <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060d4:	4b26      	ldr	r3, [pc, #152]	; (8006170 <RCCEx_PLLSAI1_Config+0x1dc>)
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80060dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	6892      	ldr	r2, [r2, #8]
 80060e4:	0211      	lsls	r1, r2, #8
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	6912      	ldr	r2, [r2, #16]
 80060ea:	0852      	lsrs	r2, r2, #1
 80060ec:	3a01      	subs	r2, #1
 80060ee:	0552      	lsls	r2, r2, #21
 80060f0:	430a      	orrs	r2, r1
 80060f2:	491f      	ldr	r1, [pc, #124]	; (8006170 <RCCEx_PLLSAI1_Config+0x1dc>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	610b      	str	r3, [r1, #16]
 80060f8:	e011      	b.n	800611e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060fa:	4b1d      	ldr	r3, [pc, #116]	; (8006170 <RCCEx_PLLSAI1_Config+0x1dc>)
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006102:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6892      	ldr	r2, [r2, #8]
 800610a:	0211      	lsls	r1, r2, #8
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	6952      	ldr	r2, [r2, #20]
 8006110:	0852      	lsrs	r2, r2, #1
 8006112:	3a01      	subs	r2, #1
 8006114:	0652      	lsls	r2, r2, #25
 8006116:	430a      	orrs	r2, r1
 8006118:	4915      	ldr	r1, [pc, #84]	; (8006170 <RCCEx_PLLSAI1_Config+0x1dc>)
 800611a:	4313      	orrs	r3, r2
 800611c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800611e:	4b14      	ldr	r3, [pc, #80]	; (8006170 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a13      	ldr	r2, [pc, #76]	; (8006170 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006124:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006128:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800612a:	f7fb fcbf 	bl	8001aac <HAL_GetTick>
 800612e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006130:	e009      	b.n	8006146 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006132:	f7fb fcbb 	bl	8001aac <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d902      	bls.n	8006146 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	73fb      	strb	r3, [r7, #15]
          break;
 8006144:	e005      	b.n	8006152 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006146:	4b0a      	ldr	r3, [pc, #40]	; (8006170 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d0ef      	beq.n	8006132 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8006152:	7bfb      	ldrb	r3, [r7, #15]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d106      	bne.n	8006166 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006158:	4b05      	ldr	r3, [pc, #20]	; (8006170 <RCCEx_PLLSAI1_Config+0x1dc>)
 800615a:	691a      	ldr	r2, [r3, #16]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	4903      	ldr	r1, [pc, #12]	; (8006170 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006162:	4313      	orrs	r3, r2
 8006164:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006166:	7bfb      	ldrb	r3, [r7, #15]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	40021000 	.word	0x40021000

08006174 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800617e:	2300      	movs	r3, #0
 8006180:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006182:	4b68      	ldr	r3, [pc, #416]	; (8006324 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f003 0303 	and.w	r3, r3, #3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d018      	beq.n	80061c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800618e:	4b65      	ldr	r3, [pc, #404]	; (8006324 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f003 0203 	and.w	r2, r3, #3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d10d      	bne.n	80061ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
       ||
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d009      	beq.n	80061ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80061a6:	4b5f      	ldr	r3, [pc, #380]	; (8006324 <RCCEx_PLLSAI2_Config+0x1b0>)
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	091b      	lsrs	r3, r3, #4
 80061ac:	f003 0307 	and.w	r3, r3, #7
 80061b0:	1c5a      	adds	r2, r3, #1
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
       ||
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d044      	beq.n	8006244 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	73fb      	strb	r3, [r7, #15]
 80061be:	e041      	b.n	8006244 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d00c      	beq.n	80061e2 <RCCEx_PLLSAI2_Config+0x6e>
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	d013      	beq.n	80061f4 <RCCEx_PLLSAI2_Config+0x80>
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d120      	bne.n	8006212 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80061d0:	4b54      	ldr	r3, [pc, #336]	; (8006324 <RCCEx_PLLSAI2_Config+0x1b0>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d11d      	bne.n	8006218 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061e0:	e01a      	b.n	8006218 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80061e2:	4b50      	ldr	r3, [pc, #320]	; (8006324 <RCCEx_PLLSAI2_Config+0x1b0>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d116      	bne.n	800621c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061f2:	e013      	b.n	800621c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80061f4:	4b4b      	ldr	r3, [pc, #300]	; (8006324 <RCCEx_PLLSAI2_Config+0x1b0>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10f      	bne.n	8006220 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006200:	4b48      	ldr	r3, [pc, #288]	; (8006324 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d109      	bne.n	8006220 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006210:	e006      	b.n	8006220 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	73fb      	strb	r3, [r7, #15]
      break;
 8006216:	e004      	b.n	8006222 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006218:	bf00      	nop
 800621a:	e002      	b.n	8006222 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800621c:	bf00      	nop
 800621e:	e000      	b.n	8006222 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006220:	bf00      	nop
    }

    if(status == HAL_OK)
 8006222:	7bfb      	ldrb	r3, [r7, #15]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10d      	bne.n	8006244 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006228:	4b3e      	ldr	r3, [pc, #248]	; (8006324 <RCCEx_PLLSAI2_Config+0x1b0>)
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6819      	ldr	r1, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	3b01      	subs	r3, #1
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	430b      	orrs	r3, r1
 800623e:	4939      	ldr	r1, [pc, #228]	; (8006324 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006240:	4313      	orrs	r3, r2
 8006242:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006244:	7bfb      	ldrb	r3, [r7, #15]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d167      	bne.n	800631a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800624a:	4b36      	ldr	r3, [pc, #216]	; (8006324 <RCCEx_PLLSAI2_Config+0x1b0>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a35      	ldr	r2, [pc, #212]	; (8006324 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006256:	f7fb fc29 	bl	8001aac <HAL_GetTick>
 800625a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800625c:	e009      	b.n	8006272 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800625e:	f7fb fc25 	bl	8001aac <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	2b02      	cmp	r3, #2
 800626a:	d902      	bls.n	8006272 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	73fb      	strb	r3, [r7, #15]
        break;
 8006270:	e005      	b.n	800627e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006272:	4b2c      	ldr	r3, [pc, #176]	; (8006324 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1ef      	bne.n	800625e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800627e:	7bfb      	ldrb	r3, [r7, #15]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d14a      	bne.n	800631a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d111      	bne.n	80062ae <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800628a:	4b26      	ldr	r3, [pc, #152]	; (8006324 <RCCEx_PLLSAI2_Config+0x1b0>)
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	6892      	ldr	r2, [r2, #8]
 800629a:	0211      	lsls	r1, r2, #8
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	68d2      	ldr	r2, [r2, #12]
 80062a0:	0912      	lsrs	r2, r2, #4
 80062a2:	0452      	lsls	r2, r2, #17
 80062a4:	430a      	orrs	r2, r1
 80062a6:	491f      	ldr	r1, [pc, #124]	; (8006324 <RCCEx_PLLSAI2_Config+0x1b0>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	614b      	str	r3, [r1, #20]
 80062ac:	e011      	b.n	80062d2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80062ae:	4b1d      	ldr	r3, [pc, #116]	; (8006324 <RCCEx_PLLSAI2_Config+0x1b0>)
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80062b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6892      	ldr	r2, [r2, #8]
 80062be:	0211      	lsls	r1, r2, #8
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	6912      	ldr	r2, [r2, #16]
 80062c4:	0852      	lsrs	r2, r2, #1
 80062c6:	3a01      	subs	r2, #1
 80062c8:	0652      	lsls	r2, r2, #25
 80062ca:	430a      	orrs	r2, r1
 80062cc:	4915      	ldr	r1, [pc, #84]	; (8006324 <RCCEx_PLLSAI2_Config+0x1b0>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80062d2:	4b14      	ldr	r3, [pc, #80]	; (8006324 <RCCEx_PLLSAI2_Config+0x1b0>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a13      	ldr	r2, [pc, #76]	; (8006324 <RCCEx_PLLSAI2_Config+0x1b0>)
 80062d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062dc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062de:	f7fb fbe5 	bl	8001aac <HAL_GetTick>
 80062e2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80062e4:	e009      	b.n	80062fa <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80062e6:	f7fb fbe1 	bl	8001aac <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d902      	bls.n	80062fa <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	73fb      	strb	r3, [r7, #15]
          break;
 80062f8:	e005      	b.n	8006306 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80062fa:	4b0a      	ldr	r3, [pc, #40]	; (8006324 <RCCEx_PLLSAI2_Config+0x1b0>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d0ef      	beq.n	80062e6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8006306:	7bfb      	ldrb	r3, [r7, #15]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d106      	bne.n	800631a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800630c:	4b05      	ldr	r3, [pc, #20]	; (8006324 <RCCEx_PLLSAI2_Config+0x1b0>)
 800630e:	695a      	ldr	r2, [r3, #20]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	4903      	ldr	r1, [pc, #12]	; (8006324 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006316:	4313      	orrs	r3, r2
 8006318:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800631a:	7bfb      	ldrb	r3, [r7, #15]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	40021000 	.word	0x40021000

08006328 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006328:	b480      	push	{r7}
 800632a:	b089      	sub	sp, #36	; 0x24
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006336:	2300      	movs	r3, #0
 8006338:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800633a:	2300      	movs	r3, #0
 800633c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006344:	d10c      	bne.n	8006360 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006346:	4b62      	ldr	r3, [pc, #392]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006350:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006358:	d112      	bne.n	8006380 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800635a:	4b5e      	ldr	r3, [pc, #376]	; (80064d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 800635c:	61fb      	str	r3, [r7, #28]
 800635e:	e00f      	b.n	8006380 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006366:	d10b      	bne.n	8006380 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006368:	4b59      	ldr	r3, [pc, #356]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800636a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006372:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800637a:	d101      	bne.n	8006380 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800637c:	4b55      	ldr	r3, [pc, #340]	; (80064d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 800637e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	2b00      	cmp	r3, #0
 8006384:	f040 809c 	bne.w	80064c0 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
  {
    pllvco = InputFrequency;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006392:	d003      	beq.n	800639c <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800639a:	d12d      	bne.n	80063f8 <RCCEx_GetSAIxPeriphCLKFreq+0xd0>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 800639c:	4b4c      	ldr	r3, [pc, #304]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 808b 	beq.w	80064c0 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80063aa:	4b49      	ldr	r3, [pc, #292]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	091b      	lsrs	r3, r3, #4
 80063b0:	f003 0307 	and.w	r3, r3, #7
 80063b4:	3301      	adds	r3, #1
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063bc:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80063be:	4b44      	ldr	r3, [pc, #272]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	0a1b      	lsrs	r3, r3, #8
 80063c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063c8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80063d0:	4b3f      	ldr	r3, [pc, #252]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <RCCEx_GetSAIxPeriphCLKFreq+0xba>
          {
            pllp = 17U;
 80063dc:	2311      	movs	r3, #17
 80063de:	617b      	str	r3, [r7, #20]
 80063e0:	e001      	b.n	80063e6 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
          }
          else
          {
            pllp = 7U;
 80063e2:	2307      	movs	r3, #7
 80063e4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	fb02 f203 	mul.w	r2, r2, r3
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f4:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 80063f6:	e063      	b.n	80064c0 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d12c      	bne.n	8006458 <RCCEx_GetSAIxPeriphCLKFreq+0x130>
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 80063fe:	4b34      	ldr	r3, [pc, #208]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d05a      	beq.n	80064c0 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800640a:	4b31      	ldr	r3, [pc, #196]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	091b      	lsrs	r3, r3, #4
 8006410:	f003 0307 	and.w	r3, r3, #7
 8006414:	3301      	adds	r3, #1
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	fbb2 f3f3 	udiv	r3, r2, r3
 800641c:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800641e:	4b2c      	ldr	r3, [pc, #176]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	0a1b      	lsrs	r3, r3, #8
 8006424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006428:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10a      	bne.n	8006446 <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006430:	4b27      	ldr	r3, [pc, #156]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <RCCEx_GetSAIxPeriphCLKFreq+0x11a>
          {
            pllp = 17U;
 800643c:	2311      	movs	r3, #17
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	e001      	b.n	8006446 <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
          }
          else
          {
            pllp = 7U;
 8006442:	2307      	movs	r3, #7
 8006444:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	fb02 f203 	mul.w	r2, r2, r3
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	fbb2 f3f3 	udiv	r3, r2, r3
 8006454:	61fb      	str	r3, [r7, #28]
 8006456:	e033      	b.n	80064c0 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800645e:	d003      	beq.n	8006468 <RCCEx_GetSAIxPeriphCLKFreq+0x140>
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006466:	d12b      	bne.n	80064c0 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8006468:	4b19      	ldr	r3, [pc, #100]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d025      	beq.n	80064c0 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006474:	4b16      	ldr	r3, [pc, #88]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	091b      	lsrs	r3, r3, #4
 800647a:	f003 0307 	and.w	r3, r3, #7
 800647e:	3301      	adds	r3, #1
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	fbb2 f3f3 	udiv	r3, r2, r3
 8006486:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006488:	4b11      	ldr	r3, [pc, #68]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	0a1b      	lsrs	r3, r3, #8
 800648e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006492:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10a      	bne.n	80064b0 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800649a:	4b0d      	ldr	r3, [pc, #52]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d002      	beq.n	80064ac <RCCEx_GetSAIxPeriphCLKFreq+0x184>
          {
            pllp = 17U;
 80064a6:	2311      	movs	r3, #17
 80064a8:	617b      	str	r3, [r7, #20]
 80064aa:	e001      	b.n	80064b0 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
          }
          else
          {
            pllp = 7U;
 80064ac:	2307      	movs	r3, #7
 80064ae:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	fb02 f203 	mul.w	r2, r2, r3
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80064be:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80064c0:	69fb      	ldr	r3, [r7, #28]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3724      	adds	r7, #36	; 0x24
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	40021000 	.word	0x40021000
 80064d4:	001fff68 	.word	0x001fff68

080064d8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e14a      	b.n	8006780 <HAL_SAI_Init+0x2a8>
      return HAL_ERROR;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d106      	bne.n	8006504 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7fa fd38 	bl	8000f74 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f94d 	bl	80067a4 <SAI_Disable>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e135      	b.n	8006780 <HAL_SAI_Init+0x2a8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2202      	movs	r2, #2
 8006518:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d007      	beq.n	8006534 <HAL_SAI_Init+0x5c>
 8006524:	2b01      	cmp	r3, #1
 8006526:	d302      	bcc.n	800652e <HAL_SAI_Init+0x56>
 8006528:	2b02      	cmp	r3, #2
 800652a:	d006      	beq.n	800653a <HAL_SAI_Init+0x62>
 800652c:	e008      	b.n	8006540 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800652e:	2300      	movs	r3, #0
 8006530:	61fb      	str	r3, [r7, #28]
      break;
 8006532:	e008      	b.n	8006546 <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006534:	2310      	movs	r3, #16
 8006536:	61fb      	str	r3, [r7, #28]
      break;
 8006538:	e005      	b.n	8006546 <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800653a:	2320      	movs	r3, #32
 800653c:	61fb      	str	r3, [r7, #28]
      break;
 800653e:	e002      	b.n	8006546 <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8006540:	2300      	movs	r3, #0
 8006542:	61fb      	str	r3, [r7, #28]
      break;
 8006544:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	2b03      	cmp	r3, #3
 800654c:	d81d      	bhi.n	800658a <HAL_SAI_Init+0xb2>
 800654e:	a201      	add	r2, pc, #4	; (adr r2, 8006554 <HAL_SAI_Init+0x7c>)
 8006550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006554:	08006565 	.word	0x08006565
 8006558:	0800656b 	.word	0x0800656b
 800655c:	08006573 	.word	0x08006573
 8006560:	0800657b 	.word	0x0800657b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006564:	2300      	movs	r3, #0
 8006566:	617b      	str	r3, [r7, #20]
      break;
 8006568:	e012      	b.n	8006590 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800656a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800656e:	617b      	str	r3, [r7, #20]
      break;
 8006570:	e00e      	b.n	8006590 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006572:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006576:	617b      	str	r3, [r7, #20]
      break;
 8006578:	e00a      	b.n	8006590 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800657a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800657e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	f043 0301 	orr.w	r3, r3, #1
 8006586:	61fb      	str	r3, [r7, #28]
      break;
 8006588:	e002      	b.n	8006590 <HAL_SAI_Init+0xb8>
    default :
      syncen_bits = 0;
 800658a:	2300      	movs	r3, #0
 800658c:	617b      	str	r3, [r7, #20]
      break;
 800658e:	bf00      	nop

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a7c      	ldr	r2, [pc, #496]	; (8006788 <HAL_SAI_Init+0x2b0>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d004      	beq.n	80065a4 <HAL_SAI_Init+0xcc>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a7b      	ldr	r2, [pc, #492]	; (800678c <HAL_SAI_Init+0x2b4>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d103      	bne.n	80065ac <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80065a4:	4a7a      	ldr	r2, [pc, #488]	; (8006790 <HAL_SAI_Init+0x2b8>)
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	6013      	str	r3, [r2, #0]
 80065aa:	e002      	b.n	80065b2 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80065ac:	4a79      	ldr	r2, [pc, #484]	; (8006794 <HAL_SAI_Init+0x2bc>)
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	6013      	str	r3, [r2, #0]

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || */
  /* STM32L496xx || STM32L4A6xx || */
  /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d038      	beq.n	800662c <HAL_SAI_Init+0x154>
    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a72      	ldr	r2, [pc, #456]	; (8006788 <HAL_SAI_Init+0x2b0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d004      	beq.n	80065ce <HAL_SAI_Init+0xf6>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a70      	ldr	r2, [pc, #448]	; (800678c <HAL_SAI_Init+0x2b4>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d105      	bne.n	80065da <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80065ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80065d2:	f7ff f857 	bl	8005684 <HAL_RCCEx_GetPeriphCLKFreq>
 80065d6:	6138      	str	r0, [r7, #16]
 80065d8:	e004      	b.n	80065e4 <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80065da:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80065de:	f7ff f851 	bl	8005684 <HAL_RCCEx_GetPeriphCLKFreq>
 80065e2:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	4613      	mov	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	461a      	mov	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	025b      	lsls	r3, r3, #9
 80065f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065fa:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4a66      	ldr	r2, [pc, #408]	; (8006798 <HAL_SAI_Init+0x2c0>)
 8006600:	fba2 2303 	umull	r2, r3, r2, r3
 8006604:	08da      	lsrs	r2, r3, #3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800660a:	68f9      	ldr	r1, [r7, #12]
 800660c:	4b62      	ldr	r3, [pc, #392]	; (8006798 <HAL_SAI_Init+0x2c0>)
 800660e:	fba3 2301 	umull	r2, r3, r3, r1
 8006612:	08da      	lsrs	r2, r3, #3
 8006614:	4613      	mov	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	005b      	lsls	r3, r3, #1
 800661c:	1aca      	subs	r2, r1, r3
 800661e:	2a08      	cmp	r2, #8
 8006620:	d904      	bls.n	800662c <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d003      	beq.n	800663c <HAL_SAI_Init+0x164>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	2b02      	cmp	r3, #2
 800663a:	d109      	bne.n	8006650 <HAL_SAI_Init+0x178>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006640:	2b01      	cmp	r3, #1
 8006642:	d101      	bne.n	8006648 <HAL_SAI_Init+0x170>
 8006644:	2300      	movs	r3, #0
 8006646:	e001      	b.n	800664c <HAL_SAI_Init+0x174>
 8006648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800664c:	61bb      	str	r3, [r7, #24]
 800664e:	e008      	b.n	8006662 <HAL_SAI_Init+0x18a>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006654:	2b01      	cmp	r3, #1
 8006656:	d102      	bne.n	800665e <HAL_SAI_Init+0x186>
 8006658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800665c:	e000      	b.n	8006660 <HAL_SAI_Init+0x188>
 800665e:	2300      	movs	r3, #0
 8006660:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6819      	ldr	r1, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	4b4b      	ldr	r3, [pc, #300]	; (800679c <HAL_SAI_Init+0x2c4>)
 800666e:	400b      	ands	r3, r1
 8006670:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6819      	ldr	r1, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006680:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006686:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668c:	431a      	orrs	r2, r3
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800669a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80066a6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	051b      	lsls	r3, r3, #20
 80066ae:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	6812      	ldr	r2, [r2, #0]
 80066c2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80066c6:	f023 030f 	bic.w	r3, r3, #15
 80066ca:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6859      	ldr	r1, [r3, #4]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	699a      	ldr	r2, [r3, #24]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066da:	431a      	orrs	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e0:	431a      	orrs	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	6899      	ldr	r1, [r3, #8]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	4b2a      	ldr	r3, [pc, #168]	; (80067a0 <HAL_SAI_Init+0x2c8>)
 80066f6:	400b      	ands	r3, r1
 80066f8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6899      	ldr	r1, [r3, #8]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006704:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800670a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8006710:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8006716:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671c:	3b01      	subs	r3, #1
 800671e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006720:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68d9      	ldr	r1, [r3, #12]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006738:	400b      	ands	r3, r1
 800673a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68d9      	ldr	r1, [r3, #12]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800674a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006750:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006752:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006758:	3b01      	subs	r3, #1
 800675a:	021b      	lsls	r3, r3, #8
 800675c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3720      	adds	r7, #32
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	40015404 	.word	0x40015404
 800678c:	40015424 	.word	0x40015424
 8006790:	40015400 	.word	0x40015400
 8006794:	40015800 	.word	0x40015800
 8006798:	cccccccd 	.word	0xcccccccd
 800679c:	ff05c010 	.word	0xff05c010
 80067a0:	fff88000 	.word	0xfff88000

080067a4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80067a4:	b490      	push	{r4, r7}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80067ac:	4b15      	ldr	r3, [pc, #84]	; (8006804 <SAI_Disable+0x60>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a15      	ldr	r2, [pc, #84]	; (8006808 <SAI_Disable+0x64>)
 80067b2:	fba2 2303 	umull	r2, r3, r2, r3
 80067b6:	0b1b      	lsrs	r3, r3, #12
 80067b8:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80067cc:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80067ce:	2c00      	cmp	r4, #0
 80067d0:	d10a      	bne.n	80067e8 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	73fb      	strb	r3, [r7, #15]
      break;
 80067e6:	e007      	b.n	80067f8 <SAI_Disable+0x54>
    }
    count--;
 80067e8:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1ea      	bne.n	80067ce <SAI_Disable+0x2a>

  return status;
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bc90      	pop	{r4, r7}
 8006802:	4770      	bx	lr
 8006804:	20000020 	.word	0x20000020
 8006808:	95cbec1b 	.word	0x95cbec1b

0800680c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e07c      	b.n	8006918 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d106      	bne.n	800683e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7fa fc51 	bl	80010e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2202      	movs	r2, #2
 8006842:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006854:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800685e:	d902      	bls.n	8006866 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006860:	2300      	movs	r3, #0
 8006862:	60fb      	str	r3, [r7, #12]
 8006864:	e002      	b.n	800686c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800686a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006874:	d007      	beq.n	8006886 <HAL_SPI_Init+0x7a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800687e:	d002      	beq.n	8006886 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10b      	bne.n	80068a6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006896:	d903      	bls.n	80068a0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	631a      	str	r2, [r3, #48]	; 0x30
 800689e:	e002      	b.n	80068a6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	431a      	orrs	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	431a      	orrs	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	431a      	orrs	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068c4:	431a      	orrs	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	431a      	orrs	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	ea42 0103 	orr.w	r1, r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	430a      	orrs	r2, r1
 80068de:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	0c1b      	lsrs	r3, r3, #16
 80068e6:	f003 0204 	and.w	r2, r3, #4
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ee:	431a      	orrs	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f4:	431a      	orrs	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	ea42 0103 	orr.w	r1, r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	430a      	orrs	r2, r1
 8006906:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e040      	b.n	80069b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006936:	2b00      	cmp	r3, #0
 8006938:	d106      	bne.n	8006948 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7fa ff74 	bl	8001830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2224      	movs	r2, #36	; 0x24
 800694c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0201 	bic.w	r2, r2, #1
 800695c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f882 	bl	8006a68 <UART_SetConfig>
 8006964:	4603      	mov	r3, r0
 8006966:	2b01      	cmp	r3, #1
 8006968:	d101      	bne.n	800696e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e022      	b.n	80069b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fbbe 	bl	80070f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800698a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689a      	ldr	r2, [r3, #8]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800699a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0201 	orr.w	r2, r2, #1
 80069aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fc45 	bl	800723c <UART_CheckIdleState>
 80069b2:	4603      	mov	r3, r0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e048      	b.n	8006a60 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d106      	bne.n	80069e4 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f7fa ff26 	bl	8001830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2224      	movs	r2, #36	; 0x24
 80069e8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0201 	bic.w	r2, r2, #1
 80069f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f834 	bl	8006a68 <UART_SetConfig>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d101      	bne.n	8006a0a <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e02a      	b.n	8006a60 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d002      	beq.n	8006a18 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fb70 	bl	80070f8 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689a      	ldr	r2, [r3, #8]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8006a36:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689a      	ldr	r2, [r3, #8]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0208 	orr.w	r2, r2, #8
 8006a46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f042 0201 	orr.w	r2, r2, #1
 8006a56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fbef 	bl	800723c <UART_CheckIdleState>
 8006a5e:	4603      	mov	r3, r0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a68:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006a6c:	b088      	sub	sp, #32
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a76:	2300      	movs	r3, #0
 8006a78:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689a      	ldr	r2, [r3, #8]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	431a      	orrs	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	4bac      	ldr	r3, [pc, #688]	; (8006d50 <UART_SetConfig+0x2e8>)
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	6812      	ldr	r2, [r2, #0]
 8006aa4:	69f9      	ldr	r1, [r7, #28]
 8006aa6:	430b      	orrs	r3, r1
 8006aa8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68da      	ldr	r2, [r3, #12]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	430a      	orrs	r2, r1
 8006abe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4aa2      	ldr	r2, [pc, #648]	; (8006d54 <UART_SetConfig+0x2ec>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d004      	beq.n	8006ada <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	69fa      	ldr	r2, [r7, #28]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	69fa      	ldr	r2, [r7, #28]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a99      	ldr	r2, [pc, #612]	; (8006d58 <UART_SetConfig+0x2f0>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d121      	bne.n	8006b3c <UART_SetConfig+0xd4>
 8006af8:	4b98      	ldr	r3, [pc, #608]	; (8006d5c <UART_SetConfig+0x2f4>)
 8006afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006afe:	f003 0303 	and.w	r3, r3, #3
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	d816      	bhi.n	8006b34 <UART_SetConfig+0xcc>
 8006b06:	a201      	add	r2, pc, #4	; (adr r2, 8006b0c <UART_SetConfig+0xa4>)
 8006b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0c:	08006b1d 	.word	0x08006b1d
 8006b10:	08006b29 	.word	0x08006b29
 8006b14:	08006b23 	.word	0x08006b23
 8006b18:	08006b2f 	.word	0x08006b2f
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	76fb      	strb	r3, [r7, #27]
 8006b20:	e0e8      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006b22:	2302      	movs	r3, #2
 8006b24:	76fb      	strb	r3, [r7, #27]
 8006b26:	e0e5      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006b28:	2304      	movs	r3, #4
 8006b2a:	76fb      	strb	r3, [r7, #27]
 8006b2c:	e0e2      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006b2e:	2308      	movs	r3, #8
 8006b30:	76fb      	strb	r3, [r7, #27]
 8006b32:	e0df      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006b34:	2310      	movs	r3, #16
 8006b36:	76fb      	strb	r3, [r7, #27]
 8006b38:	bf00      	nop
 8006b3a:	e0db      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a87      	ldr	r2, [pc, #540]	; (8006d60 <UART_SetConfig+0x2f8>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d134      	bne.n	8006bb0 <UART_SetConfig+0x148>
 8006b46:	4b85      	ldr	r3, [pc, #532]	; (8006d5c <UART_SetConfig+0x2f4>)
 8006b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4c:	f003 030c 	and.w	r3, r3, #12
 8006b50:	2b0c      	cmp	r3, #12
 8006b52:	d829      	bhi.n	8006ba8 <UART_SetConfig+0x140>
 8006b54:	a201      	add	r2, pc, #4	; (adr r2, 8006b5c <UART_SetConfig+0xf4>)
 8006b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5a:	bf00      	nop
 8006b5c:	08006b91 	.word	0x08006b91
 8006b60:	08006ba9 	.word	0x08006ba9
 8006b64:	08006ba9 	.word	0x08006ba9
 8006b68:	08006ba9 	.word	0x08006ba9
 8006b6c:	08006b9d 	.word	0x08006b9d
 8006b70:	08006ba9 	.word	0x08006ba9
 8006b74:	08006ba9 	.word	0x08006ba9
 8006b78:	08006ba9 	.word	0x08006ba9
 8006b7c:	08006b97 	.word	0x08006b97
 8006b80:	08006ba9 	.word	0x08006ba9
 8006b84:	08006ba9 	.word	0x08006ba9
 8006b88:	08006ba9 	.word	0x08006ba9
 8006b8c:	08006ba3 	.word	0x08006ba3
 8006b90:	2300      	movs	r3, #0
 8006b92:	76fb      	strb	r3, [r7, #27]
 8006b94:	e0ae      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006b96:	2302      	movs	r3, #2
 8006b98:	76fb      	strb	r3, [r7, #27]
 8006b9a:	e0ab      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006b9c:	2304      	movs	r3, #4
 8006b9e:	76fb      	strb	r3, [r7, #27]
 8006ba0:	e0a8      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006ba2:	2308      	movs	r3, #8
 8006ba4:	76fb      	strb	r3, [r7, #27]
 8006ba6:	e0a5      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006ba8:	2310      	movs	r3, #16
 8006baa:	76fb      	strb	r3, [r7, #27]
 8006bac:	bf00      	nop
 8006bae:	e0a1      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a6b      	ldr	r2, [pc, #428]	; (8006d64 <UART_SetConfig+0x2fc>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d120      	bne.n	8006bfc <UART_SetConfig+0x194>
 8006bba:	4b68      	ldr	r3, [pc, #416]	; (8006d5c <UART_SetConfig+0x2f4>)
 8006bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bc0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006bc4:	2b10      	cmp	r3, #16
 8006bc6:	d00f      	beq.n	8006be8 <UART_SetConfig+0x180>
 8006bc8:	2b10      	cmp	r3, #16
 8006bca:	d802      	bhi.n	8006bd2 <UART_SetConfig+0x16a>
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d005      	beq.n	8006bdc <UART_SetConfig+0x174>
 8006bd0:	e010      	b.n	8006bf4 <UART_SetConfig+0x18c>
 8006bd2:	2b20      	cmp	r3, #32
 8006bd4:	d005      	beq.n	8006be2 <UART_SetConfig+0x17a>
 8006bd6:	2b30      	cmp	r3, #48	; 0x30
 8006bd8:	d009      	beq.n	8006bee <UART_SetConfig+0x186>
 8006bda:	e00b      	b.n	8006bf4 <UART_SetConfig+0x18c>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	76fb      	strb	r3, [r7, #27]
 8006be0:	e088      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006be2:	2302      	movs	r3, #2
 8006be4:	76fb      	strb	r3, [r7, #27]
 8006be6:	e085      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006be8:	2304      	movs	r3, #4
 8006bea:	76fb      	strb	r3, [r7, #27]
 8006bec:	e082      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006bee:	2308      	movs	r3, #8
 8006bf0:	76fb      	strb	r3, [r7, #27]
 8006bf2:	e07f      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006bf4:	2310      	movs	r3, #16
 8006bf6:	76fb      	strb	r3, [r7, #27]
 8006bf8:	bf00      	nop
 8006bfa:	e07b      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a59      	ldr	r2, [pc, #356]	; (8006d68 <UART_SetConfig+0x300>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d120      	bne.n	8006c48 <UART_SetConfig+0x1e0>
 8006c06:	4b55      	ldr	r3, [pc, #340]	; (8006d5c <UART_SetConfig+0x2f4>)
 8006c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c10:	2b40      	cmp	r3, #64	; 0x40
 8006c12:	d00f      	beq.n	8006c34 <UART_SetConfig+0x1cc>
 8006c14:	2b40      	cmp	r3, #64	; 0x40
 8006c16:	d802      	bhi.n	8006c1e <UART_SetConfig+0x1b6>
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d005      	beq.n	8006c28 <UART_SetConfig+0x1c0>
 8006c1c:	e010      	b.n	8006c40 <UART_SetConfig+0x1d8>
 8006c1e:	2b80      	cmp	r3, #128	; 0x80
 8006c20:	d005      	beq.n	8006c2e <UART_SetConfig+0x1c6>
 8006c22:	2bc0      	cmp	r3, #192	; 0xc0
 8006c24:	d009      	beq.n	8006c3a <UART_SetConfig+0x1d2>
 8006c26:	e00b      	b.n	8006c40 <UART_SetConfig+0x1d8>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	76fb      	strb	r3, [r7, #27]
 8006c2c:	e062      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006c2e:	2302      	movs	r3, #2
 8006c30:	76fb      	strb	r3, [r7, #27]
 8006c32:	e05f      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006c34:	2304      	movs	r3, #4
 8006c36:	76fb      	strb	r3, [r7, #27]
 8006c38:	e05c      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006c3a:	2308      	movs	r3, #8
 8006c3c:	76fb      	strb	r3, [r7, #27]
 8006c3e:	e059      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006c40:	2310      	movs	r3, #16
 8006c42:	76fb      	strb	r3, [r7, #27]
 8006c44:	bf00      	nop
 8006c46:	e055      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a47      	ldr	r2, [pc, #284]	; (8006d6c <UART_SetConfig+0x304>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d124      	bne.n	8006c9c <UART_SetConfig+0x234>
 8006c52:	4b42      	ldr	r3, [pc, #264]	; (8006d5c <UART_SetConfig+0x2f4>)
 8006c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c60:	d012      	beq.n	8006c88 <UART_SetConfig+0x220>
 8006c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c66:	d802      	bhi.n	8006c6e <UART_SetConfig+0x206>
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d007      	beq.n	8006c7c <UART_SetConfig+0x214>
 8006c6c:	e012      	b.n	8006c94 <UART_SetConfig+0x22c>
 8006c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c72:	d006      	beq.n	8006c82 <UART_SetConfig+0x21a>
 8006c74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c78:	d009      	beq.n	8006c8e <UART_SetConfig+0x226>
 8006c7a:	e00b      	b.n	8006c94 <UART_SetConfig+0x22c>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	76fb      	strb	r3, [r7, #27]
 8006c80:	e038      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006c82:	2302      	movs	r3, #2
 8006c84:	76fb      	strb	r3, [r7, #27]
 8006c86:	e035      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006c88:	2304      	movs	r3, #4
 8006c8a:	76fb      	strb	r3, [r7, #27]
 8006c8c:	e032      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006c8e:	2308      	movs	r3, #8
 8006c90:	76fb      	strb	r3, [r7, #27]
 8006c92:	e02f      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006c94:	2310      	movs	r3, #16
 8006c96:	76fb      	strb	r3, [r7, #27]
 8006c98:	bf00      	nop
 8006c9a:	e02b      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a2c      	ldr	r2, [pc, #176]	; (8006d54 <UART_SetConfig+0x2ec>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d124      	bne.n	8006cf0 <UART_SetConfig+0x288>
 8006ca6:	4b2d      	ldr	r3, [pc, #180]	; (8006d5c <UART_SetConfig+0x2f4>)
 8006ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb4:	d012      	beq.n	8006cdc <UART_SetConfig+0x274>
 8006cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cba:	d802      	bhi.n	8006cc2 <UART_SetConfig+0x25a>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d007      	beq.n	8006cd0 <UART_SetConfig+0x268>
 8006cc0:	e012      	b.n	8006ce8 <UART_SetConfig+0x280>
 8006cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cc6:	d006      	beq.n	8006cd6 <UART_SetConfig+0x26e>
 8006cc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ccc:	d009      	beq.n	8006ce2 <UART_SetConfig+0x27a>
 8006cce:	e00b      	b.n	8006ce8 <UART_SetConfig+0x280>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	76fb      	strb	r3, [r7, #27]
 8006cd4:	e00e      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	76fb      	strb	r3, [r7, #27]
 8006cda:	e00b      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006cdc:	2304      	movs	r3, #4
 8006cde:	76fb      	strb	r3, [r7, #27]
 8006ce0:	e008      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006ce2:	2308      	movs	r3, #8
 8006ce4:	76fb      	strb	r3, [r7, #27]
 8006ce6:	e005      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006ce8:	2310      	movs	r3, #16
 8006cea:	76fb      	strb	r3, [r7, #27]
 8006cec:	bf00      	nop
 8006cee:	e001      	b.n	8006cf4 <UART_SetConfig+0x28c>
 8006cf0:	2310      	movs	r3, #16
 8006cf2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a16      	ldr	r2, [pc, #88]	; (8006d54 <UART_SetConfig+0x2ec>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	f040 80fa 	bne.w	8006ef4 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d00:	7efb      	ldrb	r3, [r7, #27]
 8006d02:	2b08      	cmp	r3, #8
 8006d04:	d836      	bhi.n	8006d74 <UART_SetConfig+0x30c>
 8006d06:	a201      	add	r2, pc, #4	; (adr r2, 8006d0c <UART_SetConfig+0x2a4>)
 8006d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0c:	08006d31 	.word	0x08006d31
 8006d10:	08006d75 	.word	0x08006d75
 8006d14:	08006d39 	.word	0x08006d39
 8006d18:	08006d75 	.word	0x08006d75
 8006d1c:	08006d3f 	.word	0x08006d3f
 8006d20:	08006d75 	.word	0x08006d75
 8006d24:	08006d75 	.word	0x08006d75
 8006d28:	08006d75 	.word	0x08006d75
 8006d2c:	08006d47 	.word	0x08006d47
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006d30:	f7fe f936 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8006d34:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006d36:	e020      	b.n	8006d7a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006d38:	4b0d      	ldr	r3, [pc, #52]	; (8006d70 <UART_SetConfig+0x308>)
 8006d3a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006d3c:	e01d      	b.n	8006d7a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006d3e:	f7fe f899 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8006d42:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006d44:	e019      	b.n	8006d7a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d4a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006d4c:	e015      	b.n	8006d7a <UART_SetConfig+0x312>
 8006d4e:	bf00      	nop
 8006d50:	efff69f3 	.word	0xefff69f3
 8006d54:	40008000 	.word	0x40008000
 8006d58:	40013800 	.word	0x40013800
 8006d5c:	40021000 	.word	0x40021000
 8006d60:	40004400 	.word	0x40004400
 8006d64:	40004800 	.word	0x40004800
 8006d68:	40004c00 	.word	0x40004c00
 8006d6c:	40005000 	.word	0x40005000
 8006d70:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	74fb      	strb	r3, [r7, #19]
        break;
 8006d78:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 81ac 	beq.w	80070da <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	4613      	mov	r3, r2
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	4413      	add	r3, r2
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d305      	bcc.n	8006d9e <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d902      	bls.n	8006da4 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	74fb      	strb	r3, [r7, #19]
 8006da2:	e19a      	b.n	80070da <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8006da4:	7efb      	ldrb	r3, [r7, #27]
 8006da6:	2b08      	cmp	r3, #8
 8006da8:	f200 8091 	bhi.w	8006ece <UART_SetConfig+0x466>
 8006dac:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <UART_SetConfig+0x34c>)
 8006dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db2:	bf00      	nop
 8006db4:	08006dd9 	.word	0x08006dd9
 8006db8:	08006ecf 	.word	0x08006ecf
 8006dbc:	08006e25 	.word	0x08006e25
 8006dc0:	08006ecf 	.word	0x08006ecf
 8006dc4:	08006e59 	.word	0x08006e59
 8006dc8:	08006ecf 	.word	0x08006ecf
 8006dcc:	08006ecf 	.word	0x08006ecf
 8006dd0:	08006ecf 	.word	0x08006ecf
 8006dd4:	08006ea5 	.word	0x08006ea5
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006dd8:	f7fe f8e2 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	4619      	mov	r1, r3
 8006de0:	f04f 0200 	mov.w	r2, #0
 8006de4:	f04f 0300 	mov.w	r3, #0
 8006de8:	f04f 0400 	mov.w	r4, #0
 8006dec:	0214      	lsls	r4, r2, #8
 8006dee:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006df2:	020b      	lsls	r3, r1, #8
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	6852      	ldr	r2, [r2, #4]
 8006df8:	0852      	lsrs	r2, r2, #1
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	f04f 0200 	mov.w	r2, #0
 8006e00:	eb13 0b01 	adds.w	fp, r3, r1
 8006e04:	eb44 0c02 	adc.w	ip, r4, r2
 8006e08:	4658      	mov	r0, fp
 8006e0a:	4661      	mov	r1, ip
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f04f 0400 	mov.w	r4, #0
 8006e14:	461a      	mov	r2, r3
 8006e16:	4623      	mov	r3, r4
 8006e18:	f7f9 f9d6 	bl	80001c8 <__aeabi_uldivmod>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006e22:	e057      	b.n	8006ed4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	085b      	lsrs	r3, r3, #1
 8006e2a:	f04f 0400 	mov.w	r4, #0
 8006e2e:	49b1      	ldr	r1, [pc, #708]	; (80070f4 <UART_SetConfig+0x68c>)
 8006e30:	f04f 0200 	mov.w	r2, #0
 8006e34:	eb13 0b01 	adds.w	fp, r3, r1
 8006e38:	eb44 0c02 	adc.w	ip, r4, r2
 8006e3c:	4658      	mov	r0, fp
 8006e3e:	4661      	mov	r1, ip
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f04f 0400 	mov.w	r4, #0
 8006e48:	461a      	mov	r2, r3
 8006e4a:	4623      	mov	r3, r4
 8006e4c:	f7f9 f9bc 	bl	80001c8 <__aeabi_uldivmod>
 8006e50:	4603      	mov	r3, r0
 8006e52:	460c      	mov	r4, r1
 8006e54:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006e56:	e03d      	b.n	8006ed4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006e58:	f7fe f80c 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	4619      	mov	r1, r3
 8006e60:	f04f 0200 	mov.w	r2, #0
 8006e64:	f04f 0300 	mov.w	r3, #0
 8006e68:	f04f 0400 	mov.w	r4, #0
 8006e6c:	0214      	lsls	r4, r2, #8
 8006e6e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006e72:	020b      	lsls	r3, r1, #8
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	6852      	ldr	r2, [r2, #4]
 8006e78:	0852      	lsrs	r2, r2, #1
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	f04f 0200 	mov.w	r2, #0
 8006e80:	eb13 0b01 	adds.w	fp, r3, r1
 8006e84:	eb44 0c02 	adc.w	ip, r4, r2
 8006e88:	4658      	mov	r0, fp
 8006e8a:	4661      	mov	r1, ip
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f04f 0400 	mov.w	r4, #0
 8006e94:	461a      	mov	r2, r3
 8006e96:	4623      	mov	r3, r4
 8006e98:	f7f9 f996 	bl	80001c8 <__aeabi_uldivmod>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006ea2:	e017      	b.n	8006ed4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	085b      	lsrs	r3, r3, #1
 8006eaa:	f04f 0400 	mov.w	r4, #0
 8006eae:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8006eb2:	f144 0100 	adc.w	r1, r4, #0
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f04f 0400 	mov.w	r4, #0
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	4623      	mov	r3, r4
 8006ec2:	f7f9 f981 	bl	80001c8 <__aeabi_uldivmod>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	460c      	mov	r4, r1
 8006eca:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006ecc:	e002      	b.n	8006ed4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	74fb      	strb	r3, [r7, #19]
            break;
 8006ed2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eda:	d308      	bcc.n	8006eee <UART_SetConfig+0x486>
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ee2:	d204      	bcs.n	8006eee <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	60da      	str	r2, [r3, #12]
 8006eec:	e0f5      	b.n	80070da <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	74fb      	strb	r3, [r7, #19]
 8006ef2:	e0f2      	b.n	80070da <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006efc:	d17f      	bne.n	8006ffe <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8006efe:	7efb      	ldrb	r3, [r7, #27]
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d85c      	bhi.n	8006fbe <UART_SetConfig+0x556>
 8006f04:	a201      	add	r2, pc, #4	; (adr r2, 8006f0c <UART_SetConfig+0x4a4>)
 8006f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0a:	bf00      	nop
 8006f0c:	08006f31 	.word	0x08006f31
 8006f10:	08006f4f 	.word	0x08006f4f
 8006f14:	08006f6d 	.word	0x08006f6d
 8006f18:	08006fbf 	.word	0x08006fbf
 8006f1c:	08006f89 	.word	0x08006f89
 8006f20:	08006fbf 	.word	0x08006fbf
 8006f24:	08006fbf 	.word	0x08006fbf
 8006f28:	08006fbf 	.word	0x08006fbf
 8006f2c:	08006fa7 	.word	0x08006fa7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006f30:	f7fe f836 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8006f34:	4603      	mov	r3, r0
 8006f36:	005a      	lsls	r2, r3, #1
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	085b      	lsrs	r3, r3, #1
 8006f3e:	441a      	add	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f4c:	e03a      	b.n	8006fc4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006f4e:	f7fe f83d 	bl	8004fcc <HAL_RCC_GetPCLK2Freq>
 8006f52:	4603      	mov	r3, r0
 8006f54:	005a      	lsls	r2, r3, #1
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	085b      	lsrs	r3, r3, #1
 8006f5c:	441a      	add	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f6a:	e02b      	b.n	8006fc4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	085b      	lsrs	r3, r3, #1
 8006f72:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006f76:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	6852      	ldr	r2, [r2, #4]
 8006f7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f86:	e01d      	b.n	8006fc4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006f88:	f7fd ff74 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	005a      	lsls	r2, r3, #1
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	085b      	lsrs	r3, r3, #1
 8006f96:	441a      	add	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006fa4:	e00e      	b.n	8006fc4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	085b      	lsrs	r3, r3, #1
 8006fac:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006fbc:	e002      	b.n	8006fc4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	74fb      	strb	r3, [r7, #19]
        break;
 8006fc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	2b0f      	cmp	r3, #15
 8006fc8:	d916      	bls.n	8006ff8 <UART_SetConfig+0x590>
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fd0:	d212      	bcs.n	8006ff8 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	f023 030f 	bic.w	r3, r3, #15
 8006fda:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	085b      	lsrs	r3, r3, #1
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	f003 0307 	and.w	r3, r3, #7
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	897b      	ldrh	r3, [r7, #10]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	897a      	ldrh	r2, [r7, #10]
 8006ff4:	60da      	str	r2, [r3, #12]
 8006ff6:	e070      	b.n	80070da <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	74fb      	strb	r3, [r7, #19]
 8006ffc:	e06d      	b.n	80070da <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8006ffe:	7efb      	ldrb	r3, [r7, #27]
 8007000:	2b08      	cmp	r3, #8
 8007002:	d859      	bhi.n	80070b8 <UART_SetConfig+0x650>
 8007004:	a201      	add	r2, pc, #4	; (adr r2, 800700c <UART_SetConfig+0x5a4>)
 8007006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700a:	bf00      	nop
 800700c:	08007031 	.word	0x08007031
 8007010:	0800704d 	.word	0x0800704d
 8007014:	08007069 	.word	0x08007069
 8007018:	080070b9 	.word	0x080070b9
 800701c:	08007085 	.word	0x08007085
 8007020:	080070b9 	.word	0x080070b9
 8007024:	080070b9 	.word	0x080070b9
 8007028:	080070b9 	.word	0x080070b9
 800702c:	080070a1 	.word	0x080070a1
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007030:	f7fd ffb6 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8007034:	4602      	mov	r2, r0
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	085b      	lsrs	r3, r3, #1
 800703c:	441a      	add	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	fbb2 f3f3 	udiv	r3, r2, r3
 8007046:	b29b      	uxth	r3, r3
 8007048:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800704a:	e038      	b.n	80070be <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800704c:	f7fd ffbe 	bl	8004fcc <HAL_RCC_GetPCLK2Freq>
 8007050:	4602      	mov	r2, r0
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	085b      	lsrs	r3, r3, #1
 8007058:	441a      	add	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007062:	b29b      	uxth	r3, r3
 8007064:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007066:	e02a      	b.n	80070be <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	085b      	lsrs	r3, r3, #1
 800706e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8007072:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	6852      	ldr	r2, [r2, #4]
 800707a:	fbb3 f3f2 	udiv	r3, r3, r2
 800707e:	b29b      	uxth	r3, r3
 8007080:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007082:	e01c      	b.n	80070be <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007084:	f7fd fef6 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8007088:	4602      	mov	r2, r0
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	085b      	lsrs	r3, r3, #1
 8007090:	441a      	add	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	fbb2 f3f3 	udiv	r3, r2, r3
 800709a:	b29b      	uxth	r3, r3
 800709c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800709e:	e00e      	b.n	80070be <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	085b      	lsrs	r3, r3, #1
 80070a6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80070b6:	e002      	b.n	80070be <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	74fb      	strb	r3, [r7, #19]
        break;
 80070bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	2b0f      	cmp	r3, #15
 80070c2:	d908      	bls.n	80070d6 <UART_SetConfig+0x66e>
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070ca:	d204      	bcs.n	80070d6 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	697a      	ldr	r2, [r7, #20]
 80070d2:	60da      	str	r2, [r3, #12]
 80070d4:	e001      	b.n	80070da <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80070e6:	7cfb      	ldrb	r3, [r7, #19]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3720      	adds	r7, #32
 80070ec:	46bd      	mov	sp, r7
 80070ee:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80070f2:	bf00      	nop
 80070f4:	f4240000 	.word	0xf4240000

080070f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00a      	beq.n	8007122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	430a      	orrs	r2, r1
 8007142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00a      	beq.n	8007166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716a:	f003 0308 	and.w	r3, r3, #8
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00a      	beq.n	8007188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	430a      	orrs	r2, r1
 8007186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	f003 0310 	and.w	r3, r3, #16
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00a      	beq.n	80071aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	f003 0320 	and.w	r3, r3, #32
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00a      	beq.n	80071cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d01a      	beq.n	800720e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071f6:	d10a      	bne.n	800720e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00a      	beq.n	8007230 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	430a      	orrs	r2, r1
 800722e:	605a      	str	r2, [r3, #4]
  }
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af02      	add	r7, sp, #8
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800724a:	f7fa fc2f 	bl	8001aac <HAL_GetTick>
 800724e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0308 	and.w	r3, r3, #8
 800725a:	2b08      	cmp	r3, #8
 800725c:	d10e      	bne.n	800727c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800725e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f82a 	bl	80072c6 <UART_WaitOnFlagUntilTimeout>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d001      	beq.n	800727c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e020      	b.n	80072be <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0304 	and.w	r3, r3, #4
 8007286:	2b04      	cmp	r3, #4
 8007288:	d10e      	bne.n	80072a8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800728a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f814 	bl	80072c6 <UART_WaitOnFlagUntilTimeout>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d001      	beq.n	80072a8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e00a      	b.n	80072be <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2220      	movs	r2, #32
 80072ac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2220      	movs	r2, #32
 80072b2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b084      	sub	sp, #16
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	60f8      	str	r0, [r7, #12]
 80072ce:	60b9      	str	r1, [r7, #8]
 80072d0:	603b      	str	r3, [r7, #0]
 80072d2:	4613      	mov	r3, r2
 80072d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072d6:	e02a      	b.n	800732e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072de:	d026      	beq.n	800732e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072e0:	f7fa fbe4 	bl	8001aac <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	69ba      	ldr	r2, [r7, #24]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d302      	bcc.n	80072f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d11b      	bne.n	800732e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007304:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f022 0201 	bic.w	r2, r2, #1
 8007314:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2220      	movs	r2, #32
 800731a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2220      	movs	r2, #32
 8007320:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e00f      	b.n	800734e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	69da      	ldr	r2, [r3, #28]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	4013      	ands	r3, r2
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	429a      	cmp	r2, r3
 800733c:	bf0c      	ite	eq
 800733e:	2301      	moveq	r3, #1
 8007340:	2300      	movne	r3, #0
 8007342:	b2db      	uxtb	r3, r3
 8007344:	461a      	mov	r2, r3
 8007346:	79fb      	ldrb	r3, [r7, #7]
 8007348:	429a      	cmp	r2, r3
 800734a:	d0c5      	beq.n	80072d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007356:	b084      	sub	sp, #16
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	f107 001c 	add.w	r0, r7, #28
 8007364:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736a:	2b01      	cmp	r3, #1
 800736c:	d122      	bne.n	80073b4 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007372:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007398:	2b01      	cmp	r3, #1
 800739a:	d105      	bne.n	80073a8 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f937 	bl	800761c <USB_CoreReset>
 80073ae:	4603      	mov	r3, r0
 80073b0:	73fb      	strb	r3, [r7, #15]
 80073b2:	e01a      	b.n	80073ea <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f92b 	bl	800761c <USB_CoreReset>
 80073c6:	4603      	mov	r3, r0
 80073c8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80073ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d106      	bne.n	80073de <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	639a      	str	r2, [r3, #56]	; 0x38
 80073dc:	e005      	b.n	80073ea <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 80073ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073f6:	b004      	add	sp, #16
 80073f8:	4770      	bx	lr

080073fa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b083      	sub	sp, #12
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f043 0201 	orr.w	r2, r3, #1
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f023 0201 	bic.w	r2, r3, #1
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b082      	sub	sp, #8
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	460b      	mov	r3, r1
 8007448:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007456:	78fb      	ldrb	r3, [r7, #3]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d106      	bne.n	800746a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	60da      	str	r2, [r3, #12]
 8007468:	e00b      	b.n	8007482 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800746a:	78fb      	ldrb	r3, [r7, #3]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d106      	bne.n	800747e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	60da      	str	r2, [r3, #12]
 800747c:	e001      	b.n	8007482 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e003      	b.n	800748a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007482:	2032      	movs	r0, #50	; 0x32
 8007484:	f7fa fb1e 	bl	8001ac4 <HAL_Delay>

  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3708      	adds	r7, #8
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
	...

08007494 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	019b      	lsls	r3, r3, #6
 80074a6:	f043 0220 	orr.w	r2, r3, #32
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	3301      	adds	r3, #1
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4a09      	ldr	r2, [pc, #36]	; (80074dc <USB_FlushTxFifo+0x48>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d901      	bls.n	80074c0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e006      	b.n	80074ce <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	f003 0320 	and.w	r3, r3, #32
 80074c8:	2b20      	cmp	r3, #32
 80074ca:	d0f0      	beq.n	80074ae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	00030d40 	.word	0x00030d40

080074e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80074e8:	2300      	movs	r3, #0
 80074ea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2210      	movs	r2, #16
 80074f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3301      	adds	r3, #1
 80074f6:	60fb      	str	r3, [r7, #12]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4a09      	ldr	r2, [pc, #36]	; (8007520 <USB_FlushRxFifo+0x40>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d901      	bls.n	8007504 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e006      	b.n	8007512 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	f003 0310 	and.w	r3, r3, #16
 800750c:	2b10      	cmp	r3, #16
 800750e:	d0f0      	beq.n	80074f2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	00030d40 	.word	0x00030d40

08007524 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8007524:	b480      	push	{r7}
 8007526:	b089      	sub	sp, #36	; 0x24
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	4611      	mov	r1, r2
 8007530:	461a      	mov	r2, r3
 8007532:	460b      	mov	r3, r1
 8007534:	71fb      	strb	r3, [r7, #7]
 8007536:	4613      	mov	r3, r2
 8007538:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8007542:	88bb      	ldrh	r3, [r7, #4]
 8007544:	3303      	adds	r3, #3
 8007546:	089b      	lsrs	r3, r3, #2
 8007548:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800754a:	2300      	movs	r3, #0
 800754c:	61bb      	str	r3, [r7, #24]
 800754e:	e00f      	b.n	8007570 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007550:	79fb      	ldrb	r3, [r7, #7]
 8007552:	031a      	lsls	r2, r3, #12
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	4413      	add	r3, r2
 8007558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800755c:	461a      	mov	r2, r3
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	3304      	adds	r3, #4
 8007568:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	3301      	adds	r3, #1
 800756e:	61bb      	str	r3, [r7, #24]
 8007570:	69ba      	ldr	r2, [r7, #24]
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	429a      	cmp	r2, r3
 8007576:	d3eb      	bcc.n	8007550 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3724      	adds	r7, #36	; 0x24
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007586:	b480      	push	{r7}
 8007588:	b089      	sub	sp, #36	; 0x24
 800758a:	af00      	add	r7, sp, #0
 800758c:	60f8      	str	r0, [r7, #12]
 800758e:	60b9      	str	r1, [r7, #8]
 8007590:	4613      	mov	r3, r2
 8007592:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800759c:	88fb      	ldrh	r3, [r7, #6]
 800759e:	3303      	adds	r3, #3
 80075a0:	089b      	lsrs	r3, r3, #2
 80075a2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80075a4:	2300      	movs	r3, #0
 80075a6:	61bb      	str	r3, [r7, #24]
 80075a8:	e00b      	b.n	80075c2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	601a      	str	r2, [r3, #0]
    pDest++;
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	3304      	adds	r3, #4
 80075ba:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	3301      	adds	r3, #1
 80075c0:	61bb      	str	r3, [r7, #24]
 80075c2:	69ba      	ldr	r2, [r7, #24]
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d3ef      	bcc.n	80075aa <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80075ca:	69fb      	ldr	r3, [r7, #28]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3724      	adds	r7, #36	; 0x24
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	695b      	ldr	r3, [r3, #20]
 80075e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	4013      	ands	r3, r2
 80075ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80075f0:	68fb      	ldr	r3, [r7, #12]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80075fe:	b480      	push	{r7}
 8007600:	b083      	sub	sp, #12
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	f003 0301 	and.w	r3, r3, #1
}
 800760e:	4618      	mov	r0, r3
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
	...

0800761c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007624:	2300      	movs	r3, #0
 8007626:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	3301      	adds	r3, #1
 800762c:	60fb      	str	r3, [r7, #12]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	4a13      	ldr	r2, [pc, #76]	; (8007680 <USB_CoreReset+0x64>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d901      	bls.n	800763a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e01b      	b.n	8007672 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	daf2      	bge.n	8007628 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007642:	2300      	movs	r3, #0
 8007644:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	f043 0201 	orr.w	r2, r3, #1
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	3301      	adds	r3, #1
 8007656:	60fb      	str	r3, [r7, #12]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4a09      	ldr	r2, [pc, #36]	; (8007680 <USB_CoreReset+0x64>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d901      	bls.n	8007664 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e006      	b.n	8007672 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	2b01      	cmp	r3, #1
 800766e:	d0f0      	beq.n	8007652 <USB_CoreReset+0x36>

  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3714      	adds	r7, #20
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	00030d40 	.word	0x00030d40

08007684 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007684:	b084      	sub	sp, #16
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	f107 001c 	add.w	r0, r7, #28
 8007692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076a0:	461a      	mov	r2, r3
 80076a2:	2300      	movs	r3, #0
 80076a4:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076cc:	f023 0304 	bic.w	r3, r3, #4
 80076d0:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80076d2:	2110      	movs	r1, #16
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7ff fedd 	bl	8007494 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7ff ff00 	bl	80074e0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80076e0:	2300      	movs	r3, #0
 80076e2:	60fb      	str	r3, [r7, #12]
 80076e4:	e015      	b.n	8007712 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	015a      	lsls	r2, r3, #5
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076f2:	461a      	mov	r2, r3
 80076f4:	f04f 33ff 	mov.w	r3, #4294967295
 80076f8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	4413      	add	r3, r2
 8007702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007706:	461a      	mov	r2, r3
 8007708:	2300      	movs	r3, #0
 800770a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	3301      	adds	r3, #1
 8007710:	60fb      	str	r3, [r7, #12]
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	429a      	cmp	r2, r3
 8007718:	d3e5      	bcc.n	80076e6 <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800771a:	2101      	movs	r1, #1
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f893 	bl	8007848 <USB_DriveVbus>

  HAL_Delay(200U);
 8007722:	20c8      	movs	r0, #200	; 0xc8
 8007724:	f7fa f9ce 	bl	8001ac4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f04f 32ff 	mov.w	r2, #4294967295
 8007734:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2280      	movs	r2, #128	; 0x80
 800773a:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a0d      	ldr	r2, [pc, #52]	; (8007774 <USB_HostInit+0xf0>)
 8007740:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a0c      	ldr	r2, [pc, #48]	; (8007778 <USB_HostInit+0xf4>)
 8007746:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	f043 0210 	orr.w	r2, r3, #16
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	699a      	ldr	r2, [r3, #24]
 800775a:	4b08      	ldr	r3, [pc, #32]	; (800777c <USB_HostInit+0xf8>)
 800775c:	4313      	orrs	r3, r2
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800776e:	b004      	add	sp, #16
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	00600080 	.word	0x00600080
 8007778:	004000e0 	.word	0x004000e0
 800777c:	a3200008 	.word	0xa3200008

08007780 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	460b      	mov	r3, r1
 800778a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800779e:	f023 0303 	bic.w	r3, r3, #3
 80077a2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	78fb      	ldrb	r3, [r7, #3]
 80077ae:	f003 0303 	and.w	r3, r3, #3
 80077b2:	68f9      	ldr	r1, [r7, #12]
 80077b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80077b8:	4313      	orrs	r3, r2
 80077ba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80077bc:	78fb      	ldrb	r3, [r7, #3]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d107      	bne.n	80077d2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077c8:	461a      	mov	r2, r3
 80077ca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80077ce:	6053      	str	r3, [r2, #4]
 80077d0:	e009      	b.n	80077e6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80077d2:	78fb      	ldrb	r3, [r7, #3]
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d106      	bne.n	80077e6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077de:	461a      	mov	r2, r3
 80077e0:	f241 7370 	movw	r3, #6000	; 0x1770
 80077e4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007800:	2300      	movs	r3, #0
 8007802:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007814:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800781e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007822:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007824:	2064      	movs	r0, #100	; 0x64
 8007826:	f7fa f94d 	bl	8001ac4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007832:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007836:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007838:	200a      	movs	r0, #10
 800783a:	f7fa f943 	bl	8001ac4 <HAL_Delay>

  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	460b      	mov	r3, r1
 8007852:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800786c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d109      	bne.n	800788c <USB_DriveVbus+0x44>
 8007878:	78fb      	ldrb	r3, [r7, #3]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d106      	bne.n	800788c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007886:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800788a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007896:	d109      	bne.n	80078ac <USB_DriveVbus+0x64>
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d106      	bne.n	80078ac <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80078a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078aa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b085      	sub	sp, #20
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	0c5b      	lsrs	r3, r3, #17
 80078d8:	f003 0303 	and.w	r3, r3, #3
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	b29b      	uxth	r3, r3
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
	...

0800790c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800790c:	b480      	push	{r7}
 800790e:	b087      	sub	sp, #28
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	4608      	mov	r0, r1
 8007916:	4611      	mov	r1, r2
 8007918:	461a      	mov	r2, r3
 800791a:	4603      	mov	r3, r0
 800791c:	70fb      	strb	r3, [r7, #3]
 800791e:	460b      	mov	r3, r1
 8007920:	70bb      	strb	r3, [r7, #2]
 8007922:	4613      	mov	r3, r2
 8007924:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800792e:	78fb      	ldrb	r3, [r7, #3]
 8007930:	015a      	lsls	r2, r3, #5
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	4413      	add	r3, r2
 8007936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800793a:	461a      	mov	r2, r3
 800793c:	f04f 33ff 	mov.w	r3, #4294967295
 8007940:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007942:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007946:	2b03      	cmp	r3, #3
 8007948:	d867      	bhi.n	8007a1a <USB_HC_Init+0x10e>
 800794a:	a201      	add	r2, pc, #4	; (adr r2, 8007950 <USB_HC_Init+0x44>)
 800794c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007950:	08007961 	.word	0x08007961
 8007954:	080079dd 	.word	0x080079dd
 8007958:	08007961 	.word	0x08007961
 800795c:	0800799f 	.word	0x0800799f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007960:	78fb      	ldrb	r3, [r7, #3]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	4413      	add	r3, r2
 8007968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800796c:	461a      	mov	r2, r3
 800796e:	f240 439d 	movw	r3, #1181	; 0x49d
 8007972:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007974:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007978:	2b00      	cmp	r3, #0
 800797a:	da51      	bge.n	8007a20 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800797c:	78fb      	ldrb	r3, [r7, #3]
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	4413      	add	r3, r2
 8007984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	78fa      	ldrb	r2, [r7, #3]
 800798c:	0151      	lsls	r1, r2, #5
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	440a      	add	r2, r1
 8007992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800799a:	60d3      	str	r3, [r2, #12]
      }
      break;
 800799c:	e040      	b.n	8007a20 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800799e:	78fb      	ldrb	r3, [r7, #3]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079aa:	461a      	mov	r2, r3
 80079ac:	f240 639d 	movw	r3, #1693	; 0x69d
 80079b0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80079b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	da34      	bge.n	8007a24 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80079ba:	78fb      	ldrb	r3, [r7, #3]
 80079bc:	015a      	lsls	r2, r3, #5
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	78fa      	ldrb	r2, [r7, #3]
 80079ca:	0151      	lsls	r1, r2, #5
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	440a      	add	r2, r1
 80079d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079d8:	60d3      	str	r3, [r2, #12]
      }

      break;
 80079da:	e023      	b.n	8007a24 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80079dc:	78fb      	ldrb	r3, [r7, #3]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079e8:	461a      	mov	r2, r3
 80079ea:	f240 2325 	movw	r3, #549	; 0x225
 80079ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80079f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	da17      	bge.n	8007a28 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80079f8:	78fb      	ldrb	r3, [r7, #3]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	78fa      	ldrb	r2, [r7, #3]
 8007a08:	0151      	lsls	r1, r2, #5
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	440a      	add	r2, r1
 8007a0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a12:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007a16:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007a18:	e006      	b.n	8007a28 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a1e:	e004      	b.n	8007a2a <USB_HC_Init+0x11e>
      break;
 8007a20:	bf00      	nop
 8007a22:	e002      	b.n	8007a2a <USB_HC_Init+0x11e>
      break;
 8007a24:	bf00      	nop
 8007a26:	e000      	b.n	8007a2a <USB_HC_Init+0x11e>
      break;
 8007a28:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a30:	699a      	ldr	r2, [r3, #24]
 8007a32:	78fb      	ldrb	r3, [r7, #3]
 8007a34:	f003 030f 	and.w	r3, r3, #15
 8007a38:	2101      	movs	r1, #1
 8007a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a3e:	68b9      	ldr	r1, [r7, #8]
 8007a40:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007a44:	4313      	orrs	r3, r2
 8007a46:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007a54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	da03      	bge.n	8007a64 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007a5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a60:	613b      	str	r3, [r7, #16]
 8007a62:	e001      	b.n	8007a68 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8007a68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d103      	bne.n	8007a78 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007a70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a74:	60fb      	str	r3, [r7, #12]
 8007a76:	e001      	b.n	8007a7c <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a7c:	787b      	ldrb	r3, [r7, #1]
 8007a7e:	059b      	lsls	r3, r3, #22
 8007a80:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a84:	78bb      	ldrb	r3, [r7, #2]
 8007a86:	02db      	lsls	r3, r3, #11
 8007a88:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a8c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a92:	049b      	lsls	r3, r3, #18
 8007a94:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a98:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007aa0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007aa6:	78fb      	ldrb	r3, [r7, #3]
 8007aa8:	0159      	lsls	r1, r3, #5
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	440b      	add	r3, r1
 8007aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ab2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007ab8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007aba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d10f      	bne.n	8007ae2 <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007ac2:	78fb      	ldrb	r3, [r7, #3]
 8007ac4:	015a      	lsls	r2, r3, #5
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	78fa      	ldrb	r2, [r7, #3]
 8007ad2:	0151      	lsls	r1, r2, #5
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	440a      	add	r2, r1
 8007ad8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007adc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ae0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	371c      	adds	r7, #28
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b088      	sub	sp, #32
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	785b      	ldrb	r3, [r3, #1]
 8007b02:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007b04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b08:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d018      	beq.n	8007b44 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	8912      	ldrh	r2, [r2, #8]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	683a      	ldr	r2, [r7, #0]
 8007b20:	8912      	ldrh	r2, [r2, #8]
 8007b22:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b26:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8007b28:	8bfa      	ldrh	r2, [r7, #30]
 8007b2a:	8a7b      	ldrh	r3, [r7, #18]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d90b      	bls.n	8007b48 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8007b30:	8a7b      	ldrh	r3, [r7, #18]
 8007b32:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007b34:	8bfb      	ldrh	r3, [r7, #30]
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	8912      	ldrh	r2, [r2, #8]
 8007b3a:	fb02 f203 	mul.w	r2, r2, r3
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	611a      	str	r2, [r3, #16]
 8007b42:	e001      	b.n	8007b48 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8007b44:	2301      	movs	r3, #1
 8007b46:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	78db      	ldrb	r3, [r3, #3]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d006      	beq.n	8007b5e <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007b50:	8bfb      	ldrh	r3, [r7, #30]
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	8912      	ldrh	r2, [r2, #8]
 8007b56:	fb02 f203 	mul.w	r2, r2, r3
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b66:	8bfb      	ldrh	r3, [r7, #30]
 8007b68:	04d9      	lsls	r1, r3, #19
 8007b6a:	4b5f      	ldr	r3, [pc, #380]	; (8007ce8 <USB_HC_StartXfer+0x1f8>)
 8007b6c:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b6e:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	7a9b      	ldrb	r3, [r3, #10]
 8007b74:	075b      	lsls	r3, r3, #29
 8007b76:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b7a:	6979      	ldr	r1, [r7, #20]
 8007b7c:	0148      	lsls	r0, r1, #5
 8007b7e:	69b9      	ldr	r1, [r7, #24]
 8007b80:	4401      	add	r1, r0
 8007b82:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b86:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b88:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	bf0c      	ite	eq
 8007b9a:	2301      	moveq	r3, #1
 8007b9c:	2300      	movne	r3, #0
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	0151      	lsls	r1, r2, #5
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	440a      	add	r2, r1
 8007bb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bbc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007bc0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	015a      	lsls	r2, r3, #5
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	4413      	add	r3, r2
 8007bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	7c7b      	ldrb	r3, [r7, #17]
 8007bd2:	075b      	lsls	r3, r3, #29
 8007bd4:	6979      	ldr	r1, [r7, #20]
 8007bd6:	0148      	lsls	r0, r1, #5
 8007bd8:	69b9      	ldr	r1, [r7, #24]
 8007bda:	4401      	add	r1, r0
 8007bdc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007be0:	4313      	orrs	r3, r2
 8007be2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	015a      	lsls	r2, r3, #5
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a3e      	ldr	r2, [pc, #248]	; (8007cec <USB_HC_StartXfer+0x1fc>)
 8007bf4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007bf6:	4b3d      	ldr	r3, [pc, #244]	; (8007cec <USB_HC_StartXfer+0x1fc>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bfe:	4a3b      	ldr	r2, [pc, #236]	; (8007cec <USB_HC_StartXfer+0x1fc>)
 8007c00:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	78db      	ldrb	r3, [r3, #3]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d006      	beq.n	8007c18 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007c0a:	4b38      	ldr	r3, [pc, #224]	; (8007cec <USB_HC_StartXfer+0x1fc>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c12:	4a36      	ldr	r2, [pc, #216]	; (8007cec <USB_HC_StartXfer+0x1fc>)
 8007c14:	6013      	str	r3, [r2, #0]
 8007c16:	e005      	b.n	8007c24 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007c18:	4b34      	ldr	r3, [pc, #208]	; (8007cec <USB_HC_StartXfer+0x1fc>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c20:	4a32      	ldr	r2, [pc, #200]	; (8007cec <USB_HC_StartXfer+0x1fc>)
 8007c22:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c24:	4b31      	ldr	r3, [pc, #196]	; (8007cec <USB_HC_StartXfer+0x1fc>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c2c:	4a2f      	ldr	r2, [pc, #188]	; (8007cec <USB_HC_StartXfer+0x1fc>)
 8007c2e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	015a      	lsls	r2, r3, #5
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	4413      	add	r3, r2
 8007c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	4b2b      	ldr	r3, [pc, #172]	; (8007cec <USB_HC_StartXfer+0x1fc>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	78db      	ldrb	r3, [r3, #3]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d148      	bne.n	8007cde <USB_HC_StartXfer+0x1ee>
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d044      	beq.n	8007cde <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	79db      	ldrb	r3, [r3, #7]
 8007c58:	2b03      	cmp	r3, #3
 8007c5a:	d831      	bhi.n	8007cc0 <USB_HC_StartXfer+0x1d0>
 8007c5c:	a201      	add	r2, pc, #4	; (adr r2, 8007c64 <USB_HC_StartXfer+0x174>)
 8007c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c62:	bf00      	nop
 8007c64:	08007c75 	.word	0x08007c75
 8007c68:	08007c99 	.word	0x08007c99
 8007c6c:	08007c75 	.word	0x08007c75
 8007c70:	08007c99 	.word	0x08007c99
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	3303      	adds	r3, #3
 8007c7a:	089b      	lsrs	r3, r3, #2
 8007c7c:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007c7e:	89fa      	ldrh	r2, [r7, #14]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d91c      	bls.n	8007cc4 <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	f043 0220 	orr.w	r2, r3, #32
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	619a      	str	r2, [r3, #24]
          }
          break;
 8007c96:	e015      	b.n	8007cc4 <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	3303      	adds	r3, #3
 8007c9e:	089b      	lsrs	r3, r3, #2
 8007ca0:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007ca2:	89fa      	ldrh	r2, [r7, #14]
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d90a      	bls.n	8007cc8 <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	619a      	str	r2, [r3, #24]
          }
          break;
 8007cbe:	e003      	b.n	8007cc8 <USB_HC_StartXfer+0x1d8>

        default:
          break;
 8007cc0:	bf00      	nop
 8007cc2:	e002      	b.n	8007cca <USB_HC_StartXfer+0x1da>
          break;
 8007cc4:	bf00      	nop
 8007cc6:	e000      	b.n	8007cca <USB_HC_StartXfer+0x1da>
          break;
 8007cc8:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	68d9      	ldr	r1, [r3, #12]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	785a      	ldrb	r2, [r3, #1]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7ff fc23 	bl	8007524 <USB_WritePacket>
    }

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3720      	adds	r7, #32
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	1ff80000 	.word	0x1ff80000
 8007cec:	200004dc 	.word	0x200004dc

08007cf0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	b29b      	uxth	r3, r3
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3714      	adds	r7, #20
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b087      	sub	sp, #28
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8007d22:	78fb      	ldrb	r3, [r7, #3]
 8007d24:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	0c9b      	lsrs	r3, r3, #18
 8007d3a:	f003 0303 	and.w	r3, r3, #3
 8007d3e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d002      	beq.n	8007d4c <USB_HC_Halt+0x3a>
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d16c      	bne.n	8007e26 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	015a      	lsls	r2, r3, #5
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	4413      	add	r3, r2
 8007d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	0151      	lsls	r1, r2, #5
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	440a      	add	r2, r1
 8007d62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d6a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d143      	bne.n	8007e00 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	0151      	lsls	r1, r2, #5
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	440a      	add	r2, r1
 8007d8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d96:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	0151      	lsls	r1, r2, #5
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	440a      	add	r2, r1
 8007dae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007db6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	015a      	lsls	r2, r3, #5
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	0151      	lsls	r1, r2, #5
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	440a      	add	r2, r1
 8007dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007dd6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	617b      	str	r3, [r7, #20]
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007de4:	d81d      	bhi.n	8007e22 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	015a      	lsls	r2, r3, #5
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	4413      	add	r3, r2
 8007dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007df8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dfc:	d0ec      	beq.n	8007dd8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007dfe:	e080      	b.n	8007f02 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	015a      	lsls	r2, r3, #5
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	0151      	lsls	r1, r2, #5
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	440a      	add	r2, r1
 8007e16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e1e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e20:	e06f      	b.n	8007f02 <USB_HC_Halt+0x1f0>
          break;
 8007e22:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e24:	e06d      	b.n	8007f02 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	0151      	lsls	r1, r2, #5
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	440a      	add	r2, r1
 8007e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e44:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d143      	bne.n	8007ede <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	015a      	lsls	r2, r3, #5
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	0151      	lsls	r1, r2, #5
 8007e68:	693a      	ldr	r2, [r7, #16]
 8007e6a:	440a      	add	r2, r1
 8007e6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e74:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	015a      	lsls	r2, r3, #5
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	0151      	lsls	r1, r2, #5
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	440a      	add	r2, r1
 8007e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e94:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	015a      	lsls	r2, r3, #5
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	0151      	lsls	r1, r2, #5
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	440a      	add	r2, r1
 8007eac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007eb4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	617b      	str	r3, [r7, #20]
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ec2:	d81d      	bhi.n	8007f00 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007eda:	d0ec      	beq.n	8007eb6 <USB_HC_Halt+0x1a4>
 8007edc:	e011      	b.n	8007f02 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	015a      	lsls	r2, r3, #5
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	0151      	lsls	r1, r2, #5
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	440a      	add	r2, r1
 8007ef4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ef8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007efc:	6013      	str	r3, [r2, #0]
 8007efe:	e000      	b.n	8007f02 <USB_HC_Halt+0x1f0>
          break;
 8007f00:	bf00      	nop
    }
  }

  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	371c      	adds	r7, #28
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7ff fa7b 	bl	800741c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007f26:	2110      	movs	r1, #16
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f7ff fab3 	bl	8007494 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7ff fad6 	bl	80074e0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007f34:	2300      	movs	r3, #0
 8007f36:	613b      	str	r3, [r7, #16]
 8007f38:	e01f      	b.n	8007f7a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	015a      	lsls	r2, r3, #5
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	4413      	add	r3, r2
 8007f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f50:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f58:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f60:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	015a      	lsls	r2, r3, #5
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	4413      	add	r3, r2
 8007f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f6e:	461a      	mov	r2, r3
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	3301      	adds	r3, #1
 8007f78:	613b      	str	r3, [r7, #16]
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	2b0f      	cmp	r3, #15
 8007f7e:	d9dc      	bls.n	8007f3a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007f80:	2300      	movs	r3, #0
 8007f82:	613b      	str	r3, [r7, #16]
 8007f84:	e034      	b.n	8007ff0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	015a      	lsls	r2, r3, #5
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f9c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fa4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007fac:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	015a      	lsls	r2, r3, #5
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fba:	461a      	mov	r2, r3
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	617b      	str	r3, [r7, #20]
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fcc:	d80c      	bhi.n	8007fe8 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fe0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fe4:	d0ec      	beq.n	8007fc0 <USB_StopHost+0xb0>
 8007fe6:	e000      	b.n	8007fea <USB_StopHost+0xda>
        break;
 8007fe8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	3301      	adds	r3, #1
 8007fee:	613b      	str	r3, [r7, #16]
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	2b0f      	cmp	r3, #15
 8007ff4:	d9c7      	bls.n	8007f86 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8008002:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f04f 32ff 	mov.w	r2, #4294967295
 800800a:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f7ff f9f4 	bl	80073fa <USB_EnableGlobalInt>

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3718      	adds	r7, #24
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800801c:	b590      	push	{r4, r7, lr}
 800801e:	b089      	sub	sp, #36	; 0x24
 8008020:	af04      	add	r7, sp, #16
 8008022:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8008024:	2302      	movs	r3, #2
 8008026:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8008028:	2301      	movs	r3, #1
 800802a:	2202      	movs	r2, #2
 800802c:	2102      	movs	r1, #2
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fc3a 	bl	80088a8 <USBH_FindInterface>
 8008034:	4603      	mov	r3, r0
 8008036:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8008038:	7bbb      	ldrb	r3, [r7, #14]
 800803a:	2bff      	cmp	r3, #255	; 0xff
 800803c:	f000 812a 	beq.w	8008294 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8008040:	7bbb      	ldrb	r3, [r7, #14]
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fc13 	bl	8008870 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8008050:	2050      	movs	r0, #80	; 0x50
 8008052:	f002 f8e3 	bl	800a21c <malloc>
 8008056:	4603      	mov	r3, r0
 8008058:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008060:	69db      	ldr	r3, [r3, #28]
 8008062:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008064:	7bbb      	ldrb	r3, [r7, #14]
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	211a      	movs	r1, #26
 800806a:	fb01 f303 	mul.w	r3, r1, r3
 800806e:	4413      	add	r3, r2
 8008070:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	b25b      	sxtb	r3, r3
 8008078:	2b00      	cmp	r3, #0
 800807a:	da15      	bge.n	80080a8 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800807c:	7bbb      	ldrb	r3, [r7, #14]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	211a      	movs	r1, #26
 8008082:	fb01 f303 	mul.w	r3, r1, r3
 8008086:	4413      	add	r3, r2
 8008088:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800808c:	781a      	ldrb	r2, [r3, #0]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008092:	7bbb      	ldrb	r3, [r7, #14]
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	211a      	movs	r1, #26
 8008098:	fb01 f303 	mul.w	r3, r1, r3
 800809c:	4413      	add	r3, r2
 800809e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80080a2:	881a      	ldrh	r2, [r3, #0]
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	785b      	ldrb	r3, [r3, #1]
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f001 fd21 	bl	8009af6 <USBH_AllocPipe>
 80080b4:	4603      	mov	r3, r0
 80080b6:	461a      	mov	r2, r3
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	7819      	ldrb	r1, [r3, #0]
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	7858      	ldrb	r0, [r3, #1]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	8952      	ldrh	r2, [r2, #10]
 80080d4:	9202      	str	r2, [sp, #8]
 80080d6:	2203      	movs	r2, #3
 80080d8:	9201      	str	r2, [sp, #4]
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	4623      	mov	r3, r4
 80080de:	4602      	mov	r2, r0
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f001 fcd9 	bl	8009a98 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	2200      	movs	r2, #0
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f001 ffe4 	bl	800a0bc <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 80080f4:	2300      	movs	r3, #0
 80080f6:	2200      	movs	r2, #0
 80080f8:	210a      	movs	r1, #10
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fbd4 	bl	80088a8 <USBH_FindInterface>
 8008100:	4603      	mov	r3, r0
 8008102:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8008104:	7bbb      	ldrb	r3, [r7, #14]
 8008106:	2bff      	cmp	r3, #255	; 0xff
 8008108:	f000 80c4 	beq.w	8008294 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800810c:	7bbb      	ldrb	r3, [r7, #14]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	211a      	movs	r1, #26
 8008112:	fb01 f303 	mul.w	r3, r1, r3
 8008116:	4413      	add	r3, r2
 8008118:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	b25b      	sxtb	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	da16      	bge.n	8008152 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008124:	7bbb      	ldrb	r3, [r7, #14]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	211a      	movs	r1, #26
 800812a:	fb01 f303 	mul.w	r3, r1, r3
 800812e:	4413      	add	r3, r2
 8008130:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008134:	781a      	ldrb	r2, [r3, #0]
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800813a:	7bbb      	ldrb	r3, [r7, #14]
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	211a      	movs	r1, #26
 8008140:	fb01 f303 	mul.w	r3, r1, r3
 8008144:	4413      	add	r3, r2
 8008146:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800814a:	881a      	ldrh	r2, [r3, #0]
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	835a      	strh	r2, [r3, #26]
 8008150:	e015      	b.n	800817e <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008152:	7bbb      	ldrb	r3, [r7, #14]
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	211a      	movs	r1, #26
 8008158:	fb01 f303 	mul.w	r3, r1, r3
 800815c:	4413      	add	r3, r2
 800815e:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008162:	781a      	ldrb	r2, [r3, #0]
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008168:	7bbb      	ldrb	r3, [r7, #14]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	211a      	movs	r1, #26
 800816e:	fb01 f303 	mul.w	r3, r1, r3
 8008172:	4413      	add	r3, r2
 8008174:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008178:	881a      	ldrh	r2, [r3, #0]
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800817e:	7bbb      	ldrb	r3, [r7, #14]
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	211a      	movs	r1, #26
 8008184:	fb01 f303 	mul.w	r3, r1, r3
 8008188:	4413      	add	r3, r2
 800818a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	b25b      	sxtb	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	da16      	bge.n	80081c4 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	211a      	movs	r1, #26
 800819c:	fb01 f303 	mul.w	r3, r1, r3
 80081a0:	4413      	add	r3, r2
 80081a2:	f203 3352 	addw	r3, r3, #850	; 0x352
 80081a6:	781a      	ldrb	r2, [r3, #0]
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	211a      	movs	r1, #26
 80081b2:	fb01 f303 	mul.w	r3, r1, r3
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80081bc:	881a      	ldrh	r2, [r3, #0]
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	835a      	strh	r2, [r3, #26]
 80081c2:	e015      	b.n	80081f0 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80081c4:	7bbb      	ldrb	r3, [r7, #14]
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	211a      	movs	r1, #26
 80081ca:	fb01 f303 	mul.w	r3, r1, r3
 80081ce:	4413      	add	r3, r2
 80081d0:	f203 3352 	addw	r3, r3, #850	; 0x352
 80081d4:	781a      	ldrb	r2, [r3, #0]
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80081da:	7bbb      	ldrb	r3, [r7, #14]
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	211a      	movs	r1, #26
 80081e0:	fb01 f303 	mul.w	r3, r1, r3
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80081ea:	881a      	ldrh	r2, [r3, #0]
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	7b9b      	ldrb	r3, [r3, #14]
 80081f4:	4619      	mov	r1, r3
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f001 fc7d 	bl	8009af6 <USBH_AllocPipe>
 80081fc:	4603      	mov	r3, r0
 80081fe:	461a      	mov	r2, r3
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	7bdb      	ldrb	r3, [r3, #15]
 8008208:	4619      	mov	r1, r3
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f001 fc73 	bl	8009af6 <USBH_AllocPipe>
 8008210:	4603      	mov	r3, r0
 8008212:	461a      	mov	r2, r3
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	7b59      	ldrb	r1, [r3, #13]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	7b98      	ldrb	r0, [r3, #14]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	8b12      	ldrh	r2, [r2, #24]
 8008230:	9202      	str	r2, [sp, #8]
 8008232:	2202      	movs	r2, #2
 8008234:	9201      	str	r2, [sp, #4]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	4623      	mov	r3, r4
 800823a:	4602      	mov	r2, r0
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f001 fc2b 	bl	8009a98 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	7b19      	ldrb	r1, [r3, #12]
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	7bd8      	ldrb	r0, [r3, #15]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	8b52      	ldrh	r2, [r2, #26]
 800825a:	9202      	str	r2, [sp, #8]
 800825c:	2202      	movs	r2, #2
 800825e:	9201      	str	r2, [sp, #4]
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	4623      	mov	r3, r4
 8008264:	4602      	mov	r2, r0
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f001 fc16 	bl	8009a98 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	7b5b      	ldrb	r3, [r3, #13]
 8008278:	2200      	movs	r2, #0
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f001 ff1d 	bl	800a0bc <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	7b1b      	ldrb	r3, [r3, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	4619      	mov	r1, r3
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f001 ff16 	bl	800a0bc <USBH_LL_SetToggle>
      status = USBH_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8008294:	7bfb      	ldrb	r3, [r7, #15]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	bd90      	pop	{r4, r7, pc}

0800829e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b084      	sub	sp, #16
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80082ac:	69db      	ldr	r3, [r3, #28]
 80082ae:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00e      	beq.n	80082d6 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	4619      	mov	r1, r3
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f001 fc09 	bl	8009ad6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	4619      	mov	r1, r3
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f001 fc31 	bl	8009b32 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	7b1b      	ldrb	r3, [r3, #12]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00e      	beq.n	80082fc <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	7b1b      	ldrb	r3, [r3, #12]
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f001 fbf6 	bl	8009ad6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	7b1b      	ldrb	r3, [r3, #12]
 80082ee:	4619      	mov	r1, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f001 fc1e 	bl	8009b32 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2200      	movs	r2, #0
 80082fa:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	7b5b      	ldrb	r3, [r3, #13]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00e      	beq.n	8008322 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	7b5b      	ldrb	r3, [r3, #13]
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f001 fbe3 	bl	8009ad6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	7b5b      	ldrb	r3, [r3, #13]
 8008314:	4619      	mov	r1, r3
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f001 fc0b 	bl	8009b32 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008328:	69db      	ldr	r3, [r3, #28]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00b      	beq.n	8008346 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008334:	69db      	ldr	r3, [r3, #28]
 8008336:	4618      	mov	r0, r3
 8008338:	f001 ff78 	bl	800a22c <free>
    phost->pActiveClass->pData = 0U;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008342:	2200      	movs	r2, #0
 8008344:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8008358:	2302      	movs	r3, #2
 800835a:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	3340      	adds	r3, #64	; 0x40
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f8b2 	bl	80084d6 <GetLineCoding>
 8008372:	4603      	mov	r3, r0
 8008374:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8008376:	7bfb      	ldrb	r3, [r7, #15]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d105      	bne.n	8008388 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008382:	2102      	movs	r1, #2
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	4798      	blx	r3
  }
  return status;
 8008388:	7bfb      	ldrb	r3, [r7, #15]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
	...

08008394 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800839c:	2301      	movs	r3, #1
 800839e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80083a0:	2300      	movs	r3, #0
 80083a2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80083aa:	69db      	ldr	r3, [r3, #28]
 80083ac:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80083b4:	2b04      	cmp	r3, #4
 80083b6:	d877      	bhi.n	80084a8 <USBH_CDC_Process+0x114>
 80083b8:	a201      	add	r2, pc, #4	; (adr r2, 80083c0 <USBH_CDC_Process+0x2c>)
 80083ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083be:	bf00      	nop
 80083c0:	080083d5 	.word	0x080083d5
 80083c4:	080083db 	.word	0x080083db
 80083c8:	0800840b 	.word	0x0800840b
 80083cc:	0800847f 	.word	0x0800847f
 80083d0:	0800848d 	.word	0x0800848d
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	73fb      	strb	r3, [r7, #15]
    break;
 80083d8:	e06d      	b.n	80084b6 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083de:	4619      	mov	r1, r3
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f897 	bl	8008514 <SetLineCoding>
 80083e6:	4603      	mov	r3, r0
 80083e8:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80083ea:	7bbb      	ldrb	r3, [r7, #14]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d104      	bne.n	80083fa <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2202      	movs	r2, #2
 80083f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80083f8:	e058      	b.n	80084ac <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 80083fa:	7bbb      	ldrb	r3, [r7, #14]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d055      	beq.n	80084ac <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	2204      	movs	r2, #4
 8008404:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8008408:	e050      	b.n	80084ac <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	3340      	adds	r3, #64	; 0x40
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f860 	bl	80084d6 <GetLineCoding>
 8008416:	4603      	mov	r3, r0
 8008418:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800841a:	7bbb      	ldrb	r3, [r7, #14]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d126      	bne.n	800846e <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	2200      	movs	r2, #0
 8008424:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008432:	791b      	ldrb	r3, [r3, #4]
 8008434:	429a      	cmp	r2, r3
 8008436:	d13b      	bne.n	80084b0 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008442:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008444:	429a      	cmp	r2, r3
 8008446:	d133      	bne.n	80084b0 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008452:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008454:	429a      	cmp	r2, r3
 8008456:	d12b      	bne.n	80084b0 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008460:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008462:	429a      	cmp	r2, r3
 8008464:	d124      	bne.n	80084b0 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f95a 	bl	8008720 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800846c:	e020      	b.n	80084b0 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800846e:	7bbb      	ldrb	r3, [r7, #14]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d01d      	beq.n	80084b0 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	2204      	movs	r2, #4
 8008478:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800847c:	e018      	b.n	80084b0 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f867 	bl	8008552 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 f8dc 	bl	8008642 <CDC_ProcessReception>
    break;
 800848a:	e014      	b.n	80084b6 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800848c:	2100      	movs	r1, #0
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fece 	bl	8009230 <USBH_ClrFeature>
 8008494:	4603      	mov	r3, r0
 8008496:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8008498:	7bbb      	ldrb	r3, [r7, #14]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10a      	bne.n	80084b4 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 80084a6:	e005      	b.n	80084b4 <USBH_CDC_Process+0x120>

  default:
    break;
 80084a8:	bf00      	nop
 80084aa:	e004      	b.n	80084b6 <USBH_CDC_Process+0x122>
    break;
 80084ac:	bf00      	nop
 80084ae:	e002      	b.n	80084b6 <USBH_CDC_Process+0x122>
    break;
 80084b0:	bf00      	nop
 80084b2:	e000      	b.n	80084b6 <USBH_CDC_Process+0x122>
    break;
 80084b4:	bf00      	nop

  }

  return status;
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	370c      	adds	r7, #12
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b082      	sub	sp, #8
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	22a1      	movs	r2, #161	; 0xa1
 80084e4:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2221      	movs	r2, #33	; 0x21
 80084ea:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2207      	movs	r2, #7
 80084fc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	2207      	movs	r2, #7
 8008502:	4619      	mov	r1, r3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f001 f873 	bl	80095f0 <USBH_CtlReq>
 800850a:	4603      	mov	r3, r0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2221      	movs	r2, #33	; 0x21
 8008522:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2220      	movs	r2, #32
 8008528:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2207      	movs	r2, #7
 800853a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	2207      	movs	r2, #7
 8008540:	4619      	mov	r1, r3
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f001 f854 	bl	80095f0 <USBH_CtlReq>
 8008548:	4603      	mov	r3, r0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b086      	sub	sp, #24
 8008556:	af02      	add	r7, sp, #8
 8008558:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008560:	69db      	ldr	r3, [r3, #28]
 8008562:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008564:	2300      	movs	r3, #0
 8008566:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800856e:	2b01      	cmp	r3, #1
 8008570:	d002      	beq.n	8008578 <CDC_ProcessTransmission+0x26>
 8008572:	2b02      	cmp	r3, #2
 8008574:	d025      	beq.n	80085c2 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8008576:	e060      	b.n	800863a <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	8b12      	ldrh	r2, [r2, #24]
 8008580:	4293      	cmp	r3, r2
 8008582:	d90c      	bls.n	800859e <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	69d9      	ldr	r1, [r3, #28]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	8b1a      	ldrh	r2, [r3, #24]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	7b58      	ldrb	r0, [r3, #13]
 8008590:	2301      	movs	r3, #1
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	4603      	mov	r3, r0
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f001 fa3b 	bl	8009a12 <USBH_BulkSendData>
 800859c:	e00c      	b.n	80085b8 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	7b58      	ldrb	r0, [r3, #13]
 80085ac:	2301      	movs	r3, #1
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	4603      	mov	r3, r0
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f001 fa2d 	bl	8009a12 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2202      	movs	r2, #2
 80085bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80085c0:	e03b      	b.n	800863a <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	7b5b      	ldrb	r3, [r3, #13]
 80085c6:	4619      	mov	r1, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f001 fd4d 	bl	800a068 <USBH_LL_GetURBState>
 80085ce:	4603      	mov	r3, r0
 80085d0:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 80085d2:	7afb      	ldrb	r3, [r7, #11]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d128      	bne.n	800862a <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	8b12      	ldrh	r2, [r2, #24]
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d90e      	bls.n	8008602 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	8b12      	ldrh	r2, [r2, #24]
 80085ec:	1a9a      	subs	r2, r3, r2
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	69db      	ldr	r3, [r3, #28]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	8b12      	ldrh	r2, [r2, #24]
 80085fa:	441a      	add	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	61da      	str	r2, [r3, #28]
 8008600:	e002      	b.n	8008608 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860c:	2b00      	cmp	r3, #0
 800860e:	d004      	beq.n	800861a <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8008618:	e00e      	b.n	8008638 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f868 	bl	80086f8 <USBH_CDC_TransmitCallback>
    break;
 8008628:	e006      	b.n	8008638 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 800862a:	7afb      	ldrb	r3, [r7, #11]
 800862c:	2b02      	cmp	r3, #2
 800862e:	d103      	bne.n	8008638 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8008638:	bf00      	nop
  }
}
 800863a:	bf00      	nop
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b086      	sub	sp, #24
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008650:	69db      	ldr	r3, [r3, #28]
 8008652:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008654:	2300      	movs	r3, #0
 8008656:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800865e:	2b03      	cmp	r3, #3
 8008660:	d002      	beq.n	8008668 <CDC_ProcessReception+0x26>
 8008662:	2b04      	cmp	r3, #4
 8008664:	d00e      	beq.n	8008684 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8008666:	e043      	b.n	80086f0 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	6a19      	ldr	r1, [r3, #32]
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	8b5a      	ldrh	r2, [r3, #26]
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	7b1b      	ldrb	r3, [r3, #12]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f001 f9f1 	bl	8009a5c <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	2204      	movs	r2, #4
 800867e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8008682:	e035      	b.n	80086f0 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	7b1b      	ldrb	r3, [r3, #12]
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f001 fcec 	bl	800a068 <USBH_LL_GetURBState>
 8008690:	4603      	mov	r3, r0
 8008692:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8008694:	7cfb      	ldrb	r3, [r7, #19]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d129      	bne.n	80086ee <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	7b1b      	ldrb	r3, [r3, #12]
 800869e:	4619      	mov	r1, r3
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f001 fc4f 	bl	8009f44 <USBH_LL_GetLastXferSize>
 80086a6:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d016      	beq.n	80086e0 <CDC_ProcessReception+0x9e>
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	8b5b      	ldrh	r3, [r3, #26]
 80086b6:	461a      	mov	r2, r3
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d910      	bls.n	80086e0 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	1ad2      	subs	r2, r2, r3
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	6a1a      	ldr	r2, [r3, #32]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	441a      	add	r2, r3
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	2203      	movs	r2, #3
 80086da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80086de:	e006      	b.n	80086ee <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 f80f 	bl	800870c <USBH_CDC_ReceiveCallback>
    break;
 80086ee:	bf00      	nop
  }
}
 80086f0:	bf00      	nop
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]

}
 8008700:	bf00      	nop
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]

}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]

}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	4613      	mov	r3, r2
 8008740:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d101      	bne.n	800874c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008748:	2302      	movs	r3, #2
 800874a:	e019      	b.n	8008780 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	79fa      	ldrb	r2, [r7, #7]
 8008750:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f000 f80f 	bl	8008788 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d003      	beq.n	8008778 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f001 fb31 	bl	8009de0 <USBH_LL_Init>

  return USBH_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008790:	2300      	movs	r3, #0
 8008792:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8008794:	e008      	b.n	80087a8 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	32e0      	adds	r2, #224	; 0xe0
 800879c:	2100      	movs	r1, #0
 800879e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	3301      	adds	r3, #1
 80087a6:	60fb      	str	r3, [r7, #12]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2b0e      	cmp	r3, #14
 80087ac:	d9f3      	bls.n	8008796 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80087ae:	2300      	movs	r3, #0
 80087b0:	60fb      	str	r3, [r7, #12]
 80087b2:	e009      	b.n	80087c8 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	4413      	add	r3, r2
 80087ba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80087be:	2200      	movs	r2, #0
 80087c0:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	3301      	adds	r3, #1
 80087c6:	60fb      	str	r3, [r7, #12]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087ce:	d3f1      	bcc.n	80087b4 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2240      	movs	r2, #64	; 0x40
 80087f4:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3714      	adds	r7, #20
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr

0800881a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800881a:	b480      	push	{r7}
 800881c:	b085      	sub	sp, #20
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d017      	beq.n	800885e <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008834:	2b00      	cmp	r3, #0
 8008836:	d10f      	bne.n	8008858 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800883e:	1c59      	adds	r1, r3, #1
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	33dc      	adds	r3, #220	; 0xdc
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4413      	add	r3, r2
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	73fb      	strb	r3, [r7, #15]
 8008856:	e004      	b.n	8008862 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008858:	2302      	movs	r3, #2
 800885a:	73fb      	strb	r3, [r7, #15]
 800885c:	e001      	b.n	8008862 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800885e:	2302      	movs	r3, #2
 8008860:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008862:	7bfb      	ldrb	r3, [r7, #15]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	460b      	mov	r3, r1
 800887a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800887c:	2300      	movs	r3, #0
 800887e:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8008886:	78fa      	ldrb	r2, [r7, #3]
 8008888:	429a      	cmp	r2, r3
 800888a:	d204      	bcs.n	8008896 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	78fa      	ldrb	r2, [r7, #3]
 8008890:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8008894:	e001      	b.n	800889a <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008896:	2302      	movs	r3, #2
 8008898:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800889a:	7bfb      	ldrb	r3, [r7, #15]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3714      	adds	r7, #20
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b087      	sub	sp, #28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	4608      	mov	r0, r1
 80088b2:	4611      	mov	r1, r2
 80088b4:	461a      	mov	r2, r3
 80088b6:	4603      	mov	r3, r0
 80088b8:	70fb      	strb	r3, [r7, #3]
 80088ba:	460b      	mov	r3, r1
 80088bc:	70bb      	strb	r3, [r7, #2]
 80088be:	4613      	mov	r3, r2
 80088c0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 80088c2:	2300      	movs	r3, #0
 80088c4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80088c6:	2300      	movs	r3, #0
 80088c8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80088d0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80088d2:	e025      	b.n	8008920 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80088d4:	7dfb      	ldrb	r3, [r7, #23]
 80088d6:	221a      	movs	r2, #26
 80088d8:	fb02 f303 	mul.w	r3, r2, r3
 80088dc:	3308      	adds	r3, #8
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	4413      	add	r3, r2
 80088e2:	3302      	adds	r3, #2
 80088e4:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	795b      	ldrb	r3, [r3, #5]
 80088ea:	78fa      	ldrb	r2, [r7, #3]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d002      	beq.n	80088f6 <USBH_FindInterface+0x4e>
 80088f0:	78fb      	ldrb	r3, [r7, #3]
 80088f2:	2bff      	cmp	r3, #255	; 0xff
 80088f4:	d111      	bne.n	800891a <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80088fa:	78ba      	ldrb	r2, [r7, #2]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d002      	beq.n	8008906 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8008900:	78bb      	ldrb	r3, [r7, #2]
 8008902:	2bff      	cmp	r3, #255	; 0xff
 8008904:	d109      	bne.n	800891a <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800890a:	787a      	ldrb	r2, [r7, #1]
 800890c:	429a      	cmp	r2, r3
 800890e:	d002      	beq.n	8008916 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008910:	787b      	ldrb	r3, [r7, #1]
 8008912:	2bff      	cmp	r3, #255	; 0xff
 8008914:	d101      	bne.n	800891a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008916:	7dfb      	ldrb	r3, [r7, #23]
 8008918:	e006      	b.n	8008928 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800891a:	7dfb      	ldrb	r3, [r7, #23]
 800891c:	3301      	adds	r3, #1
 800891e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008920:	7dfb      	ldrb	r3, [r7, #23]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d9d6      	bls.n	80088d4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008926:	23ff      	movs	r3, #255	; 0xff
}
 8008928:	4618      	mov	r0, r3
 800892a:	371c      	adds	r7, #28
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f001 fa8b 	bl	8009e58 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8008942:	2101      	movs	r1, #1
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f001 fba2 	bl	800a08e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b088      	sub	sp, #32
 8008958:	af04      	add	r7, sp, #16
 800895a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800895c:	2302      	movs	r3, #2
 800895e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008960:	2300      	movs	r3, #0
 8008962:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 faec 	bl	8008f42 <USBH_IsPortEnabled>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10c      	bne.n	800898a <USBH_Process+0x36>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	b2db      	uxtb	r3, r3
 8008976:	2b00      	cmp	r3, #0
 8008978:	d007      	beq.n	800898a <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	b2db      	uxtb	r3, r3
 8008980:	2b03      	cmp	r3, #3
 8008982:	d002      	beq.n	800898a <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2203      	movs	r2, #3
 8008988:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	b2db      	uxtb	r3, r3
 8008990:	2b0b      	cmp	r3, #11
 8008992:	f200 814c 	bhi.w	8008c2e <USBH_Process+0x2da>
 8008996:	a201      	add	r2, pc, #4	; (adr r2, 800899c <USBH_Process+0x48>)
 8008998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899c:	080089cd 	.word	0x080089cd
 80089a0:	080089ef 	.word	0x080089ef
 80089a4:	08008a03 	.word	0x08008a03
 80089a8:	08008c09 	.word	0x08008c09
 80089ac:	08008c2f 	.word	0x08008c2f
 80089b0:	08008a91 	.word	0x08008a91
 80089b4:	08008bbf 	.word	0x08008bbf
 80089b8:	08008ac1 	.word	0x08008ac1
 80089bc:	08008ae1 	.word	0x08008ae1
 80089c0:	08008b01 	.word	0x08008b01
 80089c4:	08008b2f 	.word	0x08008b2f
 80089c8:	08008bf1 	.word	0x08008bf1
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 812c 	beq.w	8008c32 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 80089e0:	20c8      	movs	r0, #200	; 0xc8
 80089e2:	f001 fb9e 	bl	800a122 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f001 fa91 	bl	8009f0e <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80089ec:	e121      	b.n	8008c32 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	f040 811e 	bne.w	8008c36 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2202      	movs	r2, #2
 80089fe:	701a      	strb	r2, [r3, #0]
    }
    break;
 8008a00:	e119      	b.n	8008c36 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8008a02:	2064      	movs	r0, #100	; 0x64
 8008a04:	f001 fb8d 	bl	800a122 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f001 fa5b 	bl	8009ec4 <USBH_LL_GetSpeed>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	461a      	mov	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2205      	movs	r2, #5
 8008a1c:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8008a1e:	2100      	movs	r1, #0
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f001 f868 	bl	8009af6 <USBH_AllocPipe>
 8008a26:	4603      	mov	r3, r0
 8008a28:	461a      	mov	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8008a2e:	2180      	movs	r1, #128	; 0x80
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f001 f860 	bl	8009af6 <USBH_AllocPipe>
 8008a36:	4603      	mov	r3, r0
 8008a38:	461a      	mov	r2, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	7919      	ldrb	r1, [r3, #4]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8008a52:	b292      	uxth	r2, r2
 8008a54:	9202      	str	r2, [sp, #8]
 8008a56:	2200      	movs	r2, #0
 8008a58:	9201      	str	r2, [sp, #4]
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2280      	movs	r2, #128	; 0x80
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f001 f819 	bl	8009a98 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	7959      	ldrb	r1, [r3, #5]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8008a7a:	b292      	uxth	r2, r2
 8008a7c:	9202      	str	r2, [sp, #8]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	9201      	str	r2, [sp, #4]
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	4603      	mov	r3, r0
 8008a86:	2200      	movs	r2, #0
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f001 f805 	bl	8009a98 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8008a8e:	e0e3      	b.n	8008c58 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f8e7 	bl	8008c64 <USBH_HandleEnum>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f040 80ce 	bne.w	8008c3a <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d103      	bne.n	8008ab8 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2208      	movs	r2, #8
 8008ab4:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8008ab6:	e0c0      	b.n	8008c3a <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2207      	movs	r2, #7
 8008abc:	701a      	strb	r2, [r3, #0]
    break;
 8008abe:	e0bc      	b.n	8008c3a <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f000 80b9 	beq.w	8008c3e <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008ad2:	2101      	movs	r1, #1
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2208      	movs	r2, #8
 8008adc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008ade:	e0ae      	b.n	8008c3e <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	4619      	mov	r1, r3
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fb59 	bl	80091a2 <USBH_SetCfg>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f040 80a5 	bne.w	8008c42 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2209      	movs	r2, #9
 8008afc:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8008afe:	e0a0      	b.n	8008c42 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8008b06:	f003 0320 	and.w	r3, r3, #32
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00b      	beq.n	8008b26 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008b0e:	2101      	movs	r1, #1
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fb69 	bl	80091e8 <USBH_SetFeature>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f040 8094 	bne.w	8008c46 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	220a      	movs	r2, #10
 8008b22:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8008b24:	e08f      	b.n	8008c46 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	220a      	movs	r2, #10
 8008b2a:	701a      	strb	r2, [r3, #0]
    break;
 8008b2c:	e08b      	b.n	8008c46 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f000 8088 	beq.w	8008c4a <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008b42:	2300      	movs	r3, #0
 8008b44:	73fb      	strb	r3, [r7, #15]
 8008b46:	e017      	b.n	8008b78 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	33dc      	adds	r3, #220	; 0xdc
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4413      	add	r3, r2
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	791a      	ldrb	r2, [r3, #4]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d108      	bne.n	8008b72 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	33dc      	adds	r3, #220	; 0xdc
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	4413      	add	r3, r2
 8008b6a:	685a      	ldr	r2, [r3, #4]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
 8008b74:	3301      	adds	r3, #1
 8008b76:	73fb      	strb	r3, [r7, #15]
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d0e4      	beq.n	8008b48 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d016      	beq.n	8008bb6 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	4798      	blx	r3
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d109      	bne.n	8008bae <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2206      	movs	r2, #6
 8008b9e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008ba6:	2103      	movs	r1, #3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8008bac:	e04d      	b.n	8008c4a <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	220d      	movs	r2, #13
 8008bb2:	701a      	strb	r2, [r3, #0]
    break;
 8008bb4:	e049      	b.n	8008c4a <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	220d      	movs	r2, #13
 8008bba:	701a      	strb	r2, [r3, #0]
    break;
 8008bbc:	e045      	b.n	8008c4a <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00f      	beq.n	8008be8 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	4798      	blx	r3
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8008bd8:	7bbb      	ldrb	r3, [r7, #14]
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d136      	bne.n	8008c4e <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	220b      	movs	r2, #11
 8008be4:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8008be6:	e032      	b.n	8008c4e <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	220d      	movs	r2, #13
 8008bec:	701a      	strb	r2, [r3, #0]
    break;
 8008bee:	e02e      	b.n	8008c4e <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d02b      	beq.n	8008c52 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	4798      	blx	r3
    }
    break;
 8008c06:	e024      	b.n	8008c52 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f7ff fdbd 	bl	8008788 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d01e      	beq.n	8008c56 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8008c2c:	e013      	b.n	8008c56 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8008c2e:	bf00      	nop
 8008c30:	e012      	b.n	8008c58 <USBH_Process+0x304>
    break;
 8008c32:	bf00      	nop
 8008c34:	e010      	b.n	8008c58 <USBH_Process+0x304>
    break;
 8008c36:	bf00      	nop
 8008c38:	e00e      	b.n	8008c58 <USBH_Process+0x304>
    break;
 8008c3a:	bf00      	nop
 8008c3c:	e00c      	b.n	8008c58 <USBH_Process+0x304>
    break;
 8008c3e:	bf00      	nop
 8008c40:	e00a      	b.n	8008c58 <USBH_Process+0x304>
    break;
 8008c42:	bf00      	nop
 8008c44:	e008      	b.n	8008c58 <USBH_Process+0x304>
    break;
 8008c46:	bf00      	nop
 8008c48:	e006      	b.n	8008c58 <USBH_Process+0x304>
    break;
 8008c4a:	bf00      	nop
 8008c4c:	e004      	b.n	8008c58 <USBH_Process+0x304>
    break;
 8008c4e:	bf00      	nop
 8008c50:	e002      	b.n	8008c58 <USBH_Process+0x304>
    break;
 8008c52:	bf00      	nop
 8008c54:	e000      	b.n	8008c58 <USBH_Process+0x304>
    break;
 8008c56:	bf00      	nop
  }
 return USBH_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop

08008c64 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b088      	sub	sp, #32
 8008c68:	af04      	add	r7, sp, #16
 8008c6a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	785b      	ldrb	r3, [r3, #1]
 8008c74:	2b07      	cmp	r3, #7
 8008c76:	f200 80f8 	bhi.w	8008e6a <USBH_HandleEnum+0x206>
 8008c7a:	a201      	add	r2, pc, #4	; (adr r2, 8008c80 <USBH_HandleEnum+0x1c>)
 8008c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c80:	08008ca1 	.word	0x08008ca1
 8008c84:	08008d13 	.word	0x08008d13
 8008c88:	08008d2b 	.word	0x08008d2b
 8008c8c:	08008da1 	.word	0x08008da1
 8008c90:	08008db7 	.word	0x08008db7
 8008c94:	08008dd3 	.word	0x08008dd3
 8008c98:	08008e07 	.word	0x08008e07
 8008c9c:	08008e3b 	.word	0x08008e3b
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8008ca0:	2108      	movs	r1, #8
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f9ad 	bl	8009002 <USBH_Get_DevDesc>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f040 80df 	bne.w	8008e6e <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	7919      	ldrb	r1, [r3, #4]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8008cd4:	b292      	uxth	r2, r2
 8008cd6:	9202      	str	r2, [sp, #8]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	9201      	str	r2, [sp, #4]
 8008cdc:	9300      	str	r3, [sp, #0]
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2280      	movs	r2, #128	; 0x80
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fed8 	bl	8009a98 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	7959      	ldrb	r1, [r3, #5]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8008cfc:	b292      	uxth	r2, r2
 8008cfe:	9202      	str	r2, [sp, #8]
 8008d00:	2200      	movs	r2, #0
 8008d02:	9201      	str	r2, [sp, #4]
 8008d04:	9300      	str	r3, [sp, #0]
 8008d06:	4603      	mov	r3, r0
 8008d08:	2200      	movs	r2, #0
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fec4 	bl	8009a98 <USBH_OpenPipe>

    }
    break;
 8008d10:	e0ad      	b.n	8008e6e <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8008d12:	2112      	movs	r1, #18
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 f974 	bl	8009002 <USBH_Get_DevDesc>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f040 80a8 	bne.w	8008e72 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2202      	movs	r2, #2
 8008d26:	705a      	strb	r2, [r3, #1]

    }
    break;
 8008d28:	e0a3      	b.n	8008e72 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8008d2a:	2101      	movs	r1, #1
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 fa14 	bl	800915a <USBH_SetAddress>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f040 809e 	bne.w	8008e76 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8008d3a:	2002      	movs	r0, #2
 8008d3c:	f001 f9f1 	bl	800a122 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2203      	movs	r2, #3
 8008d4c:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	7919      	ldrb	r1, [r3, #4]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8008d62:	b292      	uxth	r2, r2
 8008d64:	9202      	str	r2, [sp, #8]
 8008d66:	2200      	movs	r2, #0
 8008d68:	9201      	str	r2, [sp, #4]
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2280      	movs	r2, #128	; 0x80
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 fe91 	bl	8009a98 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	7959      	ldrb	r1, [r3, #5]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8008d8a:	b292      	uxth	r2, r2
 8008d8c:	9202      	str	r2, [sp, #8]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	9201      	str	r2, [sp, #4]
 8008d92:	9300      	str	r3, [sp, #0]
 8008d94:	4603      	mov	r3, r0
 8008d96:	2200      	movs	r2, #0
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fe7d 	bl	8009a98 <USBH_OpenPipe>
    }
    break;
 8008d9e:	e06a      	b.n	8008e76 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8008da0:	2109      	movs	r1, #9
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f955 	bl	8009052 <USBH_Get_CfgDesc>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d165      	bne.n	8008e7a <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2204      	movs	r2, #4
 8008db2:	705a      	strb	r2, [r3, #1]
    }
    break;
 8008db4:	e061      	b.n	8008e7a <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f947 	bl	8009052 <USBH_Get_CfgDesc>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d159      	bne.n	8008e7e <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2205      	movs	r2, #5
 8008dce:	705a      	strb	r2, [r3, #1]
    }
    break;
 8008dd0:	e055      	b.n	8008e7e <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d010      	beq.n	8008dfe <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8008de8:	23ff      	movs	r3, #255	; 0xff
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f955 	bl	800909a <USBH_Get_StringDesc>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d145      	bne.n	8008e82 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2206      	movs	r2, #6
 8008dfa:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8008dfc:	e041      	b.n	8008e82 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2206      	movs	r2, #6
 8008e02:	705a      	strb	r2, [r3, #1]
    break;
 8008e04:	e03d      	b.n	8008e82 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d010      	beq.n	8008e32 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8008e1c:	23ff      	movs	r3, #255	; 0xff
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f93b 	bl	800909a <USBH_Get_StringDesc>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d12d      	bne.n	8008e86 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2207      	movs	r2, #7
 8008e2e:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8008e30:	e029      	b.n	8008e86 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2207      	movs	r2, #7
 8008e36:	705a      	strb	r2, [r3, #1]
    break;
 8008e38:	e025      	b.n	8008e86 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d00f      	beq.n	8008e64 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8008e50:	23ff      	movs	r3, #255	; 0xff
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f921 	bl	800909a <USBH_Get_StringDesc>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d115      	bne.n	8008e8a <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8008e62:	e012      	b.n	8008e8a <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	73fb      	strb	r3, [r7, #15]
    break;
 8008e68:	e00f      	b.n	8008e8a <USBH_HandleEnum+0x226>

  default:
    break;
 8008e6a:	bf00      	nop
 8008e6c:	e00e      	b.n	8008e8c <USBH_HandleEnum+0x228>
    break;
 8008e6e:	bf00      	nop
 8008e70:	e00c      	b.n	8008e8c <USBH_HandleEnum+0x228>
    break;
 8008e72:	bf00      	nop
 8008e74:	e00a      	b.n	8008e8c <USBH_HandleEnum+0x228>
    break;
 8008e76:	bf00      	nop
 8008e78:	e008      	b.n	8008e8c <USBH_HandleEnum+0x228>
    break;
 8008e7a:	bf00      	nop
 8008e7c:	e006      	b.n	8008e8c <USBH_HandleEnum+0x228>
    break;
 8008e7e:	bf00      	nop
 8008e80:	e004      	b.n	8008e8c <USBH_HandleEnum+0x228>
    break;
 8008e82:	bf00      	nop
 8008e84:	e002      	b.n	8008e8c <USBH_HandleEnum+0x228>
    break;
 8008e86:	bf00      	nop
 8008e88:	e000      	b.n	8008e8c <USBH_HandleEnum+0x228>
    break;
 8008e8a:	bf00      	nop
  }
  return Status;
 8008e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop

08008e98 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	683a      	ldr	r2, [r7, #0]
 8008ea6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8008eaa:	bf00      	nop
 8008eac:	370c      	adds	r7, #12
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr

08008eb6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b082      	sub	sp, #8
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008ec4:	1c5a      	adds	r2, r3, #1
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f804 	bl	8008eda <USBH_HandleSof>
}
 8008ed2:	bf00      	nop
 8008ed4:	3708      	adds	r7, #8
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b082      	sub	sp, #8
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	2b0b      	cmp	r3, #11
 8008eea:	d10a      	bne.n	8008f02 <USBH_HandleSof+0x28>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d005      	beq.n	8008f02 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008efc:	699b      	ldr	r3, [r3, #24]
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	4798      	blx	r3
  }
}
 8008f02:	bf00      	nop
 8008f04:	3708      	adds	r7, #8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b083      	sub	sp, #12
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8008f1a:	bf00      	nop
}
 8008f1c:	370c      	adds	r7, #12
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr

08008f26 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8008f26:	b480      	push	{r7}
 8008f28:	b083      	sub	sp, #12
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8008f36:	bf00      	nop
}
 8008f38:	370c      	adds	r7, #12
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b083      	sub	sp, #12
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10f      	bne.n	8008f8e <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2201      	movs	r2, #1
 8008f72:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00e      	beq.n	8008f9e <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008f86:	2104      	movs	r1, #4
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	4798      	blx	r3
 8008f8c:	e007      	b.n	8008f9e <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d102      	bne.n	8008f9e <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 ff6c 	bl	8009e8e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	791b      	ldrb	r3, [r3, #4]
 8008fba:	4619      	mov	r1, r3
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 fdb8 	bl	8009b32 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	795b      	ldrb	r3, [r3, #5]
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fdb2 	bl	8009b32 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d005      	beq.n	8008fec <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008fe6:	2105      	movs	r1, #5
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 ff33 	bl	8009e58 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2203      	movs	r2, #3
 8008ff6:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b086      	sub	sp, #24
 8009006:	af02      	add	r7, sp, #8
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	460b      	mov	r3, r1
 800900c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8009014:	78fb      	ldrb	r3, [r7, #3]
 8009016:	b29b      	uxth	r3, r3
 8009018:	9300      	str	r3, [sp, #0]
 800901a:	4613      	mov	r3, r2
 800901c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009020:	2100      	movs	r1, #0
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f864 	bl	80090f0 <USBH_GetDescriptor>
 8009028:	4603      	mov	r3, r0
 800902a:	73fb      	strb	r3, [r7, #15]
 800902c:	7bfb      	ldrb	r3, [r7, #15]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10a      	bne.n	8009048 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f203 3022 	addw	r0, r3, #802	; 0x322
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800903e:	78fa      	ldrb	r2, [r7, #3]
 8009040:	b292      	uxth	r2, r2
 8009042:	4619      	mov	r1, r3
 8009044:	f000 f918 	bl	8009278 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8009048:	7bfb      	ldrb	r3, [r7, #15]
}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8009052:	b580      	push	{r7, lr}
 8009054:	b086      	sub	sp, #24
 8009056:	af02      	add	r7, sp, #8
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	460b      	mov	r3, r1
 800905c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	331c      	adds	r3, #28
 8009062:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8009064:	887b      	ldrh	r3, [r7, #2]
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800906e:	2100      	movs	r1, #0
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f83d 	bl	80090f0 <USBH_GetDescriptor>
 8009076:	4603      	mov	r3, r0
 8009078:	72fb      	strb	r3, [r7, #11]
 800907a:	7afb      	ldrb	r3, [r7, #11]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d107      	bne.n	8009090 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8009086:	887a      	ldrh	r2, [r7, #2]
 8009088:	68f9      	ldr	r1, [r7, #12]
 800908a:	4618      	mov	r0, r3
 800908c:	f000 f964 	bl	8009358 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8009090:	7afb      	ldrb	r3, [r7, #11]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b088      	sub	sp, #32
 800909e:	af02      	add	r7, sp, #8
 80090a0:	60f8      	str	r0, [r7, #12]
 80090a2:	607a      	str	r2, [r7, #4]
 80090a4:	461a      	mov	r2, r3
 80090a6:	460b      	mov	r3, r1
 80090a8:	72fb      	strb	r3, [r7, #11]
 80090aa:	4613      	mov	r3, r2
 80090ac:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80090ae:	7afb      	ldrb	r3, [r7, #11]
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80090b6:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80090be:	893b      	ldrh	r3, [r7, #8]
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	460b      	mov	r3, r1
 80090c4:	2100      	movs	r1, #0
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f000 f812 	bl	80090f0 <USBH_GetDescriptor>
 80090cc:	4603      	mov	r3, r0
 80090ce:	75fb      	strb	r3, [r7, #23]
 80090d0:	7dfb      	ldrb	r3, [r7, #23]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d107      	bne.n	80090e6 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80090dc:	893a      	ldrh	r2, [r7, #8]
 80090de:	6879      	ldr	r1, [r7, #4]
 80090e0:	4618      	mov	r0, r3
 80090e2:	f000 fa37 	bl	8009554 <USBH_ParseStringDesc>
  }
  return status;
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3718      	adds	r7, #24
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	607b      	str	r3, [r7, #4]
 80090fa:	460b      	mov	r3, r1
 80090fc:	72fb      	strb	r3, [r7, #11]
 80090fe:	4613      	mov	r3, r2
 8009100:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	789b      	ldrb	r3, [r3, #2]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d11c      	bne.n	8009144 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800910a:	7afb      	ldrb	r3, [r7, #11]
 800910c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009110:	b2da      	uxtb	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2206      	movs	r2, #6
 800911a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	893a      	ldrh	r2, [r7, #8]
 8009120:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009122:	893b      	ldrh	r3, [r7, #8]
 8009124:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009128:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800912c:	d104      	bne.n	8009138 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f240 4209 	movw	r2, #1033	; 0x409
 8009134:	829a      	strh	r2, [r3, #20]
 8009136:	e002      	b.n	800913e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	8b3a      	ldrh	r2, [r7, #24]
 8009142:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8009144:	8b3b      	ldrh	r3, [r7, #24]
 8009146:	461a      	mov	r2, r3
 8009148:	6879      	ldr	r1, [r7, #4]
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f000 fa50 	bl	80095f0 <USBH_CtlReq>
 8009150:	4603      	mov	r3, r0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b082      	sub	sp, #8
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	460b      	mov	r3, r1
 8009164:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	789b      	ldrb	r3, [r3, #2]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d10f      	bne.n	800918e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2205      	movs	r2, #5
 8009178:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800917a:	78fb      	ldrb	r3, [r7, #3]
 800917c:	b29a      	uxth	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800918e:	2200      	movs	r2, #0
 8009190:	2100      	movs	r1, #0
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fa2c 	bl	80095f0 <USBH_CtlReq>
 8009198:	4603      	mov	r3, r0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b082      	sub	sp, #8
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
 80091aa:	460b      	mov	r3, r1
 80091ac:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	789b      	ldrb	r3, [r3, #2]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d10e      	bne.n	80091d4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2209      	movs	r2, #9
 80091c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	887a      	ldrh	r2, [r7, #2]
 80091c6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 80091d4:	2200      	movs	r2, #0
 80091d6:	2100      	movs	r1, #0
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 fa09 	bl	80095f0 <USBH_CtlReq>
 80091de:	4603      	mov	r3, r0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3708      	adds	r7, #8
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	460b      	mov	r3, r1
 80091f2:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	789b      	ldrb	r3, [r3, #2]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d10f      	bne.n	800921c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2203      	movs	r2, #3
 8009206:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009208:	78fb      	ldrb	r3, [r7, #3]
 800920a:	b29a      	uxth	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800921c:	2200      	movs	r2, #0
 800921e:	2100      	movs	r1, #0
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f9e5 	bl	80095f0 <USBH_CtlReq>
 8009226:	4603      	mov	r3, r0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	460b      	mov	r3, r1
 800923a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	789b      	ldrb	r3, [r3, #2]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d10f      	bne.n	8009264 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2202      	movs	r2, #2
 8009248:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2201      	movs	r2, #1
 800924e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009256:	78fb      	ldrb	r3, [r7, #3]
 8009258:	b29a      	uxth	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8009264:	2200      	movs	r2, #0
 8009266:	2100      	movs	r1, #0
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f9c1 	bl	80095f0 <USBH_CtlReq>
 800926e:	4603      	mov	r3, r0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3708      	adds	r7, #8
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	4613      	mov	r3, r2
 8009284:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	781a      	ldrb	r2, [r3, #0]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	785a      	ldrb	r2, [r3, #1]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	3302      	adds	r3, #2
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	b29a      	uxth	r2, r3
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	3303      	adds	r3, #3
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	021b      	lsls	r3, r3, #8
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	4313      	orrs	r3, r2
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	791a      	ldrb	r2, [r3, #4]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	795a      	ldrb	r2, [r3, #5]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	799a      	ldrb	r2, [r3, #6]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	79da      	ldrb	r2, [r3, #7]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80092d2:	88fb      	ldrh	r3, [r7, #6]
 80092d4:	2b08      	cmp	r3, #8
 80092d6:	d939      	bls.n	800934c <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	3308      	adds	r3, #8
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	b29a      	uxth	r2, r3
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	3309      	adds	r3, #9
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	021b      	lsls	r3, r3, #8
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	4313      	orrs	r3, r2
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	330a      	adds	r3, #10
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	330b      	adds	r3, #11
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	b29b      	uxth	r3, r3
 8009304:	021b      	lsls	r3, r3, #8
 8009306:	b29b      	uxth	r3, r3
 8009308:	4313      	orrs	r3, r2
 800930a:	b29a      	uxth	r2, r3
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	330c      	adds	r3, #12
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	b29a      	uxth	r2, r3
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	330d      	adds	r3, #13
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	b29b      	uxth	r3, r3
 8009320:	021b      	lsls	r3, r3, #8
 8009322:	b29b      	uxth	r3, r3
 8009324:	4313      	orrs	r3, r2
 8009326:	b29a      	uxth	r2, r3
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	7b9a      	ldrb	r2, [r3, #14]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	7bda      	ldrb	r2, [r3, #15]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	7c1a      	ldrb	r2, [r3, #16]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	7c5a      	ldrb	r2, [r3, #17]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	745a      	strb	r2, [r3, #17]
  }
}
 800934c:	bf00      	nop
 800934e:	3714      	adds	r7, #20
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b08a      	sub	sp, #40	; 0x28
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	4613      	mov	r3, r2
 8009364:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800936a:	2300      	movs	r3, #0
 800936c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009370:	2300      	movs	r3, #0
 8009372:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	781a      	ldrb	r2, [r3, #0]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	785a      	ldrb	r2, [r3, #1]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	3302      	adds	r3, #2
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	b29a      	uxth	r2, r3
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	3303      	adds	r3, #3
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	b29b      	uxth	r3, r3
 800939a:	021b      	lsls	r3, r3, #8
 800939c:	b29b      	uxth	r3, r3
 800939e:	4313      	orrs	r3, r2
 80093a0:	b29a      	uxth	r2, r3
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	791a      	ldrb	r2, [r3, #4]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	795a      	ldrb	r2, [r3, #5]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	799a      	ldrb	r2, [r3, #6]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	79da      	ldrb	r2, [r3, #7]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	7a1a      	ldrb	r2, [r3, #8]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 80093ce:	88fb      	ldrh	r3, [r7, #6]
 80093d0:	2b09      	cmp	r3, #9
 80093d2:	d95f      	bls.n	8009494 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80093d4:	2309      	movs	r3, #9
 80093d6:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80093d8:	2300      	movs	r3, #0
 80093da:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80093dc:	e051      	b.n	8009482 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80093de:	f107 0316 	add.w	r3, r7, #22
 80093e2:	4619      	mov	r1, r3
 80093e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093e6:	f000 f8e8 	bl	80095ba <USBH_GetNextDesc>
 80093ea:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80093ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ee:	785b      	ldrb	r3, [r3, #1]
 80093f0:	2b04      	cmp	r3, #4
 80093f2:	d146      	bne.n	8009482 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80093f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093f8:	221a      	movs	r2, #26
 80093fa:	fb02 f303 	mul.w	r3, r2, r3
 80093fe:	3308      	adds	r3, #8
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	4413      	add	r3, r2
 8009404:	3302      	adds	r3, #2
 8009406:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8009408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800940a:	69f8      	ldr	r0, [r7, #28]
 800940c:	f000 f846 	bl	800949c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009410:	2300      	movs	r3, #0
 8009412:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009416:	2300      	movs	r3, #0
 8009418:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800941a:	e022      	b.n	8009462 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800941c:	f107 0316 	add.w	r3, r7, #22
 8009420:	4619      	mov	r1, r3
 8009422:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009424:	f000 f8c9 	bl	80095ba <USBH_GetNextDesc>
 8009428:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800942a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942c:	785b      	ldrb	r3, [r3, #1]
 800942e:	2b05      	cmp	r3, #5
 8009430:	d117      	bne.n	8009462 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009432:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009436:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800943a:	3201      	adds	r2, #1
 800943c:	00d2      	lsls	r2, r2, #3
 800943e:	211a      	movs	r1, #26
 8009440:	fb01 f303 	mul.w	r3, r1, r3
 8009444:	4413      	add	r3, r2
 8009446:	3308      	adds	r3, #8
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	4413      	add	r3, r2
 800944c:	3304      	adds	r3, #4
 800944e:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8009450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009452:	69b8      	ldr	r0, [r7, #24]
 8009454:	f000 f851 	bl	80094fa <USBH_ParseEPDesc>
            ep_ix++;
 8009458:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800945c:	3301      	adds	r3, #1
 800945e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	791b      	ldrb	r3, [r3, #4]
 8009466:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800946a:	429a      	cmp	r2, r3
 800946c:	d204      	bcs.n	8009478 <USBH_ParseCfgDesc+0x120>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	885a      	ldrh	r2, [r3, #2]
 8009472:	8afb      	ldrh	r3, [r7, #22]
 8009474:	429a      	cmp	r2, r3
 8009476:	d8d1      	bhi.n	800941c <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009478:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800947c:	3301      	adds	r3, #1
 800947e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009482:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009486:	2b01      	cmp	r3, #1
 8009488:	d804      	bhi.n	8009494 <USBH_ParseCfgDesc+0x13c>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	885a      	ldrh	r2, [r3, #2]
 800948e:	8afb      	ldrh	r3, [r7, #22]
 8009490:	429a      	cmp	r2, r3
 8009492:	d8a4      	bhi.n	80093de <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009494:	bf00      	nop
 8009496:	3728      	adds	r7, #40	; 0x28
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	781a      	ldrb	r2, [r3, #0]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	785a      	ldrb	r2, [r3, #1]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	789a      	ldrb	r2, [r3, #2]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	78da      	ldrb	r2, [r3, #3]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	791a      	ldrb	r2, [r3, #4]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	795a      	ldrb	r2, [r3, #5]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	799a      	ldrb	r2, [r3, #6]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	79da      	ldrb	r2, [r3, #7]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	7a1a      	ldrb	r2, [r3, #8]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	721a      	strb	r2, [r3, #8]
}
 80094ee:	bf00      	nop
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b083      	sub	sp, #12
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	781a      	ldrb	r2, [r3, #0]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	785a      	ldrb	r2, [r3, #1]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	789a      	ldrb	r2, [r3, #2]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	78da      	ldrb	r2, [r3, #3]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	3304      	adds	r3, #4
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	b29a      	uxth	r2, r3
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	3305      	adds	r3, #5
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	b29b      	uxth	r3, r3
 8009534:	021b      	lsls	r3, r3, #8
 8009536:	b29b      	uxth	r3, r3
 8009538:	4313      	orrs	r3, r2
 800953a:	b29a      	uxth	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	799a      	ldrb	r2, [r3, #6]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	719a      	strb	r2, [r3, #6]
}
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8009554:	b480      	push	{r7}
 8009556:	b087      	sub	sp, #28
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	4613      	mov	r3, r2
 8009560:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	3301      	adds	r3, #1
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	2b03      	cmp	r3, #3
 800956a:	d120      	bne.n	80095ae <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	1e9a      	subs	r2, r3, #2
 8009572:	88fb      	ldrh	r3, [r7, #6]
 8009574:	4293      	cmp	r3, r2
 8009576:	bf28      	it	cs
 8009578:	4613      	movcs	r3, r2
 800957a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	3302      	adds	r3, #2
 8009580:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009582:	2300      	movs	r3, #0
 8009584:	82fb      	strh	r3, [r7, #22]
 8009586:	e00b      	b.n	80095a0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009588:	8afb      	ldrh	r3, [r7, #22]
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	4413      	add	r3, r2
 800958e:	781a      	ldrb	r2, [r3, #0]
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	3301      	adds	r3, #1
 8009598:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800959a:	8afb      	ldrh	r3, [r7, #22]
 800959c:	3302      	adds	r3, #2
 800959e:	82fb      	strh	r3, [r7, #22]
 80095a0:	8afa      	ldrh	r2, [r7, #22]
 80095a2:	8abb      	ldrh	r3, [r7, #20]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d3ef      	bcc.n	8009588 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	2200      	movs	r2, #0
 80095ac:	701a      	strb	r2, [r3, #0]
  }
}
 80095ae:	bf00      	nop
 80095b0:	371c      	adds	r7, #28
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr

080095ba <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 80095ba:	b480      	push	{r7}
 80095bc:	b085      	sub	sp, #20
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	881a      	ldrh	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	4413      	add	r3, r2
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4413      	add	r3, r2
 80095e0:	60fb      	str	r3, [r7, #12]

  return(pnext);
 80095e2:	68fb      	ldr	r3, [r7, #12]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b086      	sub	sp, #24
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	4613      	mov	r3, r2
 80095fc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80095fe:	2301      	movs	r3, #1
 8009600:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	789b      	ldrb	r3, [r3, #2]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d002      	beq.n	8009610 <USBH_CtlReq+0x20>
 800960a:	2b02      	cmp	r3, #2
 800960c:	d00f      	beq.n	800962e <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 800960e:	e034      	b.n	800967a <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	88fa      	ldrh	r2, [r7, #6]
 800961a:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2201      	movs	r2, #1
 8009620:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2202      	movs	r2, #2
 8009626:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8009628:	2301      	movs	r3, #1
 800962a:	75fb      	strb	r3, [r7, #23]
    break;
 800962c:	e025      	b.n	800967a <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f000 f828 	bl	8009684 <USBH_HandleControl>
 8009634:	4603      	mov	r3, r0
 8009636:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8009638:	7dfb      	ldrb	r3, [r7, #23]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d108      	bne.n	8009650 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2201      	movs	r2, #1
 8009642:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	75fb      	strb	r3, [r7, #23]
    break;
 800964e:	e013      	b.n	8009678 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8009650:	7dfb      	ldrb	r3, [r7, #23]
 8009652:	2b03      	cmp	r3, #3
 8009654:	d108      	bne.n	8009668 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2201      	movs	r2, #1
 800965a:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2200      	movs	r2, #0
 8009660:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8009662:	2303      	movs	r3, #3
 8009664:	75fb      	strb	r3, [r7, #23]
    break;
 8009666:	e007      	b.n	8009678 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8009668:	7dfb      	ldrb	r3, [r7, #23]
 800966a:	2b02      	cmp	r3, #2
 800966c:	d104      	bne.n	8009678 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2201      	movs	r2, #1
 8009672:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8009674:	2302      	movs	r3, #2
 8009676:	75fb      	strb	r3, [r7, #23]
    break;
 8009678:	bf00      	nop
  }
  return status;
 800967a:	7dfb      	ldrb	r3, [r7, #23]
}
 800967c:	4618      	mov	r0, r3
 800967e:	3718      	adds	r7, #24
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b086      	sub	sp, #24
 8009688:	af02      	add	r7, sp, #8
 800968a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800968c:	2301      	movs	r3, #1
 800968e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009690:	2300      	movs	r3, #0
 8009692:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	7e1b      	ldrb	r3, [r3, #24]
 8009698:	3b01      	subs	r3, #1
 800969a:	2b0a      	cmp	r3, #10
 800969c:	f200 814c 	bhi.w	8009938 <USBH_HandleControl+0x2b4>
 80096a0:	a201      	add	r2, pc, #4	; (adr r2, 80096a8 <USBH_HandleControl+0x24>)
 80096a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a6:	bf00      	nop
 80096a8:	080096d5 	.word	0x080096d5
 80096ac:	080096ef 	.word	0x080096ef
 80096b0:	08009759 	.word	0x08009759
 80096b4:	0800977f 	.word	0x0800977f
 80096b8:	080097b7 	.word	0x080097b7
 80096bc:	080097e3 	.word	0x080097e3
 80096c0:	08009835 	.word	0x08009835
 80096c4:	08009857 	.word	0x08009857
 80096c8:	08009893 	.word	0x08009893
 80096cc:	080098bb 	.word	0x080098bb
 80096d0:	080098f9 	.word	0x080098f9
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f103 0110 	add.w	r1, r3, #16
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	795b      	ldrb	r3, [r3, #5]
 80096de:	461a      	mov	r2, r3
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 f939 	bl	8009958 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2202      	movs	r2, #2
 80096ea:	761a      	strb	r2, [r3, #24]
    break;
 80096ec:	e12f      	b.n	800994e <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	795b      	ldrb	r3, [r3, #5]
 80096f2:	4619      	mov	r1, r3
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 fcb7 	bl	800a068 <USBH_LL_GetURBState>
 80096fa:	4603      	mov	r3, r0
 80096fc:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 80096fe:	7bbb      	ldrb	r3, [r7, #14]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d11e      	bne.n	8009742 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	7c1b      	ldrb	r3, [r3, #16]
 8009708:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800970c:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	8adb      	ldrh	r3, [r3, #22]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00a      	beq.n	800972c <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8009716:	7b7b      	ldrb	r3, [r7, #13]
 8009718:	2b80      	cmp	r3, #128	; 0x80
 800971a:	d103      	bne.n	8009724 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2203      	movs	r2, #3
 8009720:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009722:	e10b      	b.n	800993c <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2205      	movs	r2, #5
 8009728:	761a      	strb	r2, [r3, #24]
    break;
 800972a:	e107      	b.n	800993c <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 800972c:	7b7b      	ldrb	r3, [r7, #13]
 800972e:	2b80      	cmp	r3, #128	; 0x80
 8009730:	d103      	bne.n	800973a <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2209      	movs	r2, #9
 8009736:	761a      	strb	r2, [r3, #24]
    break;
 8009738:	e100      	b.n	800993c <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2207      	movs	r2, #7
 800973e:	761a      	strb	r2, [r3, #24]
    break;
 8009740:	e0fc      	b.n	800993c <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009742:	7bbb      	ldrb	r3, [r7, #14]
 8009744:	2b04      	cmp	r3, #4
 8009746:	d003      	beq.n	8009750 <USBH_HandleControl+0xcc>
 8009748:	7bbb      	ldrb	r3, [r7, #14]
 800974a:	2b02      	cmp	r3, #2
 800974c:	f040 80f6 	bne.w	800993c <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	220b      	movs	r2, #11
 8009754:	761a      	strb	r2, [r3, #24]
    break;
 8009756:	e0f1      	b.n	800993c <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800975e:	b29a      	uxth	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6899      	ldr	r1, [r3, #8]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	899a      	ldrh	r2, [r3, #12]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	791b      	ldrb	r3, [r3, #4]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f930 	bl	80099d6 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2204      	movs	r2, #4
 800977a:	761a      	strb	r2, [r3, #24]
    break;
 800977c:	e0e7      	b.n	800994e <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	791b      	ldrb	r3, [r3, #4]
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fc6f 	bl	800a068 <USBH_LL_GetURBState>
 800978a:	4603      	mov	r3, r0
 800978c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800978e:	7bbb      	ldrb	r3, [r7, #14]
 8009790:	2b01      	cmp	r3, #1
 8009792:	d102      	bne.n	800979a <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2209      	movs	r2, #9
 8009798:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800979a:	7bbb      	ldrb	r3, [r7, #14]
 800979c:	2b05      	cmp	r3, #5
 800979e:	d102      	bne.n	80097a6 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 80097a0:	2303      	movs	r3, #3
 80097a2:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80097a4:	e0cc      	b.n	8009940 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 80097a6:	7bbb      	ldrb	r3, [r7, #14]
 80097a8:	2b04      	cmp	r3, #4
 80097aa:	f040 80c9 	bne.w	8009940 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	220b      	movs	r2, #11
 80097b2:	761a      	strb	r2, [r3, #24]
    break;
 80097b4:	e0c4      	b.n	8009940 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6899      	ldr	r1, [r3, #8]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	899a      	ldrh	r2, [r3, #12]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	7958      	ldrb	r0, [r3, #5]
 80097c2:	2301      	movs	r3, #1
 80097c4:	9300      	str	r3, [sp, #0]
 80097c6:	4603      	mov	r3, r0
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 f8df 	bl	800998c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80097d4:	b29a      	uxth	r2, r3
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2206      	movs	r2, #6
 80097de:	761a      	strb	r2, [r3, #24]
    break;
 80097e0:	e0b5      	b.n	800994e <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	795b      	ldrb	r3, [r3, #5]
 80097e6:	4619      	mov	r1, r3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fc3d 	bl	800a068 <USBH_LL_GetURBState>
 80097ee:	4603      	mov	r3, r0
 80097f0:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 80097f2:	7bbb      	ldrb	r3, [r7, #14]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d103      	bne.n	8009800 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2207      	movs	r2, #7
 80097fc:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80097fe:	e0a1      	b.n	8009944 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8009800:	7bbb      	ldrb	r3, [r7, #14]
 8009802:	2b05      	cmp	r3, #5
 8009804:	d105      	bne.n	8009812 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	220c      	movs	r2, #12
 800980a:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800980c:	2303      	movs	r3, #3
 800980e:	73fb      	strb	r3, [r7, #15]
    break;
 8009810:	e098      	b.n	8009944 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8009812:	7bbb      	ldrb	r3, [r7, #14]
 8009814:	2b02      	cmp	r3, #2
 8009816:	d103      	bne.n	8009820 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2205      	movs	r2, #5
 800981c:	761a      	strb	r2, [r3, #24]
    break;
 800981e:	e091      	b.n	8009944 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8009820:	7bbb      	ldrb	r3, [r7, #14]
 8009822:	2b04      	cmp	r3, #4
 8009824:	f040 808e 	bne.w	8009944 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	220b      	movs	r2, #11
 800982c:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800982e:	2302      	movs	r3, #2
 8009830:	73fb      	strb	r3, [r7, #15]
    break;
 8009832:	e087      	b.n	8009944 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	791b      	ldrb	r3, [r3, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	2100      	movs	r1, #0
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 f8ca 	bl	80099d6 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009848:	b29a      	uxth	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2208      	movs	r2, #8
 8009852:	761a      	strb	r2, [r3, #24]

    break;
 8009854:	e07b      	b.n	800994e <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	791b      	ldrb	r3, [r3, #4]
 800985a:	4619      	mov	r1, r3
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 fc03 	bl	800a068 <USBH_LL_GetURBState>
 8009862:	4603      	mov	r3, r0
 8009864:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8009866:	7bbb      	ldrb	r3, [r7, #14]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d105      	bne.n	8009878 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	220d      	movs	r2, #13
 8009870:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8009872:	2300      	movs	r3, #0
 8009874:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009876:	e067      	b.n	8009948 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8009878:	7bbb      	ldrb	r3, [r7, #14]
 800987a:	2b04      	cmp	r3, #4
 800987c:	d103      	bne.n	8009886 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	220b      	movs	r2, #11
 8009882:	761a      	strb	r2, [r3, #24]
    break;
 8009884:	e060      	b.n	8009948 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8009886:	7bbb      	ldrb	r3, [r7, #14]
 8009888:	2b05      	cmp	r3, #5
 800988a:	d15d      	bne.n	8009948 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 800988c:	2303      	movs	r3, #3
 800988e:	73fb      	strb	r3, [r7, #15]
    break;
 8009890:	e05a      	b.n	8009948 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	795a      	ldrb	r2, [r3, #5]
 8009896:	2301      	movs	r3, #1
 8009898:	9300      	str	r3, [sp, #0]
 800989a:	4613      	mov	r3, r2
 800989c:	2200      	movs	r2, #0
 800989e:	2100      	movs	r1, #0
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 f873 	bl	800998c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	220a      	movs	r2, #10
 80098b6:	761a      	strb	r2, [r3, #24]
    break;
 80098b8:	e049      	b.n	800994e <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	795b      	ldrb	r3, [r3, #5]
 80098be:	4619      	mov	r1, r3
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fbd1 	bl	800a068 <USBH_LL_GetURBState>
 80098c6:	4603      	mov	r3, r0
 80098c8:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 80098ca:	7bbb      	ldrb	r3, [r7, #14]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d105      	bne.n	80098dc <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 80098d0:	2300      	movs	r3, #0
 80098d2:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	220d      	movs	r2, #13
 80098d8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 80098da:	e037      	b.n	800994c <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80098dc:	7bbb      	ldrb	r3, [r7, #14]
 80098de:	2b02      	cmp	r3, #2
 80098e0:	d103      	bne.n	80098ea <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2209      	movs	r2, #9
 80098e6:	761a      	strb	r2, [r3, #24]
    break;
 80098e8:	e030      	b.n	800994c <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 80098ea:	7bbb      	ldrb	r3, [r7, #14]
 80098ec:	2b04      	cmp	r3, #4
 80098ee:	d12d      	bne.n	800994c <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	220b      	movs	r2, #11
 80098f4:	761a      	strb	r2, [r3, #24]
    break;
 80098f6:	e029      	b.n	800994c <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	7e5b      	ldrb	r3, [r3, #25]
 80098fc:	3301      	adds	r3, #1
 80098fe:	b2da      	uxtb	r2, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	765a      	strb	r2, [r3, #25]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	7e5b      	ldrb	r3, [r3, #25]
 8009908:	2b02      	cmp	r3, #2
 800990a:	d809      	bhi.n	8009920 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 fabe 	bl	8009e8e <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2201      	movs	r2, #1
 8009916:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800991e:	e016      	b.n	800994e <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009926:	2106      	movs	r1, #6
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8009932:	2302      	movs	r3, #2
 8009934:	73fb      	strb	r3, [r7, #15]
    break;
 8009936:	e00a      	b.n	800994e <USBH_HandleControl+0x2ca>

  default:
    break;
 8009938:	bf00      	nop
 800993a:	e008      	b.n	800994e <USBH_HandleControl+0x2ca>
    break;
 800993c:	bf00      	nop
 800993e:	e006      	b.n	800994e <USBH_HandleControl+0x2ca>
    break;
 8009940:	bf00      	nop
 8009942:	e004      	b.n	800994e <USBH_HandleControl+0x2ca>
    break;
 8009944:	bf00      	nop
 8009946:	e002      	b.n	800994e <USBH_HandleControl+0x2ca>
    break;
 8009948:	bf00      	nop
 800994a:	e000      	b.n	800994e <USBH_HandleControl+0x2ca>
    break;
 800994c:	bf00      	nop
  }
  return status;
 800994e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b088      	sub	sp, #32
 800995c:	af04      	add	r7, sp, #16
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	4613      	mov	r3, r2
 8009964:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009966:	79f9      	ldrb	r1, [r7, #7]
 8009968:	2300      	movs	r3, #0
 800996a:	9303      	str	r3, [sp, #12]
 800996c:	2308      	movs	r3, #8
 800996e:	9302      	str	r3, [sp, #8]
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	9301      	str	r3, [sp, #4]
 8009974:	2300      	movs	r3, #0
 8009976:	9300      	str	r3, [sp, #0]
 8009978:	2300      	movs	r3, #0
 800997a:	2200      	movs	r2, #0
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f000 fb42 	bl	800a006 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b088      	sub	sp, #32
 8009990:	af04      	add	r7, sp, #16
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	4611      	mov	r1, r2
 8009998:	461a      	mov	r2, r3
 800999a:	460b      	mov	r3, r1
 800999c:	80fb      	strh	r3, [r7, #6]
 800999e:	4613      	mov	r3, r2
 80099a0:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d001      	beq.n	80099b0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80099ac:	2300      	movs	r3, #0
 80099ae:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80099b0:	7979      	ldrb	r1, [r7, #5]
 80099b2:	7e3b      	ldrb	r3, [r7, #24]
 80099b4:	9303      	str	r3, [sp, #12]
 80099b6:	88fb      	ldrh	r3, [r7, #6]
 80099b8:	9302      	str	r3, [sp, #8]
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	9301      	str	r3, [sp, #4]
 80099be:	2301      	movs	r3, #1
 80099c0:	9300      	str	r3, [sp, #0]
 80099c2:	2300      	movs	r3, #0
 80099c4:	2200      	movs	r2, #0
 80099c6:	68f8      	ldr	r0, [r7, #12]
 80099c8:	f000 fb1d 	bl	800a006 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b088      	sub	sp, #32
 80099da:	af04      	add	r7, sp, #16
 80099dc:	60f8      	str	r0, [r7, #12]
 80099de:	60b9      	str	r1, [r7, #8]
 80099e0:	4611      	mov	r1, r2
 80099e2:	461a      	mov	r2, r3
 80099e4:	460b      	mov	r3, r1
 80099e6:	80fb      	strh	r3, [r7, #6]
 80099e8:	4613      	mov	r3, r2
 80099ea:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80099ec:	7979      	ldrb	r1, [r7, #5]
 80099ee:	2300      	movs	r3, #0
 80099f0:	9303      	str	r3, [sp, #12]
 80099f2:	88fb      	ldrh	r3, [r7, #6]
 80099f4:	9302      	str	r3, [sp, #8]
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	9301      	str	r3, [sp, #4]
 80099fa:	2301      	movs	r3, #1
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	2300      	movs	r3, #0
 8009a00:	2201      	movs	r2, #1
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f000 faff 	bl	800a006 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009a08:	2300      	movs	r3, #0

}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b088      	sub	sp, #32
 8009a16:	af04      	add	r7, sp, #16
 8009a18:	60f8      	str	r0, [r7, #12]
 8009a1a:	60b9      	str	r1, [r7, #8]
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	461a      	mov	r2, r3
 8009a20:	460b      	mov	r3, r1
 8009a22:	80fb      	strh	r3, [r7, #6]
 8009a24:	4613      	mov	r3, r2
 8009a26:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009a32:	2300      	movs	r3, #0
 8009a34:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009a36:	7979      	ldrb	r1, [r7, #5]
 8009a38:	7e3b      	ldrb	r3, [r7, #24]
 8009a3a:	9303      	str	r3, [sp, #12]
 8009a3c:	88fb      	ldrh	r3, [r7, #6]
 8009a3e:	9302      	str	r3, [sp, #8]
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	9301      	str	r3, [sp, #4]
 8009a44:	2301      	movs	r3, #1
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	2302      	movs	r3, #2
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f000 fada 	bl	800a006 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b088      	sub	sp, #32
 8009a60:	af04      	add	r7, sp, #16
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	4611      	mov	r1, r2
 8009a68:	461a      	mov	r2, r3
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	80fb      	strh	r3, [r7, #6]
 8009a6e:	4613      	mov	r3, r2
 8009a70:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009a72:	7979      	ldrb	r1, [r7, #5]
 8009a74:	2300      	movs	r3, #0
 8009a76:	9303      	str	r3, [sp, #12]
 8009a78:	88fb      	ldrh	r3, [r7, #6]
 8009a7a:	9302      	str	r3, [sp, #8]
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	9301      	str	r3, [sp, #4]
 8009a80:	2301      	movs	r3, #1
 8009a82:	9300      	str	r3, [sp, #0]
 8009a84:	2302      	movs	r3, #2
 8009a86:	2201      	movs	r2, #1
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	f000 fabc 	bl	800a006 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3710      	adds	r7, #16
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b086      	sub	sp, #24
 8009a9c:	af04      	add	r7, sp, #16
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	4608      	mov	r0, r1
 8009aa2:	4611      	mov	r1, r2
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	70fb      	strb	r3, [r7, #3]
 8009aaa:	460b      	mov	r3, r1
 8009aac:	70bb      	strb	r3, [r7, #2]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8009ab2:	7878      	ldrb	r0, [r7, #1]
 8009ab4:	78ba      	ldrb	r2, [r7, #2]
 8009ab6:	78f9      	ldrb	r1, [r7, #3]
 8009ab8:	8b3b      	ldrh	r3, [r7, #24]
 8009aba:	9302      	str	r3, [sp, #8]
 8009abc:	7d3b      	ldrb	r3, [r7, #20]
 8009abe:	9301      	str	r3, [sp, #4]
 8009ac0:	7c3b      	ldrb	r3, [r7, #16]
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fa4f 	bl	8009f6a <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8009acc:	2300      	movs	r3, #0

}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b082      	sub	sp, #8
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
 8009ade:	460b      	mov	r3, r1
 8009ae0:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8009ae2:	78fb      	ldrb	r3, [r7, #3]
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fa6e 	bl	8009fc8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009aec:	2300      	movs	r3, #0

}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b084      	sub	sp, #16
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
 8009afe:	460b      	mov	r3, r1
 8009b00:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 f831 	bl	8009b6a <USBH_GetFreePipe>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009b0c:	89fb      	ldrh	r3, [r7, #14]
 8009b0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d007      	beq.n	8009b26 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8009b16:	78fb      	ldrb	r3, [r7, #3]
 8009b18:	89fa      	ldrh	r2, [r7, #14]
 8009b1a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	32e0      	adds	r2, #224	; 0xe0
 8009b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8009b26:	89fb      	ldrh	r3, [r7, #14]
 8009b28:	b2db      	uxtb	r3, r3
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009b32:	b480      	push	{r7}
 8009b34:	b083      	sub	sp, #12
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8009b3e:	78fb      	ldrb	r3, [r7, #3]
 8009b40:	2b0a      	cmp	r3, #10
 8009b42:	d80b      	bhi.n	8009b5c <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8009b44:	78fa      	ldrb	r2, [r7, #3]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	32e0      	adds	r2, #224	; 0xe0
 8009b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b4e:	78fa      	ldrb	r2, [r7, #3]
 8009b50:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	32e0      	adds	r2, #224	; 0xe0
 8009b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	370c      	adds	r7, #12
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr

08009b6a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8009b6a:	b480      	push	{r7}
 8009b6c:	b085      	sub	sp, #20
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009b72:	2300      	movs	r3, #0
 8009b74:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009b76:	2300      	movs	r3, #0
 8009b78:	73fb      	strb	r3, [r7, #15]
 8009b7a:	e00e      	b.n	8009b9a <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009b7c:	7bfa      	ldrb	r2, [r7, #15]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	32e0      	adds	r2, #224	; 0xe0
 8009b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d102      	bne.n	8009b94 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8009b8e:	7bfb      	ldrb	r3, [r7, #15]
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	e007      	b.n	8009ba4 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8009b94:	7bfb      	ldrb	r3, [r7, #15]
 8009b96:	3301      	adds	r3, #1
 8009b98:	73fb      	strb	r3, [r7, #15]
 8009b9a:	7bfb      	ldrb	r3, [r7, #15]
 8009b9c:	2b0a      	cmp	r3, #10
 8009b9e:	d9ed      	bls.n	8009b7c <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8009ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	490e      	ldr	r1, [pc, #56]	; (8009bf0 <MX_USB_HOST_Init+0x40>)
 8009bb8:	480e      	ldr	r0, [pc, #56]	; (8009bf4 <MX_USB_HOST_Init+0x44>)
 8009bba:	f7fe fdbb 	bl	8008734 <USBH_Init>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d001      	beq.n	8009bc8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009bc4:	f7f7 f8bc 	bl	8000d40 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009bc8:	490b      	ldr	r1, [pc, #44]	; (8009bf8 <MX_USB_HOST_Init+0x48>)
 8009bca:	480a      	ldr	r0, [pc, #40]	; (8009bf4 <MX_USB_HOST_Init+0x44>)
 8009bcc:	f7fe fe25 	bl	800881a <USBH_RegisterClass>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d001      	beq.n	8009bda <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009bd6:	f7f7 f8b3 	bl	8000d40 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009bda:	4806      	ldr	r0, [pc, #24]	; (8009bf4 <MX_USB_HOST_Init+0x44>)
 8009bdc:	f7fe feaa 	bl	8008934 <USBH_Start>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d001      	beq.n	8009bea <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009be6:	f7f7 f8ab 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009bea:	bf00      	nop
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	08009c11 	.word	0x08009c11
 8009bf4:	200008f4 	.word	0x200008f4
 8009bf8:	2000002c 	.word	0x2000002c

08009bfc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009c00:	4802      	ldr	r0, [pc, #8]	; (8009c0c <MX_USB_HOST_Process+0x10>)
 8009c02:	f7fe fea7 	bl	8008954 <USBH_Process>
}
 8009c06:	bf00      	nop
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	200008f4 	.word	0x200008f4

08009c10 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	460b      	mov	r3, r1
 8009c1a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009c1c:	78fb      	ldrb	r3, [r7, #3]
 8009c1e:	3b01      	subs	r3, #1
 8009c20:	2b04      	cmp	r3, #4
 8009c22:	d819      	bhi.n	8009c58 <USBH_UserProcess+0x48>
 8009c24:	a201      	add	r2, pc, #4	; (adr r2, 8009c2c <USBH_UserProcess+0x1c>)
 8009c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c2a:	bf00      	nop
 8009c2c:	08009c59 	.word	0x08009c59
 8009c30:	08009c49 	.word	0x08009c49
 8009c34:	08009c59 	.word	0x08009c59
 8009c38:	08009c51 	.word	0x08009c51
 8009c3c:	08009c41 	.word	0x08009c41
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009c40:	4b09      	ldr	r3, [pc, #36]	; (8009c68 <USBH_UserProcess+0x58>)
 8009c42:	2203      	movs	r2, #3
 8009c44:	701a      	strb	r2, [r3, #0]
  break;
 8009c46:	e008      	b.n	8009c5a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009c48:	4b07      	ldr	r3, [pc, #28]	; (8009c68 <USBH_UserProcess+0x58>)
 8009c4a:	2202      	movs	r2, #2
 8009c4c:	701a      	strb	r2, [r3, #0]
  break;
 8009c4e:	e004      	b.n	8009c5a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009c50:	4b05      	ldr	r3, [pc, #20]	; (8009c68 <USBH_UserProcess+0x58>)
 8009c52:	2201      	movs	r2, #1
 8009c54:	701a      	strb	r2, [r3, #0]
  break;
 8009c56:	e000      	b.n	8009c5a <USBH_UserProcess+0x4a>

  default:
  break;
 8009c58:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009c5a:	bf00      	nop
 8009c5c:	370c      	adds	r7, #12
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop
 8009c68:	200004e0 	.word	0x200004e0

08009c6c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b08a      	sub	sp, #40	; 0x28
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c74:	f107 0314 	add.w	r3, r7, #20
 8009c78:	2200      	movs	r2, #0
 8009c7a:	601a      	str	r2, [r3, #0]
 8009c7c:	605a      	str	r2, [r3, #4]
 8009c7e:	609a      	str	r2, [r3, #8]
 8009c80:	60da      	str	r2, [r3, #12]
 8009c82:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c8c:	d14e      	bne.n	8009d2c <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c8e:	4b29      	ldr	r3, [pc, #164]	; (8009d34 <HAL_HCD_MspInit+0xc8>)
 8009c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c92:	4a28      	ldr	r2, [pc, #160]	; (8009d34 <HAL_HCD_MspInit+0xc8>)
 8009c94:	f043 0301 	orr.w	r3, r3, #1
 8009c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c9a:	4b26      	ldr	r3, [pc, #152]	; (8009d34 <HAL_HCD_MspInit+0xc8>)
 8009c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c9e:	f003 0301 	and.w	r3, r3, #1
 8009ca2:	613b      	str	r3, [r7, #16]
 8009ca4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009ca6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cac:	2302      	movs	r3, #2
 8009cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009cb4:	2303      	movs	r3, #3
 8009cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009cb8:	230a      	movs	r3, #10
 8009cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009cbc:	f107 0314 	add.w	r3, r7, #20
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009cc6:	f7f8 f831 	bl	8001d2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009cca:	4b1a      	ldr	r3, [pc, #104]	; (8009d34 <HAL_HCD_MspInit+0xc8>)
 8009ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cce:	4a19      	ldr	r2, [pc, #100]	; (8009d34 <HAL_HCD_MspInit+0xc8>)
 8009cd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009cd6:	4b17      	ldr	r3, [pc, #92]	; (8009d34 <HAL_HCD_MspInit+0xc8>)
 8009cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009cde:	60fb      	str	r3, [r7, #12]
 8009ce0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ce2:	4b14      	ldr	r3, [pc, #80]	; (8009d34 <HAL_HCD_MspInit+0xc8>)
 8009ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d114      	bne.n	8009d18 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009cee:	4b11      	ldr	r3, [pc, #68]	; (8009d34 <HAL_HCD_MspInit+0xc8>)
 8009cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cf2:	4a10      	ldr	r2, [pc, #64]	; (8009d34 <HAL_HCD_MspInit+0xc8>)
 8009cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8009cfa:	4b0e      	ldr	r3, [pc, #56]	; (8009d34 <HAL_HCD_MspInit+0xc8>)
 8009cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d02:	60bb      	str	r3, [r7, #8]
 8009d04:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8009d06:	f7fa fb4b 	bl	80043a0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d0a:	4b0a      	ldr	r3, [pc, #40]	; (8009d34 <HAL_HCD_MspInit+0xc8>)
 8009d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d0e:	4a09      	ldr	r2, [pc, #36]	; (8009d34 <HAL_HCD_MspInit+0xc8>)
 8009d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d14:	6593      	str	r3, [r2, #88]	; 0x58
 8009d16:	e001      	b.n	8009d1c <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8009d18:	f7fa fb42 	bl	80043a0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	2100      	movs	r1, #0
 8009d20:	2043      	movs	r0, #67	; 0x43
 8009d22:	f7f7 ffcc 	bl	8001cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009d26:	2043      	movs	r0, #67	; 0x43
 8009d28:	f7f7 ffe5 	bl	8001cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009d2c:	bf00      	nop
 8009d2e:	3728      	adds	r7, #40	; 0x28
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	40021000 	.word	0x40021000

08009d38 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7ff f8b5 	bl	8008eb6 <USBH_LL_IncTimer>
}
 8009d4c:	bf00      	nop
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7ff f8fa 	bl	8008f5c <USBH_LL_Connect>
}
 8009d68:	bf00      	nop
 8009d6a:	3708      	adds	r7, #8
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7ff f912 	bl	8008fa8 <USBH_LL_Disconnect>
}
 8009d84:	bf00      	nop
 8009d86:	3708      	adds	r7, #8
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	460b      	mov	r3, r1
 8009d96:	70fb      	strb	r3, [r7, #3]
 8009d98:	4613      	mov	r3, r2
 8009d9a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009d9c:	bf00      	nop
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7ff f8a7 	bl	8008f0a <USBH_LL_PortEnabled>
} 
 8009dbc:	bf00      	nop
 8009dbe:	3708      	adds	r7, #8
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7ff f8a7 	bl	8008f26 <USBH_LL_PortDisabled>
} 
 8009dd8:	bf00      	nop
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d12a      	bne.n	8009e48 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009df2:	4a18      	ldr	r2, [pc, #96]	; (8009e54 <USBH_LL_Init+0x74>)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a15      	ldr	r2, [pc, #84]	; (8009e54 <USBH_LL_Init+0x74>)
 8009dfe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009e02:	4b14      	ldr	r3, [pc, #80]	; (8009e54 <USBH_LL_Init+0x74>)
 8009e04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009e08:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009e0a:	4b12      	ldr	r3, [pc, #72]	; (8009e54 <USBH_LL_Init+0x74>)
 8009e0c:	2208      	movs	r2, #8
 8009e0e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009e10:	4b10      	ldr	r3, [pc, #64]	; (8009e54 <USBH_LL_Init+0x74>)
 8009e12:	2201      	movs	r2, #1
 8009e14:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009e16:	4b0f      	ldr	r3, [pc, #60]	; (8009e54 <USBH_LL_Init+0x74>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009e1c:	4b0d      	ldr	r3, [pc, #52]	; (8009e54 <USBH_LL_Init+0x74>)
 8009e1e:	2202      	movs	r2, #2
 8009e20:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009e22:	4b0c      	ldr	r3, [pc, #48]	; (8009e54 <USBH_LL_Init+0x74>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009e28:	480a      	ldr	r0, [pc, #40]	; (8009e54 <USBH_LL_Init+0x74>)
 8009e2a:	f7f8 f93f 	bl	80020ac <HAL_HCD_Init>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d001      	beq.n	8009e38 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009e34:	f7f6 ff84 	bl	8000d40 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009e38:	4806      	ldr	r0, [pc, #24]	; (8009e54 <USBH_LL_Init+0x74>)
 8009e3a:	f7f8 fd37 	bl	80028ac <HAL_HCD_GetCurrentFrame>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	4619      	mov	r1, r3
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f7ff f828 	bl	8008e98 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	20000cc0 	.word	0x20000cc0

08009e58 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e60:	2300      	movs	r3, #0
 8009e62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e64:	2300      	movs	r3, #0
 8009e66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7f8 fca4 	bl	80027bc <HAL_HCD_Start>
 8009e74:	4603      	mov	r3, r0
 8009e76:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e78:	7bfb      	ldrb	r3, [r7, #15]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f000 f95c 	bl	800a138 <USBH_Get_USB_Status>
 8009e80:	4603      	mov	r3, r0
 8009e82:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009e84:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b084      	sub	sp, #16
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e96:	2300      	movs	r3, #0
 8009e98:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7f8 fcac 	bl	8002802 <HAL_HCD_Stop>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009eae:	7bfb      	ldrb	r3, [r7, #15]
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f000 f941 	bl	800a138 <USBH_Get_USB_Status>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009eba:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3710      	adds	r7, #16
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7f8 fcf6 	bl	80028c8 <HAL_HCD_GetCurrentSpeed>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d007      	beq.n	8009ef2 <USBH_LL_GetSpeed+0x2e>
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d302      	bcc.n	8009eec <USBH_LL_GetSpeed+0x28>
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d006      	beq.n	8009ef8 <USBH_LL_GetSpeed+0x34>
 8009eea:	e008      	b.n	8009efe <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009eec:	2300      	movs	r3, #0
 8009eee:	73fb      	strb	r3, [r7, #15]
    break;
 8009ef0:	e008      	b.n	8009f04 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ef6:	e005      	b.n	8009f04 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009ef8:	2302      	movs	r3, #2
 8009efa:	73fb      	strb	r3, [r7, #15]
    break;
 8009efc:	e002      	b.n	8009f04 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8009efe:	2301      	movs	r3, #1
 8009f00:	73fb      	strb	r3, [r7, #15]
    break;
 8009f02:	bf00      	nop
  }
  return  speed;
 8009f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}

08009f0e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009f0e:	b580      	push	{r7, lr}
 8009f10:	b084      	sub	sp, #16
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f16:	2300      	movs	r3, #0
 8009f18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7f8 fc89 	bl	800283c <HAL_HCD_ResetPort>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8009f2e:	7bfb      	ldrb	r3, [r7, #15]
 8009f30:	4618      	mov	r0, r3
 8009f32:	f000 f901 	bl	800a138 <USBH_Get_USB_Status>
 8009f36:	4603      	mov	r3, r0
 8009f38:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009f3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009f56:	78fa      	ldrb	r2, [r7, #3]
 8009f58:	4611      	mov	r1, r2
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7f8 fc91 	bl	8002882 <HAL_HCD_HC_GetXferCount>
 8009f60:	4603      	mov	r3, r0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009f6a:	b590      	push	{r4, r7, lr}
 8009f6c:	b089      	sub	sp, #36	; 0x24
 8009f6e:	af04      	add	r7, sp, #16
 8009f70:	6078      	str	r0, [r7, #4]
 8009f72:	4608      	mov	r0, r1
 8009f74:	4611      	mov	r1, r2
 8009f76:	461a      	mov	r2, r3
 8009f78:	4603      	mov	r3, r0
 8009f7a:	70fb      	strb	r3, [r7, #3]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	70bb      	strb	r3, [r7, #2]
 8009f80:	4613      	mov	r3, r2
 8009f82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f84:	2300      	movs	r3, #0
 8009f86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8009f92:	787c      	ldrb	r4, [r7, #1]
 8009f94:	78ba      	ldrb	r2, [r7, #2]
 8009f96:	78f9      	ldrb	r1, [r7, #3]
 8009f98:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009f9a:	9302      	str	r3, [sp, #8]
 8009f9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009fa0:	9301      	str	r3, [sp, #4]
 8009fa2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009fa6:	9300      	str	r3, [sp, #0]
 8009fa8:	4623      	mov	r3, r4
 8009faa:	f7f8 f8e1 	bl	8002170 <HAL_HCD_HC_Init>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009fb2:	7bfb      	ldrb	r3, [r7, #15]
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f000 f8bf 	bl	800a138 <USBH_Get_USB_Status>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009fbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3714      	adds	r7, #20
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd90      	pop	{r4, r7, pc}

08009fc8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009fe2:	78fa      	ldrb	r2, [r7, #3]
 8009fe4:	4611      	mov	r1, r2
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7f8 f95a 	bl	80022a0 <HAL_HCD_HC_Halt>
 8009fec:	4603      	mov	r3, r0
 8009fee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ff0:	7bfb      	ldrb	r3, [r7, #15]
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f000 f8a0 	bl	800a138 <USBH_Get_USB_Status>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	73bb      	strb	r3, [r7, #14]
   
  return usb_status;
 8009ffc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}

0800a006 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a006:	b590      	push	{r4, r7, lr}
 800a008:	b089      	sub	sp, #36	; 0x24
 800a00a:	af04      	add	r7, sp, #16
 800a00c:	6078      	str	r0, [r7, #4]
 800a00e:	4608      	mov	r0, r1
 800a010:	4611      	mov	r1, r2
 800a012:	461a      	mov	r2, r3
 800a014:	4603      	mov	r3, r0
 800a016:	70fb      	strb	r3, [r7, #3]
 800a018:	460b      	mov	r3, r1
 800a01a:	70bb      	strb	r3, [r7, #2]
 800a01c:	4613      	mov	r3, r2
 800a01e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a020:	2300      	movs	r3, #0
 800a022:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a024:	2300      	movs	r3, #0
 800a026:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800a02e:	787c      	ldrb	r4, [r7, #1]
 800a030:	78ba      	ldrb	r2, [r7, #2]
 800a032:	78f9      	ldrb	r1, [r7, #3]
 800a034:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a038:	9303      	str	r3, [sp, #12]
 800a03a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a03c:	9302      	str	r3, [sp, #8]
 800a03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a040:	9301      	str	r3, [sp, #4]
 800a042:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a046:	9300      	str	r3, [sp, #0]
 800a048:	4623      	mov	r3, r4
 800a04a:	f7f8 f94d 	bl	80022e8 <HAL_HCD_HC_SubmitRequest>
 800a04e:	4603      	mov	r3, r0
 800a050:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a052:	7bfb      	ldrb	r3, [r7, #15]
 800a054:	4618      	mov	r0, r3
 800a056:	f000 f86f 	bl	800a138 <USBH_Get_USB_Status>
 800a05a:	4603      	mov	r3, r0
 800a05c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a05e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a060:	4618      	mov	r0, r3
 800a062:	3714      	adds	r7, #20
 800a064:	46bd      	mov	sp, r7
 800a066:	bd90      	pop	{r4, r7, pc}

0800a068 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	460b      	mov	r3, r1
 800a072:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a07a:	78fa      	ldrb	r2, [r7, #3]
 800a07c:	4611      	mov	r1, r2
 800a07e:	4618      	mov	r0, r3
 800a080:	f7f8 fbea 	bl	8002858 <HAL_HCD_HC_GetURBState>
 800a084:	4603      	mov	r3, r0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b082      	sub	sp, #8
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	460b      	mov	r3, r1
 800a098:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d103      	bne.n	800a0ac <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a0a4:	78fb      	ldrb	r3, [r7, #3]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f000 f872 	bl	800a190 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a0ac:	20c8      	movs	r0, #200	; 0xc8
 800a0ae:	f7f7 fd09 	bl	8001ac4 <HAL_Delay>
  return USBH_OK;
 800a0b2:	2300      	movs	r3, #0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3708      	adds	r7, #8
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	70fb      	strb	r3, [r7, #3]
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a0d2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a0d4:	78fa      	ldrb	r2, [r7, #3]
 800a0d6:	68f9      	ldr	r1, [r7, #12]
 800a0d8:	4613      	mov	r3, r2
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	4413      	add	r3, r2
 800a0de:	00db      	lsls	r3, r3, #3
 800a0e0:	440b      	add	r3, r1
 800a0e2:	333b      	adds	r3, #59	; 0x3b
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d00a      	beq.n	800a100 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a0ea:	78fa      	ldrb	r2, [r7, #3]
 800a0ec:	68f9      	ldr	r1, [r7, #12]
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	00db      	lsls	r3, r3, #3
 800a0f6:	440b      	add	r3, r1
 800a0f8:	3350      	adds	r3, #80	; 0x50
 800a0fa:	78ba      	ldrb	r2, [r7, #2]
 800a0fc:	701a      	strb	r2, [r3, #0]
 800a0fe:	e009      	b.n	800a114 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a100:	78fa      	ldrb	r2, [r7, #3]
 800a102:	68f9      	ldr	r1, [r7, #12]
 800a104:	4613      	mov	r3, r2
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4413      	add	r3, r2
 800a10a:	00db      	lsls	r3, r3, #3
 800a10c:	440b      	add	r3, r1
 800a10e:	3351      	adds	r3, #81	; 0x51
 800a110:	78ba      	ldrb	r2, [r7, #2]
 800a112:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3714      	adds	r7, #20
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr

0800a122 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b082      	sub	sp, #8
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f7f7 fcca 	bl	8001ac4 <HAL_Delay>
}
 800a130:	bf00      	nop
 800a132:	3708      	adds	r7, #8
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	4603      	mov	r3, r0
 800a140:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a142:	2300      	movs	r3, #0
 800a144:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a146:	79fb      	ldrb	r3, [r7, #7]
 800a148:	2b03      	cmp	r3, #3
 800a14a:	d817      	bhi.n	800a17c <USBH_Get_USB_Status+0x44>
 800a14c:	a201      	add	r2, pc, #4	; (adr r2, 800a154 <USBH_Get_USB_Status+0x1c>)
 800a14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a152:	bf00      	nop
 800a154:	0800a165 	.word	0x0800a165
 800a158:	0800a16b 	.word	0x0800a16b
 800a15c:	0800a171 	.word	0x0800a171
 800a160:	0800a177 	.word	0x0800a177
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a164:	2300      	movs	r3, #0
 800a166:	73fb      	strb	r3, [r7, #15]
    break;
 800a168:	e00b      	b.n	800a182 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a16a:	2302      	movs	r3, #2
 800a16c:	73fb      	strb	r3, [r7, #15]
    break;
 800a16e:	e008      	b.n	800a182 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a170:	2301      	movs	r3, #1
 800a172:	73fb      	strb	r3, [r7, #15]
    break;
 800a174:	e005      	b.n	800a182 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a176:	2302      	movs	r3, #2
 800a178:	73fb      	strb	r3, [r7, #15]
    break;
 800a17a:	e002      	b.n	800a182 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a17c:	2302      	movs	r3, #2
 800a17e:	73fb      	strb	r3, [r7, #15]
    break;
 800a180:	bf00      	nop
  }
  return usb_status;
 800a182:	7bfb      	ldrb	r3, [r7, #15]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	4603      	mov	r3, r0
 800a198:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800a19a:	79fb      	ldrb	r3, [r7, #7]
 800a19c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a19e:	79fb      	ldrb	r3, [r7, #7]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d102      	bne.n	800a1aa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	73fb      	strb	r3, [r7, #15]
 800a1a8:	e001      	b.n	800a1ae <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800a1ae:	7bfb      	ldrb	r3, [r7, #15]
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a1b6:	4803      	ldr	r0, [pc, #12]	; (800a1c4 <MX_DriverVbusFS+0x34>)
 800a1b8:	f7f7 ff60 	bl	800207c <HAL_GPIO_WritePin>
}
 800a1bc:	bf00      	nop
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	48000800 	.word	0x48000800

0800a1c8 <__errno>:
 800a1c8:	4b01      	ldr	r3, [pc, #4]	; (800a1d0 <__errno+0x8>)
 800a1ca:	6818      	ldr	r0, [r3, #0]
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	2000004c 	.word	0x2000004c

0800a1d4 <__libc_init_array>:
 800a1d4:	b570      	push	{r4, r5, r6, lr}
 800a1d6:	4e0d      	ldr	r6, [pc, #52]	; (800a20c <__libc_init_array+0x38>)
 800a1d8:	4c0d      	ldr	r4, [pc, #52]	; (800a210 <__libc_init_array+0x3c>)
 800a1da:	1ba4      	subs	r4, r4, r6
 800a1dc:	10a4      	asrs	r4, r4, #2
 800a1de:	2500      	movs	r5, #0
 800a1e0:	42a5      	cmp	r5, r4
 800a1e2:	d109      	bne.n	800a1f8 <__libc_init_array+0x24>
 800a1e4:	4e0b      	ldr	r6, [pc, #44]	; (800a214 <__libc_init_array+0x40>)
 800a1e6:	4c0c      	ldr	r4, [pc, #48]	; (800a218 <__libc_init_array+0x44>)
 800a1e8:	f000 f8ea 	bl	800a3c0 <_init>
 800a1ec:	1ba4      	subs	r4, r4, r6
 800a1ee:	10a4      	asrs	r4, r4, #2
 800a1f0:	2500      	movs	r5, #0
 800a1f2:	42a5      	cmp	r5, r4
 800a1f4:	d105      	bne.n	800a202 <__libc_init_array+0x2e>
 800a1f6:	bd70      	pop	{r4, r5, r6, pc}
 800a1f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a1fc:	4798      	blx	r3
 800a1fe:	3501      	adds	r5, #1
 800a200:	e7ee      	b.n	800a1e0 <__libc_init_array+0xc>
 800a202:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a206:	4798      	blx	r3
 800a208:	3501      	adds	r5, #1
 800a20a:	e7f2      	b.n	800a1f2 <__libc_init_array+0x1e>
 800a20c:	0800d270 	.word	0x0800d270
 800a210:	0800d270 	.word	0x0800d270
 800a214:	0800d270 	.word	0x0800d270
 800a218:	0800d274 	.word	0x0800d274

0800a21c <malloc>:
 800a21c:	4b02      	ldr	r3, [pc, #8]	; (800a228 <malloc+0xc>)
 800a21e:	4601      	mov	r1, r0
 800a220:	6818      	ldr	r0, [r3, #0]
 800a222:	f000 b861 	b.w	800a2e8 <_malloc_r>
 800a226:	bf00      	nop
 800a228:	2000004c 	.word	0x2000004c

0800a22c <free>:
 800a22c:	4b02      	ldr	r3, [pc, #8]	; (800a238 <free+0xc>)
 800a22e:	4601      	mov	r1, r0
 800a230:	6818      	ldr	r0, [r3, #0]
 800a232:	f000 b80b 	b.w	800a24c <_free_r>
 800a236:	bf00      	nop
 800a238:	2000004c 	.word	0x2000004c

0800a23c <memset>:
 800a23c:	4402      	add	r2, r0
 800a23e:	4603      	mov	r3, r0
 800a240:	4293      	cmp	r3, r2
 800a242:	d100      	bne.n	800a246 <memset+0xa>
 800a244:	4770      	bx	lr
 800a246:	f803 1b01 	strb.w	r1, [r3], #1
 800a24a:	e7f9      	b.n	800a240 <memset+0x4>

0800a24c <_free_r>:
 800a24c:	b538      	push	{r3, r4, r5, lr}
 800a24e:	4605      	mov	r5, r0
 800a250:	2900      	cmp	r1, #0
 800a252:	d045      	beq.n	800a2e0 <_free_r+0x94>
 800a254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a258:	1f0c      	subs	r4, r1, #4
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	bfb8      	it	lt
 800a25e:	18e4      	addlt	r4, r4, r3
 800a260:	f000 f8ac 	bl	800a3bc <__malloc_lock>
 800a264:	4a1f      	ldr	r2, [pc, #124]	; (800a2e4 <_free_r+0x98>)
 800a266:	6813      	ldr	r3, [r2, #0]
 800a268:	4610      	mov	r0, r2
 800a26a:	b933      	cbnz	r3, 800a27a <_free_r+0x2e>
 800a26c:	6063      	str	r3, [r4, #4]
 800a26e:	6014      	str	r4, [r2, #0]
 800a270:	4628      	mov	r0, r5
 800a272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a276:	f000 b8a2 	b.w	800a3be <__malloc_unlock>
 800a27a:	42a3      	cmp	r3, r4
 800a27c:	d90c      	bls.n	800a298 <_free_r+0x4c>
 800a27e:	6821      	ldr	r1, [r4, #0]
 800a280:	1862      	adds	r2, r4, r1
 800a282:	4293      	cmp	r3, r2
 800a284:	bf04      	itt	eq
 800a286:	681a      	ldreq	r2, [r3, #0]
 800a288:	685b      	ldreq	r3, [r3, #4]
 800a28a:	6063      	str	r3, [r4, #4]
 800a28c:	bf04      	itt	eq
 800a28e:	1852      	addeq	r2, r2, r1
 800a290:	6022      	streq	r2, [r4, #0]
 800a292:	6004      	str	r4, [r0, #0]
 800a294:	e7ec      	b.n	800a270 <_free_r+0x24>
 800a296:	4613      	mov	r3, r2
 800a298:	685a      	ldr	r2, [r3, #4]
 800a29a:	b10a      	cbz	r2, 800a2a0 <_free_r+0x54>
 800a29c:	42a2      	cmp	r2, r4
 800a29e:	d9fa      	bls.n	800a296 <_free_r+0x4a>
 800a2a0:	6819      	ldr	r1, [r3, #0]
 800a2a2:	1858      	adds	r0, r3, r1
 800a2a4:	42a0      	cmp	r0, r4
 800a2a6:	d10b      	bne.n	800a2c0 <_free_r+0x74>
 800a2a8:	6820      	ldr	r0, [r4, #0]
 800a2aa:	4401      	add	r1, r0
 800a2ac:	1858      	adds	r0, r3, r1
 800a2ae:	4282      	cmp	r2, r0
 800a2b0:	6019      	str	r1, [r3, #0]
 800a2b2:	d1dd      	bne.n	800a270 <_free_r+0x24>
 800a2b4:	6810      	ldr	r0, [r2, #0]
 800a2b6:	6852      	ldr	r2, [r2, #4]
 800a2b8:	605a      	str	r2, [r3, #4]
 800a2ba:	4401      	add	r1, r0
 800a2bc:	6019      	str	r1, [r3, #0]
 800a2be:	e7d7      	b.n	800a270 <_free_r+0x24>
 800a2c0:	d902      	bls.n	800a2c8 <_free_r+0x7c>
 800a2c2:	230c      	movs	r3, #12
 800a2c4:	602b      	str	r3, [r5, #0]
 800a2c6:	e7d3      	b.n	800a270 <_free_r+0x24>
 800a2c8:	6820      	ldr	r0, [r4, #0]
 800a2ca:	1821      	adds	r1, r4, r0
 800a2cc:	428a      	cmp	r2, r1
 800a2ce:	bf04      	itt	eq
 800a2d0:	6811      	ldreq	r1, [r2, #0]
 800a2d2:	6852      	ldreq	r2, [r2, #4]
 800a2d4:	6062      	str	r2, [r4, #4]
 800a2d6:	bf04      	itt	eq
 800a2d8:	1809      	addeq	r1, r1, r0
 800a2da:	6021      	streq	r1, [r4, #0]
 800a2dc:	605c      	str	r4, [r3, #4]
 800a2de:	e7c7      	b.n	800a270 <_free_r+0x24>
 800a2e0:	bd38      	pop	{r3, r4, r5, pc}
 800a2e2:	bf00      	nop
 800a2e4:	200004e4 	.word	0x200004e4

0800a2e8 <_malloc_r>:
 800a2e8:	b570      	push	{r4, r5, r6, lr}
 800a2ea:	1ccd      	adds	r5, r1, #3
 800a2ec:	f025 0503 	bic.w	r5, r5, #3
 800a2f0:	3508      	adds	r5, #8
 800a2f2:	2d0c      	cmp	r5, #12
 800a2f4:	bf38      	it	cc
 800a2f6:	250c      	movcc	r5, #12
 800a2f8:	2d00      	cmp	r5, #0
 800a2fa:	4606      	mov	r6, r0
 800a2fc:	db01      	blt.n	800a302 <_malloc_r+0x1a>
 800a2fe:	42a9      	cmp	r1, r5
 800a300:	d903      	bls.n	800a30a <_malloc_r+0x22>
 800a302:	230c      	movs	r3, #12
 800a304:	6033      	str	r3, [r6, #0]
 800a306:	2000      	movs	r0, #0
 800a308:	bd70      	pop	{r4, r5, r6, pc}
 800a30a:	f000 f857 	bl	800a3bc <__malloc_lock>
 800a30e:	4a21      	ldr	r2, [pc, #132]	; (800a394 <_malloc_r+0xac>)
 800a310:	6814      	ldr	r4, [r2, #0]
 800a312:	4621      	mov	r1, r4
 800a314:	b991      	cbnz	r1, 800a33c <_malloc_r+0x54>
 800a316:	4c20      	ldr	r4, [pc, #128]	; (800a398 <_malloc_r+0xb0>)
 800a318:	6823      	ldr	r3, [r4, #0]
 800a31a:	b91b      	cbnz	r3, 800a324 <_malloc_r+0x3c>
 800a31c:	4630      	mov	r0, r6
 800a31e:	f000 f83d 	bl	800a39c <_sbrk_r>
 800a322:	6020      	str	r0, [r4, #0]
 800a324:	4629      	mov	r1, r5
 800a326:	4630      	mov	r0, r6
 800a328:	f000 f838 	bl	800a39c <_sbrk_r>
 800a32c:	1c43      	adds	r3, r0, #1
 800a32e:	d124      	bne.n	800a37a <_malloc_r+0x92>
 800a330:	230c      	movs	r3, #12
 800a332:	6033      	str	r3, [r6, #0]
 800a334:	4630      	mov	r0, r6
 800a336:	f000 f842 	bl	800a3be <__malloc_unlock>
 800a33a:	e7e4      	b.n	800a306 <_malloc_r+0x1e>
 800a33c:	680b      	ldr	r3, [r1, #0]
 800a33e:	1b5b      	subs	r3, r3, r5
 800a340:	d418      	bmi.n	800a374 <_malloc_r+0x8c>
 800a342:	2b0b      	cmp	r3, #11
 800a344:	d90f      	bls.n	800a366 <_malloc_r+0x7e>
 800a346:	600b      	str	r3, [r1, #0]
 800a348:	50cd      	str	r5, [r1, r3]
 800a34a:	18cc      	adds	r4, r1, r3
 800a34c:	4630      	mov	r0, r6
 800a34e:	f000 f836 	bl	800a3be <__malloc_unlock>
 800a352:	f104 000b 	add.w	r0, r4, #11
 800a356:	1d23      	adds	r3, r4, #4
 800a358:	f020 0007 	bic.w	r0, r0, #7
 800a35c:	1ac3      	subs	r3, r0, r3
 800a35e:	d0d3      	beq.n	800a308 <_malloc_r+0x20>
 800a360:	425a      	negs	r2, r3
 800a362:	50e2      	str	r2, [r4, r3]
 800a364:	e7d0      	b.n	800a308 <_malloc_r+0x20>
 800a366:	428c      	cmp	r4, r1
 800a368:	684b      	ldr	r3, [r1, #4]
 800a36a:	bf16      	itet	ne
 800a36c:	6063      	strne	r3, [r4, #4]
 800a36e:	6013      	streq	r3, [r2, #0]
 800a370:	460c      	movne	r4, r1
 800a372:	e7eb      	b.n	800a34c <_malloc_r+0x64>
 800a374:	460c      	mov	r4, r1
 800a376:	6849      	ldr	r1, [r1, #4]
 800a378:	e7cc      	b.n	800a314 <_malloc_r+0x2c>
 800a37a:	1cc4      	adds	r4, r0, #3
 800a37c:	f024 0403 	bic.w	r4, r4, #3
 800a380:	42a0      	cmp	r0, r4
 800a382:	d005      	beq.n	800a390 <_malloc_r+0xa8>
 800a384:	1a21      	subs	r1, r4, r0
 800a386:	4630      	mov	r0, r6
 800a388:	f000 f808 	bl	800a39c <_sbrk_r>
 800a38c:	3001      	adds	r0, #1
 800a38e:	d0cf      	beq.n	800a330 <_malloc_r+0x48>
 800a390:	6025      	str	r5, [r4, #0]
 800a392:	e7db      	b.n	800a34c <_malloc_r+0x64>
 800a394:	200004e4 	.word	0x200004e4
 800a398:	200004e8 	.word	0x200004e8

0800a39c <_sbrk_r>:
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	4c06      	ldr	r4, [pc, #24]	; (800a3b8 <_sbrk_r+0x1c>)
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	4605      	mov	r5, r0
 800a3a4:	4608      	mov	r0, r1
 800a3a6:	6023      	str	r3, [r4, #0]
 800a3a8:	f7f7 f950 	bl	800164c <_sbrk>
 800a3ac:	1c43      	adds	r3, r0, #1
 800a3ae:	d102      	bne.n	800a3b6 <_sbrk_r+0x1a>
 800a3b0:	6823      	ldr	r3, [r4, #0]
 800a3b2:	b103      	cbz	r3, 800a3b6 <_sbrk_r+0x1a>
 800a3b4:	602b      	str	r3, [r5, #0]
 800a3b6:	bd38      	pop	{r3, r4, r5, pc}
 800a3b8:	20000f84 	.word	0x20000f84

0800a3bc <__malloc_lock>:
 800a3bc:	4770      	bx	lr

0800a3be <__malloc_unlock>:
 800a3be:	4770      	bx	lr

0800a3c0 <_init>:
 800a3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3c2:	bf00      	nop
 800a3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3c6:	bc08      	pop	{r3}
 800a3c8:	469e      	mov	lr, r3
 800a3ca:	4770      	bx	lr

0800a3cc <_fini>:
 800a3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ce:	bf00      	nop
 800a3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3d2:	bc08      	pop	{r3}
 800a3d4:	469e      	mov	lr, r3
 800a3d6:	4770      	bx	lr
