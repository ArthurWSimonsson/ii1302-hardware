
Door Kommunication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a20c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  0800a394  0800a394  0001a394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa14  0800aa14  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa14  0800aa14  0001aa14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa1c  0800aa1c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa1c  0800aa1c  0001aa1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa20  0800aa20  0001aa20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800aa24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ed8  20000098  0800aabc  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f70  0800aabc  00020f70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a633  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005227  00000000  00000000  0004a6fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001948  00000000  00000000  0004f928  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016e0  00000000  00000000  00051270  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002db1b  00000000  00000000  00052950  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e1a8  00000000  00000000  0008046b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd5ee  00000000  00000000  0009e613  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019bc01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067dc  00000000  00000000  0019bc7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a37c 	.word	0x0800a37c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	0800a37c 	.word	0x0800a37c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <test_disp>:
#define Font_S (Font_6x8)
#define Font_M (Font_7x10)
#define Font_L (Font_11x18)
#define Font_XL (Font_16x26)

void test_disp(void) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	ssd1306_Init();
 80004cc:	f000 fe4c 	bl	8001168 <ssd1306_Init>
	test_joystick();
 80004d0:	f000 f802 	bl	80004d8 <test_joystick>
	//I2C_Scan();
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <test_joystick>:
void test_menu(void) {
	menu_main();
}

void test_joystick() {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
	//GPIO_TypeDef SEL_JOY_GPIO_PORT;
	while (1) {
		uint8_t state = (HAL_GPIO_ReadPin(RIGHT_JOY_GPIO_PORT, RIGHT_JOY_PIN) == GPIO_PIN_SET);
 80004de:	2104      	movs	r1, #4
 80004e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e4:	f001 fd90 	bl	8002008 <HAL_GPIO_ReadPin>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	bf0c      	ite	eq
 80004ee:	2301      	moveq	r3, #1
 80004f0:	2300      	movne	r3, #0
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	71fb      	strb	r3, [r7, #7]
		{
			ssd1306_SetCursor(2, 0);
 80004f6:	2100      	movs	r1, #0
 80004f8:	2002      	movs	r0, #2
 80004fa:	f000 fff9 	bl	80014f0 <ssd1306_SetCursor>
			ssd1306_WriteString("no", Font_S, White);
 80004fe:	4a04      	ldr	r2, [pc, #16]	; (8000510 <test_joystick+0x38>)
 8000500:	2301      	movs	r3, #1
 8000502:	ca06      	ldmia	r2, {r1, r2}
 8000504:	4803      	ldr	r0, [pc, #12]	; (8000514 <test_joystick+0x3c>)
 8000506:	f000 ffcd 	bl	80014a4 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 800050a:	f000 febd 	bl	8001288 <ssd1306_UpdateScreen>
	while (1) {
 800050e:	e7e6      	b.n	80004de <test_joystick+0x6>
 8000510:	20000000 	.word	0x20000000
 8000514:	0800a394 	.word	0x0800a394

08000518 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08c      	sub	sp, #48	; 0x30
 800051c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 031c 	add.w	r3, r7, #28
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800052e:	4b92      	ldr	r3, [pc, #584]	; (8000778 <MX_GPIO_Init+0x260>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a91      	ldr	r2, [pc, #580]	; (8000778 <MX_GPIO_Init+0x260>)
 8000534:	f043 0310 	orr.w	r3, r3, #16
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b8f      	ldr	r3, [pc, #572]	; (8000778 <MX_GPIO_Init+0x260>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0310 	and.w	r3, r3, #16
 8000542:	61bb      	str	r3, [r7, #24]
 8000544:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	4b8c      	ldr	r3, [pc, #560]	; (8000778 <MX_GPIO_Init+0x260>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	4a8b      	ldr	r2, [pc, #556]	; (8000778 <MX_GPIO_Init+0x260>)
 800054c:	f043 0304 	orr.w	r3, r3, #4
 8000550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000552:	4b89      	ldr	r3, [pc, #548]	; (8000778 <MX_GPIO_Init+0x260>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	617b      	str	r3, [r7, #20]
 800055c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800055e:	4b86      	ldr	r3, [pc, #536]	; (8000778 <MX_GPIO_Init+0x260>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	4a85      	ldr	r2, [pc, #532]	; (8000778 <MX_GPIO_Init+0x260>)
 8000564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056a:	4b83      	ldr	r3, [pc, #524]	; (8000778 <MX_GPIO_Init+0x260>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b80      	ldr	r3, [pc, #512]	; (8000778 <MX_GPIO_Init+0x260>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a7f      	ldr	r2, [pc, #508]	; (8000778 <MX_GPIO_Init+0x260>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b7d      	ldr	r3, [pc, #500]	; (8000778 <MX_GPIO_Init+0x260>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	4b7a      	ldr	r3, [pc, #488]	; (8000778 <MX_GPIO_Init+0x260>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	4a79      	ldr	r2, [pc, #484]	; (8000778 <MX_GPIO_Init+0x260>)
 8000594:	f043 0302 	orr.w	r3, r3, #2
 8000598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800059a:	4b77      	ldr	r3, [pc, #476]	; (8000778 <MX_GPIO_Init+0x260>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	f003 0302 	and.w	r3, r3, #2
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a6:	4b74      	ldr	r3, [pc, #464]	; (8000778 <MX_GPIO_Init+0x260>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	4a73      	ldr	r2, [pc, #460]	; (8000778 <MX_GPIO_Init+0x260>)
 80005ac:	f043 0308 	orr.w	r3, r3, #8
 80005b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b2:	4b71      	ldr	r3, [pc, #452]	; (8000778 <MX_GPIO_Init+0x260>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	f003 0308 	and.w	r3, r3, #8
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f240 1109 	movw	r1, #265	; 0x109
 80005c4:	486d      	ldr	r0, [pc, #436]	; (800077c <MX_GPIO_Init+0x264>)
 80005c6:	f001 fd37 	bl	8002038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	210c      	movs	r1, #12
 80005ce:	486c      	ldr	r0, [pc, #432]	; (8000780 <MX_GPIO_Init+0x268>)
 80005d0:	f001 fd32 	bl	8002038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005da:	486a      	ldr	r0, [pc, #424]	; (8000784 <MX_GPIO_Init+0x26c>)
 80005dc:	f001 fd2c 	bl	8002038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e6:	4867      	ldr	r0, [pc, #412]	; (8000784 <MX_GPIO_Init+0x26c>)
 80005e8:	f001 fd26 	bl	8002038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2180      	movs	r1, #128	; 0x80
 80005f0:	4865      	ldr	r0, [pc, #404]	; (8000788 <MX_GPIO_Init+0x270>)
 80005f2:	f001 fd21 	bl	8002038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 80005f6:	2308      	movs	r3, #8
 80005f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000602:	2302      	movs	r3, #2
 8000604:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	4619      	mov	r1, r3
 800060c:	485b      	ldr	r0, [pc, #364]	; (800077c <MX_GPIO_Init+0x264>)
 800060e:	f001 fb53 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8000612:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000618:	4b5c      	ldr	r3, [pc, #368]	; (800078c <MX_GPIO_Init+0x274>)
 800061a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000620:	f107 031c 	add.w	r3, r7, #28
 8000624:	4619      	mov	r1, r3
 8000626:	4857      	ldr	r0, [pc, #348]	; (8000784 <MX_GPIO_Init+0x26c>)
 8000628:	f001 fb46 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 800062c:	2307      	movs	r3, #7
 800062e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000630:	2300      	movs	r3, #0
 8000632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	4619      	mov	r1, r3
 800063e:	4851      	ldr	r0, [pc, #324]	; (8000784 <MX_GPIO_Init+0x26c>)
 8000640:	f001 fb3a 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin|JOY_UP_Pin|JOY_DOWN_Pin;
 8000644:	232c      	movs	r3, #44	; 0x2c
 8000646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000648:	2300      	movs	r3, #0
 800064a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800064c:	2302      	movs	r3, #2
 800064e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	f107 031c 	add.w	r3, r7, #28
 8000654:	4619      	mov	r1, r3
 8000656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065a:	f001 fb2d 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 800065e:	2310      	movs	r3, #16
 8000660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000662:	4b4a      	ldr	r3, [pc, #296]	; (800078c <MX_GPIO_Init+0x274>)
 8000664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	4619      	mov	r1, r3
 8000670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000674:	f001 fb20 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000678:	2304      	movs	r3, #4
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000680:	2301      	movs	r3, #1
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000684:	2303      	movs	r3, #3
 8000686:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	4619      	mov	r1, r3
 800068e:	483c      	ldr	r0, [pc, #240]	; (8000780 <MX_GPIO_Init+0x268>)
 8000690:	f001 fb12 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000694:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800069e:	2301      	movs	r3, #1
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a2:	2303      	movs	r3, #3
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4619      	mov	r1, r3
 80006ac:	4833      	ldr	r0, [pc, #204]	; (800077c <MX_GPIO_Init+0x264>)
 80006ae:	f001 fb03 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 80006b2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80006b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2300      	movs	r3, #0
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	482e      	ldr	r0, [pc, #184]	; (8000784 <MX_GPIO_Init+0x26c>)
 80006cc:	f001 faf4 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 80006d0:	2305      	movs	r3, #5
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006d4:	4b2d      	ldr	r3, [pc, #180]	; (800078c <MX_GPIO_Init+0x274>)
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	4619      	mov	r1, r3
 80006e2:	4829      	ldr	r0, [pc, #164]	; (8000788 <MX_GPIO_Init+0x270>)
 80006e4:	f001 fae8 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f4:	2303      	movs	r3, #3
 80006f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	4822      	ldr	r0, [pc, #136]	; (8000788 <MX_GPIO_Init+0x270>)
 8000700:	f001 fada 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8000704:	2308      	movs	r3, #8
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000708:	2301      	movs	r3, #1
 800070a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4619      	mov	r1, r3
 800071a:	4819      	ldr	r0, [pc, #100]	; (8000780 <MX_GPIO_Init+0x268>)
 800071c:	f001 facc 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_GPIO_Init+0x274>)
 8000728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	4619      	mov	r1, r3
 8000734:	4812      	ldr	r0, [pc, #72]	; (8000780 <MX_GPIO_Init+0x268>)
 8000736:	f001 fabf 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 800073a:	2301      	movs	r3, #1
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	480a      	ldr	r0, [pc, #40]	; (800077c <MX_GPIO_Init+0x264>)
 8000752:	f001 fab1 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000756:	2302      	movs	r3, #2
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_GPIO_Init+0x274>)
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_GPIO_Init+0x264>)
 800076a:	f001 faa5 	bl	8001cb8 <HAL_GPIO_Init>

}
 800076e:	bf00      	nop
 8000770:	3730      	adds	r7, #48	; 0x30
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000
 800077c:	48001000 	.word	0x48001000
 8000780:	48000400 	.word	0x48000400
 8000784:	48000800 	.word	0x48000800
 8000788:	48000c00 	.word	0x48000c00
 800078c:	10120000 	.word	0x10120000

08000790 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_I2C1_Init+0x74>)
 8000796:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <MX_I2C1_Init+0x78>)
 8000798:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_I2C1_Init+0x74>)
 800079c:	4a1b      	ldr	r2, [pc, #108]	; (800080c <MX_I2C1_Init+0x7c>)
 800079e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_I2C1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_I2C1_Init+0x74>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_I2C1_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_I2C1_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_I2C1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_I2C1_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_I2C1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ca:	480e      	ldr	r0, [pc, #56]	; (8000804 <MX_I2C1_Init+0x74>)
 80007cc:	f003 f86c 	bl	80038a8 <HAL_I2C_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007d6:	f000 fa79 	bl	8000ccc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007da:	2100      	movs	r1, #0
 80007dc:	4809      	ldr	r0, [pc, #36]	; (8000804 <MX_I2C1_Init+0x74>)
 80007de:	f003 fbcf 	bl	8003f80 <HAL_I2CEx_ConfigAnalogFilter>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007e8:	f000 fa70 	bl	8000ccc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007ec:	2100      	movs	r1, #0
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_I2C1_Init+0x74>)
 80007f0:	f003 fc11 	bl	8004016 <HAL_I2CEx_ConfigDigitalFilter>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007fa:	f000 fa67 	bl	8000ccc <Error_Handler>
  }

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200004d4 	.word	0x200004d4
 8000808:	40005400 	.word	0x40005400
 800080c:	00404c74 	.word	0x00404c74

08000810 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_I2C2_Init+0x74>)
 8000816:	4a1c      	ldr	r2, [pc, #112]	; (8000888 <MX_I2C2_Init+0x78>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00404C74;
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_I2C2_Init+0x74>)
 800081c:	4a1b      	ldr	r2, [pc, #108]	; (800088c <MX_I2C2_Init+0x7c>)
 800081e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_I2C2_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_I2C2_Init+0x74>)
 8000828:	2201      	movs	r2, #1
 800082a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_I2C2_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_I2C2_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_I2C2_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_I2C2_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_I2C2_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800084a:	480e      	ldr	r0, [pc, #56]	; (8000884 <MX_I2C2_Init+0x74>)
 800084c:	f003 f82c 	bl	80038a8 <HAL_I2C_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000856:	f000 fa39 	bl	8000ccc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800085a:	2100      	movs	r1, #0
 800085c:	4809      	ldr	r0, [pc, #36]	; (8000884 <MX_I2C2_Init+0x74>)
 800085e:	f003 fb8f 	bl	8003f80 <HAL_I2CEx_ConfigAnalogFilter>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000868:	f000 fa30 	bl	8000ccc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800086c:	2100      	movs	r1, #0
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_I2C2_Init+0x74>)
 8000870:	f003 fbd1 	bl	8004016 <HAL_I2CEx_ConfigDigitalFilter>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800087a:	f000 fa27 	bl	8000ccc <Error_Handler>
  }

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000520 	.word	0x20000520
 8000888:	40005800 	.word	0x40005800
 800088c:	00404c74 	.word	0x00404c74

08000890 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	; 0x30
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a2e      	ldr	r2, [pc, #184]	; (8000968 <HAL_I2C_MspInit+0xd8>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d128      	bne.n	8000904 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	4b2e      	ldr	r3, [pc, #184]	; (800096c <HAL_I2C_MspInit+0xdc>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a2d      	ldr	r2, [pc, #180]	; (800096c <HAL_I2C_MspInit+0xdc>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4b2b      	ldr	r3, [pc, #172]	; (800096c <HAL_I2C_MspInit+0xdc>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	61bb      	str	r3, [r7, #24]
 80008c8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80008ca:	23c0      	movs	r3, #192	; 0xc0
 80008cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ce:	2312      	movs	r3, #18
 80008d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008da:	2304      	movs	r3, #4
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4822      	ldr	r0, [pc, #136]	; (8000970 <HAL_I2C_MspInit+0xe0>)
 80008e6:	f001 f9e7 	bl	8001cb8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008ea:	4b20      	ldr	r3, [pc, #128]	; (800096c <HAL_I2C_MspInit+0xdc>)
 80008ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ee:	4a1f      	ldr	r2, [pc, #124]	; (800096c <HAL_I2C_MspInit+0xdc>)
 80008f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008f4:	6593      	str	r3, [r2, #88]	; 0x58
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <HAL_I2C_MspInit+0xdc>)
 80008f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000902:	e02d      	b.n	8000960 <HAL_I2C_MspInit+0xd0>
  else if(i2cHandle->Instance==I2C2)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a1a      	ldr	r2, [pc, #104]	; (8000974 <HAL_I2C_MspInit+0xe4>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d128      	bne.n	8000960 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <HAL_I2C_MspInit+0xdc>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a16      	ldr	r2, [pc, #88]	; (800096c <HAL_I2C_MspInit+0xdc>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <HAL_I2C_MspInit+0xdc>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8000926:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800092a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800092c:	2312      	movs	r3, #18
 800092e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000930:	2301      	movs	r3, #1
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000938:	2304      	movs	r3, #4
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	480b      	ldr	r0, [pc, #44]	; (8000970 <HAL_I2C_MspInit+0xe0>)
 8000944:	f001 f9b8 	bl	8001cb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <HAL_I2C_MspInit+0xdc>)
 800094a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094c:	4a07      	ldr	r2, [pc, #28]	; (800096c <HAL_I2C_MspInit+0xdc>)
 800094e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000952:	6593      	str	r3, [r2, #88]	; 0x58
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <HAL_I2C_MspInit+0xdc>)
 8000956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]
}
 8000960:	bf00      	nop
 8000962:	3730      	adds	r7, #48	; 0x30
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40005400 	.word	0x40005400
 800096c:	40021000 	.word	0x40021000
 8000970:	48000400 	.word	0x48000400
 8000974:	40005800 	.word	0x40005800

08000978 <MX_LCD_Init>:

LCD_HandleTypeDef hlcd;

/* LCD init function */
void MX_LCD_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  hlcd.Instance = LCD;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_LCD_Init+0x68>)
 800097e:	4a19      	ldr	r2, [pc, #100]	; (80009e4 <MX_LCD_Init+0x6c>)
 8000980:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_LCD_Init+0x68>)
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_LCD_Init+0x68>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_LCD_Init+0x68>)
 8000990:	220c      	movs	r2, #12
 8000992:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_LCD_Init+0x68>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_LCD_Init+0x68>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_LCD_Init+0x68>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_LCD_Init+0x68>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_LCD_Init+0x68>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_LCD_Init+0x68>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_LCD_Init+0x68>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_LCD_Init+0x68>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_LCD_Init+0x68>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_LCD_Init+0x68>)
 80009cc:	f003 fb70 	bl	80040b0 <HAL_LCD_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_LCD_Init+0x62>
  {
    Error_Handler();
 80009d6:	f000 f979 	bl	8000ccc <Error_Handler>
  }

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2000056c 	.word	0x2000056c
 80009e4:	40002400 	.word	0x40002400

080009e8 <HAL_LCD_MspInit>:

void HAL_LCD_MspInit(LCD_HandleTypeDef* lcdHandle)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08c      	sub	sp, #48	; 0x30
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(lcdHandle->Instance==LCD)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a44      	ldr	r2, [pc, #272]	; (8000b18 <HAL_LCD_MspInit+0x130>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	f040 8081 	bne.w	8000b0e <HAL_LCD_MspInit+0x126>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* LCD clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8000a0c:	4b43      	ldr	r3, [pc, #268]	; (8000b1c <HAL_LCD_MspInit+0x134>)
 8000a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a10:	4a42      	ldr	r2, [pc, #264]	; (8000b1c <HAL_LCD_MspInit+0x134>)
 8000a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a16:	6593      	str	r3, [r2, #88]	; 0x58
 8000a18:	4b40      	ldr	r3, [pc, #256]	; (8000b1c <HAL_LCD_MspInit+0x134>)
 8000a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a20:	61bb      	str	r3, [r7, #24]
 8000a22:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a24:	4b3d      	ldr	r3, [pc, #244]	; (8000b1c <HAL_LCD_MspInit+0x134>)
 8000a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a28:	4a3c      	ldr	r2, [pc, #240]	; (8000b1c <HAL_LCD_MspInit+0x134>)
 8000a2a:	f043 0304 	orr.w	r3, r3, #4
 8000a2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a30:	4b3a      	ldr	r3, [pc, #232]	; (8000b1c <HAL_LCD_MspInit+0x134>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a34:	f003 0304 	and.w	r3, r3, #4
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	4b37      	ldr	r3, [pc, #220]	; (8000b1c <HAL_LCD_MspInit+0x134>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a40:	4a36      	ldr	r2, [pc, #216]	; (8000b1c <HAL_LCD_MspInit+0x134>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a48:	4b34      	ldr	r3, [pc, #208]	; (8000b1c <HAL_LCD_MspInit+0x134>)
 8000a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a54:	4b31      	ldr	r3, [pc, #196]	; (8000b1c <HAL_LCD_MspInit+0x134>)
 8000a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a58:	4a30      	ldr	r2, [pc, #192]	; (8000b1c <HAL_LCD_MspInit+0x134>)
 8000a5a:	f043 0302 	orr.w	r3, r3, #2
 8000a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a60:	4b2e      	ldr	r3, [pc, #184]	; (8000b1c <HAL_LCD_MspInit+0x134>)
 8000a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6c:	4b2b      	ldr	r3, [pc, #172]	; (8000b1c <HAL_LCD_MspInit+0x134>)
 8000a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a70:	4a2a      	ldr	r2, [pc, #168]	; (8000b1c <HAL_LCD_MspInit+0x134>)
 8000a72:	f043 0308 	orr.w	r3, r3, #8
 8000a76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a78:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <HAL_LCD_MspInit+0x134>)
 8000a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7c:	f003 0308 	and.w	r3, r3, #8
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3 
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 8000a84:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000a88:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000a96:	230b      	movs	r3, #11
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	481f      	ldr	r0, [pc, #124]	; (8000b20 <HAL_LCD_MspInit+0x138>)
 8000aa2:	f001 f909 	bl	8001cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 8000aa6:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000aaa:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000ab8:	230b      	movs	r3, #11
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac6:	f001 f8f7 	bl	8001cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 8000aca:	f24f 2333 	movw	r3, #62003	; 0xf233
 8000ace:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin 
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000adc:	230b      	movs	r3, #11
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480f      	ldr	r0, [pc, #60]	; (8000b24 <HAL_LCD_MspInit+0x13c>)
 8000ae8:	f001 f8e6 	bl	8001cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8000aec:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000af0:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000afe:	230b      	movs	r3, #11
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4807      	ldr	r0, [pc, #28]	; (8000b28 <HAL_LCD_MspInit+0x140>)
 8000b0a:	f001 f8d5 	bl	8001cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }
}
 8000b0e:	bf00      	nop
 8000b10:	3730      	adds	r7, #48	; 0x30
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40002400 	.word	0x40002400
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	48000800 	.word	0x48000800
 8000b24:	48000400 	.word	0x48000400
 8000b28:	48000c00 	.word	0x48000c00

08000b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b30:	f000 ff16 	bl	8001960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b34:	f000 f81c 	bl	8000b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b38:	f7ff fcee 	bl	8000518 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b3c:	f7ff fe28 	bl	8000790 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000b40:	f7ff fe66 	bl	8000810 <MX_I2C2_Init>
  MX_LCD_Init();
 8000b44:	f7ff ff18 	bl	8000978 <MX_LCD_Init>
  MX_QUADSPI_Init();
 8000b48:	f000 f8c8 	bl	8000cdc <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000b4c:	f000 f930 	bl	8000db0 <MX_SAI1_Init>
  MX_SPI2_Init();
 8000b50:	f000 fa4e 	bl	8000ff0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000b54:	f000 fe02 	bl	800175c <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 8000b58:	f009 f808 	bl	8009b6c <MX_USB_HOST_Init>
  MX_UART5_Init();
 8000b5c:	f000 fdce 	bl	80016fc <MX_UART5_Init>
  MX_UART4_Init();
 8000b60:	f000 fd9c 	bl	800169c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
#ifdef RUN_TEST_PROGRAM
  //Test_program();
  test_disp();
 8000b64:	f7ff fcb0 	bl	80004c8 <test_disp>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000b68:	f009 f826 	bl	8009bb8 <MX_USB_HOST_Process>
 8000b6c:	e7fc      	b.n	8000b68 <main+0x3c>
	...

08000b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b0b8      	sub	sp, #224	; 0xe0
 8000b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b7a:	2244      	movs	r2, #68	; 0x44
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f009 fb3a 	bl	800a1f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b84:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b94:	463b      	mov	r3, r7
 8000b96:	2288      	movs	r2, #136	; 0x88
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f009 fb2c 	bl	800a1f8 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000ba0:	f003 fb68 	bl	8004274 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ba4:	4b47      	ldr	r3, [pc, #284]	; (8000cc4 <SystemClock_Config+0x154>)
 8000ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000baa:	4a46      	ldr	r2, [pc, #280]	; (8000cc4 <SystemClock_Config+0x154>)
 8000bac:	f023 0318 	bic.w	r3, r3, #24
 8000bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000bb4:	231c      	movs	r3, #28
 8000bb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000bd2:	2360      	movs	r3, #96	; 0x60
 8000bd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000bde:	2301      	movs	r3, #1
 8000be0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000bea:	2314      	movs	r3, #20
 8000bec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bf0:	2307      	movs	r3, #7
 8000bf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c06:	4618      	mov	r0, r3
 8000c08:	f003 fc80 	bl	800450c <HAL_RCC_OscConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c12:	f000 f85b 	bl	8000ccc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c16:	230f      	movs	r3, #15
 8000c18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000c22:	2380      	movs	r3, #128	; 0x80
 8000c24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c34:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000c38:	2101      	movs	r1, #1
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f004 f816 	bl	8004c6c <HAL_RCC_ClockConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000c46:	f000 f841 	bl	8000ccc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8000c4a:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <SystemClock_Config+0x158>)
 8000c4c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000c6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000c72:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000c74:	2301      	movs	r3, #1
 8000c76:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000c7c:	2318      	movs	r3, #24
 8000c7e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c80:	2307      	movs	r3, #7
 8000c82:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c84:	2302      	movs	r3, #2
 8000c86:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 8000c8c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c90:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c92:	463b      	mov	r3, r7
 8000c94:	4618      	mov	r0, r3
 8000c96:	f004 f9ed 	bl	8005074 <HAL_RCCEx_PeriphCLKConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0x134>
  {
    Error_Handler();
 8000ca0:	f000 f814 	bl	8000ccc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ca4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ca8:	f003 fb02 	bl	80042b0 <HAL_PWREx_ControlVoltageScaling>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x146>
  {
    Error_Handler();
 8000cb2:	f000 f80b 	bl	8000ccc <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000cb6:	f005 f93b 	bl	8005f30 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000cba:	bf00      	nop
 8000cbc:	37e0      	adds	r7, #224	; 0xe0
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	000228da 	.word	0x000228da

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <MX_QUADSPI_Init+0x44>)
 8000ce2:	4a10      	ldr	r2, [pc, #64]	; (8000d24 <MX_QUADSPI_Init+0x48>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <MX_QUADSPI_Init+0x44>)
 8000ce8:	22ff      	movs	r2, #255	; 0xff
 8000cea:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <MX_QUADSPI_Init+0x44>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <MX_QUADSPI_Init+0x44>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <MX_QUADSPI_Init+0x44>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <MX_QUADSPI_Init+0x44>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <MX_QUADSPI_Init+0x44>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_QUADSPI_Init+0x44>)
 8000d0c:	f003 fb36 	bl	800437c <HAL_QSPI_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000d16:	f7ff ffd9 	bl	8000ccc <Error_Handler>
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200005a8 	.word	0x200005a8
 8000d24:	a0001000 	.word	0xa0001000

08000d28 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a17      	ldr	r2, [pc, #92]	; (8000da4 <HAL_QSPI_MspInit+0x7c>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d128      	bne.n	8000d9c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <HAL_QSPI_MspInit+0x80>)
 8000d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d4e:	4a16      	ldr	r2, [pc, #88]	; (8000da8 <HAL_QSPI_MspInit+0x80>)
 8000d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d54:	6513      	str	r3, [r2, #80]	; 0x50
 8000d56:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <HAL_QSPI_MspInit+0x80>)
 8000d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_QSPI_MspInit+0x80>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	4a10      	ldr	r2, [pc, #64]	; (8000da8 <HAL_QSPI_MspInit+0x80>)
 8000d68:	f043 0310 	orr.w	r3, r3, #16
 8000d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_QSPI_MspInit+0x80>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	f003 0310 	and.w	r3, r3, #16
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 8000d7a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000d7e:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000d8c:	230a      	movs	r3, #10
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <HAL_QSPI_MspInit+0x84>)
 8000d98:	f000 ff8e 	bl	8001cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	3728      	adds	r7, #40	; 0x28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	a0001000 	.word	0xa0001000
 8000da8:	40021000 	.word	0x40021000
 8000dac:	48001000 	.word	0x48001000

08000db0 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0

  hsai_BlockA1.Instance = SAI1_Block_A;
 8000db4:	4b4d      	ldr	r3, [pc, #308]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000db6:	4a4e      	ldr	r2, [pc, #312]	; (8000ef0 <MX_SAI1_Init+0x140>)
 8000db8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000dba:	4b4c      	ldr	r3, [pc, #304]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000dc0:	4b4a      	ldr	r3, [pc, #296]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000dc6:	4b49      	ldr	r3, [pc, #292]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000dc8:	2240      	movs	r2, #64	; 0x40
 8000dca:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000dcc:	4b47      	ldr	r3, [pc, #284]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000dd2:	4b46      	ldr	r3, [pc, #280]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000dd8:	4b44      	ldr	r3, [pc, #272]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000dde:	4b43      	ldr	r3, [pc, #268]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000de4:	4b41      	ldr	r3, [pc, #260]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000dea:	4b40      	ldr	r3, [pc, #256]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000df0:	4b3e      	ldr	r3, [pc, #248]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000df2:	4a40      	ldr	r2, [pc, #256]	; (8000ef4 <MX_SAI1_Init+0x144>)
 8000df4:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000df6:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000dfc:	4b3b      	ldr	r3, [pc, #236]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e02:	4b3a      	ldr	r3, [pc, #232]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e08:	4b38      	ldr	r3, [pc, #224]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000e0e:	4b37      	ldr	r3, [pc, #220]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000e10:	2208      	movs	r2, #8
 8000e12:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000e14:	4b35      	ldr	r3, [pc, #212]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e1a:	4b34      	ldr	r3, [pc, #208]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e20:	4b32      	ldr	r3, [pc, #200]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e26:	4b31      	ldr	r3, [pc, #196]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000e2c:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e32:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000e38:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000e3e:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000e44:	4829      	ldr	r0, [pc, #164]	; (8000eec <MX_SAI1_Init+0x13c>)
 8000e46:	f005 fb25 	bl	8006494 <HAL_SAI_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8000e50:	f7ff ff3c 	bl	8000ccc <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8000e54:	4b28      	ldr	r3, [pc, #160]	; (8000ef8 <MX_SAI1_Init+0x148>)
 8000e56:	4a29      	ldr	r2, [pc, #164]	; (8000efc <MX_SAI1_Init+0x14c>)
 8000e58:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e5a:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <MX_SAI1_Init+0x148>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000e60:	4b25      	ldr	r3, [pc, #148]	; (8000ef8 <MX_SAI1_Init+0x148>)
 8000e62:	2203      	movs	r2, #3
 8000e64:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000e66:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <MX_SAI1_Init+0x148>)
 8000e68:	2240      	movs	r2, #64	; 0x40
 8000e6a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e6c:	4b22      	ldr	r3, [pc, #136]	; (8000ef8 <MX_SAI1_Init+0x148>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e72:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <MX_SAI1_Init+0x148>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000e78:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <MX_SAI1_Init+0x148>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <MX_SAI1_Init+0x148>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e84:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <MX_SAI1_Init+0x148>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <MX_SAI1_Init+0x148>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e90:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <MX_SAI1_Init+0x148>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <MX_SAI1_Init+0x148>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <MX_SAI1_Init+0x148>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <MX_SAI1_Init+0x148>)
 8000ea4:	2208      	movs	r2, #8
 8000ea6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <MX_SAI1_Init+0x148>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <MX_SAI1_Init+0x148>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000eb4:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <MX_SAI1_Init+0x148>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_SAI1_Init+0x148>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <MX_SAI1_Init+0x148>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_SAI1_Init+0x148>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <MX_SAI1_Init+0x148>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_SAI1_Init+0x148>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000ed8:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <MX_SAI1_Init+0x148>)
 8000eda:	f005 fadb 	bl	8006494 <HAL_SAI_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8000ee4:	f7ff fef2 	bl	8000ccc <Error_Handler>
  }

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000670 	.word	0x20000670
 8000ef0:	40015404 	.word	0x40015404
 8000ef4:	0002ee00 	.word	0x0002ee00
 8000ef8:	200005ec 	.word	0x200005ec
 8000efc:	40015424 	.word	0x40015424

08000f00 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a33      	ldr	r2, [pc, #204]	; (8000fdc <HAL_SAI_MspInit+0xdc>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d135      	bne.n	8000f7e <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8000f12:	4b33      	ldr	r3, [pc, #204]	; (8000fe0 <HAL_SAI_MspInit+0xe0>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d10b      	bne.n	8000f32 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000f1a:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <HAL_SAI_MspInit+0xe4>)
 8000f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1e:	4a31      	ldr	r2, [pc, #196]	; (8000fe4 <HAL_SAI_MspInit+0xe4>)
 8000f20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f24:	6613      	str	r3, [r2, #96]	; 0x60
 8000f26:	4b2f      	ldr	r3, [pc, #188]	; (8000fe4 <HAL_SAI_MspInit+0xe4>)
 8000f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8000f32:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <HAL_SAI_MspInit+0xe0>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	3301      	adds	r3, #1
 8000f38:	4a29      	ldr	r2, [pc, #164]	; (8000fe0 <HAL_SAI_MspInit+0xe0>)
 8000f3a:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B 
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 8000f3c:	2374      	movs	r3, #116	; 0x74
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000f4c:	230d      	movs	r3, #13
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	4824      	ldr	r0, [pc, #144]	; (8000fe8 <HAL_SAI_MspInit+0xe8>)
 8000f58:	f000 feae 	bl	8001cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8000f5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000f6e:	230d      	movs	r3, #13
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	481b      	ldr	r0, [pc, #108]	; (8000fe8 <HAL_SAI_MspInit+0xe8>)
 8000f7a:	f000 fe9d 	bl	8001cb8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a1a      	ldr	r2, [pc, #104]	; (8000fec <HAL_SAI_MspInit+0xec>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d124      	bne.n	8000fd2 <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8000f88:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <HAL_SAI_MspInit+0xe0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d10b      	bne.n	8000fa8 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <HAL_SAI_MspInit+0xe4>)
 8000f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f94:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <HAL_SAI_MspInit+0xe4>)
 8000f96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f9a:	6613      	str	r3, [r2, #96]	; 0x60
 8000f9c:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <HAL_SAI_MspInit+0xe4>)
 8000f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <HAL_SAI_MspInit+0xe0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	4a0c      	ldr	r2, [pc, #48]	; (8000fe0 <HAL_SAI_MspInit+0xe0>)
 8000fb0:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE7     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000fc2:	230d      	movs	r3, #13
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4806      	ldr	r0, [pc, #24]	; (8000fe8 <HAL_SAI_MspInit+0xe8>)
 8000fce:	f000 fe73 	bl	8001cb8 <HAL_GPIO_Init>

    }
}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	; 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40015404 	.word	0x40015404
 8000fe0:	200000b4 	.word	0x200000b4
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	48001000 	.word	0x48001000
 8000fec:	40015424 	.word	0x40015424

08000ff0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_SPI2_Init+0x74>)
 8000ff6:	4a1c      	ldr	r2, [pc, #112]	; (8001068 <MX_SPI2_Init+0x78>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <MX_SPI2_Init+0x74>)
 8000ffc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001000:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_SPI2_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_SPI2_Init+0x74>)
 800100a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800100e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_SPI2_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <MX_SPI2_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_SPI2_Init+0x74>)
 800101e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001022:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_SPI2_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_SPI2_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_SPI2_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <MX_SPI2_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_SPI2_Init+0x74>)
 800103e:	2207      	movs	r2, #7
 8001040:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <MX_SPI2_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_SPI2_Init+0x74>)
 800104a:	2208      	movs	r2, #8
 800104c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_SPI2_Init+0x74>)
 8001050:	f005 fbba 	bl	80067c8 <HAL_SPI_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800105a:	f7ff fe37 	bl	8000ccc <Error_Handler>
  }

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200006f4 	.word	0x200006f4
 8001068:	40003800 	.word	0x40003800

0800106c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <HAL_SPI_MspInit+0x7c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d127      	bne.n	80010de <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <HAL_SPI_MspInit+0x80>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001092:	4a16      	ldr	r2, [pc, #88]	; (80010ec <HAL_SPI_MspInit+0x80>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6593      	str	r3, [r2, #88]	; 0x58
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <HAL_SPI_MspInit+0x80>)
 800109c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <HAL_SPI_MspInit+0x80>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	4a10      	ldr	r2, [pc, #64]	; (80010ec <HAL_SPI_MspInit+0x80>)
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <HAL_SPI_MspInit+0x80>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 80010be:	231a      	movs	r3, #26
 80010c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010ce:	2305      	movs	r3, #5
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <HAL_SPI_MspInit+0x84>)
 80010da:	f000 fded 	bl	8001cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80010de:	bf00      	nop
 80010e0:	3728      	adds	r7, #40	; 0x28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40003800 	.word	0x40003800
 80010ec:	40021000 	.word	0x40021000
 80010f0:	48000c00 	.word	0x48000c00

080010f4 <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af04      	add	r7, sp, #16
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	9302      	str	r3, [sp, #8]
 8001114:	2301      	movs	r3, #1
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	1dfb      	adds	r3, r7, #7
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2301      	movs	r3, #1
 800111e:	2200      	movs	r2, #0
 8001120:	2178      	movs	r1, #120	; 0x78
 8001122:	4803      	ldr	r0, [pc, #12]	; (8001130 <ssd1306_WriteCommand+0x2c>)
 8001124:	f002 fc50 	bl	80039c8 <HAL_I2C_Mem_Write>
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200004d4 	.word	0x200004d4

08001134 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af04      	add	r7, sp, #16
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b29b      	uxth	r3, r3
 8001142:	f04f 32ff 	mov.w	r2, #4294967295
 8001146:	9202      	str	r2, [sp, #8]
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	2240      	movs	r2, #64	; 0x40
 8001152:	2178      	movs	r1, #120	; 0x78
 8001154:	4803      	ldr	r0, [pc, #12]	; (8001164 <ssd1306_WriteData+0x30>)
 8001156:	f002 fc37 	bl	80039c8 <HAL_I2C_Mem_Write>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200004d4 	.word	0x200004d4

08001168 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 800116c:	f7ff ffc2 	bl	80010f4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001170:	2064      	movs	r0, #100	; 0x64
 8001172:	f000 fc6d 	bl	8001a50 <HAL_Delay>

    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8001176:	20ae      	movs	r0, #174	; 0xae
 8001178:	f7ff ffc4 	bl	8001104 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800117c:	2020      	movs	r0, #32
 800117e:	f7ff ffc1 	bl	8001104 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001182:	2000      	movs	r0, #0
 8001184:	f7ff ffbe 	bl	8001104 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001188:	20b0      	movs	r0, #176	; 0xb0
 800118a:	f7ff ffbb 	bl	8001104 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800118e:	20c8      	movs	r0, #200	; 0xc8
 8001190:	f7ff ffb8 	bl	8001104 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001194:	2000      	movs	r0, #0
 8001196:	f7ff ffb5 	bl	8001104 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800119a:	2010      	movs	r0, #16
 800119c:	f7ff ffb2 	bl	8001104 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80011a0:	2040      	movs	r0, #64	; 0x40
 80011a2:	f7ff ffaf 	bl	8001104 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 80011a6:	2081      	movs	r0, #129	; 0x81
 80011a8:	f7ff ffac 	bl	8001104 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 80011ac:	20ff      	movs	r0, #255	; 0xff
 80011ae:	f7ff ffa9 	bl	8001104 <ssd1306_WriteCommand>


#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80011b2:	20a1      	movs	r0, #161	; 0xa1
 80011b4:	f7ff ffa6 	bl	8001104 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80011b8:	20a6      	movs	r0, #166	; 0xa6
 80011ba:	f7ff ffa3 	bl	8001104 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80011be:	20a8      	movs	r0, #168	; 0xa8
 80011c0:	f7ff ffa0 	bl	8001104 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80011c4:	203f      	movs	r0, #63	; 0x3f
 80011c6:	f7ff ff9d 	bl	8001104 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80011ca:	20a4      	movs	r0, #164	; 0xa4
 80011cc:	f7ff ff9a 	bl	8001104 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80011d0:	20d3      	movs	r0, #211	; 0xd3
 80011d2:	f7ff ff97 	bl	8001104 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80011d6:	2000      	movs	r0, #0
 80011d8:	f7ff ff94 	bl	8001104 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80011dc:	20d5      	movs	r0, #213	; 0xd5
 80011de:	f7ff ff91 	bl	8001104 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80011e2:	20f0      	movs	r0, #240	; 0xf0
 80011e4:	f7ff ff8e 	bl	8001104 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80011e8:	20d9      	movs	r0, #217	; 0xd9
 80011ea:	f7ff ff8b 	bl	8001104 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80011ee:	2022      	movs	r0, #34	; 0x22
 80011f0:	f7ff ff88 	bl	8001104 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80011f4:	20da      	movs	r0, #218	; 0xda
 80011f6:	f7ff ff85 	bl	8001104 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80011fa:	2012      	movs	r0, #18
 80011fc:	f7ff ff82 	bl	8001104 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001200:	20db      	movs	r0, #219	; 0xdb
 8001202:	f7ff ff7f 	bl	8001104 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001206:	2020      	movs	r0, #32
 8001208:	f7ff ff7c 	bl	8001104 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800120c:	208d      	movs	r0, #141	; 0x8d
 800120e:	f7ff ff79 	bl	8001104 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001212:	2014      	movs	r0, #20
 8001214:	f7ff ff76 	bl	8001104 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001218:	20af      	movs	r0, #175	; 0xaf
 800121a:	f7ff ff73 	bl	8001104 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 800121e:	2000      	movs	r0, #0
 8001220:	f000 f810 	bl	8001244 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001224:	f000 f830 	bl	8001288 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <ssd1306_Init+0xd8>)
 800122a:	2200      	movs	r2, #0
 800122c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <ssd1306_Init+0xd8>)
 8001230:	2200      	movs	r2, #0
 8001232:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001234:	4b02      	ldr	r3, [pc, #8]	; (8001240 <ssd1306_Init+0xd8>)
 8001236:	2201      	movs	r2, #1
 8001238:	715a      	strb	r2, [r3, #5]
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200004b8 	.word	0x200004b8

08001244 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	e00d      	b.n	8001270 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <ssd1306_Fill+0x1a>
 800125a:	2100      	movs	r1, #0
 800125c:	e000      	b.n	8001260 <ssd1306_Fill+0x1c>
 800125e:	21ff      	movs	r1, #255	; 0xff
 8001260:	4a08      	ldr	r2, [pc, #32]	; (8001284 <ssd1306_Fill+0x40>)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4413      	add	r3, r2
 8001266:	460a      	mov	r2, r1
 8001268:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	3301      	adds	r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001276:	d3ed      	bcc.n	8001254 <ssd1306_Fill+0x10>
    }
}
 8001278:	bf00      	nop
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	200000b8 	.word	0x200000b8

08001288 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800128e:	2300      	movs	r3, #0
 8001290:	71fb      	strb	r3, [r7, #7]
 8001292:	e016      	b.n	80012c2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	3b50      	subs	r3, #80	; 0x50
 8001298:	b2db      	uxtb	r3, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ff32 	bl	8001104 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80012a0:	2000      	movs	r0, #0
 80012a2:	f7ff ff2f 	bl	8001104 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80012a6:	2010      	movs	r0, #16
 80012a8:	f7ff ff2c 	bl	8001104 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	01db      	lsls	r3, r3, #7
 80012b0:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <ssd1306_UpdateScreen+0x48>)
 80012b2:	4413      	add	r3, r2
 80012b4:	2180      	movs	r1, #128	; 0x80
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff3c 	bl	8001134 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	3301      	adds	r3, #1
 80012c0:	71fb      	strb	r3, [r7, #7]
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2b07      	cmp	r3, #7
 80012c6:	d9e5      	bls.n	8001294 <ssd1306_UpdateScreen+0xc>
    }
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200000b8 	.word	0x200000b8

080012d4 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
 80012de:	460b      	mov	r3, r1
 80012e0:	71bb      	strb	r3, [r7, #6]
 80012e2:	4613      	mov	r3, r2
 80012e4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	db48      	blt.n	8001380 <ssd1306_DrawPixel+0xac>
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	2b3f      	cmp	r3, #63	; 0x3f
 80012f2:	d845      	bhi.n	8001380 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80012f4:	4b25      	ldr	r3, [pc, #148]	; (800138c <ssd1306_DrawPixel+0xb8>)
 80012f6:	791b      	ldrb	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80012fc:	797b      	ldrb	r3, [r7, #5]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	bf0c      	ite	eq
 8001302:	2301      	moveq	r3, #1
 8001304:	2300      	movne	r3, #0
 8001306:	b2db      	uxtb	r3, r3
 8001308:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the right color
    if(color == White) {
 800130a:	797b      	ldrb	r3, [r7, #5]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d11a      	bne.n	8001346 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001310:	79fa      	ldrb	r2, [r7, #7]
 8001312:	79bb      	ldrb	r3, [r7, #6]
 8001314:	08db      	lsrs	r3, r3, #3
 8001316:	b2d8      	uxtb	r0, r3
 8001318:	4603      	mov	r3, r0
 800131a:	01db      	lsls	r3, r3, #7
 800131c:	4413      	add	r3, r2
 800131e:	4a1c      	ldr	r2, [pc, #112]	; (8001390 <ssd1306_DrawPixel+0xbc>)
 8001320:	5cd3      	ldrb	r3, [r2, r3]
 8001322:	b25a      	sxtb	r2, r3
 8001324:	79bb      	ldrb	r3, [r7, #6]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	2101      	movs	r1, #1
 800132c:	fa01 f303 	lsl.w	r3, r1, r3
 8001330:	b25b      	sxtb	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	b259      	sxtb	r1, r3
 8001336:	79fa      	ldrb	r2, [r7, #7]
 8001338:	4603      	mov	r3, r0
 800133a:	01db      	lsls	r3, r3, #7
 800133c:	4413      	add	r3, r2
 800133e:	b2c9      	uxtb	r1, r1
 8001340:	4a13      	ldr	r2, [pc, #76]	; (8001390 <ssd1306_DrawPixel+0xbc>)
 8001342:	54d1      	strb	r1, [r2, r3]
 8001344:	e01d      	b.n	8001382 <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001346:	79fa      	ldrb	r2, [r7, #7]
 8001348:	79bb      	ldrb	r3, [r7, #6]
 800134a:	08db      	lsrs	r3, r3, #3
 800134c:	b2d8      	uxtb	r0, r3
 800134e:	4603      	mov	r3, r0
 8001350:	01db      	lsls	r3, r3, #7
 8001352:	4413      	add	r3, r2
 8001354:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <ssd1306_DrawPixel+0xbc>)
 8001356:	5cd3      	ldrb	r3, [r2, r3]
 8001358:	b25a      	sxtb	r2, r3
 800135a:	79bb      	ldrb	r3, [r7, #6]
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	2101      	movs	r1, #1
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	b25b      	sxtb	r3, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	b25b      	sxtb	r3, r3
 800136c:	4013      	ands	r3, r2
 800136e:	b259      	sxtb	r1, r3
 8001370:	79fa      	ldrb	r2, [r7, #7]
 8001372:	4603      	mov	r3, r0
 8001374:	01db      	lsls	r3, r3, #7
 8001376:	4413      	add	r3, r2
 8001378:	b2c9      	uxtb	r1, r1
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <ssd1306_DrawPixel+0xbc>)
 800137c:	54d1      	strb	r1, [r2, r3]
 800137e:	e000      	b.n	8001382 <ssd1306_DrawPixel+0xae>
        return;
 8001380:	bf00      	nop
    }
}
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	200004b8 	.word	0x200004b8
 8001390:	200000b8 	.word	0x200000b8

08001394 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	4604      	mov	r4, r0
 800139c:	1d38      	adds	r0, r7, #4
 800139e:	e880 0006 	stmia.w	r0, {r1, r2}
 80013a2:	461a      	mov	r2, r3
 80013a4:	4623      	mov	r3, r4
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	4613      	mov	r3, r2
 80013aa:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	2b1f      	cmp	r3, #31
 80013b0:	d902      	bls.n	80013b8 <ssd1306_WriteChar+0x24>
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	2b7e      	cmp	r3, #126	; 0x7e
 80013b6:	d901      	bls.n	80013bc <ssd1306_WriteChar+0x28>
        return 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	e06d      	b.n	8001498 <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80013bc:	4b38      	ldr	r3, [pc, #224]	; (80014a0 <ssd1306_WriteChar+0x10c>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	793b      	ldrb	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	2b80      	cmp	r3, #128	; 0x80
 80013c8:	dc06      	bgt.n	80013d8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80013ca:	4b35      	ldr	r3, [pc, #212]	; (80014a0 <ssd1306_WriteChar+0x10c>)
 80013cc:	885b      	ldrh	r3, [r3, #2]
 80013ce:	461a      	mov	r2, r3
 80013d0:	797b      	ldrb	r3, [r7, #5]
 80013d2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80013d4:	2b40      	cmp	r3, #64	; 0x40
 80013d6:	dd01      	ble.n	80013dc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	e05d      	b.n	8001498 <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
 80013e0:	e04c      	b.n	800147c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	3b20      	subs	r3, #32
 80013e8:	7979      	ldrb	r1, [r7, #5]
 80013ea:	fb01 f303 	mul.w	r3, r1, r3
 80013ee:	4619      	mov	r1, r3
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	440b      	add	r3, r1
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]
 8001400:	e034      	b.n	800146c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d012      	beq.n	8001438 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001412:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <ssd1306_WriteChar+0x10c>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	4413      	add	r3, r2
 800141e:	b2d8      	uxtb	r0, r3
 8001420:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <ssd1306_WriteChar+0x10c>)
 8001422:	885b      	ldrh	r3, [r3, #2]
 8001424:	b2da      	uxtb	r2, r3
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	4413      	add	r3, r2
 800142c:	b2db      	uxtb	r3, r3
 800142e:	7bba      	ldrb	r2, [r7, #14]
 8001430:	4619      	mov	r1, r3
 8001432:	f7ff ff4f 	bl	80012d4 <ssd1306_DrawPixel>
 8001436:	e016      	b.n	8001466 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <ssd1306_WriteChar+0x10c>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	b2da      	uxtb	r2, r3
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	4413      	add	r3, r2
 8001444:	b2d8      	uxtb	r0, r3
 8001446:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <ssd1306_WriteChar+0x10c>)
 8001448:	885b      	ldrh	r3, [r3, #2]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	4413      	add	r3, r2
 8001452:	b2d9      	uxtb	r1, r3
 8001454:	7bbb      	ldrb	r3, [r7, #14]
 8001456:	2b00      	cmp	r3, #0
 8001458:	bf0c      	ite	eq
 800145a:	2301      	moveq	r3, #1
 800145c:	2300      	movne	r3, #0
 800145e:	b2db      	uxtb	r3, r3
 8001460:	461a      	mov	r2, r3
 8001462:	f7ff ff37 	bl	80012d4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	3301      	adds	r3, #1
 800146a:	61bb      	str	r3, [r7, #24]
 800146c:	793b      	ldrb	r3, [r7, #4]
 800146e:	461a      	mov	r2, r3
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	4293      	cmp	r3, r2
 8001474:	d3c5      	bcc.n	8001402 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3301      	adds	r3, #1
 800147a:	61fb      	str	r3, [r7, #28]
 800147c:	797b      	ldrb	r3, [r7, #5]
 800147e:	461a      	mov	r2, r3
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	4293      	cmp	r3, r2
 8001484:	d3ad      	bcc.n	80013e2 <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <ssd1306_WriteChar+0x10c>)
 8001488:	881a      	ldrh	r2, [r3, #0]
 800148a:	793b      	ldrb	r3, [r7, #4]
 800148c:	b29b      	uxth	r3, r3
 800148e:	4413      	add	r3, r2
 8001490:	b29a      	uxth	r2, r3
 8001492:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <ssd1306_WriteChar+0x10c>)
 8001494:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001496:	7bfb      	ldrb	r3, [r7, #15]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3724      	adds	r7, #36	; 0x24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd90      	pop	{r4, r7, pc}
 80014a0:	200004b8 	.word	0x200004b8

080014a4 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	1d38      	adds	r0, r7, #4
 80014ae:	e880 0006 	stmia.w	r0, {r1, r2}
 80014b2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80014b4:	e012      	b.n	80014dc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	7818      	ldrb	r0, [r3, #0]
 80014ba:	78fb      	ldrb	r3, [r7, #3]
 80014bc:	1d3a      	adds	r2, r7, #4
 80014be:	ca06      	ldmia	r2, {r1, r2}
 80014c0:	f7ff ff68 	bl	8001394 <ssd1306_WriteChar>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d002      	beq.n	80014d6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	e008      	b.n	80014e8 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3301      	adds	r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1e8      	bne.n	80014b6 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	781b      	ldrb	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	460a      	mov	r2, r1
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	4613      	mov	r3, r2
 80014fe:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	b29a      	uxth	r2, r3
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <ssd1306_SetCursor+0x2c>)
 8001506:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001508:	79bb      	ldrb	r3, [r7, #6]
 800150a:	b29a      	uxth	r2, r3
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <ssd1306_SetCursor+0x2c>)
 800150e:	805a      	strh	r2, [r3, #2]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	200004b8 	.word	0x200004b8

08001520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_MspInit+0x44>)
 8001528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152a:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <HAL_MspInit+0x44>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6613      	str	r3, [r2, #96]	; 0x60
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_MspInit+0x44>)
 8001534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_MspInit+0x44>)
 8001540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001542:	4a08      	ldr	r2, [pc, #32]	; (8001564 <HAL_MspInit+0x44>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001548:	6593      	str	r3, [r2, #88]	; 0x58
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_MspInit+0x44>)
 800154c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40021000 	.word	0x40021000

08001568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <HardFault_Handler+0x4>

0800157c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <MemManage_Handler+0x4>

08001582 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <BusFault_Handler+0x4>

08001588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <UsageFault_Handler+0x4>

0800158e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015bc:	f000 fa2a 	bl	8001a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <OTG_FS_IRQHandler+0x10>)
 80015ca:	f000 ffcf 	bl	800256c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000ca8 	.word	0x20000ca8

080015d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <_sbrk+0x50>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <_sbrk+0x16>
		heap_end = &end;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <_sbrk+0x50>)
 80015ea:	4a10      	ldr	r2, [pc, #64]	; (800162c <_sbrk+0x54>)
 80015ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <_sbrk+0x50>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <_sbrk+0x50>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4413      	add	r3, r2
 80015fc:	466a      	mov	r2, sp
 80015fe:	4293      	cmp	r3, r2
 8001600:	d907      	bls.n	8001612 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001602:	f008 fdbf 	bl	800a184 <__errno>
 8001606:	4602      	mov	r2, r0
 8001608:	230c      	movs	r3, #12
 800160a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800160c:	f04f 33ff 	mov.w	r3, #4294967295
 8001610:	e006      	b.n	8001620 <_sbrk+0x48>
	}

	heap_end += incr;
 8001612:	4b05      	ldr	r3, [pc, #20]	; (8001628 <_sbrk+0x50>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	4a03      	ldr	r2, [pc, #12]	; (8001628 <_sbrk+0x50>)
 800161c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800161e:	68fb      	ldr	r3, [r7, #12]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	200004c0 	.word	0x200004c0
 800162c:	20000f70 	.word	0x20000f70

08001630 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001634:	4b17      	ldr	r3, [pc, #92]	; (8001694 <SystemInit+0x64>)
 8001636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163a:	4a16      	ldr	r2, [pc, #88]	; (8001694 <SystemInit+0x64>)
 800163c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <SystemInit+0x68>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a13      	ldr	r2, [pc, #76]	; (8001698 <SystemInit+0x68>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <SystemInit+0x68>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <SystemInit+0x68>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <SystemInit+0x68>)
 800165c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001660:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001664:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <SystemInit+0x68>)
 8001668:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800166c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <SystemInit+0x68>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a09      	ldr	r2, [pc, #36]	; (8001698 <SystemInit+0x68>)
 8001674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001678:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <SystemInit+0x68>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <SystemInit+0x64>)
 8001682:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001686:	609a      	str	r2, [r3, #8]
#endif
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000ed00 	.word	0xe000ed00
 8001698:	40021000 	.word	0x40021000

0800169c <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <MX_UART4_Init+0x58>)
 80016a2:	4a15      	ldr	r2, [pc, #84]	; (80016f8 <MX_UART4_Init+0x5c>)
 80016a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <MX_UART4_Init+0x58>)
 80016a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_UART4_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <MX_UART4_Init+0x58>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <MX_UART4_Init+0x58>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <MX_UART4_Init+0x58>)
 80016c2:	220c      	movs	r2, #12
 80016c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <MX_UART4_Init+0x58>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <MX_UART4_Init+0x58>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <MX_UART4_Init+0x58>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_UART4_Init+0x58>)
 80016da:	2200      	movs	r2, #0
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_UART4_Init+0x58>)
 80016e0:	f005 f8fc 	bl	80068dc <HAL_UART_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80016ea:	f7ff faef 	bl	8000ccc <Error_Handler>
  }

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200007d8 	.word	0x200007d8
 80016f8:	40004c00 	.word	0x40004c00

080016fc <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <MX_UART5_Init+0x58>)
 8001702:	4a15      	ldr	r2, [pc, #84]	; (8001758 <MX_UART5_Init+0x5c>)
 8001704:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <MX_UART5_Init+0x58>)
 8001708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800170c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_UART5_Init+0x58>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_UART5_Init+0x58>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <MX_UART5_Init+0x58>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_UART5_Init+0x58>)
 8001722:	220c      	movs	r2, #12
 8001724:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <MX_UART5_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_UART5_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <MX_UART5_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <MX_UART5_Init+0x58>)
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart5) != HAL_OK)
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <MX_UART5_Init+0x58>)
 8001740:	f005 f91a 	bl	8006978 <HAL_HalfDuplex_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800174a:	f7ff fabf 	bl	8000ccc <Error_Handler>
  }

}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000758 	.word	0x20000758
 8001758:	40005000 	.word	0x40005000

0800175c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_USART2_UART_Init+0x58>)
 8001762:	4a15      	ldr	r2, [pc, #84]	; (80017b8 <MX_USART2_UART_Init+0x5c>)
 8001764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <MX_USART2_UART_Init+0x58>)
 8001768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800176c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_USART2_UART_Init+0x58>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_USART2_UART_Init+0x58>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_USART2_UART_Init+0x58>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_USART2_UART_Init+0x58>)
 8001782:	220c      	movs	r2, #12
 8001784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_USART2_UART_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_USART2_UART_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_USART2_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_USART2_UART_Init+0x58>)
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_USART2_UART_Init+0x58>)
 80017a0:	f005 f89c 	bl	80068dc <HAL_UART_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017aa:	f7ff fa8f 	bl	8000ccc <Error_Handler>
  }

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000858 	.word	0x20000858
 80017b8:	40004400 	.word	0x40004400

080017bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08e      	sub	sp, #56	; 0x38
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a46      	ldr	r2, [pc, #280]	; (80018f4 <HAL_UART_MspInit+0x138>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d129      	bne.n	8001832 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80017de:	4b46      	ldr	r3, [pc, #280]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 80017e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e2:	4a45      	ldr	r2, [pc, #276]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 80017e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017e8:	6593      	str	r3, [r2, #88]	; 0x58
 80017ea:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 80017ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017f2:	623b      	str	r3, [r7, #32]
 80017f4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	4b40      	ldr	r3, [pc, #256]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	4a3f      	ldr	r2, [pc, #252]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001802:	4b3d      	ldr	r3, [pc, #244]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	61fb      	str	r3, [r7, #28]
 800180c:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800180e:	2303      	movs	r3, #3
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800181e:	2308      	movs	r3, #8
 8001820:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001826:	4619      	mov	r1, r3
 8001828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182c:	f000 fa44 	bl	8001cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001830:	e05b      	b.n	80018ea <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==UART5)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a31      	ldr	r2, [pc, #196]	; (80018fc <HAL_UART_MspInit+0x140>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d129      	bne.n	8001890 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_UART5_CLK_ENABLE();
 800183c:	4b2e      	ldr	r3, [pc, #184]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 800183e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001840:	4a2d      	ldr	r2, [pc, #180]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 8001842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001846:	6593      	str	r3, [r2, #88]	; 0x58
 8001848:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 800184a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001850:	61bb      	str	r3, [r7, #24]
 8001852:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001854:	4b28      	ldr	r3, [pc, #160]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 8001856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001858:	4a27      	ldr	r2, [pc, #156]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001860:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 8001862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800186c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001872:	2312      	movs	r3, #18
 8001874:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001876:	2301      	movs	r3, #1
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187a:	2303      	movs	r3, #3
 800187c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800187e:	2308      	movs	r3, #8
 8001880:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001886:	4619      	mov	r1, r3
 8001888:	481d      	ldr	r0, [pc, #116]	; (8001900 <HAL_UART_MspInit+0x144>)
 800188a:	f000 fa15 	bl	8001cb8 <HAL_GPIO_Init>
}
 800188e:	e02c      	b.n	80018ea <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a1b      	ldr	r2, [pc, #108]	; (8001904 <HAL_UART_MspInit+0x148>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d127      	bne.n	80018ea <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 800189c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189e:	4a16      	ldr	r2, [pc, #88]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a4:	6593      	str	r3, [r2, #88]	; 0x58
 80018a6:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	4a10      	ldr	r2, [pc, #64]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018ca:	2360      	movs	r3, #96	; 0x60
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018d2:	2301      	movs	r3, #1
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018da:	2307      	movs	r3, #7
 80018dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e2:	4619      	mov	r1, r3
 80018e4:	4808      	ldr	r0, [pc, #32]	; (8001908 <HAL_UART_MspInit+0x14c>)
 80018e6:	f000 f9e7 	bl	8001cb8 <HAL_GPIO_Init>
}
 80018ea:	bf00      	nop
 80018ec:	3738      	adds	r7, #56	; 0x38
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40004c00 	.word	0x40004c00
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40005000 	.word	0x40005000
 8001900:	48000800 	.word	0x48000800
 8001904:	40004400 	.word	0x40004400
 8001908:	48000c00 	.word	0x48000c00

0800190c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800190c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001944 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001910:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001912:	e003      	b.n	800191c <LoopCopyDataInit>

08001914 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001916:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001918:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800191a:	3104      	adds	r1, #4

0800191c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800191c:	480b      	ldr	r0, [pc, #44]	; (800194c <LoopForever+0xa>)
	ldr	r3, =_edata
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001920:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001922:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001924:	d3f6      	bcc.n	8001914 <CopyDataInit>
	ldr	r2, =_sbss
 8001926:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001928:	e002      	b.n	8001930 <LoopFillZerobss>

0800192a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800192a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800192c:	f842 3b04 	str.w	r3, [r2], #4

08001930 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <LoopForever+0x16>)
	cmp	r2, r3
 8001932:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001934:	d3f9      	bcc.n	800192a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001936:	f7ff fe7b 	bl	8001630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800193a:	f008 fc29 	bl	800a190 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800193e:	f7ff f8f5 	bl	8000b2c <main>

08001942 <LoopForever>:

LoopForever:
    b LoopForever
 8001942:	e7fe      	b.n	8001942 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001944:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001948:	0800aa24 	.word	0x0800aa24
	ldr	r0, =_sdata
 800194c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001950:	20000098 	.word	0x20000098
	ldr	r2, =_sbss
 8001954:	20000098 	.word	0x20000098
	ldr	r3, = _ebss
 8001958:	20000f70 	.word	0x20000f70

0800195c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800195c:	e7fe      	b.n	800195c <ADC1_2_IRQHandler>
	...

08001960 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800196a:	4b0c      	ldr	r3, [pc, #48]	; (800199c <HAL_Init+0x3c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a0b      	ldr	r2, [pc, #44]	; (800199c <HAL_Init+0x3c>)
 8001970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001974:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001976:	2003      	movs	r0, #3
 8001978:	f000 f95c 	bl	8001c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800197c:	2000      	movs	r0, #0
 800197e:	f000 f80f 	bl	80019a0 <HAL_InitTick>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d002      	beq.n	800198e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	71fb      	strb	r3, [r7, #7]
 800198c:	e001      	b.n	8001992 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800198e:	f7ff fdc7 	bl	8001520 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001992:	79fb      	ldrb	r3, [r7, #7]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40022000 	.word	0x40022000

080019a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80019ac:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <HAL_InitTick+0x68>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d022      	beq.n	80019fa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80019b4:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <HAL_InitTick+0x6c>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <HAL_InitTick+0x68>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80019c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 f968 	bl	8001c9e <HAL_SYSTICK_Config>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10f      	bne.n	80019f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b0f      	cmp	r3, #15
 80019d8:	d809      	bhi.n	80019ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019da:	2200      	movs	r2, #0
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	f04f 30ff 	mov.w	r0, #4294967295
 80019e2:	f000 f932 	bl	8001c4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <HAL_InitTick+0x70>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	e007      	b.n	80019fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	73fb      	strb	r3, [r7, #15]
 80019f2:	e004      	b.n	80019fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
 80019f8:	e001      	b.n	80019fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000010 	.word	0x20000010
 8001a0c:	20000008 	.word	0x20000008
 8001a10:	2000000c 	.word	0x2000000c

08001a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_IncTick+0x1c>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_IncTick+0x20>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4413      	add	r3, r2
 8001a22:	4a03      	ldr	r2, [pc, #12]	; (8001a30 <HAL_IncTick+0x1c>)
 8001a24:	6013      	str	r3, [r2, #0]
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	200008d8 	.word	0x200008d8
 8001a34:	20000010 	.word	0x20000010

08001a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_GetTick+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	200008d8 	.word	0x200008d8

08001a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a58:	f7ff ffee 	bl	8001a38 <HAL_GetTick>
 8001a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a68:	d004      	beq.n	8001a74 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_Delay+0x40>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	4413      	add	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a74:	bf00      	nop
 8001a76:	f7ff ffdf 	bl	8001a38 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d8f7      	bhi.n	8001a76 <HAL_Delay+0x26>
  {
  }
}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000010 	.word	0x20000010

08001a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac6:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	60d3      	str	r3, [r2, #12]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	f003 0307 	and.w	r3, r3, #7
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	db0b      	blt.n	8001b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	f003 021f 	and.w	r2, r3, #31
 8001b10:	4907      	ldr	r1, [pc, #28]	; (8001b30 <__NVIC_EnableIRQ+0x38>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	095b      	lsrs	r3, r3, #5
 8001b18:	2001      	movs	r0, #1
 8001b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000e100 	.word	0xe000e100

08001b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	6039      	str	r1, [r7, #0]
 8001b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	db0a      	blt.n	8001b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	490c      	ldr	r1, [pc, #48]	; (8001b80 <__NVIC_SetPriority+0x4c>)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	0112      	lsls	r2, r2, #4
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	440b      	add	r3, r1
 8001b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b5c:	e00a      	b.n	8001b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	4908      	ldr	r1, [pc, #32]	; (8001b84 <__NVIC_SetPriority+0x50>)
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	3b04      	subs	r3, #4
 8001b6c:	0112      	lsls	r2, r2, #4
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	440b      	add	r3, r1
 8001b72:	761a      	strb	r2, [r3, #24]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000e100 	.word	0xe000e100
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b089      	sub	sp, #36	; 0x24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	bf28      	it	cs
 8001ba6:	2304      	movcs	r3, #4
 8001ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3304      	adds	r3, #4
 8001bae:	2b06      	cmp	r3, #6
 8001bb0:	d902      	bls.n	8001bb8 <NVIC_EncodePriority+0x30>
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3b03      	subs	r3, #3
 8001bb6:	e000      	b.n	8001bba <NVIC_EncodePriority+0x32>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43da      	mvns	r2, r3
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	401a      	ands	r2, r3
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bda:	43d9      	mvns	r1, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be0:	4313      	orrs	r3, r2
         );
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3724      	adds	r7, #36	; 0x24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c00:	d301      	bcc.n	8001c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c02:	2301      	movs	r3, #1
 8001c04:	e00f      	b.n	8001c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c06:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <SysTick_Config+0x40>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c0e:	210f      	movs	r1, #15
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295
 8001c14:	f7ff ff8e 	bl	8001b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <SysTick_Config+0x40>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <SysTick_Config+0x40>)
 8001c20:	2207      	movs	r2, #7
 8001c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	e000e010 	.word	0xe000e010

08001c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ff29 	bl	8001a94 <__NVIC_SetPriorityGrouping>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b086      	sub	sp, #24
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c5c:	f7ff ff3e 	bl	8001adc <__NVIC_GetPriorityGrouping>
 8001c60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	6978      	ldr	r0, [r7, #20]
 8001c68:	f7ff ff8e 	bl	8001b88 <NVIC_EncodePriority>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff5d 	bl	8001b34 <__NVIC_SetPriority>
}
 8001c7a:	bf00      	nop
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff31 	bl	8001af8 <__NVIC_EnableIRQ>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff ffa2 	bl	8001bf0 <SysTick_Config>
 8001cac:	4603      	mov	r3, r0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc6:	e17f      	b.n	8001fc8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2101      	movs	r1, #1
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 8171 	beq.w	8001fc2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_Init+0x38>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b12      	cmp	r3, #18
 8001cee:	d123      	bne.n	8001d38 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	08da      	lsrs	r2, r3, #3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3208      	adds	r2, #8
 8001cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	220f      	movs	r2, #15
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	08da      	lsrs	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3208      	adds	r2, #8
 8001d32:	6939      	ldr	r1, [r7, #16]
 8001d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	2203      	movs	r2, #3
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0203 	and.w	r2, r3, #3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d00b      	beq.n	8001d8c <HAL_GPIO_Init+0xd4>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d007      	beq.n	8001d8c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d80:	2b11      	cmp	r3, #17
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b12      	cmp	r3, #18
 8001d8a:	d130      	bne.n	8001dee <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	f003 0201 	and.w	r2, r3, #1
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d118      	bne.n	8001e2c <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e00:	2201      	movs	r2, #1
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	08db      	lsrs	r3, r3, #3
 8001e16:	f003 0201 	and.w	r2, r3, #1
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	2203      	movs	r2, #3
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80ac 	beq.w	8001fc2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6a:	4b5e      	ldr	r3, [pc, #376]	; (8001fe4 <HAL_GPIO_Init+0x32c>)
 8001e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6e:	4a5d      	ldr	r2, [pc, #372]	; (8001fe4 <HAL_GPIO_Init+0x32c>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6613      	str	r3, [r2, #96]	; 0x60
 8001e76:	4b5b      	ldr	r3, [pc, #364]	; (8001fe4 <HAL_GPIO_Init+0x32c>)
 8001e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e82:	4a59      	ldr	r2, [pc, #356]	; (8001fe8 <HAL_GPIO_Init+0x330>)
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	089b      	lsrs	r3, r3, #2
 8001e88:	3302      	adds	r3, #2
 8001e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	220f      	movs	r2, #15
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eac:	d025      	beq.n	8001efa <HAL_GPIO_Init+0x242>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a4e      	ldr	r2, [pc, #312]	; (8001fec <HAL_GPIO_Init+0x334>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d01f      	beq.n	8001ef6 <HAL_GPIO_Init+0x23e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a4d      	ldr	r2, [pc, #308]	; (8001ff0 <HAL_GPIO_Init+0x338>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d019      	beq.n	8001ef2 <HAL_GPIO_Init+0x23a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a4c      	ldr	r2, [pc, #304]	; (8001ff4 <HAL_GPIO_Init+0x33c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <HAL_GPIO_Init+0x236>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a4b      	ldr	r2, [pc, #300]	; (8001ff8 <HAL_GPIO_Init+0x340>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00d      	beq.n	8001eea <HAL_GPIO_Init+0x232>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a4a      	ldr	r2, [pc, #296]	; (8001ffc <HAL_GPIO_Init+0x344>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d007      	beq.n	8001ee6 <HAL_GPIO_Init+0x22e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a49      	ldr	r2, [pc, #292]	; (8002000 <HAL_GPIO_Init+0x348>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d101      	bne.n	8001ee2 <HAL_GPIO_Init+0x22a>
 8001ede:	2306      	movs	r3, #6
 8001ee0:	e00c      	b.n	8001efc <HAL_GPIO_Init+0x244>
 8001ee2:	2307      	movs	r3, #7
 8001ee4:	e00a      	b.n	8001efc <HAL_GPIO_Init+0x244>
 8001ee6:	2305      	movs	r3, #5
 8001ee8:	e008      	b.n	8001efc <HAL_GPIO_Init+0x244>
 8001eea:	2304      	movs	r3, #4
 8001eec:	e006      	b.n	8001efc <HAL_GPIO_Init+0x244>
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e004      	b.n	8001efc <HAL_GPIO_Init+0x244>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e002      	b.n	8001efc <HAL_GPIO_Init+0x244>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <HAL_GPIO_Init+0x244>
 8001efa:	2300      	movs	r3, #0
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	f002 0203 	and.w	r2, r2, #3
 8001f02:	0092      	lsls	r2, r2, #2
 8001f04:	4093      	lsls	r3, r2
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f0c:	4936      	ldr	r1, [pc, #216]	; (8001fe8 <HAL_GPIO_Init+0x330>)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	089b      	lsrs	r3, r3, #2
 8001f12:	3302      	adds	r3, #2
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f1a:	4b3a      	ldr	r3, [pc, #232]	; (8002004 <HAL_GPIO_Init+0x34c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f3e:	4a31      	ldr	r2, [pc, #196]	; (8002004 <HAL_GPIO_Init+0x34c>)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f44:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <HAL_GPIO_Init+0x34c>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f68:	4a26      	ldr	r2, [pc, #152]	; (8002004 <HAL_GPIO_Init+0x34c>)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f6e:	4b25      	ldr	r3, [pc, #148]	; (8002004 <HAL_GPIO_Init+0x34c>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f92:	4a1c      	ldr	r2, [pc, #112]	; (8002004 <HAL_GPIO_Init+0x34c>)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f98:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_GPIO_Init+0x34c>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fbc:	4a11      	ldr	r2, [pc, #68]	; (8002004 <HAL_GPIO_Init+0x34c>)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f47f ae78 	bne.w	8001cc8 <HAL_GPIO_Init+0x10>
  }
}
 8001fd8:	bf00      	nop
 8001fda:	371c      	adds	r7, #28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40010000 	.word	0x40010000
 8001fec:	48000400 	.word	0x48000400
 8001ff0:	48000800 	.word	0x48000800
 8001ff4:	48000c00 	.word	0x48000c00
 8001ff8:	48001000 	.word	0x48001000
 8001ffc:	48001400 	.word	0x48001400
 8002000:	48001800 	.word	0x48001800
 8002004:	40010400 	.word	0x40010400

08002008 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	887b      	ldrh	r3, [r7, #2]
 800201a:	4013      	ands	r3, r2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d002      	beq.n	8002026 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002020:	2301      	movs	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	e001      	b.n	800202a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800202a:	7bfb      	ldrb	r3, [r7, #15]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
 8002044:	4613      	mov	r3, r2
 8002046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002048:	787b      	ldrb	r3, [r7, #1]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800204e:	887a      	ldrh	r2, [r7, #2]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002054:	e002      	b.n	800205c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002056:	887a      	ldrh	r2, [r7, #2]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800206a:	b08f      	sub	sp, #60	; 0x3c
 800206c:	af0a      	add	r7, sp, #40	; 0x28
 800206e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e054      	b.n	8002124 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d106      	bne.n	800209a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f007 fdc7 	bl	8009c28 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2203      	movs	r2, #3
 800209e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f005 f98d 	bl	80073d8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	687e      	ldr	r6, [r7, #4]
 80020c6:	466d      	mov	r5, sp
 80020c8:	f106 0410 	add.w	r4, r6, #16
 80020cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80020dc:	1d33      	adds	r3, r6, #4
 80020de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e0:	6838      	ldr	r0, [r7, #0]
 80020e2:	f005 f916 	bl	8007312 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2101      	movs	r1, #1
 80020ec:	4618      	mov	r0, r3
 80020ee:	f005 f984 	bl	80073fa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	687e      	ldr	r6, [r7, #4]
 80020fa:	466d      	mov	r5, sp
 80020fc:	f106 0410 	add.w	r4, r6, #16
 8002100:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002102:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002108:	e894 0003 	ldmia.w	r4, {r0, r1}
 800210c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002110:	1d33      	adds	r3, r6, #4
 8002112:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002114:	6838      	ldr	r0, [r7, #0]
 8002116:	f005 fa93 	bl	8007640 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800212c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800212c:	b590      	push	{r4, r7, lr}
 800212e:	b089      	sub	sp, #36	; 0x24
 8002130:	af04      	add	r7, sp, #16
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	4608      	mov	r0, r1
 8002136:	4611      	mov	r1, r2
 8002138:	461a      	mov	r2, r3
 800213a:	4603      	mov	r3, r0
 800213c:	70fb      	strb	r3, [r7, #3]
 800213e:	460b      	mov	r3, r1
 8002140:	70bb      	strb	r3, [r7, #2]
 8002142:	4613      	mov	r3, r2
 8002144:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_HCD_HC_Init+0x28>
 8002150:	2302      	movs	r3, #2
 8002152:	e07f      	b.n	8002254 <HAL_HCD_HC_Init+0x128>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800215c:	78fa      	ldrb	r2, [r7, #3]
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	440b      	add	r3, r1
 800216a:	333d      	adds	r3, #61	; 0x3d
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002170:	78fa      	ldrb	r2, [r7, #3]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	440b      	add	r3, r1
 800217e:	3338      	adds	r3, #56	; 0x38
 8002180:	787a      	ldrb	r2, [r7, #1]
 8002182:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	440b      	add	r3, r1
 8002192:	3340      	adds	r3, #64	; 0x40
 8002194:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002196:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	440b      	add	r3, r1
 80021a6:	3339      	adds	r3, #57	; 0x39
 80021a8:	78fa      	ldrb	r2, [r7, #3]
 80021aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80021ac:	78fa      	ldrb	r2, [r7, #3]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	440b      	add	r3, r1
 80021ba:	333f      	adds	r3, #63	; 0x3f
 80021bc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80021c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80021c2:	78fa      	ldrb	r2, [r7, #3]
 80021c4:	78bb      	ldrb	r3, [r7, #2]
 80021c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021ca:	b2d8      	uxtb	r0, r3
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	440b      	add	r3, r1
 80021d8:	333a      	adds	r3, #58	; 0x3a
 80021da:	4602      	mov	r2, r0
 80021dc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80021de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	da0a      	bge.n	80021fc <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80021e6:	78fa      	ldrb	r2, [r7, #3]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	440b      	add	r3, r1
 80021f4:	333b      	adds	r3, #59	; 0x3b
 80021f6:	2201      	movs	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]
 80021fa:	e009      	b.n	8002210 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	440b      	add	r3, r1
 800220a:	333b      	adds	r3, #59	; 0x3b
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002210:	78fa      	ldrb	r2, [r7, #3]
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	440b      	add	r3, r1
 800221e:	333c      	adds	r3, #60	; 0x3c
 8002220:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002224:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	787c      	ldrb	r4, [r7, #1]
 800222c:	78ba      	ldrb	r2, [r7, #2]
 800222e:	78f9      	ldrb	r1, [r7, #3]
 8002230:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002232:	9302      	str	r3, [sp, #8]
 8002234:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	4623      	mov	r3, r4
 8002242:	f005 fb41 	bl	80078c8 <USB_HC_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002252:	7bfb      	ldrb	r3, [r7, #15]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	bd90      	pop	{r4, r7, pc}

0800225c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_HCD_HC_Halt+0x1e>
 8002276:	2302      	movs	r3, #2
 8002278:	e00f      	b.n	800229a <HAL_HCD_HC_Halt+0x3e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	78fa      	ldrb	r2, [r7, #3]
 8002288:	4611      	mov	r1, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f005 fd1f 	bl	8007cce <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002298:	7bfb      	ldrb	r3, [r7, #15]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	4608      	mov	r0, r1
 80022ae:	4611      	mov	r1, r2
 80022b0:	461a      	mov	r2, r3
 80022b2:	4603      	mov	r3, r0
 80022b4:	70fb      	strb	r3, [r7, #3]
 80022b6:	460b      	mov	r3, r1
 80022b8:	70bb      	strb	r3, [r7, #2]
 80022ba:	4613      	mov	r3, r2
 80022bc:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80022be:	78fa      	ldrb	r2, [r7, #3]
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	440b      	add	r3, r1
 80022cc:	333b      	adds	r3, #59	; 0x3b
 80022ce:	78ba      	ldrb	r2, [r7, #2]
 80022d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80022d2:	78fa      	ldrb	r2, [r7, #3]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	440b      	add	r3, r1
 80022e0:	333f      	adds	r3, #63	; 0x3f
 80022e2:	787a      	ldrb	r2, [r7, #1]
 80022e4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80022e6:	7c3b      	ldrb	r3, [r7, #16]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10a      	bne.n	8002302 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	440b      	add	r3, r1
 80022fa:	3342      	adds	r3, #66	; 0x42
 80022fc:	2203      	movs	r2, #3
 80022fe:	701a      	strb	r2, [r3, #0]
 8002300:	e009      	b.n	8002316 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002302:	78fa      	ldrb	r2, [r7, #3]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	440b      	add	r3, r1
 8002310:	3342      	adds	r3, #66	; 0x42
 8002312:	2202      	movs	r2, #2
 8002314:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002316:	787b      	ldrb	r3, [r7, #1]
 8002318:	2b03      	cmp	r3, #3
 800231a:	f200 80d6 	bhi.w	80024ca <HAL_HCD_HC_SubmitRequest+0x226>
 800231e:	a201      	add	r2, pc, #4	; (adr r2, 8002324 <HAL_HCD_HC_SubmitRequest+0x80>)
 8002320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002324:	08002335 	.word	0x08002335
 8002328:	080024b5 	.word	0x080024b5
 800232c:	080023a1 	.word	0x080023a1
 8002330:	0800242b 	.word	0x0800242b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002334:	7c3b      	ldrb	r3, [r7, #16]
 8002336:	2b01      	cmp	r3, #1
 8002338:	f040 80c9 	bne.w	80024ce <HAL_HCD_HC_SubmitRequest+0x22a>
 800233c:	78bb      	ldrb	r3, [r7, #2]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f040 80c5 	bne.w	80024ce <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8002344:	8b3b      	ldrh	r3, [r7, #24]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	440b      	add	r3, r1
 8002358:	3351      	adds	r3, #81	; 0x51
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	440b      	add	r3, r1
 800236c:	3351      	adds	r3, #81	; 0x51
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10a      	bne.n	800238a <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	440b      	add	r3, r1
 8002382:	3342      	adds	r3, #66	; 0x42
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002388:	e0a1      	b.n	80024ce <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	440b      	add	r3, r1
 8002398:	3342      	adds	r3, #66	; 0x42
 800239a:	2202      	movs	r2, #2
 800239c:	701a      	strb	r2, [r3, #0]
      break;
 800239e:	e096      	b.n	80024ce <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80023a0:	78bb      	ldrb	r3, [r7, #2]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d120      	bne.n	80023e8 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	3351      	adds	r3, #81	; 0x51
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10a      	bne.n	80023d2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023bc:	78fa      	ldrb	r2, [r7, #3]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	440b      	add	r3, r1
 80023ca:	3342      	adds	r3, #66	; 0x42
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80023d0:	e07e      	b.n	80024d0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023d2:	78fa      	ldrb	r2, [r7, #3]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	440b      	add	r3, r1
 80023e0:	3342      	adds	r3, #66	; 0x42
 80023e2:	2202      	movs	r2, #2
 80023e4:	701a      	strb	r2, [r3, #0]
      break;
 80023e6:	e073      	b.n	80024d0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	440b      	add	r3, r1
 80023f6:	3350      	adds	r3, #80	; 0x50
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10a      	bne.n	8002414 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	440b      	add	r3, r1
 800240c:	3342      	adds	r3, #66	; 0x42
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
      break;
 8002412:	e05d      	b.n	80024d0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	440b      	add	r3, r1
 8002422:	3342      	adds	r3, #66	; 0x42
 8002424:	2202      	movs	r2, #2
 8002426:	701a      	strb	r2, [r3, #0]
      break;
 8002428:	e052      	b.n	80024d0 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800242a:	78bb      	ldrb	r3, [r7, #2]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d120      	bne.n	8002472 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	440b      	add	r3, r1
 800243e:	3351      	adds	r3, #81	; 0x51
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10a      	bne.n	800245c <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002446:	78fa      	ldrb	r2, [r7, #3]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	440b      	add	r3, r1
 8002454:	3342      	adds	r3, #66	; 0x42
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800245a:	e039      	b.n	80024d0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	440b      	add	r3, r1
 800246a:	3342      	adds	r3, #66	; 0x42
 800246c:	2202      	movs	r2, #2
 800246e:	701a      	strb	r2, [r3, #0]
      break;
 8002470:	e02e      	b.n	80024d0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002472:	78fa      	ldrb	r2, [r7, #3]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	440b      	add	r3, r1
 8002480:	3350      	adds	r3, #80	; 0x50
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10a      	bne.n	800249e <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	440b      	add	r3, r1
 8002496:	3342      	adds	r3, #66	; 0x42
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
      break;
 800249c:	e018      	b.n	80024d0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	440b      	add	r3, r1
 80024ac:	3342      	adds	r3, #66	; 0x42
 80024ae:	2202      	movs	r2, #2
 80024b0:	701a      	strb	r2, [r3, #0]
      break;
 80024b2:	e00d      	b.n	80024d0 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	440b      	add	r3, r1
 80024c2:	3342      	adds	r3, #66	; 0x42
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
      break;
 80024c8:	e002      	b.n	80024d0 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80024ca:	bf00      	nop
 80024cc:	e000      	b.n	80024d0 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80024ce:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	440b      	add	r3, r1
 80024de:	3344      	adds	r3, #68	; 0x44
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	8b39      	ldrh	r1, [r7, #24]
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4403      	add	r3, r0
 80024f4:	3348      	adds	r3, #72	; 0x48
 80024f6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	440b      	add	r3, r1
 8002506:	335c      	adds	r3, #92	; 0x5c
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800250c:	78fa      	ldrb	r2, [r7, #3]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	440b      	add	r3, r1
 800251a:	334c      	adds	r3, #76	; 0x4c
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	440b      	add	r3, r1
 800252e:	3339      	adds	r3, #57	; 0x39
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002534:	78fa      	ldrb	r2, [r7, #3]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	440b      	add	r3, r1
 8002542:	335d      	adds	r3, #93	; 0x5d
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	3338      	adds	r3, #56	; 0x38
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	4413      	add	r3, r2
 800255c:	4619      	mov	r1, r3
 800255e:	f005 faa5 	bl	8007aac <USB_HC_StartXfer>
 8002562:	4603      	mov	r3, r0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f005 f819 	bl	80075ba <USB_GetMode>
 8002588:	4603      	mov	r3, r0
 800258a:	2b01      	cmp	r3, #1
 800258c:	f040 80f1 	bne.w	8002772 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f004 fffd 	bl	8007594 <USB_ReadInterrupts>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80e7 	beq.w	8002770 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f004 fff4 	bl	8007594 <USB_ReadInterrupts>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025b6:	d104      	bne.n	80025c2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80025c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f004 ffe4 	bl	8007594 <USB_ReadInterrupts>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025d6:	d104      	bne.n	80025e2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f004 ffd4 	bl	8007594 <USB_ReadInterrupts>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025f6:	d104      	bne.n	8002602 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002600:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f004 ffc4 	bl	8007594 <USB_ReadInterrupts>
 800260c:	4603      	mov	r3, r0
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b02      	cmp	r3, #2
 8002614:	d103      	bne.n	800261e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2202      	movs	r2, #2
 800261c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f004 ffb6 	bl	8007594 <USB_ReadInterrupts>
 8002628:	4603      	mov	r3, r0
 800262a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800262e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002632:	d117      	bne.n	8002664 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002642:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002646:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f007 fb6f 	bl	8009d2c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2101      	movs	r1, #1
 8002654:	4618      	mov	r0, r3
 8002656:	f005 f871 	bl	800773c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002662:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f004 ff93 	bl	8007594 <USB_ReadInterrupts>
 800266e:	4603      	mov	r3, r0
 8002670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002678:	d102      	bne.n	8002680 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f001 f884 	bl	8003788 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f004 ff85 	bl	8007594 <USB_ReadInterrupts>
 800268a:	4603      	mov	r3, r0
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b08      	cmp	r3, #8
 8002692:	d106      	bne.n	80026a2 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f007 fb2d 	bl	8009cf4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2208      	movs	r2, #8
 80026a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f004 ff74 	bl	8007594 <USB_ReadInterrupts>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026b6:	d138      	bne.n	800272a <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f005 faf5 	bl	8007cac <USB_HC_ReadInterrupt>
 80026c2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	e025      	b.n	8002716 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	fa22 f303 	lsr.w	r3, r2, r3
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d018      	beq.n	8002710 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026f4:	d106      	bne.n	8002704 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	4619      	mov	r1, r3
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f8cf 	bl	80028a0 <HCD_HC_IN_IRQHandler>
 8002702:	e005      	b.n	8002710 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	4619      	mov	r1, r3
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fc3b 	bl	8002f86 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	3301      	adds	r3, #1
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	429a      	cmp	r2, r3
 800271e:	d3d4      	bcc.n	80026ca <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002728:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f004 ff30 	bl	8007594 <USB_ReadInterrupts>
 8002734:	4603      	mov	r3, r0
 8002736:	f003 0310 	and.w	r3, r3, #16
 800273a:	2b10      	cmp	r3, #16
 800273c:	d101      	bne.n	8002742 <HAL_HCD_IRQHandler+0x1d6>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <HAL_HCD_IRQHandler+0x1d8>
 8002742:	2300      	movs	r3, #0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d014      	beq.n	8002772 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699a      	ldr	r2, [r3, #24]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0210 	bic.w	r2, r2, #16
 8002756:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 ff69 	bl	8003630 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	699a      	ldr	r2, [r3, #24]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 0210 	orr.w	r2, r2, #16
 800276c:	619a      	str	r2, [r3, #24]
 800276e:	e000      	b.n	8002772 <HAL_HCD_IRQHandler+0x206>
      return;
 8002770:	bf00      	nop
    }
  }
}
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_HCD_Start+0x16>
 800278a:	2302      	movs	r3, #2
 800278c:	e013      	b.n	80027b6 <HAL_HCD_Start+0x3e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f004 fe0b 	bl	80073b6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2101      	movs	r1, #1
 80027a6:	4618      	mov	r0, r3
 80027a8:	f005 f82c 	bl	8007804 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_HCD_Stop+0x16>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e00d      	b.n	80027f0 <HAL_HCD_Stop+0x32>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f005 fb73 	bl	8007ecc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f004 ffd3 	bl	80077b0 <USB_ResetPort>
 800280a:	4603      	mov	r3, r0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002820:	78fa      	ldrb	r2, [r7, #3]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	440b      	add	r3, r1
 800282e:	335c      	adds	r3, #92	; 0x5c
 8002830:	781b      	ldrb	r3, [r3, #0]
}
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	460b      	mov	r3, r1
 8002848:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800284a:	78fa      	ldrb	r2, [r7, #3]
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	440b      	add	r3, r1
 8002858:	334c      	adds	r3, #76	; 0x4c
 800285a:	681b      	ldr	r3, [r3, #0]
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f005 f815 	bl	80078a4 <USB_GetCurrentFrame>
 800287a:	4603      	mov	r3, r0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f004 fff0 	bl	8007876 <USB_GetHostSpeed>
 8002896:	4603      	mov	r3, r0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80028b6:	78fb      	ldrb	r3, [r7, #3]
 80028b8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d119      	bne.n	8002904 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028dc:	461a      	mov	r2, r3
 80028de:	2304      	movs	r3, #4
 80028e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	0151      	lsls	r1, r2, #5
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	440a      	add	r2, r1
 80028f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028fc:	f043 0302 	orr.w	r3, r3, #2
 8002900:	60d3      	str	r3, [r2, #12]
 8002902:	e095      	b.n	8002a30 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4413      	add	r3, r2
 800290c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b20      	cmp	r3, #32
 8002918:	d109      	bne.n	800292e <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4413      	add	r3, r2
 8002922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002926:	461a      	mov	r2, r3
 8002928:	2320      	movs	r3, #32
 800292a:	6093      	str	r3, [r2, #8]
 800292c:	e080      	b.n	8002a30 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4413      	add	r3, r2
 8002936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b08      	cmp	r3, #8
 8002942:	d134      	bne.n	80029ae <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4413      	add	r3, r2
 800294c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	0151      	lsls	r1, r2, #5
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	440a      	add	r2, r1
 800295a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800295e:	f043 0302 	orr.w	r3, r3, #2
 8002962:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	440b      	add	r3, r1
 8002972:	335d      	adds	r3, #93	; 0x5d
 8002974:	2205      	movs	r2, #5
 8002976:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4413      	add	r3, r2
 8002980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002984:	461a      	mov	r2, r3
 8002986:	2310      	movs	r3, #16
 8002988:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4413      	add	r3, r2
 8002992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002996:	461a      	mov	r2, r3
 8002998:	2308      	movs	r3, #8
 800299a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f005 f991 	bl	8007cce <USB_HC_Halt>
 80029ac:	e040      	b.n	8002a30 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c4:	d134      	bne.n	8002a30 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	0151      	lsls	r1, r2, #5
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	440a      	add	r2, r1
 80029dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029e0:	f043 0302 	orr.w	r3, r3, #2
 80029e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f005 f96c 	bl	8007cce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a02:	461a      	mov	r2, r3
 8002a04:	2310      	movs	r3, #16
 8002a06:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	440b      	add	r3, r1
 8002a16:	335d      	adds	r3, #93	; 0x5d
 8002a18:	2208      	movs	r2, #8
 8002a1a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a28:	461a      	mov	r2, r3
 8002a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a2e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a46:	d122      	bne.n	8002a8e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	0151      	lsls	r1, r2, #5
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	440a      	add	r2, r1
 8002a5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a62:	f043 0302 	orr.w	r3, r3, #2
 8002a66:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	4611      	mov	r1, r2
 8002a72:	4618      	mov	r0, r3
 8002a74:	f005 f92b 	bl	8007cce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a84:	461a      	mov	r2, r3
 8002a86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a8a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002a8c:	e277      	b.n	8002f7e <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	f040 80a1 	bne.w	8002be8 <HCD_HC_IN_IRQHandler+0x348>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	440b      	add	r3, r1
 8002ab4:	335d      	adds	r3, #93	; 0x5d
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	440b      	add	r3, r1
 8002ac8:	3358      	adds	r3, #88	; 0x58
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ada:	461a      	mov	r2, r3
 8002adc:	2301      	movs	r3, #1
 8002ade:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	440b      	add	r3, r1
 8002aee:	333f      	adds	r3, #63	; 0x3f
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HCD_HC_IN_IRQHandler+0x26c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	333f      	adds	r3, #63	; 0x3f
 8002b06:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d121      	bne.n	8002b50 <HCD_HC_IN_IRQHandler+0x2b0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	0151      	lsls	r1, r2, #5
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	440a      	add	r2, r1
 8002b22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b26:	f043 0302 	orr.w	r3, r3, #2
 8002b2a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f005 f8c9 	bl	8007cce <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2310      	movs	r3, #16
 8002b4c:	6093      	str	r3, [r2, #8]
 8002b4e:	e034      	b.n	8002bba <HCD_HC_IN_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	440b      	add	r3, r1
 8002b5e:	333f      	adds	r3, #63	; 0x3f
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d129      	bne.n	8002bba <HCD_HC_IN_IRQHandler+0x31a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	0151      	lsls	r1, r2, #5
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	440a      	add	r2, r1
 8002b7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b84:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	440b      	add	r3, r1
 8002b94:	335c      	adds	r3, #92	; 0x5c
 8002b96:	2201      	movs	r2, #1
 8002b98:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	b2d8      	uxtb	r0, r3
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	335c      	adds	r3, #92	; 0x5c
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4601      	mov	r1, r0
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f007 f8c7 	bl	8009d48 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	440b      	add	r3, r1
 8002bc8:	3350      	adds	r3, #80	; 0x50
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	f083 0301 	eor.w	r3, r3, #1
 8002bd0:	b2d8      	uxtb	r0, r3
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	440b      	add	r3, r1
 8002be0:	3350      	adds	r3, #80	; 0x50
 8002be2:	4602      	mov	r2, r0
 8002be4:	701a      	strb	r2, [r3, #0]
}
 8002be6:	e1ca      	b.n	8002f7e <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	f040 80f1 	bne.w	8002de2 <HCD_HC_IN_IRQHandler+0x542>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	015a      	lsls	r2, r3, #5
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	0151      	lsls	r1, r2, #5
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	440a      	add	r2, r1
 8002c16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c1a:	f023 0302 	bic.w	r3, r3, #2
 8002c1e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	335d      	adds	r3, #93	; 0x5d
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d10a      	bne.n	8002c4c <HCD_HC_IN_IRQHandler+0x3ac>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	440b      	add	r3, r1
 8002c44:	335c      	adds	r3, #92	; 0x5c
 8002c46:	2201      	movs	r2, #1
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	e0b0      	b.n	8002dae <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	440b      	add	r3, r1
 8002c5a:	335d      	adds	r3, #93	; 0x5d
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b05      	cmp	r3, #5
 8002c60:	d10a      	bne.n	8002c78 <HCD_HC_IN_IRQHandler+0x3d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	440b      	add	r3, r1
 8002c70:	335c      	adds	r3, #92	; 0x5c
 8002c72:	2205      	movs	r2, #5
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	e09a      	b.n	8002dae <HCD_HC_IN_IRQHandler+0x50e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	440b      	add	r3, r1
 8002c86:	335d      	adds	r3, #93	; 0x5d
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b06      	cmp	r3, #6
 8002c8c:	d00a      	beq.n	8002ca4 <HCD_HC_IN_IRQHandler+0x404>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	440b      	add	r3, r1
 8002c9c:	335d      	adds	r3, #93	; 0x5d
 8002c9e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d156      	bne.n	8002d52 <HCD_HC_IN_IRQHandler+0x4b2>
      hhcd->hc[ch_num].ErrCnt++;
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	3358      	adds	r3, #88	; 0x58
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	1c59      	adds	r1, r3, #1
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4403      	add	r3, r0
 8002cc6:	3358      	adds	r3, #88	; 0x58
 8002cc8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	440b      	add	r3, r1
 8002cd8:	3358      	adds	r3, #88	; 0x58
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d914      	bls.n	8002d0a <HCD_HC_IN_IRQHandler+0x46a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	440b      	add	r3, r1
 8002cee:	3358      	adds	r3, #88	; 0x58
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	440b      	add	r3, r1
 8002d02:	335c      	adds	r3, #92	; 0x5c
 8002d04:	2204      	movs	r2, #4
 8002d06:	701a      	strb	r2, [r3, #0]
 8002d08:	e009      	b.n	8002d1e <HCD_HC_IN_IRQHandler+0x47e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	440b      	add	r3, r1
 8002d18:	335c      	adds	r3, #92	; 0x5c
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d34:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d3c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	e02d      	b.n	8002dae <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	440b      	add	r3, r1
 8002d60:	335d      	adds	r3, #93	; 0x5d
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d122      	bne.n	8002dae <HCD_HC_IN_IRQHandler+0x50e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	440b      	add	r3, r1
 8002d76:	335c      	adds	r3, #92	; 0x5c
 8002d78:	2202      	movs	r2, #2
 8002d7a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d92:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d9a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	015a      	lsls	r2, r3, #5
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da8:	461a      	mov	r2, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dba:	461a      	mov	r2, r3
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	b2d8      	uxtb	r0, r3
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	440b      	add	r3, r1
 8002dd2:	335c      	adds	r3, #92	; 0x5c
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	4601      	mov	r1, r0
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f006 ffb4 	bl	8009d48 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002de0:	e0cd      	b.n	8002f7e <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df4:	2b80      	cmp	r3, #128	; 0x80
 8002df6:	d13e      	bne.n	8002e76 <HCD_HC_IN_IRQHandler+0x5d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	0151      	lsls	r1, r2, #5
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	440a      	add	r2, r1
 8002e0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e12:	f043 0302 	orr.w	r3, r3, #2
 8002e16:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	440b      	add	r3, r1
 8002e26:	3358      	adds	r3, #88	; 0x58
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	1c59      	adds	r1, r3, #1
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4403      	add	r3, r0
 8002e3a:	3358      	adds	r3, #88	; 0x58
 8002e3c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	440b      	add	r3, r1
 8002e4c:	335d      	adds	r3, #93	; 0x5d
 8002e4e:	2206      	movs	r2, #6
 8002e50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f004 ff36 	bl	8007cce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	015a      	lsls	r2, r3, #5
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6e:	461a      	mov	r2, r3
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	6093      	str	r3, [r2, #8]
}
 8002e74:	e083      	b.n	8002f7e <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 0310 	and.w	r3, r3, #16
 8002e88:	2b10      	cmp	r3, #16
 8002e8a:	d178      	bne.n	8002f7e <HCD_HC_IN_IRQHandler+0x6de>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	440b      	add	r3, r1
 8002e9a:	333f      	adds	r3, #63	; 0x3f
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d122      	bne.n	8002ee8 <HCD_HC_IN_IRQHandler+0x648>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	440b      	add	r3, r1
 8002eb0:	3358      	adds	r3, #88	; 0x58
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	0151      	lsls	r1, r2, #5
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	440a      	add	r2, r1
 8002ecc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ed0:	f043 0302 	orr.w	r3, r3, #2
 8002ed4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f004 fef4 	bl	8007cce <USB_HC_Halt>
 8002ee6:	e041      	b.n	8002f6c <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	4613      	mov	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	440b      	add	r3, r1
 8002ef6:	333f      	adds	r3, #63	; 0x3f
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <HCD_HC_IN_IRQHandler+0x674>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	440b      	add	r3, r1
 8002f0c:	333f      	adds	r3, #63	; 0x3f
 8002f0e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d12b      	bne.n	8002f6c <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	440b      	add	r3, r1
 8002f22:	3358      	adds	r3, #88	; 0x58
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	440b      	add	r3, r1
 8002f36:	335d      	adds	r3, #93	; 0x5d
 8002f38:	2203      	movs	r2, #3
 8002f3a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	0151      	lsls	r1, r2, #5
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	440a      	add	r2, r1
 8002f52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f56:	f043 0302 	orr.w	r3, r3, #2
 8002f5a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f004 feb1 	bl	8007cce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2310      	movs	r3, #16
 8002f7c:	6093      	str	r3, [r2, #8]
}
 8002f7e:	bf00      	nop
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b086      	sub	sp, #24
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002f9c:	78fb      	ldrb	r3, [r7, #3]
 8002f9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d119      	bne.n	8002fea <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	2304      	movs	r3, #4
 8002fc6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	0151      	lsls	r1, r2, #5
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	440a      	add	r2, r1
 8002fde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fe2:	f043 0302 	orr.w	r3, r3, #2
 8002fe6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002fe8:	e31e      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d141      	bne.n	8003084 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4413      	add	r3, r2
 8003008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300c:	461a      	mov	r2, r3
 800300e:	2320      	movs	r3, #32
 8003010:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	440b      	add	r3, r1
 8003020:	333d      	adds	r3, #61	; 0x3d
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b01      	cmp	r3, #1
 8003026:	f040 82ff 	bne.w	8003628 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	440b      	add	r3, r1
 8003038:	333d      	adds	r3, #61	; 0x3d
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	440b      	add	r3, r1
 800304c:	335c      	adds	r3, #92	; 0x5c
 800304e:	2202      	movs	r2, #2
 8003050:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4413      	add	r3, r2
 800305a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	0151      	lsls	r1, r2, #5
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	440a      	add	r2, r1
 8003068:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800306c:	f043 0302 	orr.w	r3, r3, #2
 8003070:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f004 fe26 	bl	8007cce <USB_HC_Halt>
}
 8003082:	e2d1      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4413      	add	r3, r2
 800308c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	2b40      	cmp	r3, #64	; 0x40
 8003098:	d13f      	bne.n	800311a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	440b      	add	r3, r1
 80030a8:	335d      	adds	r3, #93	; 0x5d
 80030aa:	2204      	movs	r2, #4
 80030ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	440b      	add	r3, r1
 80030bc:	333d      	adds	r3, #61	; 0x3d
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	440b      	add	r3, r1
 80030d0:	3358      	adds	r3, #88	; 0x58
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	0151      	lsls	r1, r2, #5
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	440a      	add	r2, r1
 80030ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030f0:	f043 0302 	orr.w	r3, r3, #2
 80030f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	4611      	mov	r1, r2
 8003100:	4618      	mov	r0, r3
 8003102:	f004 fde4 	bl	8007cce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4413      	add	r3, r2
 800310e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003112:	461a      	mov	r2, r3
 8003114:	2340      	movs	r3, #64	; 0x40
 8003116:	6093      	str	r3, [r2, #8]
}
 8003118:	e286      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	4413      	add	r3, r2
 8003122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800312c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003130:	d122      	bne.n	8003178 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4413      	add	r3, r2
 800313a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	0151      	lsls	r1, r2, #5
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	440a      	add	r2, r1
 8003148:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800314c:	f043 0302 	orr.w	r3, r3, #2
 8003150:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	4611      	mov	r1, r2
 800315c:	4618      	mov	r0, r3
 800315e:	f004 fdb6 	bl	8007cce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4413      	add	r3, r2
 800316a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316e:	461a      	mov	r2, r3
 8003170:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003174:	6093      	str	r3, [r2, #8]
}
 8003176:	e257      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4413      	add	r3, r2
 8003180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b01      	cmp	r3, #1
 800318c:	d135      	bne.n	80031fa <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	440b      	add	r3, r1
 800319c:	3358      	adds	r3, #88	; 0x58
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	0151      	lsls	r1, r2, #5
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	440a      	add	r2, r1
 80031b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031bc:	f043 0302 	orr.w	r3, r3, #2
 80031c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	4611      	mov	r1, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f004 fd7e 	bl	8007cce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031de:	461a      	mov	r2, r3
 80031e0:	2301      	movs	r3, #1
 80031e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	440b      	add	r3, r1
 80031f2:	335d      	adds	r3, #93	; 0x5d
 80031f4:	2201      	movs	r2, #1
 80031f6:	701a      	strb	r2, [r3, #0]
}
 80031f8:	e216      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4413      	add	r3, r2
 8003202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b08      	cmp	r3, #8
 800320e:	d12b      	bne.n	8003268 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4413      	add	r3, r2
 8003218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321c:	461a      	mov	r2, r3
 800321e:	2308      	movs	r3, #8
 8003220:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4413      	add	r3, r2
 800322a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	0151      	lsls	r1, r2, #5
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	440a      	add	r2, r1
 8003238:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800323c:	f043 0302 	orr.w	r3, r3, #2
 8003240:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f004 fd3e 	bl	8007cce <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	440b      	add	r3, r1
 8003260:	335d      	adds	r3, #93	; 0x5d
 8003262:	2205      	movs	r2, #5
 8003264:	701a      	strb	r2, [r3, #0]
}
 8003266:	e1df      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4413      	add	r3, r2
 8003270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 0310 	and.w	r3, r3, #16
 800327a:	2b10      	cmp	r3, #16
 800327c:	d135      	bne.n	80032ea <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	440b      	add	r3, r1
 800328c:	3358      	adds	r3, #88	; 0x58
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	440b      	add	r3, r1
 80032a0:	335d      	adds	r3, #93	; 0x5d
 80032a2:	2203      	movs	r2, #3
 80032a4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	015a      	lsls	r2, r3, #5
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4413      	add	r3, r2
 80032ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	0151      	lsls	r1, r2, #5
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	440a      	add	r2, r1
 80032bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032c0:	f043 0302 	orr.w	r3, r3, #2
 80032c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	4611      	mov	r1, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f004 fcfc 	bl	8007cce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	015a      	lsls	r2, r3, #5
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4413      	add	r3, r2
 80032de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e2:	461a      	mov	r2, r3
 80032e4:	2310      	movs	r3, #16
 80032e6:	6093      	str	r3, [r2, #8]
}
 80032e8:	e19e      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fc:	2b80      	cmp	r3, #128	; 0x80
 80032fe:	d12b      	bne.n	8003358 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	4413      	add	r3, r2
 8003308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	0151      	lsls	r1, r2, #5
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	440a      	add	r2, r1
 8003316:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800331a:	f043 0302 	orr.w	r3, r3, #2
 800331e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	4611      	mov	r1, r2
 800332a:	4618      	mov	r0, r3
 800332c:	f004 fccf 	bl	8007cce <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	440b      	add	r3, r1
 800333e:	335d      	adds	r3, #93	; 0x5d
 8003340:	2206      	movs	r2, #6
 8003342:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	4413      	add	r3, r2
 800334c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003350:	461a      	mov	r2, r3
 8003352:	2380      	movs	r3, #128	; 0x80
 8003354:	6093      	str	r3, [r2, #8]
}
 8003356:	e167      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4413      	add	r3, r2
 8003360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336e:	d135      	bne.n	80033dc <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	4413      	add	r3, r2
 8003378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	0151      	lsls	r1, r2, #5
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	440a      	add	r2, r1
 8003386:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800338a:	f043 0302 	orr.w	r3, r3, #2
 800338e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	4611      	mov	r1, r2
 800339a:	4618      	mov	r0, r3
 800339c:	f004 fc97 	bl	8007cce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ac:	461a      	mov	r2, r3
 80033ae:	2310      	movs	r3, #16
 80033b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033be:	461a      	mov	r2, r3
 80033c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	440b      	add	r3, r1
 80033d4:	335d      	adds	r3, #93	; 0x5d
 80033d6:	2208      	movs	r2, #8
 80033d8:	701a      	strb	r2, [r3, #0]
}
 80033da:	e125      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	f040 811a 	bne.w	8003628 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	0151      	lsls	r1, r2, #5
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	440a      	add	r2, r1
 800340a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800340e:	f023 0302 	bic.w	r3, r3, #2
 8003412:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	440b      	add	r3, r1
 8003422:	335d      	adds	r3, #93	; 0x5d
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d137      	bne.n	800349a <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	440b      	add	r3, r1
 8003438:	335c      	adds	r3, #92	; 0x5c
 800343a:	2201      	movs	r2, #1
 800343c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	440b      	add	r3, r1
 800344c:	333f      	adds	r3, #63	; 0x3f
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b02      	cmp	r3, #2
 8003452:	d00b      	beq.n	800346c <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	440b      	add	r3, r1
 8003462:	333f      	adds	r3, #63	; 0x3f
 8003464:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003466:	2b03      	cmp	r3, #3
 8003468:	f040 80c5 	bne.w	80035f6 <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	440b      	add	r3, r1
 800347a:	3351      	adds	r3, #81	; 0x51
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	f083 0301 	eor.w	r3, r3, #1
 8003482:	b2d8      	uxtb	r0, r3
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	440b      	add	r3, r1
 8003492:	3351      	adds	r3, #81	; 0x51
 8003494:	4602      	mov	r2, r0
 8003496:	701a      	strb	r2, [r3, #0]
 8003498:	e0ad      	b.n	80035f6 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4613      	mov	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	440b      	add	r3, r1
 80034a8:	335d      	adds	r3, #93	; 0x5d
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d10a      	bne.n	80034c6 <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	440b      	add	r3, r1
 80034be:	335c      	adds	r3, #92	; 0x5c
 80034c0:	2202      	movs	r2, #2
 80034c2:	701a      	strb	r2, [r3, #0]
 80034c4:	e097      	b.n	80035f6 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	4613      	mov	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	440b      	add	r3, r1
 80034d4:	335d      	adds	r3, #93	; 0x5d
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d10a      	bne.n	80034f2 <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	440b      	add	r3, r1
 80034ea:	335c      	adds	r3, #92	; 0x5c
 80034ec:	2202      	movs	r2, #2
 80034ee:	701a      	strb	r2, [r3, #0]
 80034f0:	e081      	b.n	80035f6 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	440b      	add	r3, r1
 8003500:	335d      	adds	r3, #93	; 0x5d
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b05      	cmp	r3, #5
 8003506:	d10a      	bne.n	800351e <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	440b      	add	r3, r1
 8003516:	335c      	adds	r3, #92	; 0x5c
 8003518:	2205      	movs	r2, #5
 800351a:	701a      	strb	r2, [r3, #0]
 800351c:	e06b      	b.n	80035f6 <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	440b      	add	r3, r1
 800352c:	335d      	adds	r3, #93	; 0x5d
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b06      	cmp	r3, #6
 8003532:	d00a      	beq.n	800354a <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	440b      	add	r3, r1
 8003542:	335d      	adds	r3, #93	; 0x5d
 8003544:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003546:	2b08      	cmp	r3, #8
 8003548:	d155      	bne.n	80035f6 <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	440b      	add	r3, r1
 8003558:	3358      	adds	r3, #88	; 0x58
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	1c59      	adds	r1, r3, #1
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4403      	add	r3, r0
 800356c:	3358      	adds	r3, #88	; 0x58
 800356e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	440b      	add	r3, r1
 800357e:	3358      	adds	r3, #88	; 0x58
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b03      	cmp	r3, #3
 8003584:	d914      	bls.n	80035b0 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	440b      	add	r3, r1
 8003594:	3358      	adds	r3, #88	; 0x58
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4613      	mov	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	440b      	add	r3, r1
 80035a8:	335c      	adds	r3, #92	; 0x5c
 80035aa:	2204      	movs	r2, #4
 80035ac:	701a      	strb	r2, [r3, #0]
 80035ae:	e009      	b.n	80035c4 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	440b      	add	r3, r1
 80035be:	335c      	adds	r3, #92	; 0x5c
 80035c0:	2202      	movs	r2, #2
 80035c2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035da:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035e2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f0:	461a      	mov	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003602:	461a      	mov	r2, r3
 8003604:	2302      	movs	r3, #2
 8003606:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	b2d8      	uxtb	r0, r3
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	440b      	add	r3, r1
 800361a:	335c      	adds	r3, #92	; 0x5c
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	4601      	mov	r1, r0
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f006 fb90 	bl	8009d48 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003628:	bf00      	nop
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b08a      	sub	sp, #40	; 0x28
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	0c5b      	lsrs	r3, r3, #17
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	091b      	lsrs	r3, r3, #4
 8003660:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003664:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d003      	beq.n	8003674 <HCD_RXQLVL_IRQHandler+0x44>
 800366c:	2b05      	cmp	r3, #5
 800366e:	f000 8082 	beq.w	8003776 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003672:	e083      	b.n	800377c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d07f      	beq.n	800377a <HCD_RXQLVL_IRQHandler+0x14a>
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	440b      	add	r3, r1
 8003688:	3344      	adds	r3, #68	; 0x44
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d074      	beq.n	800377a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	440b      	add	r3, r1
 80036a2:	3344      	adds	r3, #68	; 0x44
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	b292      	uxth	r2, r2
 80036aa:	4619      	mov	r1, r3
 80036ac:	f003 ff49 	bl	8007542 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	440b      	add	r3, r1
 80036be:	3344      	adds	r3, #68	; 0x44
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	18d1      	adds	r1, r2, r3
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	4403      	add	r3, r0
 80036d4:	3344      	adds	r3, #68	; 0x44
 80036d6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	440b      	add	r3, r1
 80036e6:	334c      	adds	r3, #76	; 0x4c
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	18d1      	adds	r1, r2, r3
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	4403      	add	r3, r0
 80036fc:	334c      	adds	r3, #76	; 0x4c
 80036fe:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	4413      	add	r3, r2
 8003708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <HCD_RXQLVL_IRQHandler+0x154>)
 8003710:	4013      	ands	r3, r2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d031      	beq.n	800377a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	4413      	add	r3, r2
 800371e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800372c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003734:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	4413      	add	r3, r2
 800373e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003742:	461a      	mov	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	440b      	add	r3, r1
 8003756:	3350      	adds	r3, #80	; 0x50
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	f083 0301 	eor.w	r3, r3, #1
 800375e:	b2d8      	uxtb	r0, r3
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	440b      	add	r3, r1
 800376e:	3350      	adds	r3, #80	; 0x50
 8003770:	4602      	mov	r2, r0
 8003772:	701a      	strb	r2, [r3, #0]
      break;
 8003774:	e001      	b.n	800377a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003776:	bf00      	nop
 8003778:	e000      	b.n	800377c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800377a:	bf00      	nop
  }
}
 800377c:	bf00      	nop
 800377e:	3728      	adds	r7, #40	; 0x28
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	1ff80000 	.word	0x1ff80000

08003788 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80037b4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d113      	bne.n	80037e8 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d10a      	bne.n	80037e0 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	699a      	ldr	r2, [r3, #24]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80037d8:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f006 fa98 	bl	8009d10 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f043 0302 	orr.w	r3, r3, #2
 80037e6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d147      	bne.n	8003882 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f043 0308 	orr.w	r3, r3, #8
 80037f8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b04      	cmp	r3, #4
 8003802:	d129      	bne.n	8003858 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	2b02      	cmp	r3, #2
 800380a:	d113      	bne.n	8003834 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003812:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003816:	d106      	bne.n	8003826 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2102      	movs	r1, #2
 800381e:	4618      	mov	r0, r3
 8003820:	f003 ff8c 	bl	800773c <USB_InitFSLSPClkSel>
 8003824:	e011      	b.n	800384a <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2101      	movs	r1, #1
 800382c:	4618      	mov	r0, r3
 800382e:	f003 ff85 	bl	800773c <USB_InitFSLSPClkSel>
 8003832:	e00a      	b.n	800384a <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d106      	bne.n	800384a <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003842:	461a      	mov	r2, r3
 8003844:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003848:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f006 fa8a 	bl	8009d64 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f006 fa5d 	bl	8009d10 <HAL_HCD_Connect_Callback>
 8003856:	e014      	b.n	8003882 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f006 fa91 	bl	8009d80 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800386c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003870:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699a      	ldr	r2, [r3, #24]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003880:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 0320 	and.w	r3, r3, #32
 8003888:	2b20      	cmp	r3, #32
 800388a:	d103      	bne.n	8003894 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f043 0320 	orr.w	r3, r3, #32
 8003892:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800389a:	461a      	mov	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	6013      	str	r3, [r2, #0]
}
 80038a0:	bf00      	nop
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e081      	b.n	80039be <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fc ffde 	bl	8000890 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2224      	movs	r2, #36	; 0x24
 80038d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0201 	bic.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003908:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d107      	bne.n	8003922 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	e006      	b.n	8003930 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800392e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d104      	bne.n	8003942 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003940:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003954:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003964:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	ea42 0103 	orr.w	r1, r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	021a      	lsls	r2, r3, #8
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69d9      	ldr	r1, [r3, #28]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a1a      	ldr	r2, [r3, #32]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af02      	add	r7, sp, #8
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	4608      	mov	r0, r1
 80039d2:	4611      	mov	r1, r2
 80039d4:	461a      	mov	r2, r3
 80039d6:	4603      	mov	r3, r0
 80039d8:	817b      	strh	r3, [r7, #10]
 80039da:	460b      	mov	r3, r1
 80039dc:	813b      	strh	r3, [r7, #8]
 80039de:	4613      	mov	r3, r2
 80039e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	f040 80f9 	bne.w	8003be2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <HAL_I2C_Mem_Write+0x34>
 80039f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d105      	bne.n	8003a08 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a02:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0ed      	b.n	8003be4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d101      	bne.n	8003a16 <HAL_I2C_Mem_Write+0x4e>
 8003a12:	2302      	movs	r3, #2
 8003a14:	e0e6      	b.n	8003be4 <HAL_I2C_Mem_Write+0x21c>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a1e:	f7fe f80b 	bl	8001a38 <HAL_GetTick>
 8003a22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	2319      	movs	r3, #25
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f955 	bl	8003ce0 <I2C_WaitOnFlagUntilTimeout>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e0d1      	b.n	8003be4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2221      	movs	r2, #33	; 0x21
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2240      	movs	r2, #64	; 0x40
 8003a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a3a      	ldr	r2, [r7, #32]
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a68:	88f8      	ldrh	r0, [r7, #6]
 8003a6a:	893a      	ldrh	r2, [r7, #8]
 8003a6c:	8979      	ldrh	r1, [r7, #10]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	9301      	str	r3, [sp, #4]
 8003a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	4603      	mov	r3, r0
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 f8b9 	bl	8003bf0 <I2C_RequestMemoryWrite>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0a9      	b.n	8003be4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2bff      	cmp	r3, #255	; 0xff
 8003a98:	d90e      	bls.n	8003ab8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	22ff      	movs	r2, #255	; 0xff
 8003a9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	8979      	ldrh	r1, [r7, #10]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 fa37 	bl	8003f24 <I2C_TransferConfig>
 8003ab6:	e00f      	b.n	8003ad8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	8979      	ldrh	r1, [r7, #10]
 8003aca:	2300      	movs	r3, #0
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fa26 	bl	8003f24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 f93f 	bl	8003d60 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e07b      	b.n	8003be4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	781a      	ldrb	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d034      	beq.n	8003b90 <HAL_I2C_Mem_Write+0x1c8>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d130      	bne.n	8003b90 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	2200      	movs	r2, #0
 8003b36:	2180      	movs	r1, #128	; 0x80
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f8d1 	bl	8003ce0 <I2C_WaitOnFlagUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e04d      	b.n	8003be4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2bff      	cmp	r3, #255	; 0xff
 8003b50:	d90e      	bls.n	8003b70 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	22ff      	movs	r2, #255	; 0xff
 8003b56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	8979      	ldrh	r1, [r7, #10]
 8003b60:	2300      	movs	r3, #0
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 f9db 	bl	8003f24 <I2C_TransferConfig>
 8003b6e:	e00f      	b.n	8003b90 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	8979      	ldrh	r1, [r7, #10]
 8003b82:	2300      	movs	r3, #0
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f9ca 	bl	8003f24 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d19e      	bne.n	8003ad8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f91e 	bl	8003de0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e01a      	b.n	8003be4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6859      	ldr	r1, [r3, #4]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <HAL_I2C_Mem_Write+0x224>)
 8003bc2:	400b      	ands	r3, r1
 8003bc4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	e000      	b.n	8003be4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003be2:	2302      	movs	r3, #2
  }
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	fe00e800 	.word	0xfe00e800

08003bf0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	4608      	mov	r0, r1
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4603      	mov	r3, r0
 8003c00:	817b      	strh	r3, [r7, #10]
 8003c02:	460b      	mov	r3, r1
 8003c04:	813b      	strh	r3, [r7, #8]
 8003c06:	4613      	mov	r3, r2
 8003c08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	8979      	ldrh	r1, [r7, #10]
 8003c10:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <I2C_RequestMemoryWrite+0xa4>)
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f983 	bl	8003f24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c1e:	69fa      	ldr	r2, [r7, #28]
 8003c20:	69b9      	ldr	r1, [r7, #24]
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 f89c 	bl	8003d60 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e02c      	b.n	8003c8c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d105      	bne.n	8003c44 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c38:	893b      	ldrh	r3, [r7, #8]
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	629a      	str	r2, [r3, #40]	; 0x28
 8003c42:	e015      	b.n	8003c70 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c44:	893b      	ldrh	r3, [r7, #8]
 8003c46:	0a1b      	lsrs	r3, r3, #8
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	69b9      	ldr	r1, [r7, #24]
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 f882 	bl	8003d60 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e012      	b.n	8003c8c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c66:	893b      	ldrh	r3, [r7, #8]
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	2200      	movs	r2, #0
 8003c78:	2180      	movs	r1, #128	; 0x80
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f830 	bl	8003ce0 <I2C_WaitOnFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	80002000 	.word	0x80002000

08003c98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d103      	bne.n	8003cb6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d007      	beq.n	8003cd4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	619a      	str	r2, [r3, #24]
  }
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	603b      	str	r3, [r7, #0]
 8003cec:	4613      	mov	r3, r2
 8003cee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cf0:	e022      	b.n	8003d38 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf8:	d01e      	beq.n	8003d38 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfa:	f7fd fe9d 	bl	8001a38 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d302      	bcc.n	8003d10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d113      	bne.n	8003d38 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d14:	f043 0220 	orr.w	r2, r3, #32
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e00f      	b.n	8003d58 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	4013      	ands	r3, r2
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	bf0c      	ite	eq
 8003d48:	2301      	moveq	r3, #1
 8003d4a:	2300      	movne	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	461a      	mov	r2, r3
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d0cd      	beq.n	8003cf2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d6c:	e02c      	b.n	8003dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 f870 	bl	8003e58 <I2C_IsAcknowledgeFailed>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e02a      	b.n	8003dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d88:	d01e      	beq.n	8003dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d8a:	f7fd fe55 	bl	8001a38 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d302      	bcc.n	8003da0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d113      	bne.n	8003dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da4:	f043 0220 	orr.w	r2, r3, #32
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e007      	b.n	8003dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d1cb      	bne.n	8003d6e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dec:	e028      	b.n	8003e40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 f830 	bl	8003e58 <I2C_IsAcknowledgeFailed>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e026      	b.n	8003e50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e02:	f7fd fe19 	bl	8001a38 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d302      	bcc.n	8003e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d113      	bne.n	8003e40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1c:	f043 0220 	orr.w	r2, r3, #32
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e007      	b.n	8003e50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	d1cf      	bne.n	8003dee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	2b10      	cmp	r3, #16
 8003e70:	d151      	bne.n	8003f16 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e72:	e022      	b.n	8003eba <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7a:	d01e      	beq.n	8003eba <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7c:	f7fd fddc 	bl	8001a38 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d302      	bcc.n	8003e92 <I2C_IsAcknowledgeFailed+0x3a>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d113      	bne.n	8003eba <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e96:	f043 0220 	orr.w	r2, r3, #32
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e02e      	b.n	8003f18 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b20      	cmp	r3, #32
 8003ec6:	d1d5      	bne.n	8003e74 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2210      	movs	r2, #16
 8003ece:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f7ff fedd 	bl	8003c98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6859      	ldr	r1, [r3, #4]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	4b0d      	ldr	r3, [pc, #52]	; (8003f20 <I2C_IsAcknowledgeFailed+0xc8>)
 8003eea:	400b      	ands	r3, r1
 8003eec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef2:	f043 0204 	orr.w	r2, r3, #4
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	fe00e800 	.word	0xfe00e800

08003f24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	607b      	str	r3, [r7, #4]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	817b      	strh	r3, [r7, #10]
 8003f32:	4613      	mov	r3, r2
 8003f34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	0d5b      	lsrs	r3, r3, #21
 8003f40:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f44:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <I2C_TransferConfig+0x58>)
 8003f46:	430b      	orrs	r3, r1
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	ea02 0103 	and.w	r1, r2, r3
 8003f4e:	897b      	ldrh	r3, [r7, #10]
 8003f50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f54:	7a7b      	ldrb	r3, [r7, #9]
 8003f56:	041b      	lsls	r3, r3, #16
 8003f58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	431a      	orrs	r2, r3
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	431a      	orrs	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003f6e:	bf00      	nop
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	03ff63ff 	.word	0x03ff63ff

08003f80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	d138      	bne.n	8004008 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e032      	b.n	800400a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2224      	movs	r2, #36	; 0x24
 8003fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0201 	bic.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6819      	ldr	r1, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	e000      	b.n	800400a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004008:	2302      	movs	r3, #2
  }
}
 800400a:	4618      	mov	r0, r3
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004016:	b480      	push	{r7}
 8004018:	b085      	sub	sp, #20
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b20      	cmp	r3, #32
 800402a:	d139      	bne.n	80040a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004036:	2302      	movs	r3, #2
 8004038:	e033      	b.n	80040a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2224      	movs	r2, #36	; 0x24
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0201 	bic.w	r2, r2, #1
 8004058:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004068:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	4313      	orrs	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	e000      	b.n	80040a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040a0:	2302      	movs	r3, #2
  }
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
	...

080040b0 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e0af      	b.n	8004222 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fc fc86 	bl	80009e8 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0201 	bic.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	e00a      	b.n	8004110 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	3304      	adds	r3, #4
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	2200      	movs	r2, #0
 8004108:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	3301      	adds	r3, #1
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2b0f      	cmp	r3, #15
 8004114:	d9f1      	bls.n	80040fa <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0204 	orr.w	r2, r2, #4
 8004124:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	4b3f      	ldr	r3, [pc, #252]	; (800422c <HAL_LCD_Init+0x17c>)
 800412e:	4013      	ands	r3, r2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6851      	ldr	r1, [r2, #4]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6892      	ldr	r2, [r2, #8]
 8004138:	4311      	orrs	r1, r2
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800413e:	4311      	orrs	r1, r2
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004144:	4311      	orrs	r1, r2
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	69d2      	ldr	r2, [r2, #28]
 800414a:	4311      	orrs	r1, r2
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6a12      	ldr	r2, [r2, #32]
 8004150:	4311      	orrs	r1, r2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6992      	ldr	r2, [r2, #24]
 8004156:	4311      	orrs	r1, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800415c:	4311      	orrs	r1, r2
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6812      	ldr	r2, [r2, #0]
 8004162:	430b      	orrs	r3, r1
 8004164:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f862 	bl	8004230 <LCD_WaitForSynchro>
 800416c:	4603      	mov	r3, r0
 800416e:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8004170:	7cfb      	ldrb	r3, [r7, #19]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_LCD_Init+0xca>
  {
    return status;
 8004176:	7cfb      	ldrb	r3, [r7, #19]
 8004178:	e053      	b.n	8004222 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	431a      	orrs	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004198:	431a      	orrs	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0201 	orr.w	r2, r2, #1
 80041b0:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80041b2:	f7fd fc41 	bl	8001a38 <HAL_GetTick>
 80041b6:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80041b8:	e00c      	b.n	80041d4 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80041ba:	f7fd fc3d 	bl	8001a38 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041c8:	d904      	bls.n	80041d4 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2208      	movs	r2, #8
 80041ce:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e026      	b.n	8004222 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d1eb      	bne.n	80041ba <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 80041e2:	f7fd fc29 	bl	8001a38 <HAL_GetTick>
 80041e6:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80041e8:	e00c      	b.n	8004204 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80041ea:	f7fd fc25 	bl	8001a38 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041f8:	d904      	bls.n	8004204 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2210      	movs	r2, #16
 80041fe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e00e      	b.n	8004222 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 0310 	and.w	r3, r3, #16
 800420e:	2b10      	cmp	r3, #16
 8004210:	d1eb      	bne.n	80041ea <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8004220:	7cfb      	ldrb	r3, [r7, #19]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	fc00000e 	.word	0xfc00000e

08004230 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8004238:	f7fd fbfe 	bl	8001a38 <HAL_GetTick>
 800423c:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 800423e:	e00c      	b.n	800425a <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8004240:	f7fd fbfa 	bl	8001a38 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800424e:	d904      	bls.n	800425a <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e007      	b.n	800426a <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b20      	cmp	r3, #32
 8004266:	d1eb      	bne.n	8004240 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004278:	4b05      	ldr	r3, [pc, #20]	; (8004290 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a04      	ldr	r2, [pc, #16]	; (8004290 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800427e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004282:	6013      	str	r3, [r2, #0]
}
 8004284:	bf00      	nop
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40007000 	.word	0x40007000

08004294 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004298:	4b04      	ldr	r3, [pc, #16]	; (80042ac <HAL_PWREx_GetVoltageRange+0x18>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40007000 	.word	0x40007000

080042b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042be:	d130      	bne.n	8004322 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80042c0:	4b23      	ldr	r3, [pc, #140]	; (8004350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042cc:	d038      	beq.n	8004340 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042ce:	4b20      	ldr	r3, [pc, #128]	; (8004350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042d6:	4a1e      	ldr	r2, [pc, #120]	; (8004350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042de:	4b1d      	ldr	r3, [pc, #116]	; (8004354 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2232      	movs	r2, #50	; 0x32
 80042e4:	fb02 f303 	mul.w	r3, r2, r3
 80042e8:	4a1b      	ldr	r2, [pc, #108]	; (8004358 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042ea:	fba2 2303 	umull	r2, r3, r2, r3
 80042ee:	0c9b      	lsrs	r3, r3, #18
 80042f0:	3301      	adds	r3, #1
 80042f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042f4:	e002      	b.n	80042fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3b01      	subs	r3, #1
 80042fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042fc:	4b14      	ldr	r3, [pc, #80]	; (8004350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004308:	d102      	bne.n	8004310 <HAL_PWREx_ControlVoltageScaling+0x60>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1f2      	bne.n	80042f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004310:	4b0f      	ldr	r3, [pc, #60]	; (8004350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431c:	d110      	bne.n	8004340 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e00f      	b.n	8004342 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004322:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800432a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800432e:	d007      	beq.n	8004340 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004330:	4b07      	ldr	r3, [pc, #28]	; (8004350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004338:	4a05      	ldr	r2, [pc, #20]	; (8004350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800433a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800433e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40007000 	.word	0x40007000
 8004354:	20000008 	.word	0x20000008
 8004358:	431bde83 	.word	0x431bde83

0800435c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004360:	4b05      	ldr	r3, [pc, #20]	; (8004378 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	4a04      	ldr	r2, [pc, #16]	; (8004378 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800436a:	6053      	str	r3, [r2, #4]
}
 800436c:	bf00      	nop
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40007000 	.word	0x40007000

0800437c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af02      	add	r7, sp, #8
 8004382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004384:	f7fd fb58 	bl	8001a38 <HAL_GetTick>
 8004388:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e06f      	b.n	8004474 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_QSPI_Init+0x28>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e067      	b.n	8004474 <HAL_QSPI_Init+0xf8>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10b      	bne.n	80043d0 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7fc fcb1 	bl	8000d28 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80043c6:	f241 3188 	movw	r1, #5000	; 0x1388
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f858 	bl	8004480 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	3b01      	subs	r3, #1
 80043e0:	021a      	lsls	r2, r3, #8
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	2120      	movs	r1, #32
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f850 	bl	800449c <QSPI_WaitFlagStateUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004400:	7afb      	ldrb	r3, [r7, #11]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d131      	bne.n	800446a <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004410:	f023 0310 	bic.w	r3, r3, #16
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6852      	ldr	r2, [r2, #4]
 8004418:	0611      	lsls	r1, r2, #24
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	68d2      	ldr	r2, [r2, #12]
 800441e:	4311      	orrs	r1, r2
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6812      	ldr	r2, [r2, #0]
 8004424:	430b      	orrs	r3, r1
 8004426:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	4b13      	ldr	r3, [pc, #76]	; (800447c <HAL_QSPI_Init+0x100>)
 8004430:	4013      	ands	r3, r2
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6912      	ldr	r2, [r2, #16]
 8004436:	0411      	lsls	r1, r2, #16
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6952      	ldr	r2, [r2, #20]
 800443c:	4311      	orrs	r1, r2
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6992      	ldr	r2, [r2, #24]
 8004442:	4311      	orrs	r1, r2
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6812      	ldr	r2, [r2, #0]
 8004448:	430b      	orrs	r3, r1
 800444a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004472:	7afb      	ldrb	r3, [r7, #11]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	ffe0f8fe 	.word	0xffe0f8fe

08004480 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	4613      	mov	r3, r2
 80044aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80044ac:	e01a      	b.n	80044e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b4:	d016      	beq.n	80044e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b6:	f7fd fabf 	bl	8001a38 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d302      	bcc.n	80044cc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10b      	bne.n	80044e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2204      	movs	r2, #4
 80044d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d8:	f043 0201 	orr.w	r2, r3, #1
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e00e      	b.n	8004502 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	4013      	ands	r3, r2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	bf14      	ite	ne
 80044f2:	2301      	movne	r3, #1
 80044f4:	2300      	moveq	r3, #0
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	461a      	mov	r2, r3
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d1d6      	bne.n	80044ae <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e39d      	b.n	8004c5a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800451e:	4ba4      	ldr	r3, [pc, #656]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004528:	4ba1      	ldr	r3, [pc, #644]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 80e1 	beq.w	8004702 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d007      	beq.n	8004556 <HAL_RCC_OscConfig+0x4a>
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b0c      	cmp	r3, #12
 800454a:	f040 8088 	bne.w	800465e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2b01      	cmp	r3, #1
 8004552:	f040 8084 	bne.w	800465e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004556:	4b96      	ldr	r3, [pc, #600]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <HAL_RCC_OscConfig+0x62>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e375      	b.n	8004c5a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1a      	ldr	r2, [r3, #32]
 8004572:	4b8f      	ldr	r3, [pc, #572]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d004      	beq.n	8004588 <HAL_RCC_OscConfig+0x7c>
 800457e:	4b8c      	ldr	r3, [pc, #560]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004586:	e005      	b.n	8004594 <HAL_RCC_OscConfig+0x88>
 8004588:	4b89      	ldr	r3, [pc, #548]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 800458a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800458e:	091b      	lsrs	r3, r3, #4
 8004590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004594:	4293      	cmp	r3, r2
 8004596:	d223      	bcs.n	80045e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fd09 	bl	8004fb4 <RCC_SetFlashLatencyFromMSIRange>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e356      	b.n	8004c5a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045ac:	4b80      	ldr	r3, [pc, #512]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a7f      	ldr	r2, [pc, #508]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 80045b2:	f043 0308 	orr.w	r3, r3, #8
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	4b7d      	ldr	r3, [pc, #500]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	497a      	ldr	r1, [pc, #488]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045ca:	4b79      	ldr	r3, [pc, #484]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	021b      	lsls	r3, r3, #8
 80045d8:	4975      	ldr	r1, [pc, #468]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	604b      	str	r3, [r1, #4]
 80045de:	e022      	b.n	8004626 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045e0:	4b73      	ldr	r3, [pc, #460]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a72      	ldr	r2, [pc, #456]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 80045e6:	f043 0308 	orr.w	r3, r3, #8
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	4b70      	ldr	r3, [pc, #448]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	496d      	ldr	r1, [pc, #436]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045fe:	4b6c      	ldr	r3, [pc, #432]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	021b      	lsls	r3, r3, #8
 800460c:	4968      	ldr	r1, [pc, #416]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 800460e:	4313      	orrs	r3, r2
 8004610:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fccc 	bl	8004fb4 <RCC_SetFlashLatencyFromMSIRange>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e319      	b.n	8004c5a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004626:	f000 fc03 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 800462a:	4601      	mov	r1, r0
 800462c:	4b60      	ldr	r3, [pc, #384]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	091b      	lsrs	r3, r3, #4
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	4a5f      	ldr	r2, [pc, #380]	; (80047b4 <HAL_RCC_OscConfig+0x2a8>)
 8004638:	5cd3      	ldrb	r3, [r2, r3]
 800463a:	f003 031f 	and.w	r3, r3, #31
 800463e:	fa21 f303 	lsr.w	r3, r1, r3
 8004642:	4a5d      	ldr	r2, [pc, #372]	; (80047b8 <HAL_RCC_OscConfig+0x2ac>)
 8004644:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004646:	4b5d      	ldr	r3, [pc, #372]	; (80047bc <HAL_RCC_OscConfig+0x2b0>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f7fd f9a8 	bl	80019a0 <HAL_InitTick>
 8004650:	4603      	mov	r3, r0
 8004652:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d052      	beq.n	8004700 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	e2fd      	b.n	8004c5a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d032      	beq.n	80046cc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004666:	4b52      	ldr	r3, [pc, #328]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a51      	ldr	r2, [pc, #324]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004672:	f7fd f9e1 	bl	8001a38 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800467a:	f7fd f9dd 	bl	8001a38 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e2e6      	b.n	8004c5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800468c:	4b48      	ldr	r3, [pc, #288]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0f0      	beq.n	800467a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004698:	4b45      	ldr	r3, [pc, #276]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a44      	ldr	r2, [pc, #272]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 800469e:	f043 0308 	orr.w	r3, r3, #8
 80046a2:	6013      	str	r3, [r2, #0]
 80046a4:	4b42      	ldr	r3, [pc, #264]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	493f      	ldr	r1, [pc, #252]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046b6:	4b3e      	ldr	r3, [pc, #248]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	493a      	ldr	r1, [pc, #232]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	604b      	str	r3, [r1, #4]
 80046ca:	e01a      	b.n	8004702 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046cc:	4b38      	ldr	r3, [pc, #224]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a37      	ldr	r2, [pc, #220]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 80046d2:	f023 0301 	bic.w	r3, r3, #1
 80046d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046d8:	f7fd f9ae 	bl	8001a38 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046e0:	f7fd f9aa 	bl	8001a38 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e2b3      	b.n	8004c5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046f2:	4b2f      	ldr	r3, [pc, #188]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x1d4>
 80046fe:	e000      	b.n	8004702 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004700:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d074      	beq.n	80047f8 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	2b08      	cmp	r3, #8
 8004712:	d005      	beq.n	8004720 <HAL_RCC_OscConfig+0x214>
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	2b0c      	cmp	r3, #12
 8004718:	d10e      	bne.n	8004738 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2b03      	cmp	r3, #3
 800471e:	d10b      	bne.n	8004738 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004720:	4b23      	ldr	r3, [pc, #140]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d064      	beq.n	80047f6 <HAL_RCC_OscConfig+0x2ea>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d160      	bne.n	80047f6 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e290      	b.n	8004c5a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004740:	d106      	bne.n	8004750 <HAL_RCC_OscConfig+0x244>
 8004742:	4b1b      	ldr	r3, [pc, #108]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a1a      	ldr	r2, [pc, #104]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 8004748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e01d      	b.n	800478c <HAL_RCC_OscConfig+0x280>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004758:	d10c      	bne.n	8004774 <HAL_RCC_OscConfig+0x268>
 800475a:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a14      	ldr	r2, [pc, #80]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 8004760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	4b12      	ldr	r3, [pc, #72]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a11      	ldr	r2, [pc, #68]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 800476c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e00b      	b.n	800478c <HAL_RCC_OscConfig+0x280>
 8004774:	4b0e      	ldr	r3, [pc, #56]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a0d      	ldr	r2, [pc, #52]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 800477a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a0a      	ldr	r2, [pc, #40]	; (80047b0 <HAL_RCC_OscConfig+0x2a4>)
 8004786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800478a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d01c      	beq.n	80047ce <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fd f950 	bl	8001a38 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800479a:	e011      	b.n	80047c0 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800479c:	f7fd f94c 	bl	8001a38 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	; 0x64
 80047a8:	d90a      	bls.n	80047c0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e255      	b.n	8004c5a <HAL_RCC_OscConfig+0x74e>
 80047ae:	bf00      	nop
 80047b0:	40021000 	.word	0x40021000
 80047b4:	0800a9cc 	.word	0x0800a9cc
 80047b8:	20000008 	.word	0x20000008
 80047bc:	2000000c 	.word	0x2000000c
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047c0:	4bae      	ldr	r3, [pc, #696]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0e7      	beq.n	800479c <HAL_RCC_OscConfig+0x290>
 80047cc:	e014      	b.n	80047f8 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ce:	f7fd f933 	bl	8001a38 <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047d6:	f7fd f92f 	bl	8001a38 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b64      	cmp	r3, #100	; 0x64
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e238      	b.n	8004c5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047e8:	4ba4      	ldr	r3, [pc, #656]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1f0      	bne.n	80047d6 <HAL_RCC_OscConfig+0x2ca>
 80047f4:	e000      	b.n	80047f8 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d060      	beq.n	80048c6 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	2b04      	cmp	r3, #4
 8004808:	d005      	beq.n	8004816 <HAL_RCC_OscConfig+0x30a>
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2b0c      	cmp	r3, #12
 800480e:	d119      	bne.n	8004844 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d116      	bne.n	8004844 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004816:	4b99      	ldr	r3, [pc, #612]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <HAL_RCC_OscConfig+0x322>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e215      	b.n	8004c5a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482e:	4b93      	ldr	r3, [pc, #588]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	061b      	lsls	r3, r3, #24
 800483c:	498f      	ldr	r1, [pc, #572]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 800483e:	4313      	orrs	r3, r2
 8004840:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004842:	e040      	b.n	80048c6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d023      	beq.n	8004894 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800484c:	4b8b      	ldr	r3, [pc, #556]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a8a      	ldr	r2, [pc, #552]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 8004852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004858:	f7fd f8ee 	bl	8001a38 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004860:	f7fd f8ea 	bl	8001a38 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e1f3      	b.n	8004c5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004872:	4b82      	ldr	r3, [pc, #520]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0f0      	beq.n	8004860 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487e:	4b7f      	ldr	r3, [pc, #508]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	061b      	lsls	r3, r3, #24
 800488c:	497b      	ldr	r1, [pc, #492]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 800488e:	4313      	orrs	r3, r2
 8004890:	604b      	str	r3, [r1, #4]
 8004892:	e018      	b.n	80048c6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004894:	4b79      	ldr	r3, [pc, #484]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a78      	ldr	r2, [pc, #480]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 800489a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800489e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7fd f8ca 	bl	8001a38 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048a8:	f7fd f8c6 	bl	8001a38 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e1cf      	b.n	8004c5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048ba:	4b70      	ldr	r3, [pc, #448]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d03c      	beq.n	800494c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d01c      	beq.n	8004914 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048da:	4b68      	ldr	r3, [pc, #416]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 80048dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048e0:	4a66      	ldr	r2, [pc, #408]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ea:	f7fd f8a5 	bl	8001a38 <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f2:	f7fd f8a1 	bl	8001a38 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e1aa      	b.n	8004c5a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004904:	4b5d      	ldr	r3, [pc, #372]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 8004906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0ef      	beq.n	80048f2 <HAL_RCC_OscConfig+0x3e6>
 8004912:	e01b      	b.n	800494c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004914:	4b59      	ldr	r3, [pc, #356]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 8004916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800491a:	4a58      	ldr	r2, [pc, #352]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 800491c:	f023 0301 	bic.w	r3, r3, #1
 8004920:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004924:	f7fd f888 	bl	8001a38 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800492c:	f7fd f884 	bl	8001a38 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e18d      	b.n	8004c5a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800493e:	4b4f      	ldr	r3, [pc, #316]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 8004940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1ef      	bne.n	800492c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 80a5 	beq.w	8004aa4 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800495a:	2300      	movs	r3, #0
 800495c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800495e:	4b47      	ldr	r3, [pc, #284]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 8004960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10d      	bne.n	8004986 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800496a:	4b44      	ldr	r3, [pc, #272]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 800496c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496e:	4a43      	ldr	r2, [pc, #268]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 8004970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004974:	6593      	str	r3, [r2, #88]	; 0x58
 8004976:	4b41      	ldr	r3, [pc, #260]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 8004978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497e:	60bb      	str	r3, [r7, #8]
 8004980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004982:	2301      	movs	r3, #1
 8004984:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004986:	4b3e      	ldr	r3, [pc, #248]	; (8004a80 <HAL_RCC_OscConfig+0x574>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498e:	2b00      	cmp	r3, #0
 8004990:	d118      	bne.n	80049c4 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004992:	4b3b      	ldr	r3, [pc, #236]	; (8004a80 <HAL_RCC_OscConfig+0x574>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a3a      	ldr	r2, [pc, #232]	; (8004a80 <HAL_RCC_OscConfig+0x574>)
 8004998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800499c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800499e:	f7fd f84b 	bl	8001a38 <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a6:	f7fd f847 	bl	8001a38 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e150      	b.n	8004c5a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049b8:	4b31      	ldr	r3, [pc, #196]	; (8004a80 <HAL_RCC_OscConfig+0x574>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0f0      	beq.n	80049a6 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d108      	bne.n	80049de <HAL_RCC_OscConfig+0x4d2>
 80049cc:	4b2b      	ldr	r3, [pc, #172]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d2:	4a2a      	ldr	r2, [pc, #168]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049dc:	e024      	b.n	8004a28 <HAL_RCC_OscConfig+0x51c>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b05      	cmp	r3, #5
 80049e4:	d110      	bne.n	8004a08 <HAL_RCC_OscConfig+0x4fc>
 80049e6:	4b25      	ldr	r3, [pc, #148]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 80049e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ec:	4a23      	ldr	r2, [pc, #140]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 80049ee:	f043 0304 	orr.w	r3, r3, #4
 80049f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049f6:	4b21      	ldr	r3, [pc, #132]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 80049f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fc:	4a1f      	ldr	r2, [pc, #124]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 80049fe:	f043 0301 	orr.w	r3, r3, #1
 8004a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a06:	e00f      	b.n	8004a28 <HAL_RCC_OscConfig+0x51c>
 8004a08:	4b1c      	ldr	r3, [pc, #112]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0e:	4a1b      	ldr	r2, [pc, #108]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 8004a10:	f023 0301 	bic.w	r3, r3, #1
 8004a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a18:	4b18      	ldr	r3, [pc, #96]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1e:	4a17      	ldr	r2, [pc, #92]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 8004a20:	f023 0304 	bic.w	r3, r3, #4
 8004a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d016      	beq.n	8004a5e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a30:	f7fd f802 	bl	8001a38 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a36:	e00a      	b.n	8004a4e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a38:	f7fc fffe 	bl	8001a38 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e105      	b.n	8004c5a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a4e:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <HAL_RCC_OscConfig+0x570>)
 8004a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0ed      	beq.n	8004a38 <HAL_RCC_OscConfig+0x52c>
 8004a5c:	e019      	b.n	8004a92 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5e:	f7fc ffeb 	bl	8001a38 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a64:	e00e      	b.n	8004a84 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a66:	f7fc ffe7 	bl	8001a38 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d905      	bls.n	8004a84 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e0ee      	b.n	8004c5a <HAL_RCC_OscConfig+0x74e>
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a84:	4b77      	ldr	r3, [pc, #476]	; (8004c64 <HAL_RCC_OscConfig+0x758>)
 8004a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1e9      	bne.n	8004a66 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a92:	7ffb      	ldrb	r3, [r7, #31]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d105      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a98:	4b72      	ldr	r3, [pc, #456]	; (8004c64 <HAL_RCC_OscConfig+0x758>)
 8004a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9c:	4a71      	ldr	r2, [pc, #452]	; (8004c64 <HAL_RCC_OscConfig+0x758>)
 8004a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 80d5 	beq.w	8004c58 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	2b0c      	cmp	r3, #12
 8004ab2:	f000 808e 	beq.w	8004bd2 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d15b      	bne.n	8004b76 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004abe:	4b69      	ldr	r3, [pc, #420]	; (8004c64 <HAL_RCC_OscConfig+0x758>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a68      	ldr	r2, [pc, #416]	; (8004c64 <HAL_RCC_OscConfig+0x758>)
 8004ac4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aca:	f7fc ffb5 	bl	8001a38 <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad2:	f7fc ffb1 	bl	8001a38 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e0ba      	b.n	8004c5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ae4:	4b5f      	ldr	r3, [pc, #380]	; (8004c64 <HAL_RCC_OscConfig+0x758>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1f0      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004af0:	4b5c      	ldr	r3, [pc, #368]	; (8004c64 <HAL_RCC_OscConfig+0x758>)
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	4b5c      	ldr	r3, [pc, #368]	; (8004c68 <HAL_RCC_OscConfig+0x75c>)
 8004af6:	4013      	ands	r3, r2
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b00:	3a01      	subs	r2, #1
 8004b02:	0112      	lsls	r2, r2, #4
 8004b04:	4311      	orrs	r1, r2
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b0a:	0212      	lsls	r2, r2, #8
 8004b0c:	4311      	orrs	r1, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b12:	0852      	lsrs	r2, r2, #1
 8004b14:	3a01      	subs	r2, #1
 8004b16:	0552      	lsls	r2, r2, #21
 8004b18:	4311      	orrs	r1, r2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b1e:	0852      	lsrs	r2, r2, #1
 8004b20:	3a01      	subs	r2, #1
 8004b22:	0652      	lsls	r2, r2, #25
 8004b24:	4311      	orrs	r1, r2
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b2a:	0912      	lsrs	r2, r2, #4
 8004b2c:	0452      	lsls	r2, r2, #17
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	494c      	ldr	r1, [pc, #304]	; (8004c64 <HAL_RCC_OscConfig+0x758>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b36:	4b4b      	ldr	r3, [pc, #300]	; (8004c64 <HAL_RCC_OscConfig+0x758>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a4a      	ldr	r2, [pc, #296]	; (8004c64 <HAL_RCC_OscConfig+0x758>)
 8004b3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b40:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b42:	4b48      	ldr	r3, [pc, #288]	; (8004c64 <HAL_RCC_OscConfig+0x758>)
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	4a47      	ldr	r2, [pc, #284]	; (8004c64 <HAL_RCC_OscConfig+0x758>)
 8004b48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b4c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4e:	f7fc ff73 	bl	8001a38 <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b54:	e008      	b.n	8004b68 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b56:	f7fc ff6f 	bl	8001a38 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e078      	b.n	8004c5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b68:	4b3e      	ldr	r3, [pc, #248]	; (8004c64 <HAL_RCC_OscConfig+0x758>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0f0      	beq.n	8004b56 <HAL_RCC_OscConfig+0x64a>
 8004b74:	e070      	b.n	8004c58 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b76:	4b3b      	ldr	r3, [pc, #236]	; (8004c64 <HAL_RCC_OscConfig+0x758>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a3a      	ldr	r2, [pc, #232]	; (8004c64 <HAL_RCC_OscConfig+0x758>)
 8004b7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b80:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004b82:	4b38      	ldr	r3, [pc, #224]	; (8004c64 <HAL_RCC_OscConfig+0x758>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d105      	bne.n	8004b9a <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004b8e:	4b35      	ldr	r3, [pc, #212]	; (8004c64 <HAL_RCC_OscConfig+0x758>)
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	4a34      	ldr	r2, [pc, #208]	; (8004c64 <HAL_RCC_OscConfig+0x758>)
 8004b94:	f023 0303 	bic.w	r3, r3, #3
 8004b98:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b9a:	4b32      	ldr	r3, [pc, #200]	; (8004c64 <HAL_RCC_OscConfig+0x758>)
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	4a31      	ldr	r2, [pc, #196]	; (8004c64 <HAL_RCC_OscConfig+0x758>)
 8004ba0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004baa:	f7fc ff45 	bl	8001a38 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb2:	f7fc ff41 	bl	8001a38 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e04a      	b.n	8004c5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bc4:	4b27      	ldr	r3, [pc, #156]	; (8004c64 <HAL_RCC_OscConfig+0x758>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1f0      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x6a6>
 8004bd0:	e042      	b.n	8004c58 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e03d      	b.n	8004c5a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004bde:	4b21      	ldr	r3, [pc, #132]	; (8004c64 <HAL_RCC_OscConfig+0x758>)
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f003 0203 	and.w	r2, r3, #3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d130      	bne.n	8004c54 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d127      	bne.n	8004c54 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0e:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d11f      	bne.n	8004c54 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c1e:	2a07      	cmp	r2, #7
 8004c20:	bf14      	ite	ne
 8004c22:	2201      	movne	r2, #1
 8004c24:	2200      	moveq	r2, #0
 8004c26:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d113      	bne.n	8004c54 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c36:	085b      	lsrs	r3, r3, #1
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d109      	bne.n	8004c54 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	085b      	lsrs	r3, r3, #1
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d001      	beq.n	8004c58 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e000      	b.n	8004c5a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3720      	adds	r7, #32
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	40021000 	.word	0x40021000
 8004c68:	f99d808c 	.word	0xf99d808c

08004c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e0c8      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c80:	4b66      	ldr	r3, [pc, #408]	; (8004e1c <HAL_RCC_ClockConfig+0x1b0>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d910      	bls.n	8004cb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8e:	4b63      	ldr	r3, [pc, #396]	; (8004e1c <HAL_RCC_ClockConfig+0x1b0>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f023 0207 	bic.w	r2, r3, #7
 8004c96:	4961      	ldr	r1, [pc, #388]	; (8004e1c <HAL_RCC_ClockConfig+0x1b0>)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9e:	4b5f      	ldr	r3, [pc, #380]	; (8004e1c <HAL_RCC_ClockConfig+0x1b0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d001      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e0b0      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d04c      	beq.n	8004d56 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2b03      	cmp	r3, #3
 8004cc2:	d107      	bne.n	8004cd4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cc4:	4b56      	ldr	r3, [pc, #344]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d121      	bne.n	8004d14 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e09e      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d107      	bne.n	8004cec <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cdc:	4b50      	ldr	r3, [pc, #320]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d115      	bne.n	8004d14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e092      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d107      	bne.n	8004d04 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cf4:	4b4a      	ldr	r3, [pc, #296]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d109      	bne.n	8004d14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e086      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d04:	4b46      	ldr	r3, [pc, #280]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e07e      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d14:	4b42      	ldr	r3, [pc, #264]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f023 0203 	bic.w	r2, r3, #3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	493f      	ldr	r1, [pc, #252]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d26:	f7fc fe87 	bl	8001a38 <HAL_GetTick>
 8004d2a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d2c:	e00a      	b.n	8004d44 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d2e:	f7fc fe83 	bl	8001a38 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e066      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d44:	4b36      	ldr	r3, [pc, #216]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f003 020c 	and.w	r2, r3, #12
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d1eb      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d008      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d62:	4b2f      	ldr	r3, [pc, #188]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	492c      	ldr	r1, [pc, #176]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d74:	4b29      	ldr	r3, [pc, #164]	; (8004e1c <HAL_RCC_ClockConfig+0x1b0>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d210      	bcs.n	8004da4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d82:	4b26      	ldr	r3, [pc, #152]	; (8004e1c <HAL_RCC_ClockConfig+0x1b0>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f023 0207 	bic.w	r2, r3, #7
 8004d8a:	4924      	ldr	r1, [pc, #144]	; (8004e1c <HAL_RCC_ClockConfig+0x1b0>)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d92:	4b22      	ldr	r3, [pc, #136]	; (8004e1c <HAL_RCC_ClockConfig+0x1b0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d001      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e036      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d008      	beq.n	8004dc2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004db0:	4b1b      	ldr	r3, [pc, #108]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	4918      	ldr	r1, [pc, #96]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0308 	and.w	r3, r3, #8
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d009      	beq.n	8004de2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dce:	4b14      	ldr	r3, [pc, #80]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	4910      	ldr	r1, [pc, #64]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004de2:	f000 f825 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 8004de6:	4601      	mov	r1, r0
 8004de8:	4b0d      	ldr	r3, [pc, #52]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	091b      	lsrs	r3, r3, #4
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	4a0c      	ldr	r2, [pc, #48]	; (8004e24 <HAL_RCC_ClockConfig+0x1b8>)
 8004df4:	5cd3      	ldrb	r3, [r2, r3]
 8004df6:	f003 031f 	and.w	r3, r3, #31
 8004dfa:	fa21 f303 	lsr.w	r3, r1, r3
 8004dfe:	4a0a      	ldr	r2, [pc, #40]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e02:	4b0a      	ldr	r3, [pc, #40]	; (8004e2c <HAL_RCC_ClockConfig+0x1c0>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fc fdca 	bl	80019a0 <HAL_InitTick>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e10:	7afb      	ldrb	r3, [r7, #11]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40022000 	.word	0x40022000
 8004e20:	40021000 	.word	0x40021000
 8004e24:	0800a9cc 	.word	0x0800a9cc
 8004e28:	20000008 	.word	0x20000008
 8004e2c:	2000000c 	.word	0x2000000c

08004e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b089      	sub	sp, #36	; 0x24
 8004e34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61fb      	str	r3, [r7, #28]
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e3e:	4b3d      	ldr	r3, [pc, #244]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 030c 	and.w	r3, r3, #12
 8004e46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e48:	4b3a      	ldr	r3, [pc, #232]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f003 0303 	and.w	r3, r3, #3
 8004e50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <HAL_RCC_GetSysClockFreq+0x34>
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	2b0c      	cmp	r3, #12
 8004e5c:	d121      	bne.n	8004ea2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d11e      	bne.n	8004ea2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e64:	4b33      	ldr	r3, [pc, #204]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0308 	and.w	r3, r3, #8
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d107      	bne.n	8004e80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e70:	4b30      	ldr	r3, [pc, #192]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e76:	0a1b      	lsrs	r3, r3, #8
 8004e78:	f003 030f 	and.w	r3, r3, #15
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	e005      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e80:	4b2c      	ldr	r3, [pc, #176]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	091b      	lsrs	r3, r3, #4
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e8c:	4a2a      	ldr	r2, [pc, #168]	; (8004f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10d      	bne.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ea0:	e00a      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d102      	bne.n	8004eae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ea8:	4b24      	ldr	r3, [pc, #144]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004eaa:	61bb      	str	r3, [r7, #24]
 8004eac:	e004      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d101      	bne.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004eb4:	4b22      	ldr	r3, [pc, #136]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x110>)
 8004eb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	2b0c      	cmp	r3, #12
 8004ebc:	d133      	bne.n	8004f26 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ebe:	4b1d      	ldr	r3, [pc, #116]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d002      	beq.n	8004ed4 <HAL_RCC_GetSysClockFreq+0xa4>
 8004ece:	2b03      	cmp	r3, #3
 8004ed0:	d003      	beq.n	8004eda <HAL_RCC_GetSysClockFreq+0xaa>
 8004ed2:	e005      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ed4:	4b19      	ldr	r3, [pc, #100]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ed6:	617b      	str	r3, [r7, #20]
      break;
 8004ed8:	e005      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004eda:	4b19      	ldr	r3, [pc, #100]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x110>)
 8004edc:	617b      	str	r3, [r7, #20]
      break;
 8004ede:	e002      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	617b      	str	r3, [r7, #20]
      break;
 8004ee4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ee6:	4b13      	ldr	r3, [pc, #76]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	091b      	lsrs	r3, r3, #4
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ef4:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	0a1b      	lsrs	r3, r3, #8
 8004efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	fb02 f203 	mul.w	r2, r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f0c:	4b09      	ldr	r3, [pc, #36]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	0e5b      	lsrs	r3, r3, #25
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	3301      	adds	r3, #1
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f24:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f26:	69bb      	ldr	r3, [r7, #24]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3724      	adds	r7, #36	; 0x24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	40021000 	.word	0x40021000
 8004f38:	0800a9e4 	.word	0x0800a9e4
 8004f3c:	00f42400 	.word	0x00f42400
 8004f40:	007a1200 	.word	0x007a1200

08004f44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f48:	4b03      	ldr	r3, [pc, #12]	; (8004f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	20000008 	.word	0x20000008

08004f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f60:	f7ff fff0 	bl	8004f44 <HAL_RCC_GetHCLKFreq>
 8004f64:	4601      	mov	r1, r0
 8004f66:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	0a1b      	lsrs	r3, r3, #8
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	4a04      	ldr	r2, [pc, #16]	; (8004f84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f72:	5cd3      	ldrb	r3, [r2, r3]
 8004f74:	f003 031f 	and.w	r3, r3, #31
 8004f78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	40021000 	.word	0x40021000
 8004f84:	0800a9dc 	.word	0x0800a9dc

08004f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f8c:	f7ff ffda 	bl	8004f44 <HAL_RCC_GetHCLKFreq>
 8004f90:	4601      	mov	r1, r0
 8004f92:	4b06      	ldr	r3, [pc, #24]	; (8004fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	0adb      	lsrs	r3, r3, #11
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	4a04      	ldr	r2, [pc, #16]	; (8004fb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f9e:	5cd3      	ldrb	r3, [r2, r3]
 8004fa0:	f003 031f 	and.w	r3, r3, #31
 8004fa4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	0800a9dc 	.word	0x0800a9dc

08004fb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004fc0:	4b2a      	ldr	r3, [pc, #168]	; (800506c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004fcc:	f7ff f962 	bl	8004294 <HAL_PWREx_GetVoltageRange>
 8004fd0:	6178      	str	r0, [r7, #20]
 8004fd2:	e014      	b.n	8004ffe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fd4:	4b25      	ldr	r3, [pc, #148]	; (800506c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd8:	4a24      	ldr	r2, [pc, #144]	; (800506c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fde:	6593      	str	r3, [r2, #88]	; 0x58
 8004fe0:	4b22      	ldr	r3, [pc, #136]	; (800506c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004fec:	f7ff f952 	bl	8004294 <HAL_PWREx_GetVoltageRange>
 8004ff0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ff2:	4b1e      	ldr	r3, [pc, #120]	; (800506c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff6:	4a1d      	ldr	r2, [pc, #116]	; (800506c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ffc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005004:	d10b      	bne.n	800501e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b80      	cmp	r3, #128	; 0x80
 800500a:	d919      	bls.n	8005040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2ba0      	cmp	r3, #160	; 0xa0
 8005010:	d902      	bls.n	8005018 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005012:	2302      	movs	r3, #2
 8005014:	613b      	str	r3, [r7, #16]
 8005016:	e013      	b.n	8005040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005018:	2301      	movs	r3, #1
 800501a:	613b      	str	r3, [r7, #16]
 800501c:	e010      	b.n	8005040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b80      	cmp	r3, #128	; 0x80
 8005022:	d902      	bls.n	800502a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005024:	2303      	movs	r3, #3
 8005026:	613b      	str	r3, [r7, #16]
 8005028:	e00a      	b.n	8005040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b80      	cmp	r3, #128	; 0x80
 800502e:	d102      	bne.n	8005036 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005030:	2302      	movs	r3, #2
 8005032:	613b      	str	r3, [r7, #16]
 8005034:	e004      	b.n	8005040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b70      	cmp	r3, #112	; 0x70
 800503a:	d101      	bne.n	8005040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800503c:	2301      	movs	r3, #1
 800503e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005040:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f023 0207 	bic.w	r2, r3, #7
 8005048:	4909      	ldr	r1, [pc, #36]	; (8005070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	4313      	orrs	r3, r2
 800504e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005050:	4b07      	ldr	r3, [pc, #28]	; (8005070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	429a      	cmp	r2, r3
 800505c:	d001      	beq.n	8005062 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e000      	b.n	8005064 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	40021000 	.word	0x40021000
 8005070:	40022000 	.word	0x40022000

08005074 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800507c:	2300      	movs	r3, #0
 800507e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005080:	2300      	movs	r3, #0
 8005082:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800508c:	2b00      	cmp	r3, #0
 800508e:	d03f      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005098:	d01c      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800509a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800509e:	d802      	bhi.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00e      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80050a4:	e01f      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80050a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050aa:	d003      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80050ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050b0:	d01c      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x78>
 80050b2:	e018      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050b4:	4b85      	ldr	r3, [pc, #532]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	4a84      	ldr	r2, [pc, #528]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050c0:	e015      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3304      	adds	r3, #4
 80050c6:	2100      	movs	r1, #0
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 ff41 	bl	8005f50 <RCCEx_PLLSAI1_Config>
 80050ce:	4603      	mov	r3, r0
 80050d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050d2:	e00c      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3320      	adds	r3, #32
 80050d8:	2100      	movs	r1, #0
 80050da:	4618      	mov	r0, r3
 80050dc:	f001 f828 	bl	8006130 <RCCEx_PLLSAI2_Config>
 80050e0:	4603      	mov	r3, r0
 80050e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050e4:	e003      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	74fb      	strb	r3, [r7, #19]
      break;
 80050ea:	e000      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80050ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050ee:	7cfb      	ldrb	r3, [r7, #19]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10b      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050f4:	4b75      	ldr	r3, [pc, #468]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005102:	4972      	ldr	r1, [pc, #456]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800510a:	e001      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800510c:	7cfb      	ldrb	r3, [r7, #19]
 800510e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d03f      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005124:	d01c      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005126:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800512a:	d802      	bhi.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00e      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005130:	e01f      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005132:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005136:	d003      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005138:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800513c:	d01c      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800513e:	e018      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005140:	4b62      	ldr	r3, [pc, #392]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	4a61      	ldr	r2, [pc, #388]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800514a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800514c:	e015      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3304      	adds	r3, #4
 8005152:	2100      	movs	r1, #0
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fefb 	bl	8005f50 <RCCEx_PLLSAI1_Config>
 800515a:	4603      	mov	r3, r0
 800515c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800515e:	e00c      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3320      	adds	r3, #32
 8005164:	2100      	movs	r1, #0
 8005166:	4618      	mov	r0, r3
 8005168:	f000 ffe2 	bl	8006130 <RCCEx_PLLSAI2_Config>
 800516c:	4603      	mov	r3, r0
 800516e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005170:	e003      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	74fb      	strb	r3, [r7, #19]
      break;
 8005176:	e000      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005178:	bf00      	nop
    }

    if(ret == HAL_OK)
 800517a:	7cfb      	ldrb	r3, [r7, #19]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10b      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005180:	4b52      	ldr	r3, [pc, #328]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005186:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800518e:	494f      	ldr	r1, [pc, #316]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005196:	e001      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005198:	7cfb      	ldrb	r3, [r7, #19]
 800519a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 80a0 	beq.w	80052ea <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051aa:	2300      	movs	r3, #0
 80051ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051ae:	4b47      	ldr	r3, [pc, #284]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80051ba:	2301      	movs	r3, #1
 80051bc:	e000      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80051be:	2300      	movs	r3, #0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00d      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051c4:	4b41      	ldr	r3, [pc, #260]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c8:	4a40      	ldr	r2, [pc, #256]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ce:	6593      	str	r3, [r2, #88]	; 0x58
 80051d0:	4b3e      	ldr	r3, [pc, #248]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d8:	60bb      	str	r3, [r7, #8]
 80051da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051dc:	2301      	movs	r3, #1
 80051de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051e0:	4b3b      	ldr	r3, [pc, #236]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a3a      	ldr	r2, [pc, #232]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80051e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051ec:	f7fc fc24 	bl	8001a38 <HAL_GetTick>
 80051f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051f2:	e009      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f4:	f7fc fc20 	bl	8001a38 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d902      	bls.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	74fb      	strb	r3, [r7, #19]
        break;
 8005206:	e005      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005208:	4b31      	ldr	r3, [pc, #196]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0ef      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005214:	7cfb      	ldrb	r3, [r7, #19]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d15c      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800521a:	4b2c      	ldr	r3, [pc, #176]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800521c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005224:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01f      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	429a      	cmp	r2, r3
 8005236:	d019      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005238:	4b24      	ldr	r3, [pc, #144]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800523a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005242:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005244:	4b21      	ldr	r3, [pc, #132]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524a:	4a20      	ldr	r2, [pc, #128]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800524c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005254:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525a:	4a1c      	ldr	r2, [pc, #112]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800525c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005264:	4a19      	ldr	r2, [pc, #100]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d016      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005276:	f7fc fbdf 	bl	8001a38 <HAL_GetTick>
 800527a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800527c:	e00b      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800527e:	f7fc fbdb 	bl	8001a38 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	f241 3288 	movw	r2, #5000	; 0x1388
 800528c:	4293      	cmp	r3, r2
 800528e:	d902      	bls.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	74fb      	strb	r3, [r7, #19]
            break;
 8005294:	e006      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005296:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0ec      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80052a4:	7cfb      	ldrb	r3, [r7, #19]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10c      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052aa:	4b08      	ldr	r3, [pc, #32]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ba:	4904      	ldr	r1, [pc, #16]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80052c2:	e009      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052c4:	7cfb      	ldrb	r3, [r7, #19]
 80052c6:	74bb      	strb	r3, [r7, #18]
 80052c8:	e006      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80052ca:	bf00      	nop
 80052cc:	40021000 	.word	0x40021000
 80052d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d4:	7cfb      	ldrb	r3, [r7, #19]
 80052d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052d8:	7c7b      	ldrb	r3, [r7, #17]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d105      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052de:	4b9e      	ldr	r3, [pc, #632]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e2:	4a9d      	ldr	r2, [pc, #628]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052f6:	4b98      	ldr	r3, [pc, #608]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fc:	f023 0203 	bic.w	r2, r3, #3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	4994      	ldr	r1, [pc, #592]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005306:	4313      	orrs	r3, r2
 8005308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005318:	4b8f      	ldr	r3, [pc, #572]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800531a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531e:	f023 020c 	bic.w	r2, r3, #12
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005326:	498c      	ldr	r1, [pc, #560]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005328:	4313      	orrs	r3, r2
 800532a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800533a:	4b87      	ldr	r3, [pc, #540]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005340:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	4983      	ldr	r1, [pc, #524]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800535c:	4b7e      	ldr	r3, [pc, #504]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005362:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536a:	497b      	ldr	r1, [pc, #492]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800537e:	4b76      	ldr	r3, [pc, #472]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005384:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800538c:	4972      	ldr	r1, [pc, #456]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800538e:	4313      	orrs	r3, r2
 8005390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053a0:	4b6d      	ldr	r3, [pc, #436]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ae:	496a      	ldr	r1, [pc, #424]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053c2:	4b65      	ldr	r3, [pc, #404]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d0:	4961      	ldr	r1, [pc, #388]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053e4:	4b5c      	ldr	r3, [pc, #368]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053f2:	4959      	ldr	r1, [pc, #356]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005406:	4b54      	ldr	r3, [pc, #336]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005414:	4950      	ldr	r1, [pc, #320]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005416:	4313      	orrs	r3, r2
 8005418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005428:	4b4b      	ldr	r3, [pc, #300]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800542a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005436:	4948      	ldr	r1, [pc, #288]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800544a:	4b43      	ldr	r3, [pc, #268]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800544c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005450:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005458:	493f      	ldr	r1, [pc, #252]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800545a:	4313      	orrs	r3, r2
 800545c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d028      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800546c:	4b3a      	ldr	r3, [pc, #232]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800546e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005472:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800547a:	4937      	ldr	r1, [pc, #220]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800547c:	4313      	orrs	r3, r2
 800547e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005486:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800548a:	d106      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800548c:	4b32      	ldr	r3, [pc, #200]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	4a31      	ldr	r2, [pc, #196]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005492:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005496:	60d3      	str	r3, [r2, #12]
 8005498:	e011      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800549e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054a2:	d10c      	bne.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3304      	adds	r3, #4
 80054a8:	2101      	movs	r1, #1
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 fd50 	bl	8005f50 <RCCEx_PLLSAI1_Config>
 80054b0:	4603      	mov	r3, r0
 80054b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80054b4:	7cfb      	ldrb	r3, [r7, #19]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80054ba:	7cfb      	ldrb	r3, [r7, #19]
 80054bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d028      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054ca:	4b23      	ldr	r3, [pc, #140]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d8:	491f      	ldr	r1, [pc, #124]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054e8:	d106      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054ea:	4b1b      	ldr	r3, [pc, #108]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	4a1a      	ldr	r2, [pc, #104]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054f4:	60d3      	str	r3, [r2, #12]
 80054f6:	e011      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005500:	d10c      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3304      	adds	r3, #4
 8005506:	2101      	movs	r1, #1
 8005508:	4618      	mov	r0, r3
 800550a:	f000 fd21 	bl	8005f50 <RCCEx_PLLSAI1_Config>
 800550e:	4603      	mov	r3, r0
 8005510:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005512:	7cfb      	ldrb	r3, [r7, #19]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8005518:	7cfb      	ldrb	r3, [r7, #19]
 800551a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d02b      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005528:	4b0b      	ldr	r3, [pc, #44]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005536:	4908      	ldr	r1, [pc, #32]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005542:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005546:	d109      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005548:	4b03      	ldr	r3, [pc, #12]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	4a02      	ldr	r2, [pc, #8]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800554e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005552:	60d3      	str	r3, [r2, #12]
 8005554:	e014      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005556:	bf00      	nop
 8005558:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005560:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005564:	d10c      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3304      	adds	r3, #4
 800556a:	2101      	movs	r1, #1
 800556c:	4618      	mov	r0, r3
 800556e:	f000 fcef 	bl	8005f50 <RCCEx_PLLSAI1_Config>
 8005572:	4603      	mov	r3, r0
 8005574:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005576:	7cfb      	ldrb	r3, [r7, #19]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800557c:	7cfb      	ldrb	r3, [r7, #19]
 800557e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d02f      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800558c:	4b2b      	ldr	r3, [pc, #172]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800558e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005592:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800559a:	4928      	ldr	r1, [pc, #160]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055aa:	d10d      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3304      	adds	r3, #4
 80055b0:	2102      	movs	r1, #2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fccc 	bl	8005f50 <RCCEx_PLLSAI1_Config>
 80055b8:	4603      	mov	r3, r0
 80055ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055bc:	7cfb      	ldrb	r3, [r7, #19]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d014      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80055c2:	7cfb      	ldrb	r3, [r7, #19]
 80055c4:	74bb      	strb	r3, [r7, #18]
 80055c6:	e011      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055d0:	d10c      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	3320      	adds	r3, #32
 80055d6:	2102      	movs	r1, #2
 80055d8:	4618      	mov	r0, r3
 80055da:	f000 fda9 	bl	8006130 <RCCEx_PLLSAI2_Config>
 80055de:	4603      	mov	r3, r0
 80055e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055e2:	7cfb      	ldrb	r3, [r7, #19]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80055e8:	7cfb      	ldrb	r3, [r7, #19]
 80055ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00a      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055f8:	4b10      	ldr	r3, [pc, #64]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005606:	490d      	ldr	r1, [pc, #52]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005608:	4313      	orrs	r3, r2
 800560a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00b      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800561a:	4b08      	ldr	r3, [pc, #32]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800561c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005620:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800562a:	4904      	ldr	r1, [pc, #16]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005632:	7cbb      	ldrb	r3, [r7, #18]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3718      	adds	r7, #24
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	40021000 	.word	0x40021000

08005640 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005652:	d137      	bne.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005654:	4bb8      	ldr	r3, [pc, #736]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800565e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005666:	d014      	beq.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8005668:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800566c:	d01e      	beq.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 800566e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005672:	d001      	beq.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005674:	f000 bc53 	b.w	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005678:	4baf      	ldr	r3, [pc, #700]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800567a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b02      	cmp	r3, #2
 8005684:	f040 8446 	bne.w	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        frequency = LSE_VALUE;
 8005688:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800568c:	61fb      	str	r3, [r7, #28]
      break;
 800568e:	f000 bc41 	b.w	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005692:	4ba9      	ldr	r3, [pc, #676]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b02      	cmp	r3, #2
 800569e:	f040 843b 	bne.w	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          frequency = LSI_VALUE;
 80056a2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80056a6:	61fb      	str	r3, [r7, #28]
      break;
 80056a8:	f000 bc36 	b.w	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80056ac:	4ba2      	ldr	r3, [pc, #648]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056b8:	f040 8430 	bne.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        frequency = HSE_VALUE / 32U;
 80056bc:	4b9f      	ldr	r3, [pc, #636]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80056be:	61fb      	str	r3, [r7, #28]
      break;
 80056c0:	f000 bc2c 	b.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056c4:	4b9c      	ldr	r3, [pc, #624]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f003 0303 	and.w	r3, r3, #3
 80056cc:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d023      	beq.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d02e      	beq.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d139      	bne.n	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80056dc:	4b96      	ldr	r3, [pc, #600]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d116      	bne.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80056e8:	4b93      	ldr	r3, [pc, #588]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0308 	and.w	r3, r3, #8
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d005      	beq.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 80056f4:	4b90      	ldr	r3, [pc, #576]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	091b      	lsrs	r3, r3, #4
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	e005      	b.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8005700:	4b8d      	ldr	r3, [pc, #564]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005706:	0a1b      	lsrs	r3, r3, #8
 8005708:	f003 030f 	and.w	r3, r3, #15
 800570c:	4a8c      	ldr	r2, [pc, #560]	; (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800570e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005712:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005714:	e01f      	b.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	61bb      	str	r3, [r7, #24]
      break;
 800571a:	e01c      	b.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800571c:	4b86      	ldr	r3, [pc, #536]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005728:	d102      	bne.n	8005730 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 800572a:	4b86      	ldr	r3, [pc, #536]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800572c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800572e:	e012      	b.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8005730:	2300      	movs	r3, #0
 8005732:	61bb      	str	r3, [r7, #24]
      break;
 8005734:	e00f      	b.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005736:	4b80      	ldr	r3, [pc, #512]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005742:	d102      	bne.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8005744:	4b80      	ldr	r3, [pc, #512]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8005746:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005748:	e005      	b.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	61bb      	str	r3, [r7, #24]
      break;
 800574e:	e002      	b.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	61bb      	str	r3, [r7, #24]
      break;
 8005754:	bf00      	nop
    }

    switch(PeriphClk)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800575c:	f000 8337 	beq.w	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 8005760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005764:	d825      	bhi.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8005766:	2b10      	cmp	r3, #16
 8005768:	f000 81df 	beq.w	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800576c:	2b10      	cmp	r3, #16
 800576e:	d80f      	bhi.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8005770:	2b02      	cmp	r3, #2
 8005772:	f000 8128 	beq.w	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8005776:	2b02      	cmp	r3, #2
 8005778:	d803      	bhi.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 800577a:	2b01      	cmp	r3, #1
 800577c:	f000 80ec 	beq.w	8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005780:	e3cd      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005782:	2b04      	cmp	r3, #4
 8005784:	f000 8169 	beq.w	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8005788:	2b08      	cmp	r3, #8
 800578a:	f000 819a 	beq.w	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 800578e:	e3c6      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005790:	2b40      	cmp	r3, #64	; 0x40
 8005792:	f000 82b3 	beq.w	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
 8005796:	2b40      	cmp	r3, #64	; 0x40
 8005798:	d803      	bhi.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 800579a:	2b20      	cmp	r3, #32
 800579c:	f000 81fd 	beq.w	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 80057a0:	e3bd      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80057a2:	2b80      	cmp	r3, #128	; 0x80
 80057a4:	f000 82cd 	beq.w	8005d42 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80057a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ac:	f000 82ec 	beq.w	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
      break;
 80057b0:	e3b5      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80057b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057b6:	f000 822d 	beq.w	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 80057ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057be:	d811      	bhi.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80057c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057c4:	d021      	beq.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 80057c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ca:	d804      	bhi.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80057cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d0:	f000 833e 	beq.w	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
      break;
 80057d4:	e3a3      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80057d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057da:	d01d      	beq.n	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80057dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057e0:	d021      	beq.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 80057e2:	e39c      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80057e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e8:	f000 8277 	beq.w	8005cda <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 80057ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f0:	d804      	bhi.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80057f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f6:	f000 8371 	beq.w	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
      break;
 80057fa:	e390      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80057fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005800:	d011      	beq.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005802:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005806:	d00e      	beq.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8005808:	e389      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800580a:	69b9      	ldr	r1, [r7, #24]
 800580c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005810:	f000 fd68 	bl	80062e4 <RCCEx_GetSAIxPeriphCLKFreq>
 8005814:	61f8      	str	r0, [r7, #28]
      break;
 8005816:	e382      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005818:	69b9      	ldr	r1, [r7, #24]
 800581a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800581e:	f000 fd61 	bl	80062e4 <RCCEx_GetSAIxPeriphCLKFreq>
 8005822:	61f8      	str	r0, [r7, #28]
      break;
 8005824:	e37b      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005826:	4b44      	ldr	r3, [pc, #272]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005830:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005838:	d023      	beq.n	8005882 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 800583a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800583e:	d003      	beq.n	8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005840:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005844:	d04a      	beq.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 8005846:	e086      	b.n	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005848:	4b3b      	ldr	r3, [pc, #236]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b02      	cmp	r3, #2
 8005852:	d17b      	bne.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005854:	4b38      	ldr	r3, [pc, #224]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0308 	and.w	r3, r3, #8
 800585c:	2b00      	cmp	r3, #0
 800585e:	d005      	beq.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8005860:	4b35      	ldr	r3, [pc, #212]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	091b      	lsrs	r3, r3, #4
 8005866:	f003 030f 	and.w	r3, r3, #15
 800586a:	e005      	b.n	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 800586c:	4b32      	ldr	r3, [pc, #200]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800586e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005872:	0a1b      	lsrs	r3, r3, #8
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	4a31      	ldr	r2, [pc, #196]	; (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800587a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800587e:	61fb      	str	r3, [r7, #28]
          break;
 8005880:	e064      	b.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005882:	4b2d      	ldr	r3, [pc, #180]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800588e:	d15f      	bne.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005890:	4b29      	ldr	r3, [pc, #164]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005898:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800589c:	d158      	bne.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800589e:	4b26      	ldr	r3, [pc, #152]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	0a1b      	lsrs	r3, r3, #8
 80058a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058a8:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	fb02 f203 	mul.w	r2, r2, r3
 80058b2:	4b21      	ldr	r3, [pc, #132]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	091b      	lsrs	r3, r3, #4
 80058b8:	f003 0307 	and.w	r3, r3, #7
 80058bc:	3301      	adds	r3, #1
 80058be:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80058c4:	4b1c      	ldr	r3, [pc, #112]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	0d5b      	lsrs	r3, r3, #21
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	3301      	adds	r3, #1
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d8:	61fb      	str	r3, [r7, #28]
          break;
 80058da:	e039      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80058dc:	4b16      	ldr	r3, [pc, #88]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058e8:	d134      	bne.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80058ea:	4b13      	ldr	r3, [pc, #76]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058f6:	d12d      	bne.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80058f8:	4b0f      	ldr	r3, [pc, #60]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	0a1b      	lsrs	r3, r3, #8
 80058fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005902:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	fb02 f203 	mul.w	r2, r2, r3
 800590c:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	091b      	lsrs	r3, r3, #4
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	3301      	adds	r3, #1
 8005918:	fbb2 f3f3 	udiv	r3, r2, r3
 800591c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800591e:	4b06      	ldr	r3, [pc, #24]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	0d5b      	lsrs	r3, r3, #21
 8005924:	f003 0303 	and.w	r3, r3, #3
 8005928:	3301      	adds	r3, #1
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005932:	61fb      	str	r3, [r7, #28]
          break;
 8005934:	e00e      	b.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005936:	bf00      	nop
 8005938:	40021000 	.word	0x40021000
 800593c:	0003d090 	.word	0x0003d090
 8005940:	0800a9e4 	.word	0x0800a9e4
 8005944:	00f42400 	.word	0x00f42400
 8005948:	007a1200 	.word	0x007a1200
          break;
 800594c:	bf00      	nop
 800594e:	e2e6      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005950:	bf00      	nop
 8005952:	e2e4      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005954:	bf00      	nop
        break;
 8005956:	e2e2      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005958:	4bac      	ldr	r3, [pc, #688]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800595a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	2b03      	cmp	r3, #3
 8005968:	d827      	bhi.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800596a:	a201      	add	r2, pc, #4	; (adr r2, 8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 800596c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005970:	08005981 	.word	0x08005981
 8005974:	08005989 	.word	0x08005989
 8005978:	08005991 	.word	0x08005991
 800597c:	080059a5 	.word	0x080059a5
          frequency = HAL_RCC_GetPCLK2Freq();
 8005980:	f7ff fb02 	bl	8004f88 <HAL_RCC_GetPCLK2Freq>
 8005984:	61f8      	str	r0, [r7, #28]
          break;
 8005986:	e01d      	b.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 8005988:	f7ff fa52 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 800598c:	61f8      	str	r0, [r7, #28]
          break;
 800598e:	e019      	b.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005990:	4b9e      	ldr	r3, [pc, #632]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800599c:	d10f      	bne.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 800599e:	4b9c      	ldr	r3, [pc, #624]	; (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80059a0:	61fb      	str	r3, [r7, #28]
          break;
 80059a2:	e00c      	b.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80059a4:	4b99      	ldr	r3, [pc, #612]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80059a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d107      	bne.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 80059b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059b6:	61fb      	str	r3, [r7, #28]
          break;
 80059b8:	e003      	b.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 80059ba:	bf00      	nop
 80059bc:	e2af      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80059be:	bf00      	nop
 80059c0:	e2ad      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80059c2:	bf00      	nop
        break;
 80059c4:	e2ab      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80059c6:	4b91      	ldr	r3, [pc, #580]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80059c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059cc:	f003 030c 	and.w	r3, r3, #12
 80059d0:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b0c      	cmp	r3, #12
 80059d6:	d83a      	bhi.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80059d8:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 80059da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059de:	bf00      	nop
 80059e0:	08005a15 	.word	0x08005a15
 80059e4:	08005a4f 	.word	0x08005a4f
 80059e8:	08005a4f 	.word	0x08005a4f
 80059ec:	08005a4f 	.word	0x08005a4f
 80059f0:	08005a1d 	.word	0x08005a1d
 80059f4:	08005a4f 	.word	0x08005a4f
 80059f8:	08005a4f 	.word	0x08005a4f
 80059fc:	08005a4f 	.word	0x08005a4f
 8005a00:	08005a25 	.word	0x08005a25
 8005a04:	08005a4f 	.word	0x08005a4f
 8005a08:	08005a4f 	.word	0x08005a4f
 8005a0c:	08005a4f 	.word	0x08005a4f
 8005a10:	08005a39 	.word	0x08005a39
          frequency = HAL_RCC_GetPCLK1Freq();
 8005a14:	f7ff faa2 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 8005a18:	61f8      	str	r0, [r7, #28]
          break;
 8005a1a:	e01d      	b.n	8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a1c:	f7ff fa08 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 8005a20:	61f8      	str	r0, [r7, #28]
          break;
 8005a22:	e019      	b.n	8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a24:	4b79      	ldr	r3, [pc, #484]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a30:	d10f      	bne.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 8005a32:	4b77      	ldr	r3, [pc, #476]	; (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005a34:	61fb      	str	r3, [r7, #28]
          break;
 8005a36:	e00c      	b.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005a38:	4b74      	ldr	r3, [pc, #464]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d107      	bne.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 8005a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a4a:	61fb      	str	r3, [r7, #28]
          break;
 8005a4c:	e003      	b.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 8005a4e:	bf00      	nop
 8005a50:	e265      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005a52:	bf00      	nop
 8005a54:	e263      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005a56:	bf00      	nop
        break;
 8005a58:	e261      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005a5a:	4b6c      	ldr	r3, [pc, #432]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a64:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	2b10      	cmp	r3, #16
 8005a6a:	d00d      	beq.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8005a6c:	2b10      	cmp	r3, #16
 8005a6e:	d802      	bhi.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 8005a74:	e024      	b.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 8005a76:	2b20      	cmp	r3, #32
 8005a78:	d00a      	beq.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8005a7a:	2b30      	cmp	r3, #48	; 0x30
 8005a7c:	d012      	beq.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 8005a7e:	e01f      	b.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005a80:	f7ff fa6c 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 8005a84:	61f8      	str	r0, [r7, #28]
          break;
 8005a86:	e01b      	b.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a88:	f7ff f9d2 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 8005a8c:	61f8      	str	r0, [r7, #28]
          break;
 8005a8e:	e017      	b.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a90:	4b5e      	ldr	r3, [pc, #376]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a9c:	d10d      	bne.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 8005a9e:	4b5c      	ldr	r3, [pc, #368]	; (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005aa0:	61fb      	str	r3, [r7, #28]
          break;
 8005aa2:	e00a      	b.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005aa4:	4b59      	ldr	r3, [pc, #356]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d105      	bne.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 8005ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ab6:	61fb      	str	r3, [r7, #28]
          break;
 8005ab8:	e001      	b.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8005aba:	bf00      	nop
 8005abc:	e22f      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005abe:	bf00      	nop
        break;
 8005ac0:	e22d      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005ac2:	4b52      	ldr	r3, [pc, #328]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005acc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	2b40      	cmp	r3, #64	; 0x40
 8005ad2:	d00d      	beq.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 8005ad4:	2b40      	cmp	r3, #64	; 0x40
 8005ad6:	d802      	bhi.n	8005ade <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d005      	beq.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 8005adc:	e024      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 8005ade:	2b80      	cmp	r3, #128	; 0x80
 8005ae0:	d00a      	beq.n	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8005ae2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ae4:	d012      	beq.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 8005ae6:	e01f      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ae8:	f7ff fa38 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 8005aec:	61f8      	str	r0, [r7, #28]
          break;
 8005aee:	e01b      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 8005af0:	f7ff f99e 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 8005af4:	61f8      	str	r0, [r7, #28]
          break;
 8005af6:	e017      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005af8:	4b44      	ldr	r3, [pc, #272]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b04:	d10d      	bne.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 8005b06:	4b42      	ldr	r3, [pc, #264]	; (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005b08:	61fb      	str	r3, [r7, #28]
          break;
 8005b0a:	e00a      	b.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005b0c:	4b3f      	ldr	r3, [pc, #252]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d105      	bne.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 8005b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b1e:	61fb      	str	r3, [r7, #28]
          break;
 8005b20:	e001      	b.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 8005b22:	bf00      	nop
 8005b24:	e1fb      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005b26:	bf00      	nop
        break;
 8005b28:	e1f9      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005b2a:	4b38      	ldr	r3, [pc, #224]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b34:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b3c:	d010      	beq.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8005b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b42:	d802      	bhi.n	8005b4a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d007      	beq.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 8005b48:	e026      	b.n	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 8005b4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b4e:	d00b      	beq.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005b50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b54:	d012      	beq.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 8005b56:	e01f      	b.n	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b58:	f7ff fa00 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 8005b5c:	61f8      	str	r0, [r7, #28]
          break;
 8005b5e:	e01b      	b.n	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b60:	f7ff f966 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 8005b64:	61f8      	str	r0, [r7, #28]
          break;
 8005b66:	e017      	b.n	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b68:	4b28      	ldr	r3, [pc, #160]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b74:	d10d      	bne.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 8005b76:	4b26      	ldr	r3, [pc, #152]	; (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005b78:	61fb      	str	r3, [r7, #28]
          break;
 8005b7a:	e00a      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005b7c:	4b23      	ldr	r3, [pc, #140]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d105      	bne.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 8005b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b8e:	61fb      	str	r3, [r7, #28]
          break;
 8005b90:	e001      	b.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 8005b92:	bf00      	nop
 8005b94:	e1c3      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005b96:	bf00      	nop
        break;
 8005b98:	e1c1      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005b9a:	4b1c      	ldr	r3, [pc, #112]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ba4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bac:	d010      	beq.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8005bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb2:	d802      	bhi.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 8005bb8:	e026      	b.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 8005bba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bbe:	d00b      	beq.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8005bc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bc4:	d012      	beq.n	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 8005bc6:	e01f      	b.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bc8:	f7ff f9c8 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 8005bcc:	61f8      	str	r0, [r7, #28]
          break;
 8005bce:	e01b      	b.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 8005bd0:	f7ff f92e 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 8005bd4:	61f8      	str	r0, [r7, #28]
          break;
 8005bd6:	e017      	b.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bd8:	4b0c      	ldr	r3, [pc, #48]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be4:	d10d      	bne.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 8005be6:	4b0a      	ldr	r3, [pc, #40]	; (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005be8:	61fb      	str	r3, [r7, #28]
          break;
 8005bea:	e00a      	b.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005bec:	4b07      	ldr	r3, [pc, #28]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d105      	bne.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 8005bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bfe:	61fb      	str	r3, [r7, #28]
          break;
 8005c00:	e001      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 8005c02:	bf00      	nop
 8005c04:	e18b      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005c06:	bf00      	nop
        break;
 8005c08:	e189      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8005c0a:	bf00      	nop
 8005c0c:	40021000 	.word	0x40021000
 8005c10:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005c14:	4bae      	ldr	r3, [pc, #696]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c1e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c26:	d02f      	beq.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8005c28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c2c:	d003      	beq.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005c2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c32:	d004      	beq.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 8005c34:	e050      	b.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c36:	f7ff f8fb 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 8005c3a:	61f8      	str	r0, [r7, #28]
          break;
 8005c3c:	e04c      	b.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8005c3e:	4ba4      	ldr	r3, [pc, #656]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d043      	beq.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005c4a:	4ba1      	ldr	r3, [pc, #644]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	0a1b      	lsrs	r3, r3, #8
 8005c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c54:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	fb02 f203 	mul.w	r2, r2, r3
 8005c5e:	4b9c      	ldr	r3, [pc, #624]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	091b      	lsrs	r3, r3, #4
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	3301      	adds	r3, #1
 8005c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6e:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005c70:	4b97      	ldr	r3, [pc, #604]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	0e5b      	lsrs	r3, r3, #25
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c84:	61fb      	str	r3, [r7, #28]
          break;
 8005c86:	e024      	b.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 8005c88:	4b91      	ldr	r3, [pc, #580]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d020      	beq.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005c94:	4b8e      	ldr	r3, [pc, #568]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	0a1b      	lsrs	r3, r3, #8
 8005c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c9e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	fb02 f203 	mul.w	r2, r2, r3
 8005ca8:	4b89      	ldr	r3, [pc, #548]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	091b      	lsrs	r3, r3, #4
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8005cba:	4b85      	ldr	r3, [pc, #532]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	0e5b      	lsrs	r3, r3, #25
 8005cc0:	f003 0303 	and.w	r3, r3, #3
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cce:	61fb      	str	r3, [r7, #28]
          break;
 8005cd0:	e001      	b.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          break;
 8005cd2:	bf00      	nop
 8005cd4:	e123      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005cd6:	bf00      	nop
        break;
 8005cd8:	e121      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005cda:	4b7d      	ldr	r3, [pc, #500]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ce4:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d103      	bne.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005cec:	f7ff f94c 	bl	8004f88 <HAL_RCC_GetPCLK2Freq>
 8005cf0:	61f8      	str	r0, [r7, #28]
        break;
 8005cf2:	e114      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 8005cf4:	f7ff f89c 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 8005cf8:	61f8      	str	r0, [r7, #28]
        break;
 8005cfa:	e110      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005cfc:	4b74      	ldr	r3, [pc, #464]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d02:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005d06:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d0e:	d009      	beq.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8005d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d14:	d00a      	beq.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d000      	beq.n	8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          break;
 8005d1a:	e011      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d1c:	f7ff f91e 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 8005d20:	61f8      	str	r0, [r7, #28]
          break;
 8005d22:	e00d      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d24:	f7ff f884 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 8005d28:	61f8      	str	r0, [r7, #28]
          break;
 8005d2a:	e009      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d2c:	4b68      	ldr	r3, [pc, #416]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d38:	d101      	bne.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
            frequency = HSI_VALUE;
 8005d3a:	4b66      	ldr	r3, [pc, #408]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8005d3c:	61fb      	str	r3, [r7, #28]
          break;
 8005d3e:	bf00      	nop
        break;
 8005d40:	e0ed      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005d42:	4b63      	ldr	r3, [pc, #396]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d4c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d54:	d009      	beq.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8005d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d5a:	d00a      	beq.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d000      	beq.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 8005d60:	e011      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d62:	f7ff f8fb 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 8005d66:	61f8      	str	r0, [r7, #28]
          break;
 8005d68:	e00d      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d6a:	f7ff f861 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 8005d6e:	61f8      	str	r0, [r7, #28]
          break;
 8005d70:	e009      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d72:	4b57      	ldr	r3, [pc, #348]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d7e:	d101      	bne.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
            frequency = HSI_VALUE;
 8005d80:	4b54      	ldr	r3, [pc, #336]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8005d82:	61fb      	str	r3, [r7, #28]
          break;
 8005d84:	bf00      	nop
        break;
 8005d86:	e0ca      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005d88:	4b51      	ldr	r3, [pc, #324]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d92:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d9a:	d009      	beq.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8005d9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005da0:	d00a      	beq.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d000      	beq.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 8005da6:	e011      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005da8:	f7ff f8d8 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 8005dac:	61f8      	str	r0, [r7, #28]
          break;
 8005dae:	e00d      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005db0:	f7ff f83e 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 8005db4:	61f8      	str	r0, [r7, #28]
          break;
 8005db6:	e009      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005db8:	4b45      	ldr	r3, [pc, #276]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dc4:	d101      	bne.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            frequency = HSI_VALUE;
 8005dc6:	4b43      	ldr	r3, [pc, #268]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8005dc8:	61fb      	str	r3, [r7, #28]
          break;
 8005dca:	bf00      	nop
        break;
 8005dcc:	e0a7      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005dce:	4b40      	ldr	r3, [pc, #256]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005dd8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005de0:	d010      	beq.n	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8005de2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005de6:	d802      	bhi.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d007      	beq.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
          break;
 8005dec:	e02f      	b.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
        switch(srcclk)
 8005dee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005df2:	d012      	beq.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8005df4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005df8:	d019      	beq.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8005dfa:	e028      	b.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005dfc:	f7ff f8ae 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 8005e00:	61f8      	str	r0, [r7, #28]
          break;
 8005e02:	e024      	b.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005e04:	4b32      	ldr	r3, [pc, #200]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d118      	bne.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
              frequency = LSI_VALUE;
 8005e12:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005e16:	61fb      	str	r3, [r7, #28]
          break;
 8005e18:	e014      	b.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e1a:	4b2d      	ldr	r3, [pc, #180]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e26:	d10f      	bne.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
            frequency = HSI_VALUE;
 8005e28:	4b2a      	ldr	r3, [pc, #168]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8005e2a:	61fb      	str	r3, [r7, #28]
          break;
 8005e2c:	e00c      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e2e:	4b28      	ldr	r3, [pc, #160]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d107      	bne.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
            frequency = LSE_VALUE;
 8005e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e40:	61fb      	str	r3, [r7, #28]
          break;
 8005e42:	e003      	b.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          break;
 8005e44:	bf00      	nop
 8005e46:	e06a      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005e48:	bf00      	nop
 8005e4a:	e068      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005e4c:	bf00      	nop
        break;
 8005e4e:	e066      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005e50:	4b1f      	ldr	r3, [pc, #124]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e56:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005e5a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e62:	d010      	beq.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8005e64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e68:	d802      	bhi.n	8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d007      	beq.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          break;
 8005e6e:	e034      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
        switch(srcclk)
 8005e70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e74:	d012      	beq.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8005e76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e7a:	d019      	beq.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          break;
 8005e7c:	e02d      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e7e:	f7ff f86d 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 8005e82:	61f8      	str	r0, [r7, #28]
          break;
 8005e84:	e029      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005e86:	4b12      	ldr	r3, [pc, #72]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d118      	bne.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = LSI_VALUE;
 8005e94:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005e98:	61fb      	str	r3, [r7, #28]
          break;
 8005e9a:	e014      	b.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e9c:	4b0c      	ldr	r3, [pc, #48]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea8:	d10f      	bne.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
            frequency = HSI_VALUE;
 8005eaa:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8005eac:	61fb      	str	r3, [r7, #28]
          break;
 8005eae:	e00c      	b.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005eb0:	4b07      	ldr	r3, [pc, #28]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d10c      	bne.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
            frequency = LSE_VALUE;
 8005ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ec2:	61fb      	str	r3, [r7, #28]
          break;
 8005ec4:	e008      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          break;
 8005ec6:	bf00      	nop
 8005ec8:	e029      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005eca:	bf00      	nop
 8005ecc:	e027      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8005ece:	bf00      	nop
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	00f42400 	.word	0x00f42400
          break;
 8005ed8:	bf00      	nop
        break;
 8005eda:	e020      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8005edc:	4b12      	ldr	r3, [pc, #72]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8005ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ee6:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
 8005eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef2:	d004      	beq.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          break;
 8005ef4:	e00d      	b.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ef6:	f7ff f831 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 8005efa:	61f8      	str	r0, [r7, #28]
          break;
 8005efc:	e009      	b.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005efe:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f0a:	d101      	bne.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
            frequency = HSI_VALUE;
 8005f0c:	4b07      	ldr	r3, [pc, #28]	; (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
 8005f0e:	61fb      	str	r3, [r7, #28]
          break;
 8005f10:	bf00      	nop
        break;
 8005f12:	e004      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8005f14:	bf00      	nop
 8005f16:	e002      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8005f18:	bf00      	nop
 8005f1a:	e000      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8005f1c:	bf00      	nop
    }
  }

  return(frequency);
 8005f1e:	69fb      	ldr	r3, [r7, #28]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3720      	adds	r7, #32
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	00f42400 	.word	0x00f42400

08005f30 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005f30:	b480      	push	{r7}
 8005f32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005f34:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a04      	ldr	r2, [pc, #16]	; (8005f4c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005f3a:	f043 0304 	orr.w	r3, r3, #4
 8005f3e:	6013      	str	r3, [r2, #0]
}
 8005f40:	bf00      	nop
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40021000 	.word	0x40021000

08005f50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f5e:	4b73      	ldr	r3, [pc, #460]	; (800612c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f003 0303 	and.w	r3, r3, #3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d018      	beq.n	8005f9c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005f6a:	4b70      	ldr	r3, [pc, #448]	; (800612c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	f003 0203 	and.w	r2, r3, #3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d10d      	bne.n	8005f96 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
       ||
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d009      	beq.n	8005f96 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005f82:	4b6a      	ldr	r3, [pc, #424]	; (800612c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	091b      	lsrs	r3, r3, #4
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
       ||
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d044      	beq.n	8006020 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	73fb      	strb	r3, [r7, #15]
 8005f9a:	e041      	b.n	8006020 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d00c      	beq.n	8005fbe <RCCEx_PLLSAI1_Config+0x6e>
 8005fa4:	2b03      	cmp	r3, #3
 8005fa6:	d013      	beq.n	8005fd0 <RCCEx_PLLSAI1_Config+0x80>
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d120      	bne.n	8005fee <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005fac:	4b5f      	ldr	r3, [pc, #380]	; (800612c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d11d      	bne.n	8005ff4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fbc:	e01a      	b.n	8005ff4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005fbe:	4b5b      	ldr	r3, [pc, #364]	; (800612c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d116      	bne.n	8005ff8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fce:	e013      	b.n	8005ff8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005fd0:	4b56      	ldr	r3, [pc, #344]	; (800612c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10f      	bne.n	8005ffc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005fdc:	4b53      	ldr	r3, [pc, #332]	; (800612c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d109      	bne.n	8005ffc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fec:	e006      	b.n	8005ffc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff2:	e004      	b.n	8005ffe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005ff4:	bf00      	nop
 8005ff6:	e002      	b.n	8005ffe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005ff8:	bf00      	nop
 8005ffa:	e000      	b.n	8005ffe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005ffc:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10d      	bne.n	8006020 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006004:	4b49      	ldr	r3, [pc, #292]	; (800612c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6819      	ldr	r1, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	3b01      	subs	r3, #1
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	430b      	orrs	r3, r1
 800601a:	4944      	ldr	r1, [pc, #272]	; (800612c <RCCEx_PLLSAI1_Config+0x1dc>)
 800601c:	4313      	orrs	r3, r2
 800601e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006020:	7bfb      	ldrb	r3, [r7, #15]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d17d      	bne.n	8006122 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006026:	4b41      	ldr	r3, [pc, #260]	; (800612c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a40      	ldr	r2, [pc, #256]	; (800612c <RCCEx_PLLSAI1_Config+0x1dc>)
 800602c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006030:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006032:	f7fb fd01 	bl	8001a38 <HAL_GetTick>
 8006036:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006038:	e009      	b.n	800604e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800603a:	f7fb fcfd 	bl	8001a38 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d902      	bls.n	800604e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	73fb      	strb	r3, [r7, #15]
        break;
 800604c:	e005      	b.n	800605a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800604e:	4b37      	ldr	r3, [pc, #220]	; (800612c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1ef      	bne.n	800603a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800605a:	7bfb      	ldrb	r3, [r7, #15]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d160      	bne.n	8006122 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d111      	bne.n	800608a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006066:	4b31      	ldr	r3, [pc, #196]	; (800612c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800606e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6892      	ldr	r2, [r2, #8]
 8006076:	0211      	lsls	r1, r2, #8
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	68d2      	ldr	r2, [r2, #12]
 800607c:	0912      	lsrs	r2, r2, #4
 800607e:	0452      	lsls	r2, r2, #17
 8006080:	430a      	orrs	r2, r1
 8006082:	492a      	ldr	r1, [pc, #168]	; (800612c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006084:	4313      	orrs	r3, r2
 8006086:	610b      	str	r3, [r1, #16]
 8006088:	e027      	b.n	80060da <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d112      	bne.n	80060b6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006090:	4b26      	ldr	r3, [pc, #152]	; (800612c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006098:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6892      	ldr	r2, [r2, #8]
 80060a0:	0211      	lsls	r1, r2, #8
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	6912      	ldr	r2, [r2, #16]
 80060a6:	0852      	lsrs	r2, r2, #1
 80060a8:	3a01      	subs	r2, #1
 80060aa:	0552      	lsls	r2, r2, #21
 80060ac:	430a      	orrs	r2, r1
 80060ae:	491f      	ldr	r1, [pc, #124]	; (800612c <RCCEx_PLLSAI1_Config+0x1dc>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	610b      	str	r3, [r1, #16]
 80060b4:	e011      	b.n	80060da <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060b6:	4b1d      	ldr	r3, [pc, #116]	; (800612c <RCCEx_PLLSAI1_Config+0x1dc>)
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80060be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	6892      	ldr	r2, [r2, #8]
 80060c6:	0211      	lsls	r1, r2, #8
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	6952      	ldr	r2, [r2, #20]
 80060cc:	0852      	lsrs	r2, r2, #1
 80060ce:	3a01      	subs	r2, #1
 80060d0:	0652      	lsls	r2, r2, #25
 80060d2:	430a      	orrs	r2, r1
 80060d4:	4915      	ldr	r1, [pc, #84]	; (800612c <RCCEx_PLLSAI1_Config+0x1dc>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80060da:	4b14      	ldr	r3, [pc, #80]	; (800612c <RCCEx_PLLSAI1_Config+0x1dc>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a13      	ldr	r2, [pc, #76]	; (800612c <RCCEx_PLLSAI1_Config+0x1dc>)
 80060e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060e4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e6:	f7fb fca7 	bl	8001a38 <HAL_GetTick>
 80060ea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060ec:	e009      	b.n	8006102 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060ee:	f7fb fca3 	bl	8001a38 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d902      	bls.n	8006102 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	73fb      	strb	r3, [r7, #15]
          break;
 8006100:	e005      	b.n	800610e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006102:	4b0a      	ldr	r3, [pc, #40]	; (800612c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0ef      	beq.n	80060ee <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800610e:	7bfb      	ldrb	r3, [r7, #15]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d106      	bne.n	8006122 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006114:	4b05      	ldr	r3, [pc, #20]	; (800612c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006116:	691a      	ldr	r2, [r3, #16]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	4903      	ldr	r1, [pc, #12]	; (800612c <RCCEx_PLLSAI1_Config+0x1dc>)
 800611e:	4313      	orrs	r3, r2
 8006120:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006122:	7bfb      	ldrb	r3, [r7, #15]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	40021000 	.word	0x40021000

08006130 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800613e:	4b68      	ldr	r3, [pc, #416]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f003 0303 	and.w	r3, r3, #3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d018      	beq.n	800617c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800614a:	4b65      	ldr	r3, [pc, #404]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	f003 0203 	and.w	r2, r3, #3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	429a      	cmp	r2, r3
 8006158:	d10d      	bne.n	8006176 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
       ||
 800615e:	2b00      	cmp	r3, #0
 8006160:	d009      	beq.n	8006176 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006162:	4b5f      	ldr	r3, [pc, #380]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	091b      	lsrs	r3, r3, #4
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	1c5a      	adds	r2, r3, #1
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
       ||
 8006172:	429a      	cmp	r2, r3
 8006174:	d044      	beq.n	8006200 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	73fb      	strb	r3, [r7, #15]
 800617a:	e041      	b.n	8006200 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b02      	cmp	r3, #2
 8006182:	d00c      	beq.n	800619e <RCCEx_PLLSAI2_Config+0x6e>
 8006184:	2b03      	cmp	r3, #3
 8006186:	d013      	beq.n	80061b0 <RCCEx_PLLSAI2_Config+0x80>
 8006188:	2b01      	cmp	r3, #1
 800618a:	d120      	bne.n	80061ce <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800618c:	4b54      	ldr	r3, [pc, #336]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d11d      	bne.n	80061d4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800619c:	e01a      	b.n	80061d4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800619e:	4b50      	ldr	r3, [pc, #320]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d116      	bne.n	80061d8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061ae:	e013      	b.n	80061d8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80061b0:	4b4b      	ldr	r3, [pc, #300]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10f      	bne.n	80061dc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80061bc:	4b48      	ldr	r3, [pc, #288]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d109      	bne.n	80061dc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80061cc:	e006      	b.n	80061dc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	73fb      	strb	r3, [r7, #15]
      break;
 80061d2:	e004      	b.n	80061de <RCCEx_PLLSAI2_Config+0xae>
      break;
 80061d4:	bf00      	nop
 80061d6:	e002      	b.n	80061de <RCCEx_PLLSAI2_Config+0xae>
      break;
 80061d8:	bf00      	nop
 80061da:	e000      	b.n	80061de <RCCEx_PLLSAI2_Config+0xae>
      break;
 80061dc:	bf00      	nop
    }

    if(status == HAL_OK)
 80061de:	7bfb      	ldrb	r3, [r7, #15]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10d      	bne.n	8006200 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80061e4:	4b3e      	ldr	r3, [pc, #248]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6819      	ldr	r1, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	3b01      	subs	r3, #1
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	430b      	orrs	r3, r1
 80061fa:	4939      	ldr	r1, [pc, #228]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d167      	bne.n	80062d6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006206:	4b36      	ldr	r3, [pc, #216]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a35      	ldr	r2, [pc, #212]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800620c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006212:	f7fb fc11 	bl	8001a38 <HAL_GetTick>
 8006216:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006218:	e009      	b.n	800622e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800621a:	f7fb fc0d 	bl	8001a38 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	2b02      	cmp	r3, #2
 8006226:	d902      	bls.n	800622e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	73fb      	strb	r3, [r7, #15]
        break;
 800622c:	e005      	b.n	800623a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800622e:	4b2c      	ldr	r3, [pc, #176]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1ef      	bne.n	800621a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800623a:	7bfb      	ldrb	r3, [r7, #15]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d14a      	bne.n	80062d6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d111      	bne.n	800626a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006246:	4b26      	ldr	r3, [pc, #152]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800624e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	6892      	ldr	r2, [r2, #8]
 8006256:	0211      	lsls	r1, r2, #8
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	68d2      	ldr	r2, [r2, #12]
 800625c:	0912      	lsrs	r2, r2, #4
 800625e:	0452      	lsls	r2, r2, #17
 8006260:	430a      	orrs	r2, r1
 8006262:	491f      	ldr	r1, [pc, #124]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006264:	4313      	orrs	r3, r2
 8006266:	614b      	str	r3, [r1, #20]
 8006268:	e011      	b.n	800628e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800626a:	4b1d      	ldr	r3, [pc, #116]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006272:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	6892      	ldr	r2, [r2, #8]
 800627a:	0211      	lsls	r1, r2, #8
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6912      	ldr	r2, [r2, #16]
 8006280:	0852      	lsrs	r2, r2, #1
 8006282:	3a01      	subs	r2, #1
 8006284:	0652      	lsls	r2, r2, #25
 8006286:	430a      	orrs	r2, r1
 8006288:	4915      	ldr	r1, [pc, #84]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800628a:	4313      	orrs	r3, r2
 800628c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800628e:	4b14      	ldr	r3, [pc, #80]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a13      	ldr	r2, [pc, #76]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006298:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800629a:	f7fb fbcd 	bl	8001a38 <HAL_GetTick>
 800629e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80062a0:	e009      	b.n	80062b6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80062a2:	f7fb fbc9 	bl	8001a38 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d902      	bls.n	80062b6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	73fb      	strb	r3, [r7, #15]
          break;
 80062b4:	e005      	b.n	80062c2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80062b6:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d0ef      	beq.n	80062a2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d106      	bne.n	80062d6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80062c8:	4b05      	ldr	r3, [pc, #20]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80062ca:	695a      	ldr	r2, [r3, #20]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	695b      	ldr	r3, [r3, #20]
 80062d0:	4903      	ldr	r1, [pc, #12]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40021000 	.word	0x40021000

080062e4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b089      	sub	sp, #36	; 0x24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006300:	d10c      	bne.n	800631c <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006302:	4b62      	ldr	r3, [pc, #392]	; (800648c <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006308:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800630c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006314:	d112      	bne.n	800633c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006316:	4b5e      	ldr	r3, [pc, #376]	; (8006490 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8006318:	61fb      	str	r3, [r7, #28]
 800631a:	e00f      	b.n	800633c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006322:	d10b      	bne.n	800633c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006324:	4b59      	ldr	r3, [pc, #356]	; (800648c <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800632e:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006336:	d101      	bne.n	800633c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006338:	4b55      	ldr	r3, [pc, #340]	; (8006490 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 800633a:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	2b00      	cmp	r3, #0
 8006340:	f040 809c 	bne.w	800647c <RCCEx_GetSAIxPeriphCLKFreq+0x198>
  {
    pllvco = InputFrequency;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800634e:	d003      	beq.n	8006358 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006356:	d12d      	bne.n	80063b4 <RCCEx_GetSAIxPeriphCLKFreq+0xd0>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8006358:	4b4c      	ldr	r3, [pc, #304]	; (800648c <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006360:	2b00      	cmp	r3, #0
 8006362:	f000 808b 	beq.w	800647c <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006366:	4b49      	ldr	r3, [pc, #292]	; (800648c <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	091b      	lsrs	r3, r3, #4
 800636c:	f003 0307 	and.w	r3, r3, #7
 8006370:	3301      	adds	r3, #1
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	fbb2 f3f3 	udiv	r3, r2, r3
 8006378:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800637a:	4b44      	ldr	r3, [pc, #272]	; (800648c <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	0a1b      	lsrs	r3, r3, #8
 8006380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006384:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10a      	bne.n	80063a2 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800638c:	4b3f      	ldr	r3, [pc, #252]	; (800648c <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <RCCEx_GetSAIxPeriphCLKFreq+0xba>
          {
            pllp = 17U;
 8006398:	2311      	movs	r3, #17
 800639a:	617b      	str	r3, [r7, #20]
 800639c:	e001      	b.n	80063a2 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
          }
          else
          {
            pllp = 7U;
 800639e:	2307      	movs	r3, #7
 80063a0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	fb02 f203 	mul.w	r2, r2, r3
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b0:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 80063b2:	e063      	b.n	800647c <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d12c      	bne.n	8006414 <RCCEx_GetSAIxPeriphCLKFreq+0x130>
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 80063ba:	4b34      	ldr	r3, [pc, #208]	; (800648c <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d05a      	beq.n	800647c <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80063c6:	4b31      	ldr	r3, [pc, #196]	; (800648c <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	091b      	lsrs	r3, r3, #4
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	3301      	adds	r3, #1
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d8:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80063da:	4b2c      	ldr	r3, [pc, #176]	; (800648c <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	0a1b      	lsrs	r3, r3, #8
 80063e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063e4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10a      	bne.n	8006402 <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80063ec:	4b27      	ldr	r3, [pc, #156]	; (800648c <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <RCCEx_GetSAIxPeriphCLKFreq+0x11a>
          {
            pllp = 17U;
 80063f8:	2311      	movs	r3, #17
 80063fa:	617b      	str	r3, [r7, #20]
 80063fc:	e001      	b.n	8006402 <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
          }
          else
          {
            pllp = 7U;
 80063fe:	2307      	movs	r3, #7
 8006400:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	fb02 f203 	mul.w	r2, r2, r3
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006410:	61fb      	str	r3, [r7, #28]
 8006412:	e033      	b.n	800647c <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800641a:	d003      	beq.n	8006424 <RCCEx_GetSAIxPeriphCLKFreq+0x140>
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006422:	d12b      	bne.n	800647c <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8006424:	4b19      	ldr	r3, [pc, #100]	; (800648c <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d025      	beq.n	800647c <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006430:	4b16      	ldr	r3, [pc, #88]	; (800648c <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	091b      	lsrs	r3, r3, #4
 8006436:	f003 0307 	and.w	r3, r3, #7
 800643a:	3301      	adds	r3, #1
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006442:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006444:	4b11      	ldr	r3, [pc, #68]	; (800648c <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	0a1b      	lsrs	r3, r3, #8
 800644a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800644e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10a      	bne.n	800646c <RCCEx_GetSAIxPeriphCLKFreq+0x188>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006456:	4b0d      	ldr	r3, [pc, #52]	; (800648c <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <RCCEx_GetSAIxPeriphCLKFreq+0x184>
          {
            pllp = 17U;
 8006462:	2311      	movs	r3, #17
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	e001      	b.n	800646c <RCCEx_GetSAIxPeriphCLKFreq+0x188>
          }
          else
          {
            pllp = 7U;
 8006468:	2307      	movs	r3, #7
 800646a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	fb02 f203 	mul.w	r2, r2, r3
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	fbb2 f3f3 	udiv	r3, r2, r3
 800647a:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800647c:	69fb      	ldr	r3, [r7, #28]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3724      	adds	r7, #36	; 0x24
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	40021000 	.word	0x40021000
 8006490:	001fff68 	.word	0x001fff68

08006494 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e14a      	b.n	800673c <HAL_SAI_Init+0x2a8>
      return HAL_ERROR;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d106      	bne.n	80064c0 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7fa fd20 	bl	8000f00 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f94d 	bl	8006760 <SAI_Disable>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e135      	b.n	800673c <HAL_SAI_Init+0x2a8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d007      	beq.n	80064f0 <HAL_SAI_Init+0x5c>
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d302      	bcc.n	80064ea <HAL_SAI_Init+0x56>
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d006      	beq.n	80064f6 <HAL_SAI_Init+0x62>
 80064e8:	e008      	b.n	80064fc <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	61fb      	str	r3, [r7, #28]
      break;
 80064ee:	e008      	b.n	8006502 <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80064f0:	2310      	movs	r3, #16
 80064f2:	61fb      	str	r3, [r7, #28]
      break;
 80064f4:	e005      	b.n	8006502 <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80064f6:	2320      	movs	r3, #32
 80064f8:	61fb      	str	r3, [r7, #28]
      break;
 80064fa:	e002      	b.n	8006502 <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 80064fc:	2300      	movs	r3, #0
 80064fe:	61fb      	str	r3, [r7, #28]
      break;
 8006500:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	2b03      	cmp	r3, #3
 8006508:	d81d      	bhi.n	8006546 <HAL_SAI_Init+0xb2>
 800650a:	a201      	add	r2, pc, #4	; (adr r2, 8006510 <HAL_SAI_Init+0x7c>)
 800650c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006510:	08006521 	.word	0x08006521
 8006514:	08006527 	.word	0x08006527
 8006518:	0800652f 	.word	0x0800652f
 800651c:	08006537 	.word	0x08006537
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	617b      	str	r3, [r7, #20]
      break;
 8006524:	e012      	b.n	800654c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800652a:	617b      	str	r3, [r7, #20]
      break;
 800652c:	e00e      	b.n	800654c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800652e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006532:	617b      	str	r3, [r7, #20]
      break;
 8006534:	e00a      	b.n	800654c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006536:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800653a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	f043 0301 	orr.w	r3, r3, #1
 8006542:	61fb      	str	r3, [r7, #28]
      break;
 8006544:	e002      	b.n	800654c <HAL_SAI_Init+0xb8>
    default :
      syncen_bits = 0;
 8006546:	2300      	movs	r3, #0
 8006548:	617b      	str	r3, [r7, #20]
      break;
 800654a:	bf00      	nop

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a7c      	ldr	r2, [pc, #496]	; (8006744 <HAL_SAI_Init+0x2b0>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d004      	beq.n	8006560 <HAL_SAI_Init+0xcc>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a7b      	ldr	r2, [pc, #492]	; (8006748 <HAL_SAI_Init+0x2b4>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d103      	bne.n	8006568 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8006560:	4a7a      	ldr	r2, [pc, #488]	; (800674c <HAL_SAI_Init+0x2b8>)
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	6013      	str	r3, [r2, #0]
 8006566:	e002      	b.n	800656e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006568:	4a79      	ldr	r2, [pc, #484]	; (8006750 <HAL_SAI_Init+0x2bc>)
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	6013      	str	r3, [r2, #0]

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || */
  /* STM32L496xx || STM32L4A6xx || */
  /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d038      	beq.n	80065e8 <HAL_SAI_Init+0x154>
    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a72      	ldr	r2, [pc, #456]	; (8006744 <HAL_SAI_Init+0x2b0>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d004      	beq.n	800658a <HAL_SAI_Init+0xf6>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a70      	ldr	r2, [pc, #448]	; (8006748 <HAL_SAI_Init+0x2b4>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d105      	bne.n	8006596 <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800658a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800658e:	f7ff f857 	bl	8005640 <HAL_RCCEx_GetPeriphCLKFreq>
 8006592:	6138      	str	r0, [r7, #16]
 8006594:	e004      	b.n	80065a0 <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006596:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800659a:	f7ff f851 	bl	8005640 <HAL_RCCEx_GetPeriphCLKFreq>
 800659e:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	4613      	mov	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	461a      	mov	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	025b      	lsls	r3, r3, #9
 80065b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b6:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4a66      	ldr	r2, [pc, #408]	; (8006754 <HAL_SAI_Init+0x2c0>)
 80065bc:	fba2 2303 	umull	r2, r3, r2, r3
 80065c0:	08da      	lsrs	r2, r3, #3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80065c6:	68f9      	ldr	r1, [r7, #12]
 80065c8:	4b62      	ldr	r3, [pc, #392]	; (8006754 <HAL_SAI_Init+0x2c0>)
 80065ca:	fba3 2301 	umull	r2, r3, r3, r1
 80065ce:	08da      	lsrs	r2, r3, #3
 80065d0:	4613      	mov	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	1aca      	subs	r2, r1, r3
 80065da:	2a08      	cmp	r2, #8
 80065dc:	d904      	bls.n	80065e8 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d003      	beq.n	80065f8 <HAL_SAI_Init+0x164>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d109      	bne.n	800660c <HAL_SAI_Init+0x178>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d101      	bne.n	8006604 <HAL_SAI_Init+0x170>
 8006600:	2300      	movs	r3, #0
 8006602:	e001      	b.n	8006608 <HAL_SAI_Init+0x174>
 8006604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006608:	61bb      	str	r3, [r7, #24]
 800660a:	e008      	b.n	800661e <HAL_SAI_Init+0x18a>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006610:	2b01      	cmp	r3, #1
 8006612:	d102      	bne.n	800661a <HAL_SAI_Init+0x186>
 8006614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006618:	e000      	b.n	800661c <HAL_SAI_Init+0x188>
 800661a:	2300      	movs	r3, #0
 800661c:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6819      	ldr	r1, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	4b4b      	ldr	r3, [pc, #300]	; (8006758 <HAL_SAI_Init+0x2c4>)
 800662a:	400b      	ands	r3, r1
 800662c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6819      	ldr	r1, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006642:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006648:	431a      	orrs	r2, r3
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8006656:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006662:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	051b      	lsls	r3, r3, #20
 800666a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	430a      	orrs	r2, r1
 8006672:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	6812      	ldr	r2, [r2, #0]
 800667e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006682:	f023 030f 	bic.w	r3, r3, #15
 8006686:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6859      	ldr	r1, [r3, #4]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699a      	ldr	r2, [r3, #24]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006696:	431a      	orrs	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669c:	431a      	orrs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6899      	ldr	r1, [r3, #8]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	4b2a      	ldr	r3, [pc, #168]	; (800675c <HAL_SAI_Init+0x2c8>)
 80066b2:	400b      	ands	r3, r1
 80066b4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6899      	ldr	r1, [r3, #8]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80066c6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80066cc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80066d2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d8:	3b01      	subs	r3, #1
 80066da:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80066dc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68d9      	ldr	r1, [r3, #12]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	f24f 0320 	movw	r3, #61472	; 0xf020
 80066f4:	400b      	ands	r3, r1
 80066f6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68d9      	ldr	r1, [r3, #12]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006706:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800670c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800670e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006714:	3b01      	subs	r3, #1
 8006716:	021b      	lsls	r3, r3, #8
 8006718:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3720      	adds	r7, #32
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	40015404 	.word	0x40015404
 8006748:	40015424 	.word	0x40015424
 800674c:	40015400 	.word	0x40015400
 8006750:	40015800 	.word	0x40015800
 8006754:	cccccccd 	.word	0xcccccccd
 8006758:	ff05c010 	.word	0xff05c010
 800675c:	fff88000 	.word	0xfff88000

08006760 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006760:	b490      	push	{r4, r7}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006768:	4b15      	ldr	r3, [pc, #84]	; (80067c0 <SAI_Disable+0x60>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a15      	ldr	r2, [pc, #84]	; (80067c4 <SAI_Disable+0x64>)
 800676e:	fba2 2303 	umull	r2, r3, r2, r3
 8006772:	0b1b      	lsrs	r3, r3, #12
 8006774:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006788:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800678a:	2c00      	cmp	r4, #0
 800678c:	d10a      	bne.n	80067a4 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006794:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	73fb      	strb	r3, [r7, #15]
      break;
 80067a2:	e007      	b.n	80067b4 <SAI_Disable+0x54>
    }
    count--;
 80067a4:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1ea      	bne.n	800678a <SAI_Disable+0x2a>

  return status;
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bc90      	pop	{r4, r7}
 80067be:	4770      	bx	lr
 80067c0:	20000008 	.word	0x20000008
 80067c4:	95cbec1b 	.word	0x95cbec1b

080067c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e07c      	b.n	80068d4 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d106      	bne.n	80067fa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7fa fc39 	bl	800106c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2202      	movs	r2, #2
 80067fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006810:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800681a:	d902      	bls.n	8006822 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800681c:	2300      	movs	r3, #0
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	e002      	b.n	8006828 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006826:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006830:	d007      	beq.n	8006842 <HAL_SPI_Init+0x7a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800683a:	d002      	beq.n	8006842 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10b      	bne.n	8006862 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006852:	d903      	bls.n	800685c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	631a      	str	r2, [r3, #48]	; 0x30
 800685a:	e002      	b.n	8006862 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	431a      	orrs	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	431a      	orrs	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006880:	431a      	orrs	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	431a      	orrs	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a1b      	ldr	r3, [r3, #32]
 800688c:	ea42 0103 	orr.w	r1, r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	0c1b      	lsrs	r3, r3, #16
 80068a2:	f003 0204 	and.w	r2, r3, #4
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	431a      	orrs	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b0:	431a      	orrs	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	ea42 0103 	orr.w	r1, r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e040      	b.n	8006970 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d106      	bne.n	8006904 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7fa ff5c 	bl	80017bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2224      	movs	r2, #36	; 0x24
 8006908:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 0201 	bic.w	r2, r2, #1
 8006918:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f882 	bl	8006a24 <UART_SetConfig>
 8006920:	4603      	mov	r3, r0
 8006922:	2b01      	cmp	r3, #1
 8006924:	d101      	bne.n	800692a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e022      	b.n	8006970 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692e:	2b00      	cmp	r3, #0
 8006930:	d002      	beq.n	8006938 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fbbe 	bl	80070b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006946:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689a      	ldr	r2, [r3, #8]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006956:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0201 	orr.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fc45 	bl	80071f8 <UART_CheckIdleState>
 800696e:	4603      	mov	r3, r0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e048      	b.n	8006a1c <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800698e:	2b00      	cmp	r3, #0
 8006990:	d106      	bne.n	80069a0 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fa ff0e 	bl	80017bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2224      	movs	r2, #36	; 0x24
 80069a4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0201 	bic.w	r2, r2, #1
 80069b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f834 	bl	8006a24 <UART_SetConfig>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d101      	bne.n	80069c6 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e02a      	b.n	8006a1c <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d002      	beq.n	80069d4 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fb70 	bl	80070b4 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689a      	ldr	r2, [r3, #8]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80069f2:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689a      	ldr	r2, [r3, #8]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0208 	orr.w	r2, r2, #8
 8006a02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f042 0201 	orr.w	r2, r2, #1
 8006a12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fbef 	bl	80071f8 <UART_CheckIdleState>
 8006a1a:	4603      	mov	r3, r0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a24:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006a28:	b088      	sub	sp, #32
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006a36:	2300      	movs	r3, #0
 8006a38:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689a      	ldr	r2, [r3, #8]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	431a      	orrs	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	4bac      	ldr	r3, [pc, #688]	; (8006d0c <UART_SetConfig+0x2e8>)
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6812      	ldr	r2, [r2, #0]
 8006a60:	69f9      	ldr	r1, [r7, #28]
 8006a62:	430b      	orrs	r3, r1
 8006a64:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68da      	ldr	r2, [r3, #12]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4aa2      	ldr	r2, [pc, #648]	; (8006d10 <UART_SetConfig+0x2ec>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d004      	beq.n	8006a96 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	69fa      	ldr	r2, [r7, #28]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	69fa      	ldr	r2, [r7, #28]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a99      	ldr	r2, [pc, #612]	; (8006d14 <UART_SetConfig+0x2f0>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d121      	bne.n	8006af8 <UART_SetConfig+0xd4>
 8006ab4:	4b98      	ldr	r3, [pc, #608]	; (8006d18 <UART_SetConfig+0x2f4>)
 8006ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aba:	f003 0303 	and.w	r3, r3, #3
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	d816      	bhi.n	8006af0 <UART_SetConfig+0xcc>
 8006ac2:	a201      	add	r2, pc, #4	; (adr r2, 8006ac8 <UART_SetConfig+0xa4>)
 8006ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac8:	08006ad9 	.word	0x08006ad9
 8006acc:	08006ae5 	.word	0x08006ae5
 8006ad0:	08006adf 	.word	0x08006adf
 8006ad4:	08006aeb 	.word	0x08006aeb
 8006ad8:	2301      	movs	r3, #1
 8006ada:	76fb      	strb	r3, [r7, #27]
 8006adc:	e0e8      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006ade:	2302      	movs	r3, #2
 8006ae0:	76fb      	strb	r3, [r7, #27]
 8006ae2:	e0e5      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006ae4:	2304      	movs	r3, #4
 8006ae6:	76fb      	strb	r3, [r7, #27]
 8006ae8:	e0e2      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006aea:	2308      	movs	r3, #8
 8006aec:	76fb      	strb	r3, [r7, #27]
 8006aee:	e0df      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006af0:	2310      	movs	r3, #16
 8006af2:	76fb      	strb	r3, [r7, #27]
 8006af4:	bf00      	nop
 8006af6:	e0db      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a87      	ldr	r2, [pc, #540]	; (8006d1c <UART_SetConfig+0x2f8>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d134      	bne.n	8006b6c <UART_SetConfig+0x148>
 8006b02:	4b85      	ldr	r3, [pc, #532]	; (8006d18 <UART_SetConfig+0x2f4>)
 8006b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b08:	f003 030c 	and.w	r3, r3, #12
 8006b0c:	2b0c      	cmp	r3, #12
 8006b0e:	d829      	bhi.n	8006b64 <UART_SetConfig+0x140>
 8006b10:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <UART_SetConfig+0xf4>)
 8006b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b16:	bf00      	nop
 8006b18:	08006b4d 	.word	0x08006b4d
 8006b1c:	08006b65 	.word	0x08006b65
 8006b20:	08006b65 	.word	0x08006b65
 8006b24:	08006b65 	.word	0x08006b65
 8006b28:	08006b59 	.word	0x08006b59
 8006b2c:	08006b65 	.word	0x08006b65
 8006b30:	08006b65 	.word	0x08006b65
 8006b34:	08006b65 	.word	0x08006b65
 8006b38:	08006b53 	.word	0x08006b53
 8006b3c:	08006b65 	.word	0x08006b65
 8006b40:	08006b65 	.word	0x08006b65
 8006b44:	08006b65 	.word	0x08006b65
 8006b48:	08006b5f 	.word	0x08006b5f
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	76fb      	strb	r3, [r7, #27]
 8006b50:	e0ae      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006b52:	2302      	movs	r3, #2
 8006b54:	76fb      	strb	r3, [r7, #27]
 8006b56:	e0ab      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006b58:	2304      	movs	r3, #4
 8006b5a:	76fb      	strb	r3, [r7, #27]
 8006b5c:	e0a8      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006b5e:	2308      	movs	r3, #8
 8006b60:	76fb      	strb	r3, [r7, #27]
 8006b62:	e0a5      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006b64:	2310      	movs	r3, #16
 8006b66:	76fb      	strb	r3, [r7, #27]
 8006b68:	bf00      	nop
 8006b6a:	e0a1      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a6b      	ldr	r2, [pc, #428]	; (8006d20 <UART_SetConfig+0x2fc>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d120      	bne.n	8006bb8 <UART_SetConfig+0x194>
 8006b76:	4b68      	ldr	r3, [pc, #416]	; (8006d18 <UART_SetConfig+0x2f4>)
 8006b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b80:	2b10      	cmp	r3, #16
 8006b82:	d00f      	beq.n	8006ba4 <UART_SetConfig+0x180>
 8006b84:	2b10      	cmp	r3, #16
 8006b86:	d802      	bhi.n	8006b8e <UART_SetConfig+0x16a>
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <UART_SetConfig+0x174>
 8006b8c:	e010      	b.n	8006bb0 <UART_SetConfig+0x18c>
 8006b8e:	2b20      	cmp	r3, #32
 8006b90:	d005      	beq.n	8006b9e <UART_SetConfig+0x17a>
 8006b92:	2b30      	cmp	r3, #48	; 0x30
 8006b94:	d009      	beq.n	8006baa <UART_SetConfig+0x186>
 8006b96:	e00b      	b.n	8006bb0 <UART_SetConfig+0x18c>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	76fb      	strb	r3, [r7, #27]
 8006b9c:	e088      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	76fb      	strb	r3, [r7, #27]
 8006ba2:	e085      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006ba4:	2304      	movs	r3, #4
 8006ba6:	76fb      	strb	r3, [r7, #27]
 8006ba8:	e082      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006baa:	2308      	movs	r3, #8
 8006bac:	76fb      	strb	r3, [r7, #27]
 8006bae:	e07f      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006bb0:	2310      	movs	r3, #16
 8006bb2:	76fb      	strb	r3, [r7, #27]
 8006bb4:	bf00      	nop
 8006bb6:	e07b      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a59      	ldr	r2, [pc, #356]	; (8006d24 <UART_SetConfig+0x300>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d120      	bne.n	8006c04 <UART_SetConfig+0x1e0>
 8006bc2:	4b55      	ldr	r3, [pc, #340]	; (8006d18 <UART_SetConfig+0x2f4>)
 8006bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bc8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006bcc:	2b40      	cmp	r3, #64	; 0x40
 8006bce:	d00f      	beq.n	8006bf0 <UART_SetConfig+0x1cc>
 8006bd0:	2b40      	cmp	r3, #64	; 0x40
 8006bd2:	d802      	bhi.n	8006bda <UART_SetConfig+0x1b6>
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d005      	beq.n	8006be4 <UART_SetConfig+0x1c0>
 8006bd8:	e010      	b.n	8006bfc <UART_SetConfig+0x1d8>
 8006bda:	2b80      	cmp	r3, #128	; 0x80
 8006bdc:	d005      	beq.n	8006bea <UART_SetConfig+0x1c6>
 8006bde:	2bc0      	cmp	r3, #192	; 0xc0
 8006be0:	d009      	beq.n	8006bf6 <UART_SetConfig+0x1d2>
 8006be2:	e00b      	b.n	8006bfc <UART_SetConfig+0x1d8>
 8006be4:	2300      	movs	r3, #0
 8006be6:	76fb      	strb	r3, [r7, #27]
 8006be8:	e062      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006bea:	2302      	movs	r3, #2
 8006bec:	76fb      	strb	r3, [r7, #27]
 8006bee:	e05f      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006bf0:	2304      	movs	r3, #4
 8006bf2:	76fb      	strb	r3, [r7, #27]
 8006bf4:	e05c      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006bf6:	2308      	movs	r3, #8
 8006bf8:	76fb      	strb	r3, [r7, #27]
 8006bfa:	e059      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006bfc:	2310      	movs	r3, #16
 8006bfe:	76fb      	strb	r3, [r7, #27]
 8006c00:	bf00      	nop
 8006c02:	e055      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a47      	ldr	r2, [pc, #284]	; (8006d28 <UART_SetConfig+0x304>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d124      	bne.n	8006c58 <UART_SetConfig+0x234>
 8006c0e:	4b42      	ldr	r3, [pc, #264]	; (8006d18 <UART_SetConfig+0x2f4>)
 8006c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c1c:	d012      	beq.n	8006c44 <UART_SetConfig+0x220>
 8006c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c22:	d802      	bhi.n	8006c2a <UART_SetConfig+0x206>
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d007      	beq.n	8006c38 <UART_SetConfig+0x214>
 8006c28:	e012      	b.n	8006c50 <UART_SetConfig+0x22c>
 8006c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c2e:	d006      	beq.n	8006c3e <UART_SetConfig+0x21a>
 8006c30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c34:	d009      	beq.n	8006c4a <UART_SetConfig+0x226>
 8006c36:	e00b      	b.n	8006c50 <UART_SetConfig+0x22c>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	76fb      	strb	r3, [r7, #27]
 8006c3c:	e038      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	76fb      	strb	r3, [r7, #27]
 8006c42:	e035      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006c44:	2304      	movs	r3, #4
 8006c46:	76fb      	strb	r3, [r7, #27]
 8006c48:	e032      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006c4a:	2308      	movs	r3, #8
 8006c4c:	76fb      	strb	r3, [r7, #27]
 8006c4e:	e02f      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006c50:	2310      	movs	r3, #16
 8006c52:	76fb      	strb	r3, [r7, #27]
 8006c54:	bf00      	nop
 8006c56:	e02b      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a2c      	ldr	r2, [pc, #176]	; (8006d10 <UART_SetConfig+0x2ec>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d124      	bne.n	8006cac <UART_SetConfig+0x288>
 8006c62:	4b2d      	ldr	r3, [pc, #180]	; (8006d18 <UART_SetConfig+0x2f4>)
 8006c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c70:	d012      	beq.n	8006c98 <UART_SetConfig+0x274>
 8006c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c76:	d802      	bhi.n	8006c7e <UART_SetConfig+0x25a>
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d007      	beq.n	8006c8c <UART_SetConfig+0x268>
 8006c7c:	e012      	b.n	8006ca4 <UART_SetConfig+0x280>
 8006c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c82:	d006      	beq.n	8006c92 <UART_SetConfig+0x26e>
 8006c84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c88:	d009      	beq.n	8006c9e <UART_SetConfig+0x27a>
 8006c8a:	e00b      	b.n	8006ca4 <UART_SetConfig+0x280>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	76fb      	strb	r3, [r7, #27]
 8006c90:	e00e      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006c92:	2302      	movs	r3, #2
 8006c94:	76fb      	strb	r3, [r7, #27]
 8006c96:	e00b      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006c98:	2304      	movs	r3, #4
 8006c9a:	76fb      	strb	r3, [r7, #27]
 8006c9c:	e008      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006c9e:	2308      	movs	r3, #8
 8006ca0:	76fb      	strb	r3, [r7, #27]
 8006ca2:	e005      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006ca4:	2310      	movs	r3, #16
 8006ca6:	76fb      	strb	r3, [r7, #27]
 8006ca8:	bf00      	nop
 8006caa:	e001      	b.n	8006cb0 <UART_SetConfig+0x28c>
 8006cac:	2310      	movs	r3, #16
 8006cae:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a16      	ldr	r2, [pc, #88]	; (8006d10 <UART_SetConfig+0x2ec>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	f040 80fa 	bne.w	8006eb0 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cbc:	7efb      	ldrb	r3, [r7, #27]
 8006cbe:	2b08      	cmp	r3, #8
 8006cc0:	d836      	bhi.n	8006d30 <UART_SetConfig+0x30c>
 8006cc2:	a201      	add	r2, pc, #4	; (adr r2, 8006cc8 <UART_SetConfig+0x2a4>)
 8006cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc8:	08006ced 	.word	0x08006ced
 8006ccc:	08006d31 	.word	0x08006d31
 8006cd0:	08006cf5 	.word	0x08006cf5
 8006cd4:	08006d31 	.word	0x08006d31
 8006cd8:	08006cfb 	.word	0x08006cfb
 8006cdc:	08006d31 	.word	0x08006d31
 8006ce0:	08006d31 	.word	0x08006d31
 8006ce4:	08006d31 	.word	0x08006d31
 8006ce8:	08006d03 	.word	0x08006d03
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006cec:	f7fe f936 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 8006cf0:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006cf2:	e020      	b.n	8006d36 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006cf4:	4b0d      	ldr	r3, [pc, #52]	; (8006d2c <UART_SetConfig+0x308>)
 8006cf6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006cf8:	e01d      	b.n	8006d36 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006cfa:	f7fe f899 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 8006cfe:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006d00:	e019      	b.n	8006d36 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d06:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006d08:	e015      	b.n	8006d36 <UART_SetConfig+0x312>
 8006d0a:	bf00      	nop
 8006d0c:	efff69f3 	.word	0xefff69f3
 8006d10:	40008000 	.word	0x40008000
 8006d14:	40013800 	.word	0x40013800
 8006d18:	40021000 	.word	0x40021000
 8006d1c:	40004400 	.word	0x40004400
 8006d20:	40004800 	.word	0x40004800
 8006d24:	40004c00 	.word	0x40004c00
 8006d28:	40005000 	.word	0x40005000
 8006d2c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	74fb      	strb	r3, [r7, #19]
        break;
 8006d34:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 81ac 	beq.w	8007096 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	4613      	mov	r3, r2
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	4413      	add	r3, r2
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d305      	bcc.n	8006d5a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d902      	bls.n	8006d60 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	74fb      	strb	r3, [r7, #19]
 8006d5e:	e19a      	b.n	8007096 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8006d60:	7efb      	ldrb	r3, [r7, #27]
 8006d62:	2b08      	cmp	r3, #8
 8006d64:	f200 8091 	bhi.w	8006e8a <UART_SetConfig+0x466>
 8006d68:	a201      	add	r2, pc, #4	; (adr r2, 8006d70 <UART_SetConfig+0x34c>)
 8006d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6e:	bf00      	nop
 8006d70:	08006d95 	.word	0x08006d95
 8006d74:	08006e8b 	.word	0x08006e8b
 8006d78:	08006de1 	.word	0x08006de1
 8006d7c:	08006e8b 	.word	0x08006e8b
 8006d80:	08006e15 	.word	0x08006e15
 8006d84:	08006e8b 	.word	0x08006e8b
 8006d88:	08006e8b 	.word	0x08006e8b
 8006d8c:	08006e8b 	.word	0x08006e8b
 8006d90:	08006e61 	.word	0x08006e61
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006d94:	f7fe f8e2 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	f04f 0200 	mov.w	r2, #0
 8006da0:	f04f 0300 	mov.w	r3, #0
 8006da4:	f04f 0400 	mov.w	r4, #0
 8006da8:	0214      	lsls	r4, r2, #8
 8006daa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006dae:	020b      	lsls	r3, r1, #8
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	6852      	ldr	r2, [r2, #4]
 8006db4:	0852      	lsrs	r2, r2, #1
 8006db6:	4611      	mov	r1, r2
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	eb13 0b01 	adds.w	fp, r3, r1
 8006dc0:	eb44 0c02 	adc.w	ip, r4, r2
 8006dc4:	4658      	mov	r0, fp
 8006dc6:	4661      	mov	r1, ip
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	f04f 0400 	mov.w	r4, #0
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	4623      	mov	r3, r4
 8006dd4:	f7f9 f9f8 	bl	80001c8 <__aeabi_uldivmod>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	460c      	mov	r4, r1
 8006ddc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006dde:	e057      	b.n	8006e90 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	085b      	lsrs	r3, r3, #1
 8006de6:	f04f 0400 	mov.w	r4, #0
 8006dea:	49b1      	ldr	r1, [pc, #708]	; (80070b0 <UART_SetConfig+0x68c>)
 8006dec:	f04f 0200 	mov.w	r2, #0
 8006df0:	eb13 0b01 	adds.w	fp, r3, r1
 8006df4:	eb44 0c02 	adc.w	ip, r4, r2
 8006df8:	4658      	mov	r0, fp
 8006dfa:	4661      	mov	r1, ip
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f04f 0400 	mov.w	r4, #0
 8006e04:	461a      	mov	r2, r3
 8006e06:	4623      	mov	r3, r4
 8006e08:	f7f9 f9de 	bl	80001c8 <__aeabi_uldivmod>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	460c      	mov	r4, r1
 8006e10:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006e12:	e03d      	b.n	8006e90 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006e14:	f7fe f80c 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	f04f 0200 	mov.w	r2, #0
 8006e20:	f04f 0300 	mov.w	r3, #0
 8006e24:	f04f 0400 	mov.w	r4, #0
 8006e28:	0214      	lsls	r4, r2, #8
 8006e2a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006e2e:	020b      	lsls	r3, r1, #8
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6852      	ldr	r2, [r2, #4]
 8006e34:	0852      	lsrs	r2, r2, #1
 8006e36:	4611      	mov	r1, r2
 8006e38:	f04f 0200 	mov.w	r2, #0
 8006e3c:	eb13 0b01 	adds.w	fp, r3, r1
 8006e40:	eb44 0c02 	adc.w	ip, r4, r2
 8006e44:	4658      	mov	r0, fp
 8006e46:	4661      	mov	r1, ip
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f04f 0400 	mov.w	r4, #0
 8006e50:	461a      	mov	r2, r3
 8006e52:	4623      	mov	r3, r4
 8006e54:	f7f9 f9b8 	bl	80001c8 <__aeabi_uldivmod>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006e5e:	e017      	b.n	8006e90 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	085b      	lsrs	r3, r3, #1
 8006e66:	f04f 0400 	mov.w	r4, #0
 8006e6a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8006e6e:	f144 0100 	adc.w	r1, r4, #0
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f04f 0400 	mov.w	r4, #0
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	4623      	mov	r3, r4
 8006e7e:	f7f9 f9a3 	bl	80001c8 <__aeabi_uldivmod>
 8006e82:	4603      	mov	r3, r0
 8006e84:	460c      	mov	r4, r1
 8006e86:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006e88:	e002      	b.n	8006e90 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	74fb      	strb	r3, [r7, #19]
            break;
 8006e8e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e96:	d308      	bcc.n	8006eaa <UART_SetConfig+0x486>
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e9e:	d204      	bcs.n	8006eaa <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	60da      	str	r2, [r3, #12]
 8006ea8:	e0f5      	b.n	8007096 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	74fb      	strb	r3, [r7, #19]
 8006eae:	e0f2      	b.n	8007096 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eb8:	d17f      	bne.n	8006fba <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8006eba:	7efb      	ldrb	r3, [r7, #27]
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d85c      	bhi.n	8006f7a <UART_SetConfig+0x556>
 8006ec0:	a201      	add	r2, pc, #4	; (adr r2, 8006ec8 <UART_SetConfig+0x4a4>)
 8006ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec6:	bf00      	nop
 8006ec8:	08006eed 	.word	0x08006eed
 8006ecc:	08006f0b 	.word	0x08006f0b
 8006ed0:	08006f29 	.word	0x08006f29
 8006ed4:	08006f7b 	.word	0x08006f7b
 8006ed8:	08006f45 	.word	0x08006f45
 8006edc:	08006f7b 	.word	0x08006f7b
 8006ee0:	08006f7b 	.word	0x08006f7b
 8006ee4:	08006f7b 	.word	0x08006f7b
 8006ee8:	08006f63 	.word	0x08006f63
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006eec:	f7fe f836 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	005a      	lsls	r2, r3, #1
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	085b      	lsrs	r3, r3, #1
 8006efa:	441a      	add	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f08:	e03a      	b.n	8006f80 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006f0a:	f7fe f83d 	bl	8004f88 <HAL_RCC_GetPCLK2Freq>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	005a      	lsls	r2, r3, #1
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	085b      	lsrs	r3, r3, #1
 8006f18:	441a      	add	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f26:	e02b      	b.n	8006f80 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	085b      	lsrs	r3, r3, #1
 8006f2e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006f32:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	6852      	ldr	r2, [r2, #4]
 8006f3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f42:	e01d      	b.n	8006f80 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006f44:	f7fd ff74 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	005a      	lsls	r2, r3, #1
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	085b      	lsrs	r3, r3, #1
 8006f52:	441a      	add	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f60:	e00e      	b.n	8006f80 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	085b      	lsrs	r3, r3, #1
 8006f68:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f78:	e002      	b.n	8006f80 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	74fb      	strb	r3, [r7, #19]
        break;
 8006f7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2b0f      	cmp	r3, #15
 8006f84:	d916      	bls.n	8006fb4 <UART_SetConfig+0x590>
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f8c:	d212      	bcs.n	8006fb4 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	f023 030f 	bic.w	r3, r3, #15
 8006f96:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	085b      	lsrs	r3, r3, #1
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	f003 0307 	and.w	r3, r3, #7
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	897b      	ldrh	r3, [r7, #10]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	897a      	ldrh	r2, [r7, #10]
 8006fb0:	60da      	str	r2, [r3, #12]
 8006fb2:	e070      	b.n	8007096 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	74fb      	strb	r3, [r7, #19]
 8006fb8:	e06d      	b.n	8007096 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8006fba:	7efb      	ldrb	r3, [r7, #27]
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d859      	bhi.n	8007074 <UART_SetConfig+0x650>
 8006fc0:	a201      	add	r2, pc, #4	; (adr r2, 8006fc8 <UART_SetConfig+0x5a4>)
 8006fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc6:	bf00      	nop
 8006fc8:	08006fed 	.word	0x08006fed
 8006fcc:	08007009 	.word	0x08007009
 8006fd0:	08007025 	.word	0x08007025
 8006fd4:	08007075 	.word	0x08007075
 8006fd8:	08007041 	.word	0x08007041
 8006fdc:	08007075 	.word	0x08007075
 8006fe0:	08007075 	.word	0x08007075
 8006fe4:	08007075 	.word	0x08007075
 8006fe8:	0800705d 	.word	0x0800705d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006fec:	f7fd ffb6 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	085b      	lsrs	r3, r3, #1
 8006ff8:	441a      	add	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007002:	b29b      	uxth	r3, r3
 8007004:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007006:	e038      	b.n	800707a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007008:	f7fd ffbe 	bl	8004f88 <HAL_RCC_GetPCLK2Freq>
 800700c:	4602      	mov	r2, r0
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	085b      	lsrs	r3, r3, #1
 8007014:	441a      	add	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	fbb2 f3f3 	udiv	r3, r2, r3
 800701e:	b29b      	uxth	r3, r3
 8007020:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007022:	e02a      	b.n	800707a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	085b      	lsrs	r3, r3, #1
 800702a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800702e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	6852      	ldr	r2, [r2, #4]
 8007036:	fbb3 f3f2 	udiv	r3, r3, r2
 800703a:	b29b      	uxth	r3, r3
 800703c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800703e:	e01c      	b.n	800707a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007040:	f7fd fef6 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 8007044:	4602      	mov	r2, r0
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	085b      	lsrs	r3, r3, #1
 800704c:	441a      	add	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	fbb2 f3f3 	udiv	r3, r2, r3
 8007056:	b29b      	uxth	r3, r3
 8007058:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800705a:	e00e      	b.n	800707a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	085b      	lsrs	r3, r3, #1
 8007062:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	fbb2 f3f3 	udiv	r3, r2, r3
 800706e:	b29b      	uxth	r3, r3
 8007070:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007072:	e002      	b.n	800707a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	74fb      	strb	r3, [r7, #19]
        break;
 8007078:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2b0f      	cmp	r3, #15
 800707e:	d908      	bls.n	8007092 <UART_SetConfig+0x66e>
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007086:	d204      	bcs.n	8007092 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	60da      	str	r2, [r3, #12]
 8007090:	e001      	b.n	8007096 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80070a2:	7cfb      	ldrb	r3, [r7, #19]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3720      	adds	r7, #32
 80070a8:	46bd      	mov	sp, r7
 80070aa:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80070ae:	bf00      	nop
 80070b0:	f4240000 	.word	0xf4240000

080070b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00a      	beq.n	80070de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	430a      	orrs	r2, r1
 80070dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00a      	beq.n	8007100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	430a      	orrs	r2, r1
 80070fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00a      	beq.n	8007122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007126:	f003 0308 	and.w	r3, r3, #8
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	430a      	orrs	r2, r1
 8007142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007148:	f003 0310 	and.w	r3, r3, #16
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00a      	beq.n	8007166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716a:	f003 0320 	and.w	r3, r3, #32
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00a      	beq.n	8007188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	430a      	orrs	r2, r1
 8007186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007190:	2b00      	cmp	r3, #0
 8007192:	d01a      	beq.n	80071ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071b2:	d10a      	bne.n	80071ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00a      	beq.n	80071ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	605a      	str	r2, [r3, #4]
  }
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007206:	f7fa fc17 	bl	8001a38 <HAL_GetTick>
 800720a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0308 	and.w	r3, r3, #8
 8007216:	2b08      	cmp	r3, #8
 8007218:	d10e      	bne.n	8007238 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800721a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f82a 	bl	8007282 <UART_WaitOnFlagUntilTimeout>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e020      	b.n	800727a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0304 	and.w	r3, r3, #4
 8007242:	2b04      	cmp	r3, #4
 8007244:	d10e      	bne.n	8007264 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007246:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f814 	bl	8007282 <UART_WaitOnFlagUntilTimeout>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d001      	beq.n	8007264 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e00a      	b.n	800727a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2220      	movs	r2, #32
 8007268:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2220      	movs	r2, #32
 800726e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b084      	sub	sp, #16
 8007286:	af00      	add	r7, sp, #0
 8007288:	60f8      	str	r0, [r7, #12]
 800728a:	60b9      	str	r1, [r7, #8]
 800728c:	603b      	str	r3, [r7, #0]
 800728e:	4613      	mov	r3, r2
 8007290:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007292:	e02a      	b.n	80072ea <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729a:	d026      	beq.n	80072ea <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800729c:	f7fa fbcc 	bl	8001a38 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d302      	bcc.n	80072b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d11b      	bne.n	80072ea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80072c0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689a      	ldr	r2, [r3, #8]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 0201 	bic.w	r2, r2, #1
 80072d0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2220      	movs	r2, #32
 80072d6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2220      	movs	r2, #32
 80072dc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e00f      	b.n	800730a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	69da      	ldr	r2, [r3, #28]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	4013      	ands	r3, r2
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	bf0c      	ite	eq
 80072fa:	2301      	moveq	r3, #1
 80072fc:	2300      	movne	r3, #0
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	461a      	mov	r2, r3
 8007302:	79fb      	ldrb	r3, [r7, #7]
 8007304:	429a      	cmp	r2, r3
 8007306:	d0c5      	beq.n	8007294 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007312:	b084      	sub	sp, #16
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	f107 001c 	add.w	r0, r7, #28
 8007320:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007326:	2b01      	cmp	r3, #1
 8007328:	d122      	bne.n	8007370 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800733e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007354:	2b01      	cmp	r3, #1
 8007356:	d105      	bne.n	8007364 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f937 	bl	80075d8 <USB_CoreReset>
 800736a:	4603      	mov	r3, r0
 800736c:	73fb      	strb	r3, [r7, #15]
 800736e:	e01a      	b.n	80073a6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f92b 	bl	80075d8 <USB_CoreReset>
 8007382:	4603      	mov	r3, r0
 8007384:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007388:	2b00      	cmp	r3, #0
 800738a:	d106      	bne.n	800739a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007390:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	639a      	str	r2, [r3, #56]	; 0x38
 8007398:	e005      	b.n	80073a6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073b2:	b004      	add	sp, #16
 80073b4:	4770      	bx	lr

080073b6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b083      	sub	sp, #12
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f043 0201 	orr.w	r2, r3, #1
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f023 0201 	bic.w	r2, r3, #1
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b082      	sub	sp, #8
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	460b      	mov	r3, r1
 8007404:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007412:	78fb      	ldrb	r3, [r7, #3]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d106      	bne.n	8007426 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	60da      	str	r2, [r3, #12]
 8007424:	e00b      	b.n	800743e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007426:	78fb      	ldrb	r3, [r7, #3]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d106      	bne.n	800743a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	60da      	str	r2, [r3, #12]
 8007438:	e001      	b.n	800743e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e003      	b.n	8007446 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800743e:	2032      	movs	r0, #50	; 0x32
 8007440:	f7fa fb06 	bl	8001a50 <HAL_Delay>

  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
	...

08007450 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800745a:	2300      	movs	r3, #0
 800745c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	019b      	lsls	r3, r3, #6
 8007462:	f043 0220 	orr.w	r2, r3, #32
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	3301      	adds	r3, #1
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4a09      	ldr	r2, [pc, #36]	; (8007498 <USB_FlushTxFifo+0x48>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d901      	bls.n	800747c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e006      	b.n	800748a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	f003 0320 	and.w	r3, r3, #32
 8007484:	2b20      	cmp	r3, #32
 8007486:	d0f0      	beq.n	800746a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	00030d40 	.word	0x00030d40

0800749c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80074a4:	2300      	movs	r3, #0
 80074a6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2210      	movs	r2, #16
 80074ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	3301      	adds	r3, #1
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4a09      	ldr	r2, [pc, #36]	; (80074dc <USB_FlushRxFifo+0x40>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d901      	bls.n	80074c0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e006      	b.n	80074ce <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	f003 0310 	and.w	r3, r3, #16
 80074c8:	2b10      	cmp	r3, #16
 80074ca:	d0f0      	beq.n	80074ae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	00030d40 	.word	0x00030d40

080074e0 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b089      	sub	sp, #36	; 0x24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	4611      	mov	r1, r2
 80074ec:	461a      	mov	r2, r3
 80074ee:	460b      	mov	r3, r1
 80074f0:	71fb      	strb	r3, [r7, #7]
 80074f2:	4613      	mov	r3, r2
 80074f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80074fe:	88bb      	ldrh	r3, [r7, #4]
 8007500:	3303      	adds	r3, #3
 8007502:	089b      	lsrs	r3, r3, #2
 8007504:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8007506:	2300      	movs	r3, #0
 8007508:	61bb      	str	r3, [r7, #24]
 800750a:	e00f      	b.n	800752c <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800750c:	79fb      	ldrb	r3, [r7, #7]
 800750e:	031a      	lsls	r2, r3, #12
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	4413      	add	r3, r2
 8007514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007518:	461a      	mov	r2, r3
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	3304      	adds	r3, #4
 8007524:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	3301      	adds	r3, #1
 800752a:	61bb      	str	r3, [r7, #24]
 800752c:	69ba      	ldr	r2, [r7, #24]
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	429a      	cmp	r2, r3
 8007532:	d3eb      	bcc.n	800750c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3724      	adds	r7, #36	; 0x24
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007542:	b480      	push	{r7}
 8007544:	b089      	sub	sp, #36	; 0x24
 8007546:	af00      	add	r7, sp, #0
 8007548:	60f8      	str	r0, [r7, #12]
 800754a:	60b9      	str	r1, [r7, #8]
 800754c:	4613      	mov	r3, r2
 800754e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007558:	88fb      	ldrh	r3, [r7, #6]
 800755a:	3303      	adds	r3, #3
 800755c:	089b      	lsrs	r3, r3, #2
 800755e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007560:	2300      	movs	r3, #0
 8007562:	61bb      	str	r3, [r7, #24]
 8007564:	e00b      	b.n	800757e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	601a      	str	r2, [r3, #0]
    pDest++;
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	3304      	adds	r3, #4
 8007576:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	3301      	adds	r3, #1
 800757c:	61bb      	str	r3, [r7, #24]
 800757e:	69ba      	ldr	r2, [r7, #24]
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	429a      	cmp	r2, r3
 8007584:	d3ef      	bcc.n	8007566 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007586:	69fb      	ldr	r3, [r7, #28]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3724      	adds	r7, #36	; 0x24
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	4013      	ands	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80075ac:	68fb      	ldr	r3, [r7, #12]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b083      	sub	sp, #12
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	f003 0301 	and.w	r3, r3, #1
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
	...

080075d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80075e0:	2300      	movs	r3, #0
 80075e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	3301      	adds	r3, #1
 80075e8:	60fb      	str	r3, [r7, #12]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4a13      	ldr	r2, [pc, #76]	; (800763c <USB_CoreReset+0x64>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d901      	bls.n	80075f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e01b      	b.n	800762e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	daf2      	bge.n	80075e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075fe:	2300      	movs	r3, #0
 8007600:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	f043 0201 	orr.w	r2, r3, #1
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3301      	adds	r3, #1
 8007612:	60fb      	str	r3, [r7, #12]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	4a09      	ldr	r2, [pc, #36]	; (800763c <USB_CoreReset+0x64>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d901      	bls.n	8007620 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e006      	b.n	800762e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	2b01      	cmp	r3, #1
 800762a:	d0f0      	beq.n	800760e <USB_CoreReset+0x36>

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	00030d40 	.word	0x00030d40

08007640 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007640:	b084      	sub	sp, #16
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	f107 001c 	add.w	r0, r7, #28
 800764e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800765c:	461a      	mov	r2, r3
 800765e:	2300      	movs	r3, #0
 8007660:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007666:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007672:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007688:	f023 0304 	bic.w	r3, r3, #4
 800768c:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800768e:	2110      	movs	r1, #16
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7ff fedd 	bl	8007450 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7ff ff00 	bl	800749c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800769c:	2300      	movs	r3, #0
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	e015      	b.n	80076ce <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	015a      	lsls	r2, r3, #5
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	4413      	add	r3, r2
 80076aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ae:	461a      	mov	r2, r3
 80076b0:	f04f 33ff 	mov.w	r3, #4294967295
 80076b4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076c2:	461a      	mov	r2, r3
 80076c4:	2300      	movs	r3, #0
 80076c6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	3301      	adds	r3, #1
 80076cc:	60fb      	str	r3, [r7, #12]
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d3e5      	bcc.n	80076a2 <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80076d6:	2101      	movs	r1, #1
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f893 	bl	8007804 <USB_DriveVbus>

  HAL_Delay(200U);
 80076de:	20c8      	movs	r0, #200	; 0xc8
 80076e0:	f7fa f9b6 	bl	8001a50 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f04f 32ff 	mov.w	r2, #4294967295
 80076f0:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2280      	movs	r2, #128	; 0x80
 80076f6:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a0d      	ldr	r2, [pc, #52]	; (8007730 <USB_HostInit+0xf0>)
 80076fc:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a0c      	ldr	r2, [pc, #48]	; (8007734 <USB_HostInit+0xf4>)
 8007702:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	f043 0210 	orr.w	r2, r3, #16
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	699a      	ldr	r2, [r3, #24]
 8007716:	4b08      	ldr	r3, [pc, #32]	; (8007738 <USB_HostInit+0xf8>)
 8007718:	4313      	orrs	r3, r2
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800772a:	b004      	add	sp, #16
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	00600080 	.word	0x00600080
 8007734:	004000e0 	.word	0x004000e0
 8007738:	a3200008 	.word	0xa3200008

0800773c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	460b      	mov	r3, r1
 8007746:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800775a:	f023 0303 	bic.w	r3, r3, #3
 800775e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	78fb      	ldrb	r3, [r7, #3]
 800776a:	f003 0303 	and.w	r3, r3, #3
 800776e:	68f9      	ldr	r1, [r7, #12]
 8007770:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007774:	4313      	orrs	r3, r2
 8007776:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007778:	78fb      	ldrb	r3, [r7, #3]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d107      	bne.n	800778e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007784:	461a      	mov	r2, r3
 8007786:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800778a:	6053      	str	r3, [r2, #4]
 800778c:	e009      	b.n	80077a2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800778e:	78fb      	ldrb	r3, [r7, #3]
 8007790:	2b02      	cmp	r3, #2
 8007792:	d106      	bne.n	80077a2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800779a:	461a      	mov	r2, r3
 800779c:	f241 7370 	movw	r3, #6000	; 0x1770
 80077a0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80077d0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80077da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077de:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80077e0:	2064      	movs	r0, #100	; 0x64
 80077e2:	f7fa f935 	bl	8001a50 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80077ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077f2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80077f4:	200a      	movs	r0, #10
 80077f6:	f7fa f92b 	bl	8001a50 <HAL_Delay>

  return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007814:	2300      	movs	r3, #0
 8007816:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007828:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007830:	2b00      	cmp	r3, #0
 8007832:	d109      	bne.n	8007848 <USB_DriveVbus+0x44>
 8007834:	78fb      	ldrb	r3, [r7, #3]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d106      	bne.n	8007848 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007842:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007846:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800784e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007852:	d109      	bne.n	8007868 <USB_DriveVbus+0x64>
 8007854:	78fb      	ldrb	r3, [r7, #3]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d106      	bne.n	8007868 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007862:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007866:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007876:	b480      	push	{r7}
 8007878:	b085      	sub	sp, #20
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007882:	2300      	movs	r3, #0
 8007884:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	0c5b      	lsrs	r3, r3, #17
 8007894:	f003 0303 	and.w	r3, r3, #3
}
 8007898:	4618      	mov	r0, r3
 800789a:	3714      	adds	r7, #20
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	b29b      	uxth	r3, r3
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
	...

080078c8 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	4608      	mov	r0, r1
 80078d2:	4611      	mov	r1, r2
 80078d4:	461a      	mov	r2, r3
 80078d6:	4603      	mov	r3, r0
 80078d8:	70fb      	strb	r3, [r7, #3]
 80078da:	460b      	mov	r3, r1
 80078dc:	70bb      	strb	r3, [r7, #2]
 80078de:	4613      	mov	r3, r2
 80078e0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80078ea:	78fb      	ldrb	r3, [r7, #3]
 80078ec:	015a      	lsls	r2, r3, #5
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	4413      	add	r3, r2
 80078f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078f6:	461a      	mov	r2, r3
 80078f8:	f04f 33ff 	mov.w	r3, #4294967295
 80078fc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80078fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007902:	2b03      	cmp	r3, #3
 8007904:	d867      	bhi.n	80079d6 <USB_HC_Init+0x10e>
 8007906:	a201      	add	r2, pc, #4	; (adr r2, 800790c <USB_HC_Init+0x44>)
 8007908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790c:	0800791d 	.word	0x0800791d
 8007910:	08007999 	.word	0x08007999
 8007914:	0800791d 	.word	0x0800791d
 8007918:	0800795b 	.word	0x0800795b
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800791c:	78fb      	ldrb	r3, [r7, #3]
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	4413      	add	r3, r2
 8007924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007928:	461a      	mov	r2, r3
 800792a:	f240 439d 	movw	r3, #1181	; 0x49d
 800792e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007930:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007934:	2b00      	cmp	r3, #0
 8007936:	da51      	bge.n	80079dc <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007938:	78fb      	ldrb	r3, [r7, #3]
 800793a:	015a      	lsls	r2, r3, #5
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	4413      	add	r3, r2
 8007940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	78fa      	ldrb	r2, [r7, #3]
 8007948:	0151      	lsls	r1, r2, #5
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	440a      	add	r2, r1
 800794e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007956:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007958:	e040      	b.n	80079dc <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800795a:	78fb      	ldrb	r3, [r7, #3]
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	4413      	add	r3, r2
 8007962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007966:	461a      	mov	r2, r3
 8007968:	f240 639d 	movw	r3, #1693	; 0x69d
 800796c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800796e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007972:	2b00      	cmp	r3, #0
 8007974:	da34      	bge.n	80079e0 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007976:	78fb      	ldrb	r3, [r7, #3]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	4413      	add	r3, r2
 800797e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	78fa      	ldrb	r2, [r7, #3]
 8007986:	0151      	lsls	r1, r2, #5
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	440a      	add	r2, r1
 800798c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007994:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007996:	e023      	b.n	80079e0 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007998:	78fb      	ldrb	r3, [r7, #3]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079a4:	461a      	mov	r2, r3
 80079a6:	f240 2325 	movw	r3, #549	; 0x225
 80079aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80079ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	da17      	bge.n	80079e4 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80079b4:	78fb      	ldrb	r3, [r7, #3]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	78fa      	ldrb	r2, [r7, #3]
 80079c4:	0151      	lsls	r1, r2, #5
 80079c6:	68ba      	ldr	r2, [r7, #8]
 80079c8:	440a      	add	r2, r1
 80079ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079ce:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80079d2:	60d3      	str	r3, [r2, #12]
      }
      break;
 80079d4:	e006      	b.n	80079e4 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	75fb      	strb	r3, [r7, #23]
      break;
 80079da:	e004      	b.n	80079e6 <USB_HC_Init+0x11e>
      break;
 80079dc:	bf00      	nop
 80079de:	e002      	b.n	80079e6 <USB_HC_Init+0x11e>
      break;
 80079e0:	bf00      	nop
 80079e2:	e000      	b.n	80079e6 <USB_HC_Init+0x11e>
      break;
 80079e4:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079ec:	699a      	ldr	r2, [r3, #24]
 80079ee:	78fb      	ldrb	r3, [r7, #3]
 80079f0:	f003 030f 	and.w	r3, r3, #15
 80079f4:	2101      	movs	r1, #1
 80079f6:	fa01 f303 	lsl.w	r3, r1, r3
 80079fa:	68b9      	ldr	r1, [r7, #8]
 80079fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007a00:	4313      	orrs	r3, r2
 8007a02:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007a10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	da03      	bge.n	8007a20 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007a18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a1c:	613b      	str	r3, [r7, #16]
 8007a1e:	e001      	b.n	8007a24 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8007a20:	2300      	movs	r3, #0
 8007a22:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8007a24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d103      	bne.n	8007a34 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007a2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a30:	60fb      	str	r3, [r7, #12]
 8007a32:	e001      	b.n	8007a38 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007a34:	2300      	movs	r3, #0
 8007a36:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a38:	787b      	ldrb	r3, [r7, #1]
 8007a3a:	059b      	lsls	r3, r3, #22
 8007a3c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a40:	78bb      	ldrb	r3, [r7, #2]
 8007a42:	02db      	lsls	r3, r3, #11
 8007a44:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a48:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a4e:	049b      	lsls	r3, r3, #18
 8007a50:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a54:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a58:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a5c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a62:	78fb      	ldrb	r3, [r7, #3]
 8007a64:	0159      	lsls	r1, r3, #5
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	440b      	add	r3, r1
 8007a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a6e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a74:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007a76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d10f      	bne.n	8007a9e <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007a7e:	78fb      	ldrb	r3, [r7, #3]
 8007a80:	015a      	lsls	r2, r3, #5
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	4413      	add	r3, r2
 8007a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	78fa      	ldrb	r2, [r7, #3]
 8007a8e:	0151      	lsls	r1, r2, #5
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	440a      	add	r2, r1
 8007a94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a9c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	371c      	adds	r7, #28
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b088      	sub	sp, #32
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	785b      	ldrb	r3, [r3, #1]
 8007abe:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ac4:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d018      	beq.n	8007b00 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	8912      	ldrh	r2, [r2, #8]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	8912      	ldrh	r2, [r2, #8]
 8007ade:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ae2:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8007ae4:	8bfa      	ldrh	r2, [r7, #30]
 8007ae6:	8a7b      	ldrh	r3, [r7, #18]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d90b      	bls.n	8007b04 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8007aec:	8a7b      	ldrh	r3, [r7, #18]
 8007aee:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007af0:	8bfb      	ldrh	r3, [r7, #30]
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	8912      	ldrh	r2, [r2, #8]
 8007af6:	fb02 f203 	mul.w	r2, r2, r3
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	611a      	str	r2, [r3, #16]
 8007afe:	e001      	b.n	8007b04 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8007b00:	2301      	movs	r3, #1
 8007b02:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	78db      	ldrb	r3, [r3, #3]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d006      	beq.n	8007b1a <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007b0c:	8bfb      	ldrh	r3, [r7, #30]
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	8912      	ldrh	r2, [r2, #8]
 8007b12:	fb02 f203 	mul.w	r2, r2, r3
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b22:	8bfb      	ldrh	r3, [r7, #30]
 8007b24:	04d9      	lsls	r1, r3, #19
 8007b26:	4b5f      	ldr	r3, [pc, #380]	; (8007ca4 <USB_HC_StartXfer+0x1f8>)
 8007b28:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b2a:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	7a9b      	ldrb	r3, [r3, #10]
 8007b30:	075b      	lsls	r3, r3, #29
 8007b32:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b36:	6979      	ldr	r1, [r7, #20]
 8007b38:	0148      	lsls	r0, r1, #5
 8007b3a:	69b9      	ldr	r1, [r7, #24]
 8007b3c:	4401      	add	r1, r0
 8007b3e:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b42:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b44:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	bf0c      	ite	eq
 8007b56:	2301      	moveq	r3, #1
 8007b58:	2300      	movne	r3, #0
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	015a      	lsls	r2, r3, #5
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	4413      	add	r3, r2
 8007b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	0151      	lsls	r1, r2, #5
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	440a      	add	r2, r1
 8007b74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b78:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b7c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	7c7b      	ldrb	r3, [r7, #17]
 8007b8e:	075b      	lsls	r3, r3, #29
 8007b90:	6979      	ldr	r1, [r7, #20]
 8007b92:	0148      	lsls	r0, r1, #5
 8007b94:	69b9      	ldr	r1, [r7, #24]
 8007b96:	4401      	add	r1, r0
 8007b98:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a3e      	ldr	r2, [pc, #248]	; (8007ca8 <USB_HC_StartXfer+0x1fc>)
 8007bb0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007bb2:	4b3d      	ldr	r3, [pc, #244]	; (8007ca8 <USB_HC_StartXfer+0x1fc>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bba:	4a3b      	ldr	r2, [pc, #236]	; (8007ca8 <USB_HC_StartXfer+0x1fc>)
 8007bbc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	78db      	ldrb	r3, [r3, #3]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d006      	beq.n	8007bd4 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007bc6:	4b38      	ldr	r3, [pc, #224]	; (8007ca8 <USB_HC_StartXfer+0x1fc>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bce:	4a36      	ldr	r2, [pc, #216]	; (8007ca8 <USB_HC_StartXfer+0x1fc>)
 8007bd0:	6013      	str	r3, [r2, #0]
 8007bd2:	e005      	b.n	8007be0 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007bd4:	4b34      	ldr	r3, [pc, #208]	; (8007ca8 <USB_HC_StartXfer+0x1fc>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007bdc:	4a32      	ldr	r2, [pc, #200]	; (8007ca8 <USB_HC_StartXfer+0x1fc>)
 8007bde:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007be0:	4b31      	ldr	r3, [pc, #196]	; (8007ca8 <USB_HC_StartXfer+0x1fc>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007be8:	4a2f      	ldr	r2, [pc, #188]	; (8007ca8 <USB_HC_StartXfer+0x1fc>)
 8007bea:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	4b2b      	ldr	r3, [pc, #172]	; (8007ca8 <USB_HC_StartXfer+0x1fc>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	78db      	ldrb	r3, [r3, #3]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d148      	bne.n	8007c9a <USB_HC_StartXfer+0x1ee>
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d044      	beq.n	8007c9a <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	79db      	ldrb	r3, [r3, #7]
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d831      	bhi.n	8007c7c <USB_HC_StartXfer+0x1d0>
 8007c18:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <USB_HC_StartXfer+0x174>)
 8007c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1e:	bf00      	nop
 8007c20:	08007c31 	.word	0x08007c31
 8007c24:	08007c55 	.word	0x08007c55
 8007c28:	08007c31 	.word	0x08007c31
 8007c2c:	08007c55 	.word	0x08007c55
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	3303      	adds	r3, #3
 8007c36:	089b      	lsrs	r3, r3, #2
 8007c38:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007c3a:	89fa      	ldrh	r2, [r7, #14]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d91c      	bls.n	8007c80 <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	f043 0220 	orr.w	r2, r3, #32
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	619a      	str	r2, [r3, #24]
          }
          break;
 8007c52:	e015      	b.n	8007c80 <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	3303      	adds	r3, #3
 8007c5a:	089b      	lsrs	r3, r3, #2
 8007c5c:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007c5e:	89fa      	ldrh	r2, [r7, #14]
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d90a      	bls.n	8007c84 <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	619a      	str	r2, [r3, #24]
          }
          break;
 8007c7a:	e003      	b.n	8007c84 <USB_HC_StartXfer+0x1d8>

        default:
          break;
 8007c7c:	bf00      	nop
 8007c7e:	e002      	b.n	8007c86 <USB_HC_StartXfer+0x1da>
          break;
 8007c80:	bf00      	nop
 8007c82:	e000      	b.n	8007c86 <USB_HC_StartXfer+0x1da>
          break;
 8007c84:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	68d9      	ldr	r1, [r3, #12]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	785a      	ldrb	r2, [r3, #1]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7ff fc23 	bl	80074e0 <USB_WritePacket>
    }

  return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3720      	adds	r7, #32
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	1ff80000 	.word	0x1ff80000
 8007ca8:	200004c4 	.word	0x200004c4

08007cac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cbe:	695b      	ldr	r3, [r3, #20]
 8007cc0:	b29b      	uxth	r3, r3
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b087      	sub	sp, #28
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8007cde:	78fb      	ldrb	r3, [r7, #3]
 8007ce0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	015a      	lsls	r2, r3, #5
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	0c9b      	lsrs	r3, r3, #18
 8007cf6:	f003 0303 	and.w	r3, r3, #3
 8007cfa:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d002      	beq.n	8007d08 <USB_HC_Halt+0x3a>
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d16c      	bne.n	8007de2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	015a      	lsls	r2, r3, #5
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	4413      	add	r3, r2
 8007d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	0151      	lsls	r1, r2, #5
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	440a      	add	r2, r1
 8007d1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d26:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d143      	bne.n	8007dbc <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	015a      	lsls	r2, r3, #5
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	0151      	lsls	r1, r2, #5
 8007d46:	693a      	ldr	r2, [r7, #16]
 8007d48:	440a      	add	r2, r1
 8007d4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d52:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	0151      	lsls	r1, r2, #5
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	440a      	add	r2, r1
 8007d6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d72:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	0151      	lsls	r1, r2, #5
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	440a      	add	r2, r1
 8007d8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d92:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	3301      	adds	r3, #1
 8007d98:	617b      	str	r3, [r7, #20]
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007da0:	d81d      	bhi.n	8007dde <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	015a      	lsls	r2, r3, #5
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	4413      	add	r3, r2
 8007daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007db4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007db8:	d0ec      	beq.n	8007d94 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007dba:	e080      	b.n	8007ebe <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	015a      	lsls	r2, r3, #5
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	0151      	lsls	r1, r2, #5
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	440a      	add	r2, r1
 8007dd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007dda:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007ddc:	e06f      	b.n	8007ebe <USB_HC_Halt+0x1f0>
          break;
 8007dde:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007de0:	e06d      	b.n	8007ebe <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	015a      	lsls	r2, r3, #5
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	4413      	add	r3, r2
 8007dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	0151      	lsls	r1, r2, #5
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	440a      	add	r2, r1
 8007df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e00:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d143      	bne.n	8007e9a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	0151      	lsls	r1, r2, #5
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	440a      	add	r2, r1
 8007e28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e30:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	0151      	lsls	r1, r2, #5
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	440a      	add	r2, r1
 8007e48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e50:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	0151      	lsls	r1, r2, #5
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	440a      	add	r2, r1
 8007e68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e70:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	3301      	adds	r3, #1
 8007e76:	617b      	str	r3, [r7, #20]
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e7e:	d81d      	bhi.n	8007ebc <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	015a      	lsls	r2, r3, #5
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	4413      	add	r3, r2
 8007e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e96:	d0ec      	beq.n	8007e72 <USB_HC_Halt+0x1a4>
 8007e98:	e011      	b.n	8007ebe <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	015a      	lsls	r2, r3, #5
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	0151      	lsls	r1, r2, #5
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	440a      	add	r2, r1
 8007eb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007eb8:	6013      	str	r3, [r2, #0]
 8007eba:	e000      	b.n	8007ebe <USB_HC_Halt+0x1f0>
          break;
 8007ebc:	bf00      	nop
    }
  }

  return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	371c      	adds	r7, #28
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7ff fa7b 	bl	80073d8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007ee2:	2110      	movs	r1, #16
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7ff fab3 	bl	8007450 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7ff fad6 	bl	800749c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	613b      	str	r3, [r7, #16]
 8007ef4:	e01f      	b.n	8007f36 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	015a      	lsls	r2, r3, #5
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	4413      	add	r3, r2
 8007efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f0c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f14:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f1c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	3301      	adds	r3, #1
 8007f34:	613b      	str	r3, [r7, #16]
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	2b0f      	cmp	r3, #15
 8007f3a:	d9dc      	bls.n	8007ef6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	613b      	str	r3, [r7, #16]
 8007f40:	e034      	b.n	8007fac <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f58:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f60:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f68:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f76:	461a      	mov	r2, r3
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	617b      	str	r3, [r7, #20]
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f88:	d80c      	bhi.n	8007fa4 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	015a      	lsls	r2, r3, #5
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	4413      	add	r3, r2
 8007f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fa0:	d0ec      	beq.n	8007f7c <USB_StopHost+0xb0>
 8007fa2:	e000      	b.n	8007fa6 <USB_StopHost+0xda>
        break;
 8007fa4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	613b      	str	r3, [r7, #16]
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	2b0f      	cmp	r3, #15
 8007fb0:	d9c7      	bls.n	8007f42 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fb8:	461a      	mov	r2, r3
 8007fba:	f04f 33ff 	mov.w	r3, #4294967295
 8007fbe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc6:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7ff f9f4 	bl	80073b6 <USB_EnableGlobalInt>

  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3718      	adds	r7, #24
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8007fd8:	b590      	push	{r4, r7, lr}
 8007fda:	b089      	sub	sp, #36	; 0x24
 8007fdc:	af04      	add	r7, sp, #16
 8007fde:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	2102      	movs	r1, #2
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fc3a 	bl	8008864 <USBH_FindInterface>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	2bff      	cmp	r3, #255	; 0xff
 8007ff8:	f000 812a 	beq.w	8008250 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
 8007ffe:	4619      	mov	r1, r3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fc13 	bl	800882c <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800800c:	2050      	movs	r0, #80	; 0x50
 800800e:	f002 f8e3 	bl	800a1d8 <malloc>
 8008012:	4603      	mov	r3, r0
 8008014:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800801c:	69db      	ldr	r3, [r3, #28]
 800801e:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008020:	7bbb      	ldrb	r3, [r7, #14]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	211a      	movs	r1, #26
 8008026:	fb01 f303 	mul.w	r3, r1, r3
 800802a:	4413      	add	r3, r2
 800802c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	b25b      	sxtb	r3, r3
 8008034:	2b00      	cmp	r3, #0
 8008036:	da15      	bge.n	8008064 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008038:	7bbb      	ldrb	r3, [r7, #14]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	211a      	movs	r1, #26
 800803e:	fb01 f303 	mul.w	r3, r1, r3
 8008042:	4413      	add	r3, r2
 8008044:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008048:	781a      	ldrb	r2, [r3, #0]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800804e:	7bbb      	ldrb	r3, [r7, #14]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	211a      	movs	r1, #26
 8008054:	fb01 f303 	mul.w	r3, r1, r3
 8008058:	4413      	add	r3, r2
 800805a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800805e:	881a      	ldrh	r2, [r3, #0]
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	785b      	ldrb	r3, [r3, #1]
 8008068:	4619      	mov	r1, r3
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f001 fd21 	bl	8009ab2 <USBH_AllocPipe>
 8008070:	4603      	mov	r3, r0
 8008072:	461a      	mov	r2, r3
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	7819      	ldrb	r1, [r3, #0]
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	7858      	ldrb	r0, [r3, #1]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	8952      	ldrh	r2, [r2, #10]
 8008090:	9202      	str	r2, [sp, #8]
 8008092:	2203      	movs	r2, #3
 8008094:	9201      	str	r2, [sp, #4]
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	4623      	mov	r3, r4
 800809a:	4602      	mov	r2, r0
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f001 fcd9 	bl	8009a54 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	2200      	movs	r2, #0
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f001 ffe4 	bl	800a078 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 80080b0:	2300      	movs	r3, #0
 80080b2:	2200      	movs	r2, #0
 80080b4:	210a      	movs	r1, #10
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fbd4 	bl	8008864 <USBH_FindInterface>
 80080bc:	4603      	mov	r3, r0
 80080be:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	2bff      	cmp	r3, #255	; 0xff
 80080c4:	f000 80c4 	beq.w	8008250 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80080c8:	7bbb      	ldrb	r3, [r7, #14]
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	211a      	movs	r1, #26
 80080ce:	fb01 f303 	mul.w	r3, r1, r3
 80080d2:	4413      	add	r3, r2
 80080d4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	b25b      	sxtb	r3, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	da16      	bge.n	800810e <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	211a      	movs	r1, #26
 80080e6:	fb01 f303 	mul.w	r3, r1, r3
 80080ea:	4413      	add	r3, r2
 80080ec:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80080f0:	781a      	ldrb	r2, [r3, #0]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	211a      	movs	r1, #26
 80080fc:	fb01 f303 	mul.w	r3, r1, r3
 8008100:	4413      	add	r3, r2
 8008102:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008106:	881a      	ldrh	r2, [r3, #0]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	835a      	strh	r2, [r3, #26]
 800810c:	e015      	b.n	800813a <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800810e:	7bbb      	ldrb	r3, [r7, #14]
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	211a      	movs	r1, #26
 8008114:	fb01 f303 	mul.w	r3, r1, r3
 8008118:	4413      	add	r3, r2
 800811a:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800811e:	781a      	ldrb	r2, [r3, #0]
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008124:	7bbb      	ldrb	r3, [r7, #14]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	211a      	movs	r1, #26
 800812a:	fb01 f303 	mul.w	r3, r1, r3
 800812e:	4413      	add	r3, r2
 8008130:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008134:	881a      	ldrh	r2, [r3, #0]
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800813a:	7bbb      	ldrb	r3, [r7, #14]
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	211a      	movs	r1, #26
 8008140:	fb01 f303 	mul.w	r3, r1, r3
 8008144:	4413      	add	r3, r2
 8008146:	f203 3352 	addw	r3, r3, #850	; 0x352
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	b25b      	sxtb	r3, r3
 800814e:	2b00      	cmp	r3, #0
 8008150:	da16      	bge.n	8008180 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008152:	7bbb      	ldrb	r3, [r7, #14]
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	211a      	movs	r1, #26
 8008158:	fb01 f303 	mul.w	r3, r1, r3
 800815c:	4413      	add	r3, r2
 800815e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8008162:	781a      	ldrb	r2, [r3, #0]
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008168:	7bbb      	ldrb	r3, [r7, #14]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	211a      	movs	r1, #26
 800816e:	fb01 f303 	mul.w	r3, r1, r3
 8008172:	4413      	add	r3, r2
 8008174:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8008178:	881a      	ldrh	r2, [r3, #0]
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	835a      	strh	r2, [r3, #26]
 800817e:	e015      	b.n	80081ac <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008180:	7bbb      	ldrb	r3, [r7, #14]
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	211a      	movs	r1, #26
 8008186:	fb01 f303 	mul.w	r3, r1, r3
 800818a:	4413      	add	r3, r2
 800818c:	f203 3352 	addw	r3, r3, #850	; 0x352
 8008190:	781a      	ldrb	r2, [r3, #0]
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	211a      	movs	r1, #26
 800819c:	fb01 f303 	mul.w	r3, r1, r3
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80081a6:	881a      	ldrh	r2, [r3, #0]
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	7b9b      	ldrb	r3, [r3, #14]
 80081b0:	4619      	mov	r1, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f001 fc7d 	bl	8009ab2 <USBH_AllocPipe>
 80081b8:	4603      	mov	r3, r0
 80081ba:	461a      	mov	r2, r3
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	7bdb      	ldrb	r3, [r3, #15]
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f001 fc73 	bl	8009ab2 <USBH_AllocPipe>
 80081cc:	4603      	mov	r3, r0
 80081ce:	461a      	mov	r2, r3
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	7b59      	ldrb	r1, [r3, #13]
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	7b98      	ldrb	r0, [r3, #14]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	8b12      	ldrh	r2, [r2, #24]
 80081ec:	9202      	str	r2, [sp, #8]
 80081ee:	2202      	movs	r2, #2
 80081f0:	9201      	str	r2, [sp, #4]
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	4623      	mov	r3, r4
 80081f6:	4602      	mov	r2, r0
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f001 fc2b 	bl	8009a54 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	7b19      	ldrb	r1, [r3, #12]
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	7bd8      	ldrb	r0, [r3, #15]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	8b52      	ldrh	r2, [r2, #26]
 8008216:	9202      	str	r2, [sp, #8]
 8008218:	2202      	movs	r2, #2
 800821a:	9201      	str	r2, [sp, #4]
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	4623      	mov	r3, r4
 8008220:	4602      	mov	r2, r0
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f001 fc16 	bl	8009a54 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	7b5b      	ldrb	r3, [r3, #13]
 8008234:	2200      	movs	r2, #0
 8008236:	4619      	mov	r1, r3
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f001 ff1d 	bl	800a078 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	7b1b      	ldrb	r3, [r3, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f001 ff16 	bl	800a078 <USBH_LL_SetToggle>
      status = USBH_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8008250:	7bfb      	ldrb	r3, [r7, #15]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3714      	adds	r7, #20
 8008256:	46bd      	mov	sp, r7
 8008258:	bd90      	pop	{r4, r7, pc}

0800825a <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b084      	sub	sp, #16
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00e      	beq.n	8008292 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	4619      	mov	r1, r3
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f001 fc09 	bl	8009a92 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f001 fc31 	bl	8009aee <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	7b1b      	ldrb	r3, [r3, #12]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00e      	beq.n	80082b8 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	7b1b      	ldrb	r3, [r3, #12]
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 fbf6 	bl	8009a92 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	7b1b      	ldrb	r3, [r3, #12]
 80082aa:	4619      	mov	r1, r3
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f001 fc1e 	bl	8009aee <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	7b5b      	ldrb	r3, [r3, #13]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00e      	beq.n	80082de <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	7b5b      	ldrb	r3, [r3, #13]
 80082c4:	4619      	mov	r1, r3
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f001 fbe3 	bl	8009a92 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	7b5b      	ldrb	r3, [r3, #13]
 80082d0:	4619      	mov	r1, r3
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 fc0b 	bl	8009aee <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2200      	movs	r2, #0
 80082dc:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00b      	beq.n	8008302 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f001 ff78 	bl	800a1e8 <free>
    phost->pActiveClass->pData = 0U;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80082fe:	2200      	movs	r2, #0
 8008300:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8008314:	2302      	movs	r3, #2
 8008316:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800831e:	69db      	ldr	r3, [r3, #28]
 8008320:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	3340      	adds	r3, #64	; 0x40
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 f8b2 	bl	8008492 <GetLineCoding>
 800832e:	4603      	mov	r3, r0
 8008330:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8008332:	7bfb      	ldrb	r3, [r7, #15]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d105      	bne.n	8008344 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800833e:	2102      	movs	r1, #2
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	4798      	blx	r3
  }
  return status;
 8008344:	7bfb      	ldrb	r3, [r7, #15]
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
	...

08008350 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008358:	2301      	movs	r3, #1
 800835a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800835c:	2300      	movs	r3, #0
 800835e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008370:	2b04      	cmp	r3, #4
 8008372:	d877      	bhi.n	8008464 <USBH_CDC_Process+0x114>
 8008374:	a201      	add	r2, pc, #4	; (adr r2, 800837c <USBH_CDC_Process+0x2c>)
 8008376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837a:	bf00      	nop
 800837c:	08008391 	.word	0x08008391
 8008380:	08008397 	.word	0x08008397
 8008384:	080083c7 	.word	0x080083c7
 8008388:	0800843b 	.word	0x0800843b
 800838c:	08008449 	.word	0x08008449
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	73fb      	strb	r3, [r7, #15]
    break;
 8008394:	e06d      	b.n	8008472 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f897 	bl	80084d0 <SetLineCoding>
 80083a2:	4603      	mov	r3, r0
 80083a4:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80083a6:	7bbb      	ldrb	r3, [r7, #14]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d104      	bne.n	80083b6 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	2202      	movs	r2, #2
 80083b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80083b4:	e058      	b.n	8008468 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d055      	beq.n	8008468 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	2204      	movs	r2, #4
 80083c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80083c4:	e050      	b.n	8008468 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	3340      	adds	r3, #64	; 0x40
 80083ca:	4619      	mov	r1, r3
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f860 	bl	8008492 <GetLineCoding>
 80083d2:	4603      	mov	r3, r0
 80083d4:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80083d6:	7bbb      	ldrb	r3, [r7, #14]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d126      	bne.n	800842a <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ee:	791b      	ldrb	r3, [r3, #4]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d13b      	bne.n	800846c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083fe:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008400:	429a      	cmp	r2, r3
 8008402:	d133      	bne.n	800846c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800840e:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008410:	429a      	cmp	r2, r3
 8008412:	d12b      	bne.n	800846c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800841c:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800841e:	429a      	cmp	r2, r3
 8008420:	d124      	bne.n	800846c <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f95a 	bl	80086dc <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8008428:	e020      	b.n	800846c <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800842a:	7bbb      	ldrb	r3, [r7, #14]
 800842c:	2b01      	cmp	r3, #1
 800842e:	d01d      	beq.n	800846c <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	2204      	movs	r2, #4
 8008434:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8008438:	e018      	b.n	800846c <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f867 	bl	800850e <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f8dc 	bl	80085fe <CDC_ProcessReception>
    break;
 8008446:	e014      	b.n	8008472 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8008448:	2100      	movs	r1, #0
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fece 	bl	80091ec <USBH_ClrFeature>
 8008450:	4603      	mov	r3, r0
 8008452:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8008454:	7bbb      	ldrb	r3, [r7, #14]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10a      	bne.n	8008470 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8008462:	e005      	b.n	8008470 <USBH_CDC_Process+0x120>

  default:
    break;
 8008464:	bf00      	nop
 8008466:	e004      	b.n	8008472 <USBH_CDC_Process+0x122>
    break;
 8008468:	bf00      	nop
 800846a:	e002      	b.n	8008472 <USBH_CDC_Process+0x122>
    break;
 800846c:	bf00      	nop
 800846e:	e000      	b.n	8008472 <USBH_CDC_Process+0x122>
    break;
 8008470:	bf00      	nop

  }

  return status;
 8008472:	7bfb      	ldrb	r3, [r7, #15]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b082      	sub	sp, #8
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	22a1      	movs	r2, #161	; 0xa1
 80084a0:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2221      	movs	r2, #33	; 0x21
 80084a6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2207      	movs	r2, #7
 80084b8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	2207      	movs	r2, #7
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f001 f873 	bl	80095ac <USBH_CtlReq>
 80084c6:	4603      	mov	r3, r0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2221      	movs	r2, #33	; 0x21
 80084de:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2220      	movs	r2, #32
 80084e4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2207      	movs	r2, #7
 80084f6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	2207      	movs	r2, #7
 80084fc:	4619      	mov	r1, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f001 f854 	bl	80095ac <USBH_CtlReq>
 8008504:	4603      	mov	r3, r0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b086      	sub	sp, #24
 8008512:	af02      	add	r7, sp, #8
 8008514:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800851c:	69db      	ldr	r3, [r3, #28]
 800851e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008520:	2300      	movs	r3, #0
 8008522:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800852a:	2b01      	cmp	r3, #1
 800852c:	d002      	beq.n	8008534 <CDC_ProcessTransmission+0x26>
 800852e:	2b02      	cmp	r3, #2
 8008530:	d025      	beq.n	800857e <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8008532:	e060      	b.n	80085f6 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	8b12      	ldrh	r2, [r2, #24]
 800853c:	4293      	cmp	r3, r2
 800853e:	d90c      	bls.n	800855a <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	69d9      	ldr	r1, [r3, #28]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	8b1a      	ldrh	r2, [r3, #24]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	7b58      	ldrb	r0, [r3, #13]
 800854c:	2301      	movs	r3, #1
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	4603      	mov	r3, r0
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f001 fa3b 	bl	80099ce <USBH_BulkSendData>
 8008558:	e00c      	b.n	8008574 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8008562:	b29a      	uxth	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	7b58      	ldrb	r0, [r3, #13]
 8008568:	2301      	movs	r3, #1
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	4603      	mov	r3, r0
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f001 fa2d 	bl	80099ce <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2202      	movs	r2, #2
 8008578:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800857c:	e03b      	b.n	80085f6 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	7b5b      	ldrb	r3, [r3, #13]
 8008582:	4619      	mov	r1, r3
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f001 fd4d 	bl	800a024 <USBH_LL_GetURBState>
 800858a:	4603      	mov	r3, r0
 800858c:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800858e:	7afb      	ldrb	r3, [r7, #11]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d128      	bne.n	80085e6 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	8b12      	ldrh	r2, [r2, #24]
 800859c:	4293      	cmp	r3, r2
 800859e:	d90e      	bls.n	80085be <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	8b12      	ldrh	r2, [r2, #24]
 80085a8:	1a9a      	subs	r2, r3, r2
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	69db      	ldr	r3, [r3, #28]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	8b12      	ldrh	r2, [r2, #24]
 80085b6:	441a      	add	r2, r3
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	61da      	str	r2, [r3, #28]
 80085bc:	e002      	b.n	80085c4 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d004      	beq.n	80085d6 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80085d4:	e00e      	b.n	80085f4 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f868 	bl	80086b4 <USBH_CDC_TransmitCallback>
    break;
 80085e4:	e006      	b.n	80085f4 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 80085e6:	7afb      	ldrb	r3, [r7, #11]
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d103      	bne.n	80085f4 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80085f4:	bf00      	nop
  }
}
 80085f6:	bf00      	nop
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b086      	sub	sp, #24
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008610:	2300      	movs	r3, #0
 8008612:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800861a:	2b03      	cmp	r3, #3
 800861c:	d002      	beq.n	8008624 <CDC_ProcessReception+0x26>
 800861e:	2b04      	cmp	r3, #4
 8008620:	d00e      	beq.n	8008640 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8008622:	e043      	b.n	80086ac <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	6a19      	ldr	r1, [r3, #32]
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	8b5a      	ldrh	r2, [r3, #26]
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	7b1b      	ldrb	r3, [r3, #12]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f001 f9f1 	bl	8009a18 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2204      	movs	r2, #4
 800863a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800863e:	e035      	b.n	80086ac <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	7b1b      	ldrb	r3, [r3, #12]
 8008644:	4619      	mov	r1, r3
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f001 fcec 	bl	800a024 <USBH_LL_GetURBState>
 800864c:	4603      	mov	r3, r0
 800864e:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8008650:	7cfb      	ldrb	r3, [r7, #19]
 8008652:	2b01      	cmp	r3, #1
 8008654:	d129      	bne.n	80086aa <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	7b1b      	ldrb	r3, [r3, #12]
 800865a:	4619      	mov	r1, r3
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f001 fc4f 	bl	8009f00 <USBH_LL_GetLastXferSize>
 8008662:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	429a      	cmp	r2, r3
 800866c:	d016      	beq.n	800869c <CDC_ProcessReception+0x9e>
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	8b5b      	ldrh	r3, [r3, #26]
 8008672:	461a      	mov	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	4293      	cmp	r3, r2
 8008678:	d910      	bls.n	800869c <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	1ad2      	subs	r2, r2, r3
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	6a1a      	ldr	r2, [r3, #32]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	441a      	add	r2, r3
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	2203      	movs	r2, #3
 8008696:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800869a:	e006      	b.n	80086aa <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f80f 	bl	80086c8 <USBH_CDC_ReceiveCallback>
    break;
 80086aa:	bf00      	nop
  }
}
 80086ac:	bf00      	nop
 80086ae:	3718      	adds	r7, #24
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]

}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]

}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]

}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	4613      	mov	r3, r2
 80086fc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d101      	bne.n	8008708 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008704:	2302      	movs	r3, #2
 8008706:	e019      	b.n	800873c <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	79fa      	ldrb	r2, [r7, #7]
 800870c:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2200      	movs	r2, #0
 800871c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f000 f80f 	bl	8008744 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d003      	beq.n	8008734 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f001 fb31 	bl	8009d9c <USBH_LL_Init>

  return USBH_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800874c:	2300      	movs	r3, #0
 800874e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8008750:	e008      	b.n	8008764 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	32e0      	adds	r2, #224	; 0xe0
 8008758:	2100      	movs	r1, #0
 800875a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	3301      	adds	r3, #1
 8008762:	60fb      	str	r3, [r7, #12]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2b0e      	cmp	r3, #14
 8008768:	d9f3      	bls.n	8008752 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800876a:	2300      	movs	r3, #0
 800876c:	60fb      	str	r3, [r7, #12]
 800876e:	e009      	b.n	8008784 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	4413      	add	r3, r2
 8008776:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800877a:	2200      	movs	r2, #0
 800877c:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	3301      	adds	r3, #1
 8008782:	60fb      	str	r3, [r7, #12]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800878a:	d3f1      	bcc.n	8008770 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2240      	movs	r2, #64	; 0x40
 80087b0:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b085      	sub	sp, #20
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d017      	beq.n	800881a <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10f      	bne.n	8008814 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087fa:	1c59      	adds	r1, r3, #1
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	33dc      	adds	r3, #220	; 0xdc
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	4413      	add	r3, r2
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800880e:	2300      	movs	r3, #0
 8008810:	73fb      	strb	r3, [r7, #15]
 8008812:	e004      	b.n	800881e <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008814:	2302      	movs	r3, #2
 8008816:	73fb      	strb	r3, [r7, #15]
 8008818:	e001      	b.n	800881e <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800881a:	2302      	movs	r3, #2
 800881c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800881e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3714      	adds	r7, #20
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	460b      	mov	r3, r1
 8008836:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8008842:	78fa      	ldrb	r2, [r7, #3]
 8008844:	429a      	cmp	r2, r3
 8008846:	d204      	bcs.n	8008852 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	78fa      	ldrb	r2, [r7, #3]
 800884c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8008850:	e001      	b.n	8008856 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008852:	2302      	movs	r3, #2
 8008854:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8008856:	7bfb      	ldrb	r3, [r7, #15]
}
 8008858:	4618      	mov	r0, r3
 800885a:	3714      	adds	r7, #20
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008864:	b480      	push	{r7}
 8008866:	b087      	sub	sp, #28
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	4608      	mov	r0, r1
 800886e:	4611      	mov	r1, r2
 8008870:	461a      	mov	r2, r3
 8008872:	4603      	mov	r3, r0
 8008874:	70fb      	strb	r3, [r7, #3]
 8008876:	460b      	mov	r3, r1
 8008878:	70bb      	strb	r3, [r7, #2]
 800887a:	4613      	mov	r3, r2
 800887c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800887e:	2300      	movs	r3, #0
 8008880:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008882:	2300      	movs	r3, #0
 8008884:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800888c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800888e:	e025      	b.n	80088dc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008890:	7dfb      	ldrb	r3, [r7, #23]
 8008892:	221a      	movs	r2, #26
 8008894:	fb02 f303 	mul.w	r3, r2, r3
 8008898:	3308      	adds	r3, #8
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	4413      	add	r3, r2
 800889e:	3302      	adds	r3, #2
 80088a0:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	795b      	ldrb	r3, [r3, #5]
 80088a6:	78fa      	ldrb	r2, [r7, #3]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d002      	beq.n	80088b2 <USBH_FindInterface+0x4e>
 80088ac:	78fb      	ldrb	r3, [r7, #3]
 80088ae:	2bff      	cmp	r3, #255	; 0xff
 80088b0:	d111      	bne.n	80088d6 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80088b6:	78ba      	ldrb	r2, [r7, #2]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d002      	beq.n	80088c2 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80088bc:	78bb      	ldrb	r3, [r7, #2]
 80088be:	2bff      	cmp	r3, #255	; 0xff
 80088c0:	d109      	bne.n	80088d6 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80088c6:	787a      	ldrb	r2, [r7, #1]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d002      	beq.n	80088d2 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80088cc:	787b      	ldrb	r3, [r7, #1]
 80088ce:	2bff      	cmp	r3, #255	; 0xff
 80088d0:	d101      	bne.n	80088d6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80088d2:	7dfb      	ldrb	r3, [r7, #23]
 80088d4:	e006      	b.n	80088e4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
 80088d8:	3301      	adds	r3, #1
 80088da:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80088dc:	7dfb      	ldrb	r3, [r7, #23]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d9d6      	bls.n	8008890 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80088e2:	23ff      	movs	r3, #255	; 0xff
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	371c      	adds	r7, #28
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f001 fa8b 	bl	8009e14 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80088fe:	2101      	movs	r1, #1
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f001 fba2 	bl	800a04a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b088      	sub	sp, #32
 8008914:	af04      	add	r7, sp, #16
 8008916:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008918:	2302      	movs	r3, #2
 800891a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800891c:	2300      	movs	r3, #0
 800891e:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 faec 	bl	8008efe <USBH_IsPortEnabled>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10c      	bne.n	8008946 <USBH_Process+0x36>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b00      	cmp	r3, #0
 8008934:	d007      	beq.n	8008946 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b03      	cmp	r3, #3
 800893e:	d002      	beq.n	8008946 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2203      	movs	r2, #3
 8008944:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	b2db      	uxtb	r3, r3
 800894c:	2b0b      	cmp	r3, #11
 800894e:	f200 814c 	bhi.w	8008bea <USBH_Process+0x2da>
 8008952:	a201      	add	r2, pc, #4	; (adr r2, 8008958 <USBH_Process+0x48>)
 8008954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008958:	08008989 	.word	0x08008989
 800895c:	080089ab 	.word	0x080089ab
 8008960:	080089bf 	.word	0x080089bf
 8008964:	08008bc5 	.word	0x08008bc5
 8008968:	08008beb 	.word	0x08008beb
 800896c:	08008a4d 	.word	0x08008a4d
 8008970:	08008b7b 	.word	0x08008b7b
 8008974:	08008a7d 	.word	0x08008a7d
 8008978:	08008a9d 	.word	0x08008a9d
 800897c:	08008abd 	.word	0x08008abd
 8008980:	08008aeb 	.word	0x08008aeb
 8008984:	08008bad 	.word	0x08008bad
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800898e:	b2db      	uxtb	r3, r3
 8008990:	2b00      	cmp	r3, #0
 8008992:	f000 812c 	beq.w	8008bee <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2201      	movs	r2, #1
 800899a:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800899c:	20c8      	movs	r0, #200	; 0xc8
 800899e:	f001 fb9e 	bl	800a0de <USBH_Delay>
      USBH_LL_ResetPort(phost);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f001 fa91 	bl	8009eca <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80089a8:	e121      	b.n	8008bee <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	f040 811e 	bne.w	8008bf2 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2202      	movs	r2, #2
 80089ba:	701a      	strb	r2, [r3, #0]
    }
    break;
 80089bc:	e119      	b.n	8008bf2 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 80089be:	2064      	movs	r0, #100	; 0x64
 80089c0:	f001 fb8d 	bl	800a0de <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f001 fa5b 	bl	8009e80 <USBH_LL_GetSpeed>
 80089ca:	4603      	mov	r3, r0
 80089cc:	461a      	mov	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2205      	movs	r2, #5
 80089d8:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80089da:	2100      	movs	r1, #0
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f001 f868 	bl	8009ab2 <USBH_AllocPipe>
 80089e2:	4603      	mov	r3, r0
 80089e4:	461a      	mov	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80089ea:	2180      	movs	r1, #128	; 0x80
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f001 f860 	bl	8009ab2 <USBH_AllocPipe>
 80089f2:	4603      	mov	r3, r0
 80089f4:	461a      	mov	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	7919      	ldrb	r1, [r3, #4]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8008a0e:	b292      	uxth	r2, r2
 8008a10:	9202      	str	r2, [sp, #8]
 8008a12:	2200      	movs	r2, #0
 8008a14:	9201      	str	r2, [sp, #4]
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2280      	movs	r2, #128	; 0x80
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f001 f819 	bl	8009a54 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	7959      	ldrb	r1, [r3, #5]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8008a36:	b292      	uxth	r2, r2
 8008a38:	9202      	str	r2, [sp, #8]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	9201      	str	r2, [sp, #4]
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	4603      	mov	r3, r0
 8008a42:	2200      	movs	r2, #0
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f001 f805 	bl	8009a54 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8008a4a:	e0e3      	b.n	8008c14 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 f8e7 	bl	8008c20 <USBH_HandleEnum>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f040 80ce 	bne.w	8008bf6 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d103      	bne.n	8008a74 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2208      	movs	r2, #8
 8008a70:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8008a72:	e0c0      	b.n	8008bf6 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2207      	movs	r2, #7
 8008a78:	701a      	strb	r2, [r3, #0]
    break;
 8008a7a:	e0bc      	b.n	8008bf6 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f000 80b9 	beq.w	8008bfa <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008a8e:	2101      	movs	r1, #1
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2208      	movs	r2, #8
 8008a98:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008a9a:	e0ae      	b.n	8008bfa <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fb59 	bl	800915e <USBH_SetCfg>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f040 80a5 	bne.w	8008bfe <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2209      	movs	r2, #9
 8008ab8:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8008aba:	e0a0      	b.n	8008bfe <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8008ac2:	f003 0320 	and.w	r3, r3, #32
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00b      	beq.n	8008ae2 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008aca:	2101      	movs	r1, #1
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fb69 	bl	80091a4 <USBH_SetFeature>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f040 8094 	bne.w	8008c02 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	220a      	movs	r2, #10
 8008ade:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8008ae0:	e08f      	b.n	8008c02 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	220a      	movs	r2, #10
 8008ae6:	701a      	strb	r2, [r3, #0]
    break;
 8008ae8:	e08b      	b.n	8008c02 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f000 8088 	beq.w	8008c06 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008afe:	2300      	movs	r3, #0
 8008b00:	73fb      	strb	r3, [r7, #15]
 8008b02:	e017      	b.n	8008b34 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	33dc      	adds	r3, #220	; 0xdc
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	791a      	ldrb	r2, [r3, #4]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d108      	bne.n	8008b2e <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	33dc      	adds	r3, #220	; 0xdc
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	685a      	ldr	r2, [r3, #4]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
 8008b30:	3301      	adds	r3, #1
 8008b32:	73fb      	strb	r3, [r7, #15]
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d0e4      	beq.n	8008b04 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d016      	beq.n	8008b72 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	4798      	blx	r3
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d109      	bne.n	8008b6a <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2206      	movs	r2, #6
 8008b5a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008b62:	2103      	movs	r1, #3
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8008b68:	e04d      	b.n	8008c06 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	220d      	movs	r2, #13
 8008b6e:	701a      	strb	r2, [r3, #0]
    break;
 8008b70:	e049      	b.n	8008c06 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	220d      	movs	r2, #13
 8008b76:	701a      	strb	r2, [r3, #0]
    break;
 8008b78:	e045      	b.n	8008c06 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00f      	beq.n	8008ba4 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	4798      	blx	r3
 8008b90:	4603      	mov	r3, r0
 8008b92:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8008b94:	7bbb      	ldrb	r3, [r7, #14]
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d136      	bne.n	8008c0a <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	220b      	movs	r2, #11
 8008ba0:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8008ba2:	e032      	b.n	8008c0a <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	220d      	movs	r2, #13
 8008ba8:	701a      	strb	r2, [r3, #0]
    break;
 8008baa:	e02e      	b.n	8008c0a <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d02b      	beq.n	8008c0e <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	4798      	blx	r3
    }
    break;
 8008bc2:	e024      	b.n	8008c0e <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f7ff fdbd 	bl	8008744 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d01e      	beq.n	8008c12 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8008be8:	e013      	b.n	8008c12 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8008bea:	bf00      	nop
 8008bec:	e012      	b.n	8008c14 <USBH_Process+0x304>
    break;
 8008bee:	bf00      	nop
 8008bf0:	e010      	b.n	8008c14 <USBH_Process+0x304>
    break;
 8008bf2:	bf00      	nop
 8008bf4:	e00e      	b.n	8008c14 <USBH_Process+0x304>
    break;
 8008bf6:	bf00      	nop
 8008bf8:	e00c      	b.n	8008c14 <USBH_Process+0x304>
    break;
 8008bfa:	bf00      	nop
 8008bfc:	e00a      	b.n	8008c14 <USBH_Process+0x304>
    break;
 8008bfe:	bf00      	nop
 8008c00:	e008      	b.n	8008c14 <USBH_Process+0x304>
    break;
 8008c02:	bf00      	nop
 8008c04:	e006      	b.n	8008c14 <USBH_Process+0x304>
    break;
 8008c06:	bf00      	nop
 8008c08:	e004      	b.n	8008c14 <USBH_Process+0x304>
    break;
 8008c0a:	bf00      	nop
 8008c0c:	e002      	b.n	8008c14 <USBH_Process+0x304>
    break;
 8008c0e:	bf00      	nop
 8008c10:	e000      	b.n	8008c14 <USBH_Process+0x304>
    break;
 8008c12:	bf00      	nop
  }
 return USBH_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop

08008c20 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b088      	sub	sp, #32
 8008c24:	af04      	add	r7, sp, #16
 8008c26:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	785b      	ldrb	r3, [r3, #1]
 8008c30:	2b07      	cmp	r3, #7
 8008c32:	f200 80f8 	bhi.w	8008e26 <USBH_HandleEnum+0x206>
 8008c36:	a201      	add	r2, pc, #4	; (adr r2, 8008c3c <USBH_HandleEnum+0x1c>)
 8008c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3c:	08008c5d 	.word	0x08008c5d
 8008c40:	08008ccf 	.word	0x08008ccf
 8008c44:	08008ce7 	.word	0x08008ce7
 8008c48:	08008d5d 	.word	0x08008d5d
 8008c4c:	08008d73 	.word	0x08008d73
 8008c50:	08008d8f 	.word	0x08008d8f
 8008c54:	08008dc3 	.word	0x08008dc3
 8008c58:	08008df7 	.word	0x08008df7
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8008c5c:	2108      	movs	r1, #8
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f9ad 	bl	8008fbe <USBH_Get_DevDesc>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f040 80df 	bne.w	8008e2a <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	7919      	ldrb	r1, [r3, #4]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8008c90:	b292      	uxth	r2, r2
 8008c92:	9202      	str	r2, [sp, #8]
 8008c94:	2200      	movs	r2, #0
 8008c96:	9201      	str	r2, [sp, #4]
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2280      	movs	r2, #128	; 0x80
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fed8 	bl	8009a54 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	7959      	ldrb	r1, [r3, #5]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8008cb8:	b292      	uxth	r2, r2
 8008cba:	9202      	str	r2, [sp, #8]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	9201      	str	r2, [sp, #4]
 8008cc0:	9300      	str	r3, [sp, #0]
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 fec4 	bl	8009a54 <USBH_OpenPipe>

    }
    break;
 8008ccc:	e0ad      	b.n	8008e2a <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8008cce:	2112      	movs	r1, #18
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f974 	bl	8008fbe <USBH_Get_DevDesc>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f040 80a8 	bne.w	8008e2e <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	705a      	strb	r2, [r3, #1]

    }
    break;
 8008ce4:	e0a3      	b.n	8008e2e <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8008ce6:	2101      	movs	r1, #1
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fa14 	bl	8009116 <USBH_SetAddress>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f040 809e 	bne.w	8008e32 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8008cf6:	2002      	movs	r0, #2
 8008cf8:	f001 f9f1 	bl	800a0de <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2203      	movs	r2, #3
 8008d08:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	7919      	ldrb	r1, [r3, #4]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8008d1e:	b292      	uxth	r2, r2
 8008d20:	9202      	str	r2, [sp, #8]
 8008d22:	2200      	movs	r2, #0
 8008d24:	9201      	str	r2, [sp, #4]
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2280      	movs	r2, #128	; 0x80
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 fe91 	bl	8009a54 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	7959      	ldrb	r1, [r3, #5]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8008d46:	b292      	uxth	r2, r2
 8008d48:	9202      	str	r2, [sp, #8]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	9201      	str	r2, [sp, #4]
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	4603      	mov	r3, r0
 8008d52:	2200      	movs	r2, #0
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fe7d 	bl	8009a54 <USBH_OpenPipe>
    }
    break;
 8008d5a:	e06a      	b.n	8008e32 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8008d5c:	2109      	movs	r1, #9
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f955 	bl	800900e <USBH_Get_CfgDesc>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d165      	bne.n	8008e36 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2204      	movs	r2, #4
 8008d6e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8008d70:	e061      	b.n	8008e36 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8008d78:	4619      	mov	r1, r3
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f947 	bl	800900e <USBH_Get_CfgDesc>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d159      	bne.n	8008e3a <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2205      	movs	r2, #5
 8008d8a:	705a      	strb	r2, [r3, #1]
    }
    break;
 8008d8c:	e055      	b.n	8008e3a <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d010      	beq.n	8008dba <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8008da4:	23ff      	movs	r3, #255	; 0xff
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f955 	bl	8009056 <USBH_Get_StringDesc>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d145      	bne.n	8008e3e <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2206      	movs	r2, #6
 8008db6:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8008db8:	e041      	b.n	8008e3e <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2206      	movs	r2, #6
 8008dbe:	705a      	strb	r2, [r3, #1]
    break;
 8008dc0:	e03d      	b.n	8008e3e <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d010      	beq.n	8008dee <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8008dd8:	23ff      	movs	r3, #255	; 0xff
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f93b 	bl	8009056 <USBH_Get_StringDesc>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d12d      	bne.n	8008e42 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2207      	movs	r2, #7
 8008dea:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8008dec:	e029      	b.n	8008e42 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2207      	movs	r2, #7
 8008df2:	705a      	strb	r2, [r3, #1]
    break;
 8008df4:	e025      	b.n	8008e42 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00f      	beq.n	8008e20 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8008e0c:	23ff      	movs	r3, #255	; 0xff
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f921 	bl	8009056 <USBH_Get_StringDesc>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d115      	bne.n	8008e46 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8008e1e:	e012      	b.n	8008e46 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8008e20:	2300      	movs	r3, #0
 8008e22:	73fb      	strb	r3, [r7, #15]
    break;
 8008e24:	e00f      	b.n	8008e46 <USBH_HandleEnum+0x226>

  default:
    break;
 8008e26:	bf00      	nop
 8008e28:	e00e      	b.n	8008e48 <USBH_HandleEnum+0x228>
    break;
 8008e2a:	bf00      	nop
 8008e2c:	e00c      	b.n	8008e48 <USBH_HandleEnum+0x228>
    break;
 8008e2e:	bf00      	nop
 8008e30:	e00a      	b.n	8008e48 <USBH_HandleEnum+0x228>
    break;
 8008e32:	bf00      	nop
 8008e34:	e008      	b.n	8008e48 <USBH_HandleEnum+0x228>
    break;
 8008e36:	bf00      	nop
 8008e38:	e006      	b.n	8008e48 <USBH_HandleEnum+0x228>
    break;
 8008e3a:	bf00      	nop
 8008e3c:	e004      	b.n	8008e48 <USBH_HandleEnum+0x228>
    break;
 8008e3e:	bf00      	nop
 8008e40:	e002      	b.n	8008e48 <USBH_HandleEnum+0x228>
    break;
 8008e42:	bf00      	nop
 8008e44:	e000      	b.n	8008e48 <USBH_HandleEnum+0x228>
    break;
 8008e46:	bf00      	nop
  }
  return Status;
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop

08008e54 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8008e66:	bf00      	nop
 8008e68:	370c      	adds	r7, #12
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b082      	sub	sp, #8
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008e80:	1c5a      	adds	r2, r3, #1
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 f804 	bl	8008e96 <USBH_HandleSof>
}
 8008e8e:	bf00      	nop
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b082      	sub	sp, #8
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	2b0b      	cmp	r3, #11
 8008ea6:	d10a      	bne.n	8008ebe <USBH_HandleSof+0x28>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d005      	beq.n	8008ebe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	4798      	blx	r3
  }
}
 8008ebe:	bf00      	nop
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8008ec6:	b480      	push	{r7}
 8008ec8:	b083      	sub	sp, #12
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8008ed6:	bf00      	nop
}
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b083      	sub	sp, #12
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8008ef2:	bf00      	nop
}
 8008ef4:	370c      	adds	r7, #12
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr

08008efe <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8008efe:	b480      	push	{r7}
 8008f00:	b083      	sub	sp, #12
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10f      	bne.n	8008f4a <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00e      	beq.n	8008f5a <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008f42:	2104      	movs	r1, #4
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	4798      	blx	r3
 8008f48:	e007      	b.n	8008f5a <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d102      	bne.n	8008f5a <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2202      	movs	r2, #2
 8008f58:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 ff6c 	bl	8009e4a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	791b      	ldrb	r3, [r3, #4]
 8008f76:	4619      	mov	r1, r3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fdb8 	bl	8009aee <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	795b      	ldrb	r3, [r3, #5]
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fdb2 	bl	8009aee <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d005      	beq.n	8008fa8 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008fa2:	2105      	movs	r1, #5
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 ff33 	bl	8009e14 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2203      	movs	r2, #3
 8008fb2:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b086      	sub	sp, #24
 8008fc2:	af02      	add	r7, sp, #8
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8008fd0:	78fb      	ldrb	r3, [r7, #3]
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008fdc:	2100      	movs	r1, #0
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f864 	bl	80090ac <USBH_GetDescriptor>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	73fb      	strb	r3, [r7, #15]
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10a      	bne.n	8009004 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f203 3022 	addw	r0, r3, #802	; 0x322
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008ffa:	78fa      	ldrb	r2, [r7, #3]
 8008ffc:	b292      	uxth	r2, r2
 8008ffe:	4619      	mov	r1, r3
 8009000:	f000 f918 	bl	8009234 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8009004:	7bfb      	ldrb	r3, [r7, #15]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800900e:	b580      	push	{r7, lr}
 8009010:	b086      	sub	sp, #24
 8009012:	af02      	add	r7, sp, #8
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	460b      	mov	r3, r1
 8009018:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	331c      	adds	r3, #28
 800901e:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8009020:	887b      	ldrh	r3, [r7, #2]
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800902a:	2100      	movs	r1, #0
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f83d 	bl	80090ac <USBH_GetDescriptor>
 8009032:	4603      	mov	r3, r0
 8009034:	72fb      	strb	r3, [r7, #11]
 8009036:	7afb      	ldrb	r3, [r7, #11]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d107      	bne.n	800904c <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8009042:	887a      	ldrh	r2, [r7, #2]
 8009044:	68f9      	ldr	r1, [r7, #12]
 8009046:	4618      	mov	r0, r3
 8009048:	f000 f964 	bl	8009314 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800904c:	7afb      	ldrb	r3, [r7, #11]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b088      	sub	sp, #32
 800905a:	af02      	add	r7, sp, #8
 800905c:	60f8      	str	r0, [r7, #12]
 800905e:	607a      	str	r2, [r7, #4]
 8009060:	461a      	mov	r2, r3
 8009062:	460b      	mov	r3, r1
 8009064:	72fb      	strb	r3, [r7, #11]
 8009066:	4613      	mov	r3, r2
 8009068:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800906a:	7afb      	ldrb	r3, [r7, #11]
 800906c:	b29b      	uxth	r3, r3
 800906e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009072:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800907a:	893b      	ldrh	r3, [r7, #8]
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	460b      	mov	r3, r1
 8009080:	2100      	movs	r1, #0
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f000 f812 	bl	80090ac <USBH_GetDescriptor>
 8009088:	4603      	mov	r3, r0
 800908a:	75fb      	strb	r3, [r7, #23]
 800908c:	7dfb      	ldrb	r3, [r7, #23]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d107      	bne.n	80090a2 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009098:	893a      	ldrh	r2, [r7, #8]
 800909a:	6879      	ldr	r1, [r7, #4]
 800909c:	4618      	mov	r0, r3
 800909e:	f000 fa37 	bl	8009510 <USBH_ParseStringDesc>
  }
  return status;
 80090a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3718      	adds	r7, #24
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	607b      	str	r3, [r7, #4]
 80090b6:	460b      	mov	r3, r1
 80090b8:	72fb      	strb	r3, [r7, #11]
 80090ba:	4613      	mov	r3, r2
 80090bc:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	789b      	ldrb	r3, [r3, #2]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d11c      	bne.n	8009100 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80090c6:	7afb      	ldrb	r3, [r7, #11]
 80090c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80090cc:	b2da      	uxtb	r2, r3
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2206      	movs	r2, #6
 80090d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	893a      	ldrh	r2, [r7, #8]
 80090dc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80090de:	893b      	ldrh	r3, [r7, #8]
 80090e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80090e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090e8:	d104      	bne.n	80090f4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f240 4209 	movw	r2, #1033	; 0x409
 80090f0:	829a      	strh	r2, [r3, #20]
 80090f2:	e002      	b.n	80090fa <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2200      	movs	r2, #0
 80090f8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	8b3a      	ldrh	r2, [r7, #24]
 80090fe:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8009100:	8b3b      	ldrh	r3, [r7, #24]
 8009102:	461a      	mov	r2, r3
 8009104:	6879      	ldr	r1, [r7, #4]
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f000 fa50 	bl	80095ac <USBH_CtlReq>
 800910c:	4603      	mov	r3, r0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b082      	sub	sp, #8
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	460b      	mov	r3, r1
 8009120:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	789b      	ldrb	r3, [r3, #2]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d10f      	bne.n	800914a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2205      	movs	r2, #5
 8009134:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009136:	78fb      	ldrb	r3, [r7, #3]
 8009138:	b29a      	uxth	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800914a:	2200      	movs	r2, #0
 800914c:	2100      	movs	r1, #0
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fa2c 	bl	80095ac <USBH_CtlReq>
 8009154:	4603      	mov	r3, r0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b082      	sub	sp, #8
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
 8009166:	460b      	mov	r3, r1
 8009168:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	789b      	ldrb	r3, [r3, #2]
 800916e:	2b01      	cmp	r3, #1
 8009170:	d10e      	bne.n	8009190 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2209      	movs	r2, #9
 800917c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	887a      	ldrh	r2, [r7, #2]
 8009182:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8009190:	2200      	movs	r2, #0
 8009192:	2100      	movs	r1, #0
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fa09 	bl	80095ac <USBH_CtlReq>
 800919a:	4603      	mov	r3, r0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	460b      	mov	r3, r1
 80091ae:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	789b      	ldrb	r3, [r3, #2]
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d10f      	bne.n	80091d8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2203      	movs	r2, #3
 80091c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80091c4:	78fb      	ldrb	r3, [r7, #3]
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80091d8:	2200      	movs	r2, #0
 80091da:	2100      	movs	r1, #0
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 f9e5 	bl	80095ac <USBH_CtlReq>
 80091e2:	4603      	mov	r3, r0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	460b      	mov	r3, r1
 80091f6:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	789b      	ldrb	r3, [r3, #2]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d10f      	bne.n	8009220 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2202      	movs	r2, #2
 8009204:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2201      	movs	r2, #1
 800920a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009212:	78fb      	ldrb	r3, [r7, #3]
 8009214:	b29a      	uxth	r2, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8009220:	2200      	movs	r2, #0
 8009222:	2100      	movs	r1, #0
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f9c1 	bl	80095ac <USBH_CtlReq>
 800922a:	4603      	mov	r3, r0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3708      	adds	r7, #8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	4613      	mov	r3, r2
 8009240:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	781a      	ldrb	r2, [r3, #0]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	785a      	ldrb	r2, [r3, #1]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	3302      	adds	r3, #2
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	b29a      	uxth	r2, r3
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	3303      	adds	r3, #3
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	b29b      	uxth	r3, r3
 8009262:	021b      	lsls	r3, r3, #8
 8009264:	b29b      	uxth	r3, r3
 8009266:	4313      	orrs	r3, r2
 8009268:	b29a      	uxth	r2, r3
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	791a      	ldrb	r2, [r3, #4]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	795a      	ldrb	r2, [r3, #5]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	799a      	ldrb	r2, [r3, #6]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	79da      	ldrb	r2, [r3, #7]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800928e:	88fb      	ldrh	r3, [r7, #6]
 8009290:	2b08      	cmp	r3, #8
 8009292:	d939      	bls.n	8009308 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	3308      	adds	r3, #8
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	b29a      	uxth	r2, r3
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	3309      	adds	r3, #9
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	021b      	lsls	r3, r3, #8
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	4313      	orrs	r3, r2
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	330a      	adds	r3, #10
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	330b      	adds	r3, #11
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	b29b      	uxth	r3, r3
 80092c0:	021b      	lsls	r3, r3, #8
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	4313      	orrs	r3, r2
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	330c      	adds	r3, #12
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	b29a      	uxth	r2, r3
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	330d      	adds	r3, #13
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	b29b      	uxth	r3, r3
 80092dc:	021b      	lsls	r3, r3, #8
 80092de:	b29b      	uxth	r3, r3
 80092e0:	4313      	orrs	r3, r2
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	7b9a      	ldrb	r2, [r3, #14]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	7bda      	ldrb	r2, [r3, #15]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	7c1a      	ldrb	r2, [r3, #16]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	7c5a      	ldrb	r2, [r3, #17]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	745a      	strb	r2, [r3, #17]
  }
}
 8009308:	bf00      	nop
 800930a:	3714      	adds	r7, #20
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b08a      	sub	sp, #40	; 0x28
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	4613      	mov	r3, r2
 8009320:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009326:	2300      	movs	r3, #0
 8009328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800932c:	2300      	movs	r3, #0
 800932e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	781a      	ldrb	r2, [r3, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	785a      	ldrb	r2, [r3, #1]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	3302      	adds	r3, #2
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	b29a      	uxth	r2, r3
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	3303      	adds	r3, #3
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	b29b      	uxth	r3, r3
 8009356:	021b      	lsls	r3, r3, #8
 8009358:	b29b      	uxth	r3, r3
 800935a:	4313      	orrs	r3, r2
 800935c:	b29a      	uxth	r2, r3
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	791a      	ldrb	r2, [r3, #4]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	795a      	ldrb	r2, [r3, #5]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	799a      	ldrb	r2, [r3, #6]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	79da      	ldrb	r2, [r3, #7]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	7a1a      	ldrb	r2, [r3, #8]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800938a:	88fb      	ldrh	r3, [r7, #6]
 800938c:	2b09      	cmp	r3, #9
 800938e:	d95f      	bls.n	8009450 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009390:	2309      	movs	r3, #9
 8009392:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009394:	2300      	movs	r3, #0
 8009396:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009398:	e051      	b.n	800943e <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800939a:	f107 0316 	add.w	r3, r7, #22
 800939e:	4619      	mov	r1, r3
 80093a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093a2:	f000 f8e8 	bl	8009576 <USBH_GetNextDesc>
 80093a6:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80093a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093aa:	785b      	ldrb	r3, [r3, #1]
 80093ac:	2b04      	cmp	r3, #4
 80093ae:	d146      	bne.n	800943e <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80093b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093b4:	221a      	movs	r2, #26
 80093b6:	fb02 f303 	mul.w	r3, r2, r3
 80093ba:	3308      	adds	r3, #8
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	4413      	add	r3, r2
 80093c0:	3302      	adds	r3, #2
 80093c2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 80093c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093c6:	69f8      	ldr	r0, [r7, #28]
 80093c8:	f000 f846 	bl	8009458 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80093cc:	2300      	movs	r3, #0
 80093ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80093d2:	2300      	movs	r3, #0
 80093d4:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80093d6:	e022      	b.n	800941e <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 80093d8:	f107 0316 	add.w	r3, r7, #22
 80093dc:	4619      	mov	r1, r3
 80093de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093e0:	f000 f8c9 	bl	8009576 <USBH_GetNextDesc>
 80093e4:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80093e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e8:	785b      	ldrb	r3, [r3, #1]
 80093ea:	2b05      	cmp	r3, #5
 80093ec:	d117      	bne.n	800941e <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80093ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093f2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80093f6:	3201      	adds	r2, #1
 80093f8:	00d2      	lsls	r2, r2, #3
 80093fa:	211a      	movs	r1, #26
 80093fc:	fb01 f303 	mul.w	r3, r1, r3
 8009400:	4413      	add	r3, r2
 8009402:	3308      	adds	r3, #8
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	4413      	add	r3, r2
 8009408:	3304      	adds	r3, #4
 800940a:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800940c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800940e:	69b8      	ldr	r0, [r7, #24]
 8009410:	f000 f851 	bl	80094b6 <USBH_ParseEPDesc>
            ep_ix++;
 8009414:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009418:	3301      	adds	r3, #1
 800941a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	791b      	ldrb	r3, [r3, #4]
 8009422:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009426:	429a      	cmp	r2, r3
 8009428:	d204      	bcs.n	8009434 <USBH_ParseCfgDesc+0x120>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	885a      	ldrh	r2, [r3, #2]
 800942e:	8afb      	ldrh	r3, [r7, #22]
 8009430:	429a      	cmp	r2, r3
 8009432:	d8d1      	bhi.n	80093d8 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009434:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009438:	3301      	adds	r3, #1
 800943a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800943e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009442:	2b01      	cmp	r3, #1
 8009444:	d804      	bhi.n	8009450 <USBH_ParseCfgDesc+0x13c>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	885a      	ldrh	r2, [r3, #2]
 800944a:	8afb      	ldrh	r3, [r7, #22]
 800944c:	429a      	cmp	r2, r3
 800944e:	d8a4      	bhi.n	800939a <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009450:	bf00      	nop
 8009452:	3728      	adds	r7, #40	; 0x28
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	781a      	ldrb	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	785a      	ldrb	r2, [r3, #1]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	789a      	ldrb	r2, [r3, #2]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	78da      	ldrb	r2, [r3, #3]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	791a      	ldrb	r2, [r3, #4]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	795a      	ldrb	r2, [r3, #5]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	799a      	ldrb	r2, [r3, #6]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	79da      	ldrb	r2, [r3, #7]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	7a1a      	ldrb	r2, [r3, #8]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	721a      	strb	r2, [r3, #8]
}
 80094aa:	bf00      	nop
 80094ac:	370c      	adds	r7, #12
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr

080094b6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 80094b6:	b480      	push	{r7}
 80094b8:	b083      	sub	sp, #12
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	781a      	ldrb	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	785a      	ldrb	r2, [r3, #1]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	789a      	ldrb	r2, [r3, #2]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	78da      	ldrb	r2, [r3, #3]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	3304      	adds	r3, #4
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	3305      	adds	r3, #5
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	021b      	lsls	r3, r3, #8
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	4313      	orrs	r3, r2
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	799a      	ldrb	r2, [r3, #6]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	719a      	strb	r2, [r3, #6]
}
 8009504:	bf00      	nop
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8009510:	b480      	push	{r7}
 8009512:	b087      	sub	sp, #28
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	4613      	mov	r3, r2
 800951c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	3301      	adds	r3, #1
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	2b03      	cmp	r3, #3
 8009526:	d120      	bne.n	800956a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	1e9a      	subs	r2, r3, #2
 800952e:	88fb      	ldrh	r3, [r7, #6]
 8009530:	4293      	cmp	r3, r2
 8009532:	bf28      	it	cs
 8009534:	4613      	movcs	r3, r2
 8009536:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	3302      	adds	r3, #2
 800953c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800953e:	2300      	movs	r3, #0
 8009540:	82fb      	strh	r3, [r7, #22]
 8009542:	e00b      	b.n	800955c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009544:	8afb      	ldrh	r3, [r7, #22]
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	4413      	add	r3, r2
 800954a:	781a      	ldrb	r2, [r3, #0]
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	3301      	adds	r3, #1
 8009554:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009556:	8afb      	ldrh	r3, [r7, #22]
 8009558:	3302      	adds	r3, #2
 800955a:	82fb      	strh	r3, [r7, #22]
 800955c:	8afa      	ldrh	r2, [r7, #22]
 800955e:	8abb      	ldrh	r3, [r7, #20]
 8009560:	429a      	cmp	r2, r3
 8009562:	d3ef      	bcc.n	8009544 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	2200      	movs	r2, #0
 8009568:	701a      	strb	r2, [r3, #0]
  }
}
 800956a:	bf00      	nop
 800956c:	371c      	adds	r7, #28
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr

08009576 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8009576:	b480      	push	{r7}
 8009578:	b085      	sub	sp, #20
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
 800957e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	881a      	ldrh	r2, [r3, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	b29b      	uxth	r3, r3
 800958a:	4413      	add	r3, r2
 800958c:	b29a      	uxth	r2, r3
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4413      	add	r3, r2
 800959c:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800959e:	68fb      	ldr	r3, [r7, #12]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3714      	adds	r7, #20
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	4613      	mov	r3, r2
 80095b8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80095ba:	2301      	movs	r3, #1
 80095bc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	789b      	ldrb	r3, [r3, #2]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d002      	beq.n	80095cc <USBH_CtlReq+0x20>
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d00f      	beq.n	80095ea <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 80095ca:	e034      	b.n	8009636 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	88fa      	ldrh	r2, [r7, #6]
 80095d6:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2201      	movs	r2, #1
 80095dc:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2202      	movs	r2, #2
 80095e2:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 80095e4:	2301      	movs	r3, #1
 80095e6:	75fb      	strb	r3, [r7, #23]
    break;
 80095e8:	e025      	b.n	8009636 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f000 f828 	bl	8009640 <USBH_HandleControl>
 80095f0:	4603      	mov	r3, r0
 80095f2:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 80095f4:	7dfb      	ldrb	r3, [r7, #23]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d108      	bne.n	800960c <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2201      	movs	r2, #1
 80095fe:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2200      	movs	r2, #0
 8009604:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8009606:	2300      	movs	r3, #0
 8009608:	75fb      	strb	r3, [r7, #23]
    break;
 800960a:	e013      	b.n	8009634 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 800960c:	7dfb      	ldrb	r3, [r7, #23]
 800960e:	2b03      	cmp	r3, #3
 8009610:	d108      	bne.n	8009624 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2201      	movs	r2, #1
 8009616:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2200      	movs	r2, #0
 800961c:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800961e:	2303      	movs	r3, #3
 8009620:	75fb      	strb	r3, [r7, #23]
    break;
 8009622:	e007      	b.n	8009634 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8009624:	7dfb      	ldrb	r3, [r7, #23]
 8009626:	2b02      	cmp	r3, #2
 8009628:	d104      	bne.n	8009634 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2201      	movs	r2, #1
 800962e:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8009630:	2302      	movs	r3, #2
 8009632:	75fb      	strb	r3, [r7, #23]
    break;
 8009634:	bf00      	nop
  }
  return status;
 8009636:	7dfb      	ldrb	r3, [r7, #23]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3718      	adds	r7, #24
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b086      	sub	sp, #24
 8009644:	af02      	add	r7, sp, #8
 8009646:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009648:	2301      	movs	r3, #1
 800964a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800964c:	2300      	movs	r3, #0
 800964e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	7e1b      	ldrb	r3, [r3, #24]
 8009654:	3b01      	subs	r3, #1
 8009656:	2b0a      	cmp	r3, #10
 8009658:	f200 814c 	bhi.w	80098f4 <USBH_HandleControl+0x2b4>
 800965c:	a201      	add	r2, pc, #4	; (adr r2, 8009664 <USBH_HandleControl+0x24>)
 800965e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009662:	bf00      	nop
 8009664:	08009691 	.word	0x08009691
 8009668:	080096ab 	.word	0x080096ab
 800966c:	08009715 	.word	0x08009715
 8009670:	0800973b 	.word	0x0800973b
 8009674:	08009773 	.word	0x08009773
 8009678:	0800979f 	.word	0x0800979f
 800967c:	080097f1 	.word	0x080097f1
 8009680:	08009813 	.word	0x08009813
 8009684:	0800984f 	.word	0x0800984f
 8009688:	08009877 	.word	0x08009877
 800968c:	080098b5 	.word	0x080098b5
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f103 0110 	add.w	r1, r3, #16
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	795b      	ldrb	r3, [r3, #5]
 800969a:	461a      	mov	r2, r3
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 f939 	bl	8009914 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2202      	movs	r2, #2
 80096a6:	761a      	strb	r2, [r3, #24]
    break;
 80096a8:	e12f      	b.n	800990a <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	795b      	ldrb	r3, [r3, #5]
 80096ae:	4619      	mov	r1, r3
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 fcb7 	bl	800a024 <USBH_LL_GetURBState>
 80096b6:	4603      	mov	r3, r0
 80096b8:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 80096ba:	7bbb      	ldrb	r3, [r7, #14]
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d11e      	bne.n	80096fe <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	7c1b      	ldrb	r3, [r3, #16]
 80096c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80096c8:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	8adb      	ldrh	r3, [r3, #22]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00a      	beq.n	80096e8 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 80096d2:	7b7b      	ldrb	r3, [r7, #13]
 80096d4:	2b80      	cmp	r3, #128	; 0x80
 80096d6:	d103      	bne.n	80096e0 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2203      	movs	r2, #3
 80096dc:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80096de:	e10b      	b.n	80098f8 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2205      	movs	r2, #5
 80096e4:	761a      	strb	r2, [r3, #24]
    break;
 80096e6:	e107      	b.n	80098f8 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 80096e8:	7b7b      	ldrb	r3, [r7, #13]
 80096ea:	2b80      	cmp	r3, #128	; 0x80
 80096ec:	d103      	bne.n	80096f6 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2209      	movs	r2, #9
 80096f2:	761a      	strb	r2, [r3, #24]
    break;
 80096f4:	e100      	b.n	80098f8 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2207      	movs	r2, #7
 80096fa:	761a      	strb	r2, [r3, #24]
    break;
 80096fc:	e0fc      	b.n	80098f8 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80096fe:	7bbb      	ldrb	r3, [r7, #14]
 8009700:	2b04      	cmp	r3, #4
 8009702:	d003      	beq.n	800970c <USBH_HandleControl+0xcc>
 8009704:	7bbb      	ldrb	r3, [r7, #14]
 8009706:	2b02      	cmp	r3, #2
 8009708:	f040 80f6 	bne.w	80098f8 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	220b      	movs	r2, #11
 8009710:	761a      	strb	r2, [r3, #24]
    break;
 8009712:	e0f1      	b.n	80098f8 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800971a:	b29a      	uxth	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6899      	ldr	r1, [r3, #8]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	899a      	ldrh	r2, [r3, #12]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	791b      	ldrb	r3, [r3, #4]
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 f930 	bl	8009992 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2204      	movs	r2, #4
 8009736:	761a      	strb	r2, [r3, #24]
    break;
 8009738:	e0e7      	b.n	800990a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	791b      	ldrb	r3, [r3, #4]
 800973e:	4619      	mov	r1, r3
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 fc6f 	bl	800a024 <USBH_LL_GetURBState>
 8009746:	4603      	mov	r3, r0
 8009748:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800974a:	7bbb      	ldrb	r3, [r7, #14]
 800974c:	2b01      	cmp	r3, #1
 800974e:	d102      	bne.n	8009756 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2209      	movs	r2, #9
 8009754:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8009756:	7bbb      	ldrb	r3, [r7, #14]
 8009758:	2b05      	cmp	r3, #5
 800975a:	d102      	bne.n	8009762 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800975c:	2303      	movs	r3, #3
 800975e:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009760:	e0cc      	b.n	80098fc <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8009762:	7bbb      	ldrb	r3, [r7, #14]
 8009764:	2b04      	cmp	r3, #4
 8009766:	f040 80c9 	bne.w	80098fc <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	220b      	movs	r2, #11
 800976e:	761a      	strb	r2, [r3, #24]
    break;
 8009770:	e0c4      	b.n	80098fc <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6899      	ldr	r1, [r3, #8]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	899a      	ldrh	r2, [r3, #12]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	7958      	ldrb	r0, [r3, #5]
 800977e:	2301      	movs	r3, #1
 8009780:	9300      	str	r3, [sp, #0]
 8009782:	4603      	mov	r3, r0
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 f8df 	bl	8009948 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009790:	b29a      	uxth	r2, r3
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2206      	movs	r2, #6
 800979a:	761a      	strb	r2, [r3, #24]
    break;
 800979c:	e0b5      	b.n	800990a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	795b      	ldrb	r3, [r3, #5]
 80097a2:	4619      	mov	r1, r3
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fc3d 	bl	800a024 <USBH_LL_GetURBState>
 80097aa:	4603      	mov	r3, r0
 80097ac:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 80097ae:	7bbb      	ldrb	r3, [r7, #14]
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d103      	bne.n	80097bc <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2207      	movs	r2, #7
 80097b8:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80097ba:	e0a1      	b.n	8009900 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 80097bc:	7bbb      	ldrb	r3, [r7, #14]
 80097be:	2b05      	cmp	r3, #5
 80097c0:	d105      	bne.n	80097ce <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	220c      	movs	r2, #12
 80097c6:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80097c8:	2303      	movs	r3, #3
 80097ca:	73fb      	strb	r3, [r7, #15]
    break;
 80097cc:	e098      	b.n	8009900 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80097ce:	7bbb      	ldrb	r3, [r7, #14]
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	d103      	bne.n	80097dc <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2205      	movs	r2, #5
 80097d8:	761a      	strb	r2, [r3, #24]
    break;
 80097da:	e091      	b.n	8009900 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 80097dc:	7bbb      	ldrb	r3, [r7, #14]
 80097de:	2b04      	cmp	r3, #4
 80097e0:	f040 808e 	bne.w	8009900 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	220b      	movs	r2, #11
 80097e8:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 80097ea:	2302      	movs	r3, #2
 80097ec:	73fb      	strb	r3, [r7, #15]
    break;
 80097ee:	e087      	b.n	8009900 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	791b      	ldrb	r3, [r3, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	2100      	movs	r1, #0
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f8ca 	bl	8009992 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009804:	b29a      	uxth	r2, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2208      	movs	r2, #8
 800980e:	761a      	strb	r2, [r3, #24]

    break;
 8009810:	e07b      	b.n	800990a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	791b      	ldrb	r3, [r3, #4]
 8009816:	4619      	mov	r1, r3
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fc03 	bl	800a024 <USBH_LL_GetURBState>
 800981e:	4603      	mov	r3, r0
 8009820:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8009822:	7bbb      	ldrb	r3, [r7, #14]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d105      	bne.n	8009834 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	220d      	movs	r2, #13
 800982c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800982e:	2300      	movs	r3, #0
 8009830:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009832:	e067      	b.n	8009904 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8009834:	7bbb      	ldrb	r3, [r7, #14]
 8009836:	2b04      	cmp	r3, #4
 8009838:	d103      	bne.n	8009842 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	220b      	movs	r2, #11
 800983e:	761a      	strb	r2, [r3, #24]
    break;
 8009840:	e060      	b.n	8009904 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8009842:	7bbb      	ldrb	r3, [r7, #14]
 8009844:	2b05      	cmp	r3, #5
 8009846:	d15d      	bne.n	8009904 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8009848:	2303      	movs	r3, #3
 800984a:	73fb      	strb	r3, [r7, #15]
    break;
 800984c:	e05a      	b.n	8009904 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	795a      	ldrb	r2, [r3, #5]
 8009852:	2301      	movs	r3, #1
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	4613      	mov	r3, r2
 8009858:	2200      	movs	r2, #0
 800985a:	2100      	movs	r1, #0
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f873 	bl	8009948 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009868:	b29a      	uxth	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	220a      	movs	r2, #10
 8009872:	761a      	strb	r2, [r3, #24]
    break;
 8009874:	e049      	b.n	800990a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	795b      	ldrb	r3, [r3, #5]
 800987a:	4619      	mov	r1, r3
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 fbd1 	bl	800a024 <USBH_LL_GetURBState>
 8009882:	4603      	mov	r3, r0
 8009884:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8009886:	7bbb      	ldrb	r3, [r7, #14]
 8009888:	2b01      	cmp	r3, #1
 800988a:	d105      	bne.n	8009898 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 800988c:	2300      	movs	r3, #0
 800988e:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	220d      	movs	r2, #13
 8009894:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8009896:	e037      	b.n	8009908 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8009898:	7bbb      	ldrb	r3, [r7, #14]
 800989a:	2b02      	cmp	r3, #2
 800989c:	d103      	bne.n	80098a6 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2209      	movs	r2, #9
 80098a2:	761a      	strb	r2, [r3, #24]
    break;
 80098a4:	e030      	b.n	8009908 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 80098a6:	7bbb      	ldrb	r3, [r7, #14]
 80098a8:	2b04      	cmp	r3, #4
 80098aa:	d12d      	bne.n	8009908 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	220b      	movs	r2, #11
 80098b0:	761a      	strb	r2, [r3, #24]
    break;
 80098b2:	e029      	b.n	8009908 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	7e5b      	ldrb	r3, [r3, #25]
 80098b8:	3301      	adds	r3, #1
 80098ba:	b2da      	uxtb	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	765a      	strb	r2, [r3, #25]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	7e5b      	ldrb	r3, [r3, #25]
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	d809      	bhi.n	80098dc <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fabe 	bl	8009e4a <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 80098da:	e016      	b.n	800990a <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80098e2:	2106      	movs	r1, #6
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 80098ee:	2302      	movs	r3, #2
 80098f0:	73fb      	strb	r3, [r7, #15]
    break;
 80098f2:	e00a      	b.n	800990a <USBH_HandleControl+0x2ca>

  default:
    break;
 80098f4:	bf00      	nop
 80098f6:	e008      	b.n	800990a <USBH_HandleControl+0x2ca>
    break;
 80098f8:	bf00      	nop
 80098fa:	e006      	b.n	800990a <USBH_HandleControl+0x2ca>
    break;
 80098fc:	bf00      	nop
 80098fe:	e004      	b.n	800990a <USBH_HandleControl+0x2ca>
    break;
 8009900:	bf00      	nop
 8009902:	e002      	b.n	800990a <USBH_HandleControl+0x2ca>
    break;
 8009904:	bf00      	nop
 8009906:	e000      	b.n	800990a <USBH_HandleControl+0x2ca>
    break;
 8009908:	bf00      	nop
  }
  return status;
 800990a:	7bfb      	ldrb	r3, [r7, #15]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b088      	sub	sp, #32
 8009918:	af04      	add	r7, sp, #16
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	4613      	mov	r3, r2
 8009920:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009922:	79f9      	ldrb	r1, [r7, #7]
 8009924:	2300      	movs	r3, #0
 8009926:	9303      	str	r3, [sp, #12]
 8009928:	2308      	movs	r3, #8
 800992a:	9302      	str	r3, [sp, #8]
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	9301      	str	r3, [sp, #4]
 8009930:	2300      	movs	r3, #0
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	2300      	movs	r3, #0
 8009936:	2200      	movs	r2, #0
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f000 fb42 	bl	8009fc2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3710      	adds	r7, #16
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b088      	sub	sp, #32
 800994c:	af04      	add	r7, sp, #16
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	4611      	mov	r1, r2
 8009954:	461a      	mov	r2, r3
 8009956:	460b      	mov	r3, r1
 8009958:	80fb      	strh	r3, [r7, #6]
 800995a:	4613      	mov	r3, r2
 800995c:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009964:	2b00      	cmp	r3, #0
 8009966:	d001      	beq.n	800996c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009968:	2300      	movs	r3, #0
 800996a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800996c:	7979      	ldrb	r1, [r7, #5]
 800996e:	7e3b      	ldrb	r3, [r7, #24]
 8009970:	9303      	str	r3, [sp, #12]
 8009972:	88fb      	ldrh	r3, [r7, #6]
 8009974:	9302      	str	r3, [sp, #8]
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	9301      	str	r3, [sp, #4]
 800997a:	2301      	movs	r3, #1
 800997c:	9300      	str	r3, [sp, #0]
 800997e:	2300      	movs	r3, #0
 8009980:	2200      	movs	r2, #0
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f000 fb1d 	bl	8009fc2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009988:	2300      	movs	r3, #0
}
 800998a:	4618      	mov	r0, r3
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8009992:	b580      	push	{r7, lr}
 8009994:	b088      	sub	sp, #32
 8009996:	af04      	add	r7, sp, #16
 8009998:	60f8      	str	r0, [r7, #12]
 800999a:	60b9      	str	r1, [r7, #8]
 800999c:	4611      	mov	r1, r2
 800999e:	461a      	mov	r2, r3
 80099a0:	460b      	mov	r3, r1
 80099a2:	80fb      	strh	r3, [r7, #6]
 80099a4:	4613      	mov	r3, r2
 80099a6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80099a8:	7979      	ldrb	r1, [r7, #5]
 80099aa:	2300      	movs	r3, #0
 80099ac:	9303      	str	r3, [sp, #12]
 80099ae:	88fb      	ldrh	r3, [r7, #6]
 80099b0:	9302      	str	r3, [sp, #8]
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	9301      	str	r3, [sp, #4]
 80099b6:	2301      	movs	r3, #1
 80099b8:	9300      	str	r3, [sp, #0]
 80099ba:	2300      	movs	r3, #0
 80099bc:	2201      	movs	r2, #1
 80099be:	68f8      	ldr	r0, [r7, #12]
 80099c0:	f000 faff 	bl	8009fc2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80099c4:	2300      	movs	r3, #0

}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b088      	sub	sp, #32
 80099d2:	af04      	add	r7, sp, #16
 80099d4:	60f8      	str	r0, [r7, #12]
 80099d6:	60b9      	str	r1, [r7, #8]
 80099d8:	4611      	mov	r1, r2
 80099da:	461a      	mov	r2, r3
 80099dc:	460b      	mov	r3, r1
 80099de:	80fb      	strh	r3, [r7, #6]
 80099e0:	4613      	mov	r3, r2
 80099e2:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d001      	beq.n	80099f2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80099ee:	2300      	movs	r3, #0
 80099f0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80099f2:	7979      	ldrb	r1, [r7, #5]
 80099f4:	7e3b      	ldrb	r3, [r7, #24]
 80099f6:	9303      	str	r3, [sp, #12]
 80099f8:	88fb      	ldrh	r3, [r7, #6]
 80099fa:	9302      	str	r3, [sp, #8]
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	9301      	str	r3, [sp, #4]
 8009a00:	2301      	movs	r3, #1
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	2302      	movs	r3, #2
 8009a06:	2200      	movs	r2, #0
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	f000 fada 	bl	8009fc2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b088      	sub	sp, #32
 8009a1c:	af04      	add	r7, sp, #16
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	4611      	mov	r1, r2
 8009a24:	461a      	mov	r2, r3
 8009a26:	460b      	mov	r3, r1
 8009a28:	80fb      	strh	r3, [r7, #6]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009a2e:	7979      	ldrb	r1, [r7, #5]
 8009a30:	2300      	movs	r3, #0
 8009a32:	9303      	str	r3, [sp, #12]
 8009a34:	88fb      	ldrh	r3, [r7, #6]
 8009a36:	9302      	str	r3, [sp, #8]
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	9301      	str	r3, [sp, #4]
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	9300      	str	r3, [sp, #0]
 8009a40:	2302      	movs	r3, #2
 8009a42:	2201      	movs	r2, #1
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f000 fabc 	bl	8009fc2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b086      	sub	sp, #24
 8009a58:	af04      	add	r7, sp, #16
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	4608      	mov	r0, r1
 8009a5e:	4611      	mov	r1, r2
 8009a60:	461a      	mov	r2, r3
 8009a62:	4603      	mov	r3, r0
 8009a64:	70fb      	strb	r3, [r7, #3]
 8009a66:	460b      	mov	r3, r1
 8009a68:	70bb      	strb	r3, [r7, #2]
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8009a6e:	7878      	ldrb	r0, [r7, #1]
 8009a70:	78ba      	ldrb	r2, [r7, #2]
 8009a72:	78f9      	ldrb	r1, [r7, #3]
 8009a74:	8b3b      	ldrh	r3, [r7, #24]
 8009a76:	9302      	str	r3, [sp, #8]
 8009a78:	7d3b      	ldrb	r3, [r7, #20]
 8009a7a:	9301      	str	r3, [sp, #4]
 8009a7c:	7c3b      	ldrb	r3, [r7, #16]
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	4603      	mov	r3, r0
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 fa4f 	bl	8009f26 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8009a88:	2300      	movs	r3, #0

}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b082      	sub	sp, #8
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8009a9e:	78fb      	ldrb	r3, [r7, #3]
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 fa6e 	bl	8009f84 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009aa8:	2300      	movs	r3, #0

}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b084      	sub	sp, #16
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
 8009aba:	460b      	mov	r3, r1
 8009abc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f831 	bl	8009b26 <USBH_GetFreePipe>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009ac8:	89fb      	ldrh	r3, [r7, #14]
 8009aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d007      	beq.n	8009ae2 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8009ad2:	78fb      	ldrb	r3, [r7, #3]
 8009ad4:	89fa      	ldrh	r2, [r7, #14]
 8009ad6:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	32e0      	adds	r2, #224	; 0xe0
 8009ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8009ae2:	89fb      	ldrh	r3, [r7, #14]
 8009ae4:	b2db      	uxtb	r3, r3
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009aee:	b480      	push	{r7}
 8009af0:	b083      	sub	sp, #12
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
 8009af6:	460b      	mov	r3, r1
 8009af8:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8009afa:	78fb      	ldrb	r3, [r7, #3]
 8009afc:	2b0a      	cmp	r3, #10
 8009afe:	d80b      	bhi.n	8009b18 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8009b00:	78fa      	ldrb	r2, [r7, #3]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	32e0      	adds	r2, #224	; 0xe0
 8009b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b0a:	78fa      	ldrb	r2, [r7, #3]
 8009b0c:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	32e0      	adds	r2, #224	; 0xe0
 8009b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8009b18:	2300      	movs	r3, #0
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	370c      	adds	r7, #12
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr

08009b26 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8009b26:	b480      	push	{r7}
 8009b28:	b085      	sub	sp, #20
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009b32:	2300      	movs	r3, #0
 8009b34:	73fb      	strb	r3, [r7, #15]
 8009b36:	e00e      	b.n	8009b56 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009b38:	7bfa      	ldrb	r2, [r7, #15]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	32e0      	adds	r2, #224	; 0xe0
 8009b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d102      	bne.n	8009b50 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	e007      	b.n	8009b60 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
 8009b52:	3301      	adds	r3, #1
 8009b54:	73fb      	strb	r3, [r7, #15]
 8009b56:	7bfb      	ldrb	r3, [r7, #15]
 8009b58:	2b0a      	cmp	r3, #10
 8009b5a:	d9ed      	bls.n	8009b38 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8009b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3714      	adds	r7, #20
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009b70:	2201      	movs	r2, #1
 8009b72:	490e      	ldr	r1, [pc, #56]	; (8009bac <MX_USB_HOST_Init+0x40>)
 8009b74:	480e      	ldr	r0, [pc, #56]	; (8009bb0 <MX_USB_HOST_Init+0x44>)
 8009b76:	f7fe fdbb 	bl	80086f0 <USBH_Init>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d001      	beq.n	8009b84 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009b80:	f7f7 f8a4 	bl	8000ccc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009b84:	490b      	ldr	r1, [pc, #44]	; (8009bb4 <MX_USB_HOST_Init+0x48>)
 8009b86:	480a      	ldr	r0, [pc, #40]	; (8009bb0 <MX_USB_HOST_Init+0x44>)
 8009b88:	f7fe fe25 	bl	80087d6 <USBH_RegisterClass>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d001      	beq.n	8009b96 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009b92:	f7f7 f89b 	bl	8000ccc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009b96:	4806      	ldr	r0, [pc, #24]	; (8009bb0 <MX_USB_HOST_Init+0x44>)
 8009b98:	f7fe feaa 	bl	80088f0 <USBH_Start>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d001      	beq.n	8009ba6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009ba2:	f7f7 f893 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009ba6:	bf00      	nop
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	08009bcd 	.word	0x08009bcd
 8009bb0:	200008dc 	.word	0x200008dc
 8009bb4:	20000014 	.word	0x20000014

08009bb8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009bbc:	4802      	ldr	r0, [pc, #8]	; (8009bc8 <MX_USB_HOST_Process+0x10>)
 8009bbe:	f7fe fea7 	bl	8008910 <USBH_Process>
}
 8009bc2:	bf00      	nop
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	200008dc 	.word	0x200008dc

08009bcc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009bd8:	78fb      	ldrb	r3, [r7, #3]
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	2b04      	cmp	r3, #4
 8009bde:	d819      	bhi.n	8009c14 <USBH_UserProcess+0x48>
 8009be0:	a201      	add	r2, pc, #4	; (adr r2, 8009be8 <USBH_UserProcess+0x1c>)
 8009be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be6:	bf00      	nop
 8009be8:	08009c15 	.word	0x08009c15
 8009bec:	08009c05 	.word	0x08009c05
 8009bf0:	08009c15 	.word	0x08009c15
 8009bf4:	08009c0d 	.word	0x08009c0d
 8009bf8:	08009bfd 	.word	0x08009bfd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009bfc:	4b09      	ldr	r3, [pc, #36]	; (8009c24 <USBH_UserProcess+0x58>)
 8009bfe:	2203      	movs	r2, #3
 8009c00:	701a      	strb	r2, [r3, #0]
  break;
 8009c02:	e008      	b.n	8009c16 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009c04:	4b07      	ldr	r3, [pc, #28]	; (8009c24 <USBH_UserProcess+0x58>)
 8009c06:	2202      	movs	r2, #2
 8009c08:	701a      	strb	r2, [r3, #0]
  break;
 8009c0a:	e004      	b.n	8009c16 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009c0c:	4b05      	ldr	r3, [pc, #20]	; (8009c24 <USBH_UserProcess+0x58>)
 8009c0e:	2201      	movs	r2, #1
 8009c10:	701a      	strb	r2, [r3, #0]
  break;
 8009c12:	e000      	b.n	8009c16 <USBH_UserProcess+0x4a>

  default:
  break;
 8009c14:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009c16:	bf00      	nop
 8009c18:	370c      	adds	r7, #12
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	200004c8 	.word	0x200004c8

08009c28 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b08a      	sub	sp, #40	; 0x28
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c30:	f107 0314 	add.w	r3, r7, #20
 8009c34:	2200      	movs	r2, #0
 8009c36:	601a      	str	r2, [r3, #0]
 8009c38:	605a      	str	r2, [r3, #4]
 8009c3a:	609a      	str	r2, [r3, #8]
 8009c3c:	60da      	str	r2, [r3, #12]
 8009c3e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c48:	d14e      	bne.n	8009ce8 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c4a:	4b29      	ldr	r3, [pc, #164]	; (8009cf0 <HAL_HCD_MspInit+0xc8>)
 8009c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c4e:	4a28      	ldr	r2, [pc, #160]	; (8009cf0 <HAL_HCD_MspInit+0xc8>)
 8009c50:	f043 0301 	orr.w	r3, r3, #1
 8009c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c56:	4b26      	ldr	r3, [pc, #152]	; (8009cf0 <HAL_HCD_MspInit+0xc8>)
 8009c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c5a:	f003 0301 	and.w	r3, r3, #1
 8009c5e:	613b      	str	r3, [r7, #16]
 8009c60:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009c62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c68:	2302      	movs	r3, #2
 8009c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c70:	2303      	movs	r3, #3
 8009c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009c74:	230a      	movs	r3, #10
 8009c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c78:	f107 0314 	add.w	r3, r7, #20
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009c82:	f7f8 f819 	bl	8001cb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c86:	4b1a      	ldr	r3, [pc, #104]	; (8009cf0 <HAL_HCD_MspInit+0xc8>)
 8009c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c8a:	4a19      	ldr	r2, [pc, #100]	; (8009cf0 <HAL_HCD_MspInit+0xc8>)
 8009c8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c92:	4b17      	ldr	r3, [pc, #92]	; (8009cf0 <HAL_HCD_MspInit+0xc8>)
 8009c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c9a:	60fb      	str	r3, [r7, #12]
 8009c9c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c9e:	4b14      	ldr	r3, [pc, #80]	; (8009cf0 <HAL_HCD_MspInit+0xc8>)
 8009ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d114      	bne.n	8009cd4 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009caa:	4b11      	ldr	r3, [pc, #68]	; (8009cf0 <HAL_HCD_MspInit+0xc8>)
 8009cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cae:	4a10      	ldr	r2, [pc, #64]	; (8009cf0 <HAL_HCD_MspInit+0xc8>)
 8009cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8009cb6:	4b0e      	ldr	r3, [pc, #56]	; (8009cf0 <HAL_HCD_MspInit+0xc8>)
 8009cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cbe:	60bb      	str	r3, [r7, #8]
 8009cc0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8009cc2:	f7fa fb4b 	bl	800435c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009cc6:	4b0a      	ldr	r3, [pc, #40]	; (8009cf0 <HAL_HCD_MspInit+0xc8>)
 8009cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cca:	4a09      	ldr	r2, [pc, #36]	; (8009cf0 <HAL_HCD_MspInit+0xc8>)
 8009ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cd0:	6593      	str	r3, [r2, #88]	; 0x58
 8009cd2:	e001      	b.n	8009cd8 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8009cd4:	f7fa fb42 	bl	800435c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009cd8:	2200      	movs	r2, #0
 8009cda:	2100      	movs	r1, #0
 8009cdc:	2043      	movs	r0, #67	; 0x43
 8009cde:	f7f7 ffb4 	bl	8001c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009ce2:	2043      	movs	r0, #67	; 0x43
 8009ce4:	f7f7 ffcd 	bl	8001c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009ce8:	bf00      	nop
 8009cea:	3728      	adds	r7, #40	; 0x28
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	40021000 	.word	0x40021000

08009cf4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7ff f8b5 	bl	8008e72 <USBH_LL_IncTimer>
}
 8009d08:	bf00      	nop
 8009d0a:	3708      	adds	r7, #8
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7ff f8fa 	bl	8008f18 <USBH_LL_Connect>
}
 8009d24:	bf00      	nop
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7ff f912 	bl	8008f64 <USBH_LL_Disconnect>
}
 8009d40:	bf00      	nop
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	460b      	mov	r3, r1
 8009d52:	70fb      	strb	r3, [r7, #3]
 8009d54:	4613      	mov	r3, r2
 8009d56:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009d58:	bf00      	nop
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7ff f8a7 	bl	8008ec6 <USBH_LL_PortEnabled>
} 
 8009d78:	bf00      	nop
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7ff f8a7 	bl	8008ee2 <USBH_LL_PortDisabled>
} 
 8009d94:	bf00      	nop
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d12a      	bne.n	8009e04 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009dae:	4a18      	ldr	r2, [pc, #96]	; (8009e10 <USBH_LL_Init+0x74>)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a15      	ldr	r2, [pc, #84]	; (8009e10 <USBH_LL_Init+0x74>)
 8009dba:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009dbe:	4b14      	ldr	r3, [pc, #80]	; (8009e10 <USBH_LL_Init+0x74>)
 8009dc0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009dc4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009dc6:	4b12      	ldr	r3, [pc, #72]	; (8009e10 <USBH_LL_Init+0x74>)
 8009dc8:	2208      	movs	r2, #8
 8009dca:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009dcc:	4b10      	ldr	r3, [pc, #64]	; (8009e10 <USBH_LL_Init+0x74>)
 8009dce:	2201      	movs	r2, #1
 8009dd0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009dd2:	4b0f      	ldr	r3, [pc, #60]	; (8009e10 <USBH_LL_Init+0x74>)
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009dd8:	4b0d      	ldr	r3, [pc, #52]	; (8009e10 <USBH_LL_Init+0x74>)
 8009dda:	2202      	movs	r2, #2
 8009ddc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009dde:	4b0c      	ldr	r3, [pc, #48]	; (8009e10 <USBH_LL_Init+0x74>)
 8009de0:	2200      	movs	r2, #0
 8009de2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009de4:	480a      	ldr	r0, [pc, #40]	; (8009e10 <USBH_LL_Init+0x74>)
 8009de6:	f7f8 f93f 	bl	8002068 <HAL_HCD_Init>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d001      	beq.n	8009df4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009df0:	f7f6 ff6c 	bl	8000ccc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009df4:	4806      	ldr	r0, [pc, #24]	; (8009e10 <USBH_LL_Init+0x74>)
 8009df6:	f7f8 fd37 	bl	8002868 <HAL_HCD_GetCurrentFrame>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f7ff f828 	bl	8008e54 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	20000ca8 	.word	0x20000ca8

08009e14 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e20:	2300      	movs	r3, #0
 8009e22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7f8 fca4 	bl	8002778 <HAL_HCD_Start>
 8009e30:	4603      	mov	r3, r0
 8009e32:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e34:	7bfb      	ldrb	r3, [r7, #15]
 8009e36:	4618      	mov	r0, r3
 8009e38:	f000 f95c 	bl	800a0f4 <USBH_Get_USB_Status>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009e40:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b084      	sub	sp, #16
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e52:	2300      	movs	r3, #0
 8009e54:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e56:	2300      	movs	r3, #0
 8009e58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7f8 fcac 	bl	80027be <HAL_HCD_Stop>
 8009e66:	4603      	mov	r3, r0
 8009e68:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e6a:	7bfb      	ldrb	r3, [r7, #15]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f000 f941 	bl	800a0f4 <USBH_Get_USB_Status>
 8009e72:	4603      	mov	r3, r0
 8009e74:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009e76:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7f8 fcf6 	bl	8002884 <HAL_HCD_GetCurrentSpeed>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d007      	beq.n	8009eae <USBH_LL_GetSpeed+0x2e>
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d302      	bcc.n	8009ea8 <USBH_LL_GetSpeed+0x28>
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d006      	beq.n	8009eb4 <USBH_LL_GetSpeed+0x34>
 8009ea6:	e008      	b.n	8009eba <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	73fb      	strb	r3, [r7, #15]
    break;
 8009eac:	e008      	b.n	8009ec0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	73fb      	strb	r3, [r7, #15]
    break;
 8009eb2:	e005      	b.n	8009ec0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009eb4:	2302      	movs	r3, #2
 8009eb6:	73fb      	strb	r3, [r7, #15]
    break;
 8009eb8:	e002      	b.n	8009ec0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	73fb      	strb	r3, [r7, #15]
    break;
 8009ebe:	bf00      	nop
  }
  return  speed;
 8009ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b084      	sub	sp, #16
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7f8 fc89 	bl	80027f8 <HAL_HCD_ResetPort>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8009eea:	7bfb      	ldrb	r3, [r7, #15]
 8009eec:	4618      	mov	r0, r3
 8009eee:	f000 f901 	bl	800a0f4 <USBH_Get_USB_Status>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009ef6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	460b      	mov	r3, r1
 8009f0a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009f12:	78fa      	ldrb	r2, [r7, #3]
 8009f14:	4611      	mov	r1, r2
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7f8 fc91 	bl	800283e <HAL_HCD_HC_GetXferCount>
 8009f1c:	4603      	mov	r3, r0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3708      	adds	r7, #8
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009f26:	b590      	push	{r4, r7, lr}
 8009f28:	b089      	sub	sp, #36	; 0x24
 8009f2a:	af04      	add	r7, sp, #16
 8009f2c:	6078      	str	r0, [r7, #4]
 8009f2e:	4608      	mov	r0, r1
 8009f30:	4611      	mov	r1, r2
 8009f32:	461a      	mov	r2, r3
 8009f34:	4603      	mov	r3, r0
 8009f36:	70fb      	strb	r3, [r7, #3]
 8009f38:	460b      	mov	r3, r1
 8009f3a:	70bb      	strb	r3, [r7, #2]
 8009f3c:	4613      	mov	r3, r2
 8009f3e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f40:	2300      	movs	r3, #0
 8009f42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8009f4e:	787c      	ldrb	r4, [r7, #1]
 8009f50:	78ba      	ldrb	r2, [r7, #2]
 8009f52:	78f9      	ldrb	r1, [r7, #3]
 8009f54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009f56:	9302      	str	r3, [sp, #8]
 8009f58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009f5c:	9301      	str	r3, [sp, #4]
 8009f5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	4623      	mov	r3, r4
 8009f66:	f7f8 f8e1 	bl	800212c <HAL_HCD_HC_Init>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f6e:	7bfb      	ldrb	r3, [r7, #15]
 8009f70:	4618      	mov	r0, r3
 8009f72:	f000 f8bf 	bl	800a0f4 <USBH_Get_USB_Status>
 8009f76:	4603      	mov	r3, r0
 8009f78:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009f7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3714      	adds	r7, #20
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd90      	pop	{r4, r7, pc}

08009f84 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f94:	2300      	movs	r3, #0
 8009f96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009f9e:	78fa      	ldrb	r2, [r7, #3]
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7f8 f95a 	bl	800225c <HAL_HCD_HC_Halt>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009fac:	7bfb      	ldrb	r3, [r7, #15]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f000 f8a0 	bl	800a0f4 <USBH_Get_USB_Status>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	73bb      	strb	r3, [r7, #14]
   
  return usb_status;
 8009fb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3710      	adds	r7, #16
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009fc2:	b590      	push	{r4, r7, lr}
 8009fc4:	b089      	sub	sp, #36	; 0x24
 8009fc6:	af04      	add	r7, sp, #16
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	4608      	mov	r0, r1
 8009fcc:	4611      	mov	r1, r2
 8009fce:	461a      	mov	r2, r3
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	70fb      	strb	r3, [r7, #3]
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	70bb      	strb	r3, [r7, #2]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8009fea:	787c      	ldrb	r4, [r7, #1]
 8009fec:	78ba      	ldrb	r2, [r7, #2]
 8009fee:	78f9      	ldrb	r1, [r7, #3]
 8009ff0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009ff4:	9303      	str	r3, [sp, #12]
 8009ff6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009ff8:	9302      	str	r3, [sp, #8]
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffc:	9301      	str	r3, [sp, #4]
 8009ffe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	4623      	mov	r3, r4
 800a006:	f7f8 f94d 	bl	80022a4 <HAL_HCD_HC_SubmitRequest>
 800a00a:	4603      	mov	r3, r0
 800a00c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a00e:	7bfb      	ldrb	r3, [r7, #15]
 800a010:	4618      	mov	r0, r3
 800a012:	f000 f86f 	bl	800a0f4 <USBH_Get_USB_Status>
 800a016:	4603      	mov	r3, r0
 800a018:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a01a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3714      	adds	r7, #20
 800a020:	46bd      	mov	sp, r7
 800a022:	bd90      	pop	{r4, r7, pc}

0800a024 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	460b      	mov	r3, r1
 800a02e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a036:	78fa      	ldrb	r2, [r7, #3]
 800a038:	4611      	mov	r1, r2
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7f8 fbea 	bl	8002814 <HAL_HCD_HC_GetURBState>
 800a040:	4603      	mov	r3, r0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b082      	sub	sp, #8
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
 800a052:	460b      	mov	r3, r1
 800a054:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d103      	bne.n	800a068 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a060:	78fb      	ldrb	r3, [r7, #3]
 800a062:	4618      	mov	r0, r3
 800a064:	f000 f872 	bl	800a14c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a068:	20c8      	movs	r0, #200	; 0xc8
 800a06a:	f7f7 fcf1 	bl	8001a50 <HAL_Delay>
  return USBH_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	460b      	mov	r3, r1
 800a082:	70fb      	strb	r3, [r7, #3]
 800a084:	4613      	mov	r3, r2
 800a086:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a08e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a090:	78fa      	ldrb	r2, [r7, #3]
 800a092:	68f9      	ldr	r1, [r7, #12]
 800a094:	4613      	mov	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4413      	add	r3, r2
 800a09a:	00db      	lsls	r3, r3, #3
 800a09c:	440b      	add	r3, r1
 800a09e:	333b      	adds	r3, #59	; 0x3b
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00a      	beq.n	800a0bc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a0a6:	78fa      	ldrb	r2, [r7, #3]
 800a0a8:	68f9      	ldr	r1, [r7, #12]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	00db      	lsls	r3, r3, #3
 800a0b2:	440b      	add	r3, r1
 800a0b4:	3350      	adds	r3, #80	; 0x50
 800a0b6:	78ba      	ldrb	r2, [r7, #2]
 800a0b8:	701a      	strb	r2, [r3, #0]
 800a0ba:	e009      	b.n	800a0d0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a0bc:	78fa      	ldrb	r2, [r7, #3]
 800a0be:	68f9      	ldr	r1, [r7, #12]
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	4413      	add	r3, r2
 800a0c6:	00db      	lsls	r3, r3, #3
 800a0c8:	440b      	add	r3, r1
 800a0ca:	3351      	adds	r3, #81	; 0x51
 800a0cc:	78ba      	ldrb	r2, [r7, #2]
 800a0ce:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3714      	adds	r7, #20
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr

0800a0de <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b082      	sub	sp, #8
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7f7 fcb2 	bl	8001a50 <HAL_Delay>
}
 800a0ec:	bf00      	nop
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0fe:	2300      	movs	r3, #0
 800a100:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a102:	79fb      	ldrb	r3, [r7, #7]
 800a104:	2b03      	cmp	r3, #3
 800a106:	d817      	bhi.n	800a138 <USBH_Get_USB_Status+0x44>
 800a108:	a201      	add	r2, pc, #4	; (adr r2, 800a110 <USBH_Get_USB_Status+0x1c>)
 800a10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a10e:	bf00      	nop
 800a110:	0800a121 	.word	0x0800a121
 800a114:	0800a127 	.word	0x0800a127
 800a118:	0800a12d 	.word	0x0800a12d
 800a11c:	0800a133 	.word	0x0800a133
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a120:	2300      	movs	r3, #0
 800a122:	73fb      	strb	r3, [r7, #15]
    break;
 800a124:	e00b      	b.n	800a13e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a126:	2302      	movs	r3, #2
 800a128:	73fb      	strb	r3, [r7, #15]
    break;
 800a12a:	e008      	b.n	800a13e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a12c:	2301      	movs	r3, #1
 800a12e:	73fb      	strb	r3, [r7, #15]
    break;
 800a130:	e005      	b.n	800a13e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a132:	2302      	movs	r3, #2
 800a134:	73fb      	strb	r3, [r7, #15]
    break;
 800a136:	e002      	b.n	800a13e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a138:	2302      	movs	r3, #2
 800a13a:	73fb      	strb	r3, [r7, #15]
    break;
 800a13c:	bf00      	nop
  }
  return usb_status;
 800a13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3714      	adds	r7, #20
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	4603      	mov	r3, r0
 800a154:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800a156:	79fb      	ldrb	r3, [r7, #7]
 800a158:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a15a:	79fb      	ldrb	r3, [r7, #7]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d102      	bne.n	800a166 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800a160:	2301      	movs	r3, #1
 800a162:	73fb      	strb	r3, [r7, #15]
 800a164:	e001      	b.n	800a16a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a166:	2300      	movs	r3, #0
 800a168:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800a16a:	7bfb      	ldrb	r3, [r7, #15]
 800a16c:	461a      	mov	r2, r3
 800a16e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a172:	4803      	ldr	r0, [pc, #12]	; (800a180 <MX_DriverVbusFS+0x34>)
 800a174:	f7f7 ff60 	bl	8002038 <HAL_GPIO_WritePin>
}
 800a178:	bf00      	nop
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	48000800 	.word	0x48000800

0800a184 <__errno>:
 800a184:	4b01      	ldr	r3, [pc, #4]	; (800a18c <__errno+0x8>)
 800a186:	6818      	ldr	r0, [r3, #0]
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	20000034 	.word	0x20000034

0800a190 <__libc_init_array>:
 800a190:	b570      	push	{r4, r5, r6, lr}
 800a192:	4e0d      	ldr	r6, [pc, #52]	; (800a1c8 <__libc_init_array+0x38>)
 800a194:	4c0d      	ldr	r4, [pc, #52]	; (800a1cc <__libc_init_array+0x3c>)
 800a196:	1ba4      	subs	r4, r4, r6
 800a198:	10a4      	asrs	r4, r4, #2
 800a19a:	2500      	movs	r5, #0
 800a19c:	42a5      	cmp	r5, r4
 800a19e:	d109      	bne.n	800a1b4 <__libc_init_array+0x24>
 800a1a0:	4e0b      	ldr	r6, [pc, #44]	; (800a1d0 <__libc_init_array+0x40>)
 800a1a2:	4c0c      	ldr	r4, [pc, #48]	; (800a1d4 <__libc_init_array+0x44>)
 800a1a4:	f000 f8ea 	bl	800a37c <_init>
 800a1a8:	1ba4      	subs	r4, r4, r6
 800a1aa:	10a4      	asrs	r4, r4, #2
 800a1ac:	2500      	movs	r5, #0
 800a1ae:	42a5      	cmp	r5, r4
 800a1b0:	d105      	bne.n	800a1be <__libc_init_array+0x2e>
 800a1b2:	bd70      	pop	{r4, r5, r6, pc}
 800a1b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a1b8:	4798      	blx	r3
 800a1ba:	3501      	adds	r5, #1
 800a1bc:	e7ee      	b.n	800a19c <__libc_init_array+0xc>
 800a1be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a1c2:	4798      	blx	r3
 800a1c4:	3501      	adds	r5, #1
 800a1c6:	e7f2      	b.n	800a1ae <__libc_init_array+0x1e>
 800a1c8:	0800aa1c 	.word	0x0800aa1c
 800a1cc:	0800aa1c 	.word	0x0800aa1c
 800a1d0:	0800aa1c 	.word	0x0800aa1c
 800a1d4:	0800aa20 	.word	0x0800aa20

0800a1d8 <malloc>:
 800a1d8:	4b02      	ldr	r3, [pc, #8]	; (800a1e4 <malloc+0xc>)
 800a1da:	4601      	mov	r1, r0
 800a1dc:	6818      	ldr	r0, [r3, #0]
 800a1de:	f000 b861 	b.w	800a2a4 <_malloc_r>
 800a1e2:	bf00      	nop
 800a1e4:	20000034 	.word	0x20000034

0800a1e8 <free>:
 800a1e8:	4b02      	ldr	r3, [pc, #8]	; (800a1f4 <free+0xc>)
 800a1ea:	4601      	mov	r1, r0
 800a1ec:	6818      	ldr	r0, [r3, #0]
 800a1ee:	f000 b80b 	b.w	800a208 <_free_r>
 800a1f2:	bf00      	nop
 800a1f4:	20000034 	.word	0x20000034

0800a1f8 <memset>:
 800a1f8:	4402      	add	r2, r0
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d100      	bne.n	800a202 <memset+0xa>
 800a200:	4770      	bx	lr
 800a202:	f803 1b01 	strb.w	r1, [r3], #1
 800a206:	e7f9      	b.n	800a1fc <memset+0x4>

0800a208 <_free_r>:
 800a208:	b538      	push	{r3, r4, r5, lr}
 800a20a:	4605      	mov	r5, r0
 800a20c:	2900      	cmp	r1, #0
 800a20e:	d045      	beq.n	800a29c <_free_r+0x94>
 800a210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a214:	1f0c      	subs	r4, r1, #4
 800a216:	2b00      	cmp	r3, #0
 800a218:	bfb8      	it	lt
 800a21a:	18e4      	addlt	r4, r4, r3
 800a21c:	f000 f8ac 	bl	800a378 <__malloc_lock>
 800a220:	4a1f      	ldr	r2, [pc, #124]	; (800a2a0 <_free_r+0x98>)
 800a222:	6813      	ldr	r3, [r2, #0]
 800a224:	4610      	mov	r0, r2
 800a226:	b933      	cbnz	r3, 800a236 <_free_r+0x2e>
 800a228:	6063      	str	r3, [r4, #4]
 800a22a:	6014      	str	r4, [r2, #0]
 800a22c:	4628      	mov	r0, r5
 800a22e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a232:	f000 b8a2 	b.w	800a37a <__malloc_unlock>
 800a236:	42a3      	cmp	r3, r4
 800a238:	d90c      	bls.n	800a254 <_free_r+0x4c>
 800a23a:	6821      	ldr	r1, [r4, #0]
 800a23c:	1862      	adds	r2, r4, r1
 800a23e:	4293      	cmp	r3, r2
 800a240:	bf04      	itt	eq
 800a242:	681a      	ldreq	r2, [r3, #0]
 800a244:	685b      	ldreq	r3, [r3, #4]
 800a246:	6063      	str	r3, [r4, #4]
 800a248:	bf04      	itt	eq
 800a24a:	1852      	addeq	r2, r2, r1
 800a24c:	6022      	streq	r2, [r4, #0]
 800a24e:	6004      	str	r4, [r0, #0]
 800a250:	e7ec      	b.n	800a22c <_free_r+0x24>
 800a252:	4613      	mov	r3, r2
 800a254:	685a      	ldr	r2, [r3, #4]
 800a256:	b10a      	cbz	r2, 800a25c <_free_r+0x54>
 800a258:	42a2      	cmp	r2, r4
 800a25a:	d9fa      	bls.n	800a252 <_free_r+0x4a>
 800a25c:	6819      	ldr	r1, [r3, #0]
 800a25e:	1858      	adds	r0, r3, r1
 800a260:	42a0      	cmp	r0, r4
 800a262:	d10b      	bne.n	800a27c <_free_r+0x74>
 800a264:	6820      	ldr	r0, [r4, #0]
 800a266:	4401      	add	r1, r0
 800a268:	1858      	adds	r0, r3, r1
 800a26a:	4282      	cmp	r2, r0
 800a26c:	6019      	str	r1, [r3, #0]
 800a26e:	d1dd      	bne.n	800a22c <_free_r+0x24>
 800a270:	6810      	ldr	r0, [r2, #0]
 800a272:	6852      	ldr	r2, [r2, #4]
 800a274:	605a      	str	r2, [r3, #4]
 800a276:	4401      	add	r1, r0
 800a278:	6019      	str	r1, [r3, #0]
 800a27a:	e7d7      	b.n	800a22c <_free_r+0x24>
 800a27c:	d902      	bls.n	800a284 <_free_r+0x7c>
 800a27e:	230c      	movs	r3, #12
 800a280:	602b      	str	r3, [r5, #0]
 800a282:	e7d3      	b.n	800a22c <_free_r+0x24>
 800a284:	6820      	ldr	r0, [r4, #0]
 800a286:	1821      	adds	r1, r4, r0
 800a288:	428a      	cmp	r2, r1
 800a28a:	bf04      	itt	eq
 800a28c:	6811      	ldreq	r1, [r2, #0]
 800a28e:	6852      	ldreq	r2, [r2, #4]
 800a290:	6062      	str	r2, [r4, #4]
 800a292:	bf04      	itt	eq
 800a294:	1809      	addeq	r1, r1, r0
 800a296:	6021      	streq	r1, [r4, #0]
 800a298:	605c      	str	r4, [r3, #4]
 800a29a:	e7c7      	b.n	800a22c <_free_r+0x24>
 800a29c:	bd38      	pop	{r3, r4, r5, pc}
 800a29e:	bf00      	nop
 800a2a0:	200004cc 	.word	0x200004cc

0800a2a4 <_malloc_r>:
 800a2a4:	b570      	push	{r4, r5, r6, lr}
 800a2a6:	1ccd      	adds	r5, r1, #3
 800a2a8:	f025 0503 	bic.w	r5, r5, #3
 800a2ac:	3508      	adds	r5, #8
 800a2ae:	2d0c      	cmp	r5, #12
 800a2b0:	bf38      	it	cc
 800a2b2:	250c      	movcc	r5, #12
 800a2b4:	2d00      	cmp	r5, #0
 800a2b6:	4606      	mov	r6, r0
 800a2b8:	db01      	blt.n	800a2be <_malloc_r+0x1a>
 800a2ba:	42a9      	cmp	r1, r5
 800a2bc:	d903      	bls.n	800a2c6 <_malloc_r+0x22>
 800a2be:	230c      	movs	r3, #12
 800a2c0:	6033      	str	r3, [r6, #0]
 800a2c2:	2000      	movs	r0, #0
 800a2c4:	bd70      	pop	{r4, r5, r6, pc}
 800a2c6:	f000 f857 	bl	800a378 <__malloc_lock>
 800a2ca:	4a21      	ldr	r2, [pc, #132]	; (800a350 <_malloc_r+0xac>)
 800a2cc:	6814      	ldr	r4, [r2, #0]
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	b991      	cbnz	r1, 800a2f8 <_malloc_r+0x54>
 800a2d2:	4c20      	ldr	r4, [pc, #128]	; (800a354 <_malloc_r+0xb0>)
 800a2d4:	6823      	ldr	r3, [r4, #0]
 800a2d6:	b91b      	cbnz	r3, 800a2e0 <_malloc_r+0x3c>
 800a2d8:	4630      	mov	r0, r6
 800a2da:	f000 f83d 	bl	800a358 <_sbrk_r>
 800a2de:	6020      	str	r0, [r4, #0]
 800a2e0:	4629      	mov	r1, r5
 800a2e2:	4630      	mov	r0, r6
 800a2e4:	f000 f838 	bl	800a358 <_sbrk_r>
 800a2e8:	1c43      	adds	r3, r0, #1
 800a2ea:	d124      	bne.n	800a336 <_malloc_r+0x92>
 800a2ec:	230c      	movs	r3, #12
 800a2ee:	6033      	str	r3, [r6, #0]
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	f000 f842 	bl	800a37a <__malloc_unlock>
 800a2f6:	e7e4      	b.n	800a2c2 <_malloc_r+0x1e>
 800a2f8:	680b      	ldr	r3, [r1, #0]
 800a2fa:	1b5b      	subs	r3, r3, r5
 800a2fc:	d418      	bmi.n	800a330 <_malloc_r+0x8c>
 800a2fe:	2b0b      	cmp	r3, #11
 800a300:	d90f      	bls.n	800a322 <_malloc_r+0x7e>
 800a302:	600b      	str	r3, [r1, #0]
 800a304:	50cd      	str	r5, [r1, r3]
 800a306:	18cc      	adds	r4, r1, r3
 800a308:	4630      	mov	r0, r6
 800a30a:	f000 f836 	bl	800a37a <__malloc_unlock>
 800a30e:	f104 000b 	add.w	r0, r4, #11
 800a312:	1d23      	adds	r3, r4, #4
 800a314:	f020 0007 	bic.w	r0, r0, #7
 800a318:	1ac3      	subs	r3, r0, r3
 800a31a:	d0d3      	beq.n	800a2c4 <_malloc_r+0x20>
 800a31c:	425a      	negs	r2, r3
 800a31e:	50e2      	str	r2, [r4, r3]
 800a320:	e7d0      	b.n	800a2c4 <_malloc_r+0x20>
 800a322:	428c      	cmp	r4, r1
 800a324:	684b      	ldr	r3, [r1, #4]
 800a326:	bf16      	itet	ne
 800a328:	6063      	strne	r3, [r4, #4]
 800a32a:	6013      	streq	r3, [r2, #0]
 800a32c:	460c      	movne	r4, r1
 800a32e:	e7eb      	b.n	800a308 <_malloc_r+0x64>
 800a330:	460c      	mov	r4, r1
 800a332:	6849      	ldr	r1, [r1, #4]
 800a334:	e7cc      	b.n	800a2d0 <_malloc_r+0x2c>
 800a336:	1cc4      	adds	r4, r0, #3
 800a338:	f024 0403 	bic.w	r4, r4, #3
 800a33c:	42a0      	cmp	r0, r4
 800a33e:	d005      	beq.n	800a34c <_malloc_r+0xa8>
 800a340:	1a21      	subs	r1, r4, r0
 800a342:	4630      	mov	r0, r6
 800a344:	f000 f808 	bl	800a358 <_sbrk_r>
 800a348:	3001      	adds	r0, #1
 800a34a:	d0cf      	beq.n	800a2ec <_malloc_r+0x48>
 800a34c:	6025      	str	r5, [r4, #0]
 800a34e:	e7db      	b.n	800a308 <_malloc_r+0x64>
 800a350:	200004cc 	.word	0x200004cc
 800a354:	200004d0 	.word	0x200004d0

0800a358 <_sbrk_r>:
 800a358:	b538      	push	{r3, r4, r5, lr}
 800a35a:	4c06      	ldr	r4, [pc, #24]	; (800a374 <_sbrk_r+0x1c>)
 800a35c:	2300      	movs	r3, #0
 800a35e:	4605      	mov	r5, r0
 800a360:	4608      	mov	r0, r1
 800a362:	6023      	str	r3, [r4, #0]
 800a364:	f7f7 f938 	bl	80015d8 <_sbrk>
 800a368:	1c43      	adds	r3, r0, #1
 800a36a:	d102      	bne.n	800a372 <_sbrk_r+0x1a>
 800a36c:	6823      	ldr	r3, [r4, #0]
 800a36e:	b103      	cbz	r3, 800a372 <_sbrk_r+0x1a>
 800a370:	602b      	str	r3, [r5, #0]
 800a372:	bd38      	pop	{r3, r4, r5, pc}
 800a374:	20000f6c 	.word	0x20000f6c

0800a378 <__malloc_lock>:
 800a378:	4770      	bx	lr

0800a37a <__malloc_unlock>:
 800a37a:	4770      	bx	lr

0800a37c <_init>:
 800a37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37e:	bf00      	nop
 800a380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a382:	bc08      	pop	{r3}
 800a384:	469e      	mov	lr, r3
 800a386:	4770      	bx	lr

0800a388 <_fini>:
 800a388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a38a:	bf00      	nop
 800a38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a38e:	bc08      	pop	{r3}
 800a390:	469e      	mov	lr, r3
 800a392:	4770      	bx	lr
