
Door Kommunication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab78  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b6c  0800ad00  0800ad00  0001ad00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b86c  0800b86c  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800b86c  0800b86c  0001b86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b874  0800b874  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b874  0800b874  0001b874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b878  0800b878  0001b878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800b87c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dfc  200000ac  0800b928  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ea8  0800b928  00020ea8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030f7a  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005c74  00000000  00000000  00051056  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001cc8  00000000  00000000  00056cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a10  00000000  00000000  00058998  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f98f  00000000  00000000  0005a3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021dc4  00000000  00000000  00089d37  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00104140  00000000  00000000  000abafb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001afc3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075b4  00000000  00000000  001afcb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000ac 	.word	0x200000ac
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ace8 	.word	0x0800ace8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b0 	.word	0x200000b0
 80001c4:	0800ace8 	.word	0x0800ace8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <draw_QR>:
#include <stdint.h>
#include "ssd1306.h"

void draw_QR(uint8_t lines[29][29]) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08c      	sub	sp, #48	; 0x30
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t x = 60;
 80004d0:	233c      	movs	r3, #60	; 0x3c
 80004d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t y = 3;
 80004d6:	2303      	movs	r3, #3
 80004d8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t box[31] = { };
 80004dc:	f107 030c 	add.w	r3, r7, #12
 80004e0:	221f      	movs	r2, #31
 80004e2:	2100      	movs	r1, #0
 80004e4:	4618      	mov	r0, r3
 80004e6:	f00a fb3d 	bl	800ab64 <memset>
	draw_line(box, x, y-2);
 80004ea:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80004ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80004f2:	1e9a      	subs	r2, r3, #2
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 f86e 	bl	80005da <draw_line>
	draw_line(box, x, y+58);
 80004fe:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8000502:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000506:	f103 023a 	add.w	r2, r3, #58	; 0x3a
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	4618      	mov	r0, r3
 8000510:	f000 f863 	bl	80005da <draw_line>
	draw_line_down(box, x-2, y-2);
 8000514:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000518:	1e99      	subs	r1, r3, #2
 800051a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800051e:	1e9a      	subs	r2, r3, #2
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	4618      	mov	r0, r3
 8000526:	f000 f834 	bl	8000592 <draw_line_down>
	draw_line_down(box, x+58, y-2);
 800052a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800052e:	f103 013a 	add.w	r1, r3, #58	; 0x3a
 8000532:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000536:	1e9a      	subs	r2, r3, #2
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	4618      	mov	r0, r3
 800053e:	f000 f828 	bl	8000592 <draw_line_down>

	for (i = 0; i < 29; i++) {
 8000542:	2300      	movs	r3, #0
 8000544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000548:	e019      	b.n	800057e <draw_QR+0xb6>
		draw_line(lines[i], x, y);
 800054a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800054e:	4613      	mov	r3, r2
 8000550:	00db      	lsls	r3, r3, #3
 8000552:	1a9b      	subs	r3, r3, r2
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	4413      	add	r3, r2
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	4413      	add	r3, r2
 800055c:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8000560:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8000564:	4618      	mov	r0, r3
 8000566:	f000 f838 	bl	80005da <draw_line>
		y = y + 2;
 800056a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800056e:	3302      	adds	r3, #2
 8000570:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (i = 0; i < 29; i++) {
 8000574:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000578:	3301      	adds	r3, #1
 800057a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800057e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000582:	2b1c      	cmp	r3, #28
 8000584:	d9e1      	bls.n	800054a <draw_QR+0x82>
	}
	ssd1306_UpdateScreen();
 8000586:	f001 f931 	bl	80017ec <ssd1306_UpdateScreen>
}
 800058a:	bf00      	nop
 800058c:	3730      	adds	r7, #48	; 0x30
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <draw_line_down>:
void draw_line_down(uint8_t line[29], uint8_t x, uint8_t y) {
 8000592:	b580      	push	{r7, lr}
 8000594:	b084      	sub	sp, #16
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	460b      	mov	r3, r1
 800059c:	70fb      	strb	r3, [r7, #3]
 800059e:	4613      	mov	r3, r2
 80005a0:	70bb      	strb	r3, [r7, #2]
	uint8_t i;
	for (i = 0; i < 31; i++) {
 80005a2:	2300      	movs	r3, #0
 80005a4:	73fb      	strb	r3, [r7, #15]
 80005a6:	e011      	b.n	80005cc <draw_line_down+0x3a>
		if (line[i] == 0) {
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d105      	bne.n	80005c0 <draw_line_down+0x2e>
			draw_square(x, y);
 80005b4:	78fb      	ldrb	r3, [r7, #3]
 80005b6:	78ba      	ldrb	r2, [r7, #2]
 80005b8:	4611      	mov	r1, r2
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f831 	bl	8000622 <draw_square>

		}
		y = y + 2;
 80005c0:	78bb      	ldrb	r3, [r7, #2]
 80005c2:	3302      	adds	r3, #2
 80005c4:	70bb      	strb	r3, [r7, #2]
	for (i = 0; i < 31; i++) {
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	3301      	adds	r3, #1
 80005ca:	73fb      	strb	r3, [r7, #15]
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	2b1e      	cmp	r3, #30
 80005d0:	d9ea      	bls.n	80005a8 <draw_line_down+0x16>
	}

}
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <draw_line>:
void draw_line(uint8_t line[29], uint8_t x, uint8_t y) {
 80005da:	b580      	push	{r7, lr}
 80005dc:	b084      	sub	sp, #16
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
 80005e2:	460b      	mov	r3, r1
 80005e4:	70fb      	strb	r3, [r7, #3]
 80005e6:	4613      	mov	r3, r2
 80005e8:	70bb      	strb	r3, [r7, #2]
	uint8_t i;
	for (i = 0; i < 29; i++) {
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]
 80005ee:	e011      	b.n	8000614 <draw_line+0x3a>
		if (line[i] == 0) {
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d105      	bne.n	8000608 <draw_line+0x2e>
			draw_square(x, y);
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	78ba      	ldrb	r2, [r7, #2]
 8000600:	4611      	mov	r1, r2
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f80d 	bl	8000622 <draw_square>

		}
		x = x + 2;
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	3302      	adds	r3, #2
 800060c:	70fb      	strb	r3, [r7, #3]
	for (i = 0; i < 29; i++) {
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	3301      	adds	r3, #1
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	2b1c      	cmp	r3, #28
 8000618:	d9ea      	bls.n	80005f0 <draw_line+0x16>
	}

}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <draw_square>:
void draw_square(uint8_t x, uint8_t y) {
 8000622:	b580      	push	{r7, lr}
 8000624:	b084      	sub	sp, #16
 8000626:	af00      	add	r7, sp, #0
 8000628:	4603      	mov	r3, r0
 800062a:	460a      	mov	r2, r1
 800062c:	71fb      	strb	r3, [r7, #7]
 800062e:	4613      	mov	r3, r2
 8000630:	71bb      	strb	r3, [r7, #6]
	uint8_t i = x;
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	73fb      	strb	r3, [r7, #15]
	uint8_t j = y;
 8000636:	79bb      	ldrb	r3, [r7, #6]
 8000638:	73bb      	strb	r3, [r7, #14]
	uint8_t size = 2;
 800063a:	2302      	movs	r3, #2
 800063c:	737b      	strb	r3, [r7, #13]
	while (i < (x + size)) {
 800063e:	e014      	b.n	800066a <draw_square+0x48>
		j = y;
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	73bb      	strb	r3, [r7, #14]
		while (j < (y + size)) {
 8000644:	e008      	b.n	8000658 <draw_square+0x36>
			ssd1306_DrawPixel(i, j, White);
 8000646:	7bb9      	ldrb	r1, [r7, #14]
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	2201      	movs	r2, #1
 800064c:	4618      	mov	r0, r3
 800064e:	f001 f8f3 	bl	8001838 <ssd1306_DrawPixel>
			j++;
 8000652:	7bbb      	ldrb	r3, [r7, #14]
 8000654:	3301      	adds	r3, #1
 8000656:	73bb      	strb	r3, [r7, #14]
		while (j < (y + size)) {
 8000658:	7bba      	ldrb	r2, [r7, #14]
 800065a:	79b9      	ldrb	r1, [r7, #6]
 800065c:	7b7b      	ldrb	r3, [r7, #13]
 800065e:	440b      	add	r3, r1
 8000660:	429a      	cmp	r2, r3
 8000662:	dbf0      	blt.n	8000646 <draw_square+0x24>
		}
		i++;
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	3301      	adds	r3, #1
 8000668:	73fb      	strb	r3, [r7, #15]
	while (i < (x + size)) {
 800066a:	7bfa      	ldrb	r2, [r7, #15]
 800066c:	79f9      	ldrb	r1, [r7, #7]
 800066e:	7b7b      	ldrb	r3, [r7, #13]
 8000670:	440b      	add	r3, r1
 8000672:	429a      	cmp	r2, r3
 8000674:	dbe4      	blt.n	8000640 <draw_square+0x1e>
	}

}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <test_menu>:
	while (1) {
		uint8_t status = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);

	}
}
void test_menu(void) {
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0
	menu_state();
 8000682:	f000 f955 	bl	8000930 <menu_state>
	cursor_init();
 8000686:	f000 f80b 	bl	80006a0 <cursor_init>
	while (1) {
		cursor();
 800068a:	f000 f821 	bl	80006d0 <cursor>
 800068e:	e7fc      	b.n	800068a <test_menu+0xc>

08000690 <test_disp>:
//HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
	HAL_Delay(10000);
	inb_disp_clear();
	inb_disp_write("end");
}
void test_disp(void) {
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8000694:	f001 f81a 	bl	80016cc <ssd1306_Init>
//
	test_menu();
 8000698:	f7ff fff1 	bl	800067e <test_menu>
//test_wifi_uart();
//test_joystick();
//test_QR();
//test_contrast();
	//test_button();
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}

080006a0 <cursor_init>:

#define MAIN 		0
#define QR 			1
#define LOG 		2

void cursor_init(void) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	BSP_JOY_Init(JOY_MODE_GPIO);
 80006a4:	2000      	movs	r0, #0
 80006a6:	f001 f9ed 	bl	8001a84 <BSP_JOY_Init>
	ssd1306_SetCursor(32, 54);
 80006aa:	2136      	movs	r1, #54	; 0x36
 80006ac:	2020      	movs	r0, #32
 80006ae:	f001 f9d1 	bl	8001a54 <ssd1306_SetCursor>
	ssd1306_WriteString("<", Font_M, White);
 80006b2:	4a05      	ldr	r2, [pc, #20]	; (80006c8 <cursor_init+0x28>)
 80006b4:	2301      	movs	r3, #1
 80006b6:	ca06      	ldmia	r2, {r1, r2}
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <cursor_init+0x2c>)
 80006ba:	f001 f9a5 	bl	8001a08 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80006be:	f001 f895 	bl	80017ec <ssd1306_UpdateScreen>
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000000 	.word	0x20000000
 80006cc:	0800ad00 	.word	0x0800ad00

080006d0 <cursor>:
uint8_t cursor(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
	uint8_t rows[] = { 32, 100 };
 80006d6:	4b2d      	ldr	r3, [pc, #180]	; (800078c <cursor+0xbc>)
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	80bb      	strh	r3, [r7, #4]
	uint8_t *p;
	p = rows;
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	60bb      	str	r3, [r7, #8]
	uint8_t selection = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	73fb      	strb	r3, [r7, #15]
	while (1) {
		JOYState_TypeDef state = BSP_JOY_GetState();
 80006e4:	f001 fa76 	bl	8001bd4 <BSP_JOY_GetState>
 80006e8:	4603      	mov	r3, r0
 80006ea:	71fb      	strb	r3, [r7, #7]
		if (state == JOY_UP || state == JOY_DOWN) {
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	d002      	beq.n	80006f8 <cursor+0x28>
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b03      	cmp	r3, #3
 80006f6:	d141      	bne.n	800077c <cursor+0xac>
			if (selection == 0) {
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d11b      	bne.n	8000736 <cursor+0x66>
				selection = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	73fb      	strb	r3, [r7, #15]
				ssd1306_SetCursor(32, 54);
 8000702:	2136      	movs	r1, #54	; 0x36
 8000704:	2020      	movs	r0, #32
 8000706:	f001 f9a5 	bl	8001a54 <ssd1306_SetCursor>
				ssd1306_WriteString(" ", Font_M, White);
 800070a:	4a21      	ldr	r2, [pc, #132]	; (8000790 <cursor+0xc0>)
 800070c:	2301      	movs	r3, #1
 800070e:	ca06      	ldmia	r2, {r1, r2}
 8000710:	4820      	ldr	r0, [pc, #128]	; (8000794 <cursor+0xc4>)
 8000712:	f001 f979 	bl	8001a08 <ssd1306_WriteString>
				ssd1306_SetCursor(96, 54);
 8000716:	2136      	movs	r1, #54	; 0x36
 8000718:	2060      	movs	r0, #96	; 0x60
 800071a:	f001 f99b 	bl	8001a54 <ssd1306_SetCursor>
				ssd1306_WriteString("<", Font_M, White);
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <cursor+0xc0>)
 8000720:	2301      	movs	r3, #1
 8000722:	ca06      	ldmia	r2, {r1, r2}
 8000724:	481c      	ldr	r0, [pc, #112]	; (8000798 <cursor+0xc8>)
 8000726:	f001 f96f 	bl	8001a08 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 800072a:	f001 f85f 	bl	80017ec <ssd1306_UpdateScreen>
				HAL_Delay(200);
 800072e:	20c8      	movs	r0, #200	; 0xc8
 8000730:	f001 fc40 	bl	8001fb4 <HAL_Delay>
 8000734:	e022      	b.n	800077c <cursor+0xac>

			} else {
				if (selection == 1) {
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d11b      	bne.n	8000774 <cursor+0xa4>
					selection = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	73fb      	strb	r3, [r7, #15]
					ssd1306_SetCursor(32, 54);
 8000740:	2136      	movs	r1, #54	; 0x36
 8000742:	2020      	movs	r0, #32
 8000744:	f001 f986 	bl	8001a54 <ssd1306_SetCursor>
					ssd1306_WriteString("<", Font_M, White);
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <cursor+0xc0>)
 800074a:	2301      	movs	r3, #1
 800074c:	ca06      	ldmia	r2, {r1, r2}
 800074e:	4812      	ldr	r0, [pc, #72]	; (8000798 <cursor+0xc8>)
 8000750:	f001 f95a 	bl	8001a08 <ssd1306_WriteString>
					ssd1306_SetCursor(96, 54);
 8000754:	2136      	movs	r1, #54	; 0x36
 8000756:	2060      	movs	r0, #96	; 0x60
 8000758:	f001 f97c 	bl	8001a54 <ssd1306_SetCursor>
					ssd1306_WriteString(" ", Font_M, White);
 800075c:	4a0c      	ldr	r2, [pc, #48]	; (8000790 <cursor+0xc0>)
 800075e:	2301      	movs	r3, #1
 8000760:	ca06      	ldmia	r2, {r1, r2}
 8000762:	480c      	ldr	r0, [pc, #48]	; (8000794 <cursor+0xc4>)
 8000764:	f001 f950 	bl	8001a08 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8000768:	f001 f840 	bl	80017ec <ssd1306_UpdateScreen>
					HAL_Delay(200);
 800076c:	20c8      	movs	r0, #200	; 0xc8
 800076e:	f001 fc21 	bl	8001fb4 <HAL_Delay>
 8000772:	e003      	b.n	800077c <cursor+0xac>
				} else {
					selection = -1;
 8000774:	23ff      	movs	r3, #255	; 0xff
 8000776:	73fb      	strb	r3, [r7, #15]
					return selection;
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	e003      	b.n	8000784 <cursor+0xb4>
				}
			}
		}
		if (state == JOY_DOWN) {
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b03      	cmp	r3, #3
 8000780:	d1b0      	bne.n	80006e4 <cursor+0x14>
			return selection;
 8000782:	7bfb      	ldrb	r3, [r7, #15]
		}

	}
}
 8000784:	4618      	mov	r0, r3
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	0800ad08 	.word	0x0800ad08
 8000790:	20000000 	.word	0x20000000
 8000794:	0800ad04 	.word	0x0800ad04
 8000798:	0800ad00 	.word	0x0800ad00

0800079c <menu_log>:
uint8_t menu_log(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f001 f800 	bl	80017a8 <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 80007a8:	2100      	movs	r1, #0
 80007aa:	2002      	movs	r0, #2
 80007ac:	f001 f952 	bl	8001a54 <ssd1306_SetCursor>
	ssd1306_WriteString("MESSAGE 1", Font_M, White);
 80007b0:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <menu_log+0x88>)
 80007b2:	2301      	movs	r3, #1
 80007b4:	ca06      	ldmia	r2, {r1, r2}
 80007b6:	481c      	ldr	r0, [pc, #112]	; (8000828 <menu_log+0x8c>)
 80007b8:	f001 f926 	bl	8001a08 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 10);
 80007bc:	210a      	movs	r1, #10
 80007be:	2002      	movs	r0, #2
 80007c0:	f001 f948 	bl	8001a54 <ssd1306_SetCursor>
	ssd1306_WriteString("MESSAGE 2", Font_M, White);
 80007c4:	4a17      	ldr	r2, [pc, #92]	; (8000824 <menu_log+0x88>)
 80007c6:	2301      	movs	r3, #1
 80007c8:	ca06      	ldmia	r2, {r1, r2}
 80007ca:	4818      	ldr	r0, [pc, #96]	; (800082c <menu_log+0x90>)
 80007cc:	f001 f91c 	bl	8001a08 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 10 + 10);
 80007d0:	2114      	movs	r1, #20
 80007d2:	2002      	movs	r0, #2
 80007d4:	f001 f93e 	bl	8001a54 <ssd1306_SetCursor>
	ssd1306_WriteString("MESSAGE 3", Font_M, White);
 80007d8:	4a12      	ldr	r2, [pc, #72]	; (8000824 <menu_log+0x88>)
 80007da:	2301      	movs	r3, #1
 80007dc:	ca06      	ldmia	r2, {r1, r2}
 80007de:	4814      	ldr	r0, [pc, #80]	; (8000830 <menu_log+0x94>)
 80007e0:	f001 f912 	bl	8001a08 <ssd1306_WriteString>

	ssd1306_SetCursor(2, 54);
 80007e4:	2136      	movs	r1, #54	; 0x36
 80007e6:	2002      	movs	r0, #2
 80007e8:	f001 f934 	bl	8001a54 <ssd1306_SetCursor>
	ssd1306_WriteString("BACK", Font_M, White);
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <menu_log+0x88>)
 80007ee:	2301      	movs	r3, #1
 80007f0:	ca06      	ldmia	r2, {r1, r2}
 80007f2:	4810      	ldr	r0, [pc, #64]	; (8000834 <menu_log+0x98>)
 80007f4:	f001 f908 	bl	8001a08 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80007f8:	f000 fff8 	bl	80017ec <ssd1306_UpdateScreen>
	cursor_init();
 80007fc:	f7ff ff50 	bl	80006a0 <cursor_init>
	BSP_JOY_Init(JOY_MODE_GPIO);
 8000800:	2000      	movs	r0, #0
 8000802:	f001 f93f 	bl	8001a84 <BSP_JOY_Init>
	uint8_t selection = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	71fb      	strb	r3, [r7, #7]
	while (1) {
		JOYState_TypeDef state = BSP_JOY_GetState();
 800080a:	f001 f9e3 	bl	8001bd4 <BSP_JOY_GetState>
 800080e:	4603      	mov	r3, r0
 8000810:	71bb      	strb	r3, [r7, #6]
		if (state == JOY_SEL) {
 8000812:	79bb      	ldrb	r3, [r7, #6]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d1f8      	bne.n	800080a <menu_log+0x6e>
			return MAIN;
 8000818:	2300      	movs	r3, #0
		}
	}

	HAL_Delay(100);
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000000 	.word	0x20000000
 8000828:	0800ad0c 	.word	0x0800ad0c
 800082c:	0800ad18 	.word	0x0800ad18
 8000830:	0800ad24 	.word	0x0800ad24
 8000834:	0800ad30 	.word	0x0800ad30

08000838 <menu_QR>:

uint8_t menu_QR(void) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 800083e:	2000      	movs	r0, #0
 8000840:	f000 ffb2 	bl	80017a8 <ssd1306_Fill>
	draw_QR(line_QR);
 8000844:	481c      	ldr	r0, [pc, #112]	; (80008b8 <menu_QR+0x80>)
 8000846:	f7ff fe3f 	bl	80004c8 <draw_QR>
	ssd1306_SetCursor(2, 54);
 800084a:	2136      	movs	r1, #54	; 0x36
 800084c:	2002      	movs	r0, #2
 800084e:	f001 f901 	bl	8001a54 <ssd1306_SetCursor>
	ssd1306_WriteString("BACK", Font_M, White);
 8000852:	4a1a      	ldr	r2, [pc, #104]	; (80008bc <menu_QR+0x84>)
 8000854:	2301      	movs	r3, #1
 8000856:	ca06      	ldmia	r2, {r1, r2}
 8000858:	4819      	ldr	r0, [pc, #100]	; (80008c0 <menu_QR+0x88>)
 800085a:	f001 f8d5 	bl	8001a08 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800085e:	f000 ffc5 	bl	80017ec <ssd1306_UpdateScreen>
	cursor_init();
 8000862:	f7ff ff1d 	bl	80006a0 <cursor_init>
	BSP_JOY_Init(JOY_MODE_GPIO);
 8000866:	2000      	movs	r0, #0
 8000868:	f001 f90c 	bl	8001a84 <BSP_JOY_Init>
	uint8_t selection = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	71bb      	strb	r3, [r7, #6]
	uint8_t value = 0xFF;
 8000870:	23ff      	movs	r3, #255	; 0xff
 8000872:	71fb      	strb	r3, [r7, #7]
	while (1) {
		JOYState_TypeDef state = BSP_JOY_GetState();
 8000874:	f001 f9ae 	bl	8001bd4 <BSP_JOY_GetState>
 8000878:	4603      	mov	r3, r0
 800087a:	717b      	strb	r3, [r7, #5]
		if (state == JOY_DOWN) {
 800087c:	797b      	ldrb	r3, [r7, #5]
 800087e:	2b03      	cmp	r3, #3
 8000880:	d107      	bne.n	8000892 <menu_QR+0x5a>
			ssd1306_WriteCommand(0x81);
 8000882:	2081      	movs	r0, #129	; 0x81
 8000884:	f000 fef0 	bl	8001668 <ssd1306_WriteCommand>
			ssd1306_WriteCommand(0xFF);
 8000888:	20ff      	movs	r0, #255	; 0xff
 800088a:	f000 feed 	bl	8001668 <ssd1306_WriteCommand>
			return MAIN;
 800088e:	2300      	movs	r3, #0
 8000890:	e00d      	b.n	80008ae <menu_QR+0x76>
		}

		value = value - 4;
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	3b04      	subs	r3, #4
 8000896:	71fb      	strb	r3, [r7, #7]
		ssd1306_WriteCommand(0x81);
 8000898:	2081      	movs	r0, #129	; 0x81
 800089a:	f000 fee5 	bl	8001668 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(value);
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 fee1 	bl	8001668 <ssd1306_WriteCommand>
		HAL_Delay(100);
 80008a6:	2064      	movs	r0, #100	; 0x64
 80008a8:	f001 fb84 	bl	8001fb4 <HAL_Delay>
	while (1) {
 80008ac:	e7e2      	b.n	8000874 <menu_QR+0x3c>
	}
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	0800ad58 	.word	0x0800ad58
 80008bc:	20000000 	.word	0x20000000
 80008c0:	0800ad30 	.word	0x0800ad30

080008c4 <menu_main>:

uint8_t menu_main(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80008ca:	2000      	movs	r0, #0
 80008cc:	f000 ff6c 	bl	80017a8 <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 80008d0:	2100      	movs	r1, #0
 80008d2:	2002      	movs	r0, #2
 80008d4:	f001 f8be 	bl	8001a54 <ssd1306_SetCursor>
	ssd1306_WriteString("MESSAGE HERE", Font_M, White);
 80008d8:	4a12      	ldr	r2, [pc, #72]	; (8000924 <menu_main+0x60>)
 80008da:	2301      	movs	r3, #1
 80008dc:	ca06      	ldmia	r2, {r1, r2}
 80008de:	4812      	ldr	r0, [pc, #72]	; (8000928 <menu_main+0x64>)
 80008e0:	f001 f892 	bl	8001a08 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 54);
 80008e4:	2136      	movs	r1, #54	; 0x36
 80008e6:	2002      	movs	r0, #2
 80008e8:	f001 f8b4 	bl	8001a54 <ssd1306_SetCursor>
	ssd1306_WriteString("QR", Font_M, White);
 80008ec:	4a0d      	ldr	r2, [pc, #52]	; (8000924 <menu_main+0x60>)
 80008ee:	2301      	movs	r3, #1
 80008f0:	ca06      	ldmia	r2, {r1, r2}
 80008f2:	480e      	ldr	r0, [pc, #56]	; (800092c <menu_main+0x68>)
 80008f4:	f001 f888 	bl	8001a08 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80008f8:	f000 ff78 	bl	80017ec <ssd1306_UpdateScreen>
	cursor_init();
 80008fc:	f7ff fed0 	bl	80006a0 <cursor_init>
	uint8_t selection = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	71fb      	strb	r3, [r7, #7]
	while (1) {
		JOYState_TypeDef state = BSP_JOY_GetState();
 8000904:	f001 f966 	bl	8001bd4 <BSP_JOY_GetState>
 8000908:	4603      	mov	r3, r0
 800090a:	71bb      	strb	r3, [r7, #6]

		if (state == JOY_DOWN) {
 800090c:	79bb      	ldrb	r3, [r7, #6]
 800090e:	2b03      	cmp	r3, #3
 8000910:	d1f8      	bne.n	8000904 <menu_main+0x40>
			if (selection == 0)
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d1f5      	bne.n	8000904 <menu_main+0x40>
				return QR;
 8000918:	2301      	movs	r3, #1
		}
	}

	HAL_Delay(100);
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000000 	.word	0x20000000
 8000928:	0800ad38 	.word	0x0800ad38
 800092c:	0800ad48 	.word	0x0800ad48

08000930 <menu_state>:

void menu_state(void) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
	uint8_t state = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	71fb      	strb	r3, [r7, #7]
	BSP_JOY_Init(JOY_MODE_GPIO);
 800093a:	2000      	movs	r0, #0
 800093c:	f001 f8a2 	bl	8001a84 <BSP_JOY_Init>
	while (1) {
		switch (state) {
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d008      	beq.n	8000958 <menu_state+0x28>
 8000946:	2b02      	cmp	r3, #2
 8000948:	d00b      	beq.n	8000962 <menu_state+0x32>
 800094a:	2b00      	cmp	r3, #0
 800094c:	d10e      	bne.n	800096c <menu_state+0x3c>
		case MAIN:
			state = menu_main();
 800094e:	f7ff ffb9 	bl	80008c4 <menu_main>
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
			break;
 8000956:	e019      	b.n	800098c <menu_state+0x5c>
		case QR:
			state = menu_QR();
 8000958:	f7ff ff6e 	bl	8000838 <menu_QR>
 800095c:	4603      	mov	r3, r0
 800095e:	71fb      	strb	r3, [r7, #7]
			break;
 8000960:	e014      	b.n	800098c <menu_state+0x5c>
		case LOG:
			state = menu_log();
 8000962:	f7ff ff1b 	bl	800079c <menu_log>
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
			break;
 800096a:	e00f      	b.n	800098c <menu_state+0x5c>
		default:
			ssd1306_Fill(Black);
 800096c:	2000      	movs	r0, #0
 800096e:	f000 ff1b 	bl	80017a8 <ssd1306_Fill>
			ssd1306_SetCursor(2, 0);
 8000972:	2100      	movs	r1, #0
 8000974:	2002      	movs	r0, #2
 8000976:	f001 f86d 	bl	8001a54 <ssd1306_SetCursor>
			ssd1306_WriteString("ERROR", Font_M, White);
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <menu_state+0x60>)
 800097c:	2301      	movs	r3, #1
 800097e:	ca06      	ldmia	r2, {r1, r2}
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <menu_state+0x64>)
 8000982:	f001 f841 	bl	8001a08 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000986:	f000 ff31 	bl	80017ec <ssd1306_UpdateScreen>
			break;
 800098a:	bf00      	nop
		switch (state) {
 800098c:	e7d8      	b.n	8000940 <menu_state+0x10>
 800098e:	bf00      	nop
 8000990:	20000000 	.word	0x20000000
 8000994:	0800ad4c 	.word	0x0800ad4c

08000998 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08c      	sub	sp, #48	; 0x30
 800099c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ae:	4b92      	ldr	r3, [pc, #584]	; (8000bf8 <MX_GPIO_Init+0x260>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	4a91      	ldr	r2, [pc, #580]	; (8000bf8 <MX_GPIO_Init+0x260>)
 80009b4:	f043 0310 	orr.w	r3, r3, #16
 80009b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ba:	4b8f      	ldr	r3, [pc, #572]	; (8000bf8 <MX_GPIO_Init+0x260>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f003 0310 	and.w	r3, r3, #16
 80009c2:	61bb      	str	r3, [r7, #24]
 80009c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	4b8c      	ldr	r3, [pc, #560]	; (8000bf8 <MX_GPIO_Init+0x260>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	4a8b      	ldr	r2, [pc, #556]	; (8000bf8 <MX_GPIO_Init+0x260>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d2:	4b89      	ldr	r3, [pc, #548]	; (8000bf8 <MX_GPIO_Init+0x260>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009de:	4b86      	ldr	r3, [pc, #536]	; (8000bf8 <MX_GPIO_Init+0x260>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	4a85      	ldr	r2, [pc, #532]	; (8000bf8 <MX_GPIO_Init+0x260>)
 80009e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ea:	4b83      	ldr	r3, [pc, #524]	; (8000bf8 <MX_GPIO_Init+0x260>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b80      	ldr	r3, [pc, #512]	; (8000bf8 <MX_GPIO_Init+0x260>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	4a7f      	ldr	r2, [pc, #508]	; (8000bf8 <MX_GPIO_Init+0x260>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a02:	4b7d      	ldr	r3, [pc, #500]	; (8000bf8 <MX_GPIO_Init+0x260>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	4b7a      	ldr	r3, [pc, #488]	; (8000bf8 <MX_GPIO_Init+0x260>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	4a79      	ldr	r2, [pc, #484]	; (8000bf8 <MX_GPIO_Init+0x260>)
 8000a14:	f043 0302 	orr.w	r3, r3, #2
 8000a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1a:	4b77      	ldr	r3, [pc, #476]	; (8000bf8 <MX_GPIO_Init+0x260>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a26:	4b74      	ldr	r3, [pc, #464]	; (8000bf8 <MX_GPIO_Init+0x260>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	4a73      	ldr	r2, [pc, #460]	; (8000bf8 <MX_GPIO_Init+0x260>)
 8000a2c:	f043 0308 	orr.w	r3, r3, #8
 8000a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a32:	4b71      	ldr	r3, [pc, #452]	; (8000bf8 <MX_GPIO_Init+0x260>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f240 1109 	movw	r1, #265	; 0x109
 8000a44:	486d      	ldr	r0, [pc, #436]	; (8000bfc <MX_GPIO_Init+0x264>)
 8000a46:	f001 fda9 	bl	800259c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	210c      	movs	r1, #12
 8000a4e:	486c      	ldr	r0, [pc, #432]	; (8000c00 <MX_GPIO_Init+0x268>)
 8000a50:	f001 fda4 	bl	800259c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a5a:	486a      	ldr	r0, [pc, #424]	; (8000c04 <MX_GPIO_Init+0x26c>)
 8000a5c:	f001 fd9e 	bl	800259c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a66:	4867      	ldr	r0, [pc, #412]	; (8000c04 <MX_GPIO_Init+0x26c>)
 8000a68:	f001 fd98 	bl	800259c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2180      	movs	r1, #128	; 0x80
 8000a70:	4865      	ldr	r0, [pc, #404]	; (8000c08 <MX_GPIO_Init+0x270>)
 8000a72:	f001 fd93 	bl	800259c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000a76:	2308      	movs	r3, #8
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a82:	2302      	movs	r3, #2
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	485b      	ldr	r0, [pc, #364]	; (8000bfc <MX_GPIO_Init+0x264>)
 8000a8e:	f001 fbc5 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8000a92:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a98:	4b5c      	ldr	r3, [pc, #368]	; (8000c0c <MX_GPIO_Init+0x274>)
 8000a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4857      	ldr	r0, [pc, #348]	; (8000c04 <MX_GPIO_Init+0x26c>)
 8000aa8:	f001 fbb8 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 8000aac:	2307      	movs	r3, #7
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4851      	ldr	r0, [pc, #324]	; (8000c04 <MX_GPIO_Init+0x26c>)
 8000ac0:	f001 fbac 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ac8:	4b50      	ldr	r3, [pc, #320]	; (8000c0c <MX_GPIO_Init+0x274>)
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ada:	f001 fb9f 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin;
 8000ade:	2320      	movs	r3, #32
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_DOWN_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af4:	f001 fb92 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000af8:	2304      	movs	r3, #4
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	483c      	ldr	r0, [pc, #240]	; (8000c00 <MX_GPIO_Init+0x268>)
 8000b10:	f001 fb84 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000b14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4833      	ldr	r0, [pc, #204]	; (8000bfc <MX_GPIO_Init+0x264>)
 8000b2e:	f001 fb75 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8000b32:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	482e      	ldr	r0, [pc, #184]	; (8000c04 <MX_GPIO_Init+0x26c>)
 8000b4c:	f001 fb66 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8000b50:	2305      	movs	r3, #5
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b54:	4b2d      	ldr	r3, [pc, #180]	; (8000c0c <MX_GPIO_Init+0x274>)
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	4829      	ldr	r0, [pc, #164]	; (8000c08 <MX_GPIO_Init+0x270>)
 8000b64:	f001 fb5a 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4822      	ldr	r0, [pc, #136]	; (8000c08 <MX_GPIO_Init+0x270>)
 8000b80:	f001 fb4c 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8000b84:	2308      	movs	r3, #8
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4819      	ldr	r0, [pc, #100]	; (8000c00 <MX_GPIO_Init+0x268>)
 8000b9c:	f001 fb3e 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ba6:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <MX_GPIO_Init+0x274>)
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4812      	ldr	r0, [pc, #72]	; (8000c00 <MX_GPIO_Init+0x268>)
 8000bb6:	f001 fb31 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480a      	ldr	r0, [pc, #40]	; (8000bfc <MX_GPIO_Init+0x264>)
 8000bd2:	f001 fb23 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <MX_GPIO_Init+0x274>)
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	4619      	mov	r1, r3
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <MX_GPIO_Init+0x264>)
 8000bea:	f001 fb17 	bl	800221c <HAL_GPIO_Init>

}
 8000bee:	bf00      	nop
 8000bf0:	3730      	adds	r7, #48	; 0x30
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	48001000 	.word	0x48001000
 8000c00:	48000400 	.word	0x48000400
 8000c04:	48000800 	.word	0x48000800
 8000c08:	48000c00 	.word	0x48000c00
 8000c0c:	10120000 	.word	0x10120000

08000c10 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c16:	4a1c      	ldr	r2, [pc, #112]	; (8000c88 <MX_I2C1_Init+0x78>)
 8000c18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	; (8000c8c <MX_I2C1_Init+0x7c>)
 8000c1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c20:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c4a:	480e      	ldr	r0, [pc, #56]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c4c:	f003 f8de 	bl	8003e0c <HAL_I2C_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c56:	f000 fa73 	bl	8001140 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4809      	ldr	r0, [pc, #36]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c5e:	f003 fc41 	bl	80044e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c68:	f000 fa6a 	bl	8001140 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c70:	f003 fc83 	bl	800457a <HAL_I2CEx_ConfigDigitalFilter>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c7a:	f000 fa61 	bl	8001140 <Error_Handler>
  }

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200004e8 	.word	0x200004e8
 8000c88:	40005400 	.word	0x40005400
 8000c8c:	00404c74 	.word	0x00404c74

08000c90 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000c96:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <MX_I2C2_Init+0x78>)
 8000c98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00404C74;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000c9c:	4a1b      	ldr	r2, [pc, #108]	; (8000d0c <MX_I2C2_Init+0x7c>)
 8000c9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ca0:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cca:	480e      	ldr	r0, [pc, #56]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000ccc:	f003 f89e 	bl	8003e0c <HAL_I2C_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000cd6:	f000 fa33 	bl	8001140 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4809      	ldr	r0, [pc, #36]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000cde:	f003 fc01 	bl	80044e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ce8:	f000 fa2a 	bl	8001140 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000cec:	2100      	movs	r1, #0
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000cf0:	f003 fc43 	bl	800457a <HAL_I2CEx_ConfigDigitalFilter>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000cfa:	f000 fa21 	bl	8001140 <Error_Handler>
  }

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000534 	.word	0x20000534
 8000d08:	40005800 	.word	0x40005800
 8000d0c:	00404c74 	.word	0x00404c74

08000d10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08c      	sub	sp, #48	; 0x30
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a2e      	ldr	r2, [pc, #184]	; (8000de8 <HAL_I2C_MspInit+0xd8>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d128      	bne.n	8000d84 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <HAL_I2C_MspInit+0xdc>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	4a2d      	ldr	r2, [pc, #180]	; (8000dec <HAL_I2C_MspInit+0xdc>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3e:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <HAL_I2C_MspInit+0xdc>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	61bb      	str	r3, [r7, #24]
 8000d48:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000d4a:	23c0      	movs	r3, #192	; 0xc0
 8000d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d4e:	2312      	movs	r3, #18
 8000d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	4822      	ldr	r0, [pc, #136]	; (8000df0 <HAL_I2C_MspInit+0xe0>)
 8000d66:	f001 fa59 	bl	800221c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d6a:	4b20      	ldr	r3, [pc, #128]	; (8000dec <HAL_I2C_MspInit+0xdc>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6e:	4a1f      	ldr	r2, [pc, #124]	; (8000dec <HAL_I2C_MspInit+0xdc>)
 8000d70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d74:	6593      	str	r3, [r2, #88]	; 0x58
 8000d76:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <HAL_I2C_MspInit+0xdc>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000d82:	e02d      	b.n	8000de0 <HAL_I2C_MspInit+0xd0>
  else if(i2cHandle->Instance==I2C2)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a1a      	ldr	r2, [pc, #104]	; (8000df4 <HAL_I2C_MspInit+0xe4>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d128      	bne.n	8000de0 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <HAL_I2C_MspInit+0xdc>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a16      	ldr	r2, [pc, #88]	; (8000dec <HAL_I2C_MspInit+0xdc>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <HAL_I2C_MspInit+0xdc>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8000da6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dac:	2312      	movs	r3, #18
 8000dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000db8:	2304      	movs	r3, #4
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480b      	ldr	r0, [pc, #44]	; (8000df0 <HAL_I2C_MspInit+0xe0>)
 8000dc4:	f001 fa2a 	bl	800221c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_I2C_MspInit+0xdc>)
 8000dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_I2C_MspInit+0xdc>)
 8000dce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_I2C_MspInit+0xdc>)
 8000dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	bf00      	nop
 8000de2:	3730      	adds	r7, #48	; 0x30
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40005400 	.word	0x40005400
 8000dec:	40021000 	.word	0x40021000
 8000df0:	48000400 	.word	0x48000400
 8000df4:	40005800 	.word	0x40005800

08000df8 <MX_LCD_Init>:

LCD_HandleTypeDef hlcd;

/* LCD init function */
void MX_LCD_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0

  hlcd.Instance = LCD;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <MX_LCD_Init+0x68>)
 8000dfe:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <MX_LCD_Init+0x6c>)
 8000e00:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <MX_LCD_Init+0x68>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <MX_LCD_Init+0x68>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <MX_LCD_Init+0x68>)
 8000e10:	220c      	movs	r2, #12
 8000e12:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_LCD_Init+0x68>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_LCD_Init+0x68>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_LCD_Init+0x68>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <MX_LCD_Init+0x68>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_LCD_Init+0x68>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <MX_LCD_Init+0x68>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_LCD_Init+0x68>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8000e3e:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <MX_LCD_Init+0x68>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_LCD_Init+0x68>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_LCD_Init+0x68>)
 8000e4c:	f003 fbe2 	bl	8004614 <HAL_LCD_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_LCD_Init+0x62>
  {
    Error_Handler();
 8000e56:	f000 f973 	bl	8001140 <Error_Handler>
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000580 	.word	0x20000580
 8000e64:	40002400 	.word	0x40002400

08000e68 <HAL_LCD_MspInit>:

void HAL_LCD_MspInit(LCD_HandleTypeDef* lcdHandle)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08c      	sub	sp, #48	; 0x30
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(lcdHandle->Instance==LCD)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a44      	ldr	r2, [pc, #272]	; (8000f98 <HAL_LCD_MspInit+0x130>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	f040 8081 	bne.w	8000f8e <HAL_LCD_MspInit+0x126>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* LCD clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8000e8c:	4b43      	ldr	r3, [pc, #268]	; (8000f9c <HAL_LCD_MspInit+0x134>)
 8000e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e90:	4a42      	ldr	r2, [pc, #264]	; (8000f9c <HAL_LCD_MspInit+0x134>)
 8000e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e96:	6593      	str	r3, [r2, #88]	; 0x58
 8000e98:	4b40      	ldr	r3, [pc, #256]	; (8000f9c <HAL_LCD_MspInit+0x134>)
 8000e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ea0:	61bb      	str	r3, [r7, #24]
 8000ea2:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea4:	4b3d      	ldr	r3, [pc, #244]	; (8000f9c <HAL_LCD_MspInit+0x134>)
 8000ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea8:	4a3c      	ldr	r2, [pc, #240]	; (8000f9c <HAL_LCD_MspInit+0x134>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb0:	4b3a      	ldr	r3, [pc, #232]	; (8000f9c <HAL_LCD_MspInit+0x134>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b37      	ldr	r3, [pc, #220]	; (8000f9c <HAL_LCD_MspInit+0x134>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	4a36      	ldr	r2, [pc, #216]	; (8000f9c <HAL_LCD_MspInit+0x134>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec8:	4b34      	ldr	r3, [pc, #208]	; (8000f9c <HAL_LCD_MspInit+0x134>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed4:	4b31      	ldr	r3, [pc, #196]	; (8000f9c <HAL_LCD_MspInit+0x134>)
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed8:	4a30      	ldr	r2, [pc, #192]	; (8000f9c <HAL_LCD_MspInit+0x134>)
 8000eda:	f043 0302 	orr.w	r3, r3, #2
 8000ede:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee0:	4b2e      	ldr	r3, [pc, #184]	; (8000f9c <HAL_LCD_MspInit+0x134>)
 8000ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eec:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <HAL_LCD_MspInit+0x134>)
 8000eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef0:	4a2a      	ldr	r2, [pc, #168]	; (8000f9c <HAL_LCD_MspInit+0x134>)
 8000ef2:	f043 0308 	orr.w	r3, r3, #8
 8000ef6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef8:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <HAL_LCD_MspInit+0x134>)
 8000efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efc:	f003 0308 	and.w	r3, r3, #8
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3 
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 8000f04:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000f08:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f16:	230b      	movs	r3, #11
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	481f      	ldr	r0, [pc, #124]	; (8000fa0 <HAL_LCD_MspInit+0x138>)
 8000f22:	f001 f97b 	bl	800221c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 8000f26:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000f2a:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f38:	230b      	movs	r3, #11
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f46:	f001 f969 	bl	800221c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 8000f4a:	f24f 2333 	movw	r3, #62003	; 0xf233
 8000f4e:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin 
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f5c:	230b      	movs	r3, #11
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <HAL_LCD_MspInit+0x13c>)
 8000f68:	f001 f958 	bl	800221c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8000f6c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000f70:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f7e:	230b      	movs	r3, #11
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	4619      	mov	r1, r3
 8000f88:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <HAL_LCD_MspInit+0x140>)
 8000f8a:	f001 f947 	bl	800221c <HAL_GPIO_Init>

  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3730      	adds	r7, #48	; 0x30
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40002400 	.word	0x40002400
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	48000800 	.word	0x48000800
 8000fa4:	48000400 	.word	0x48000400
 8000fa8:	48000c00 	.word	0x48000c00

08000fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000fb0:	f000 ff88 	bl	8001ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb4:	f000 f81a 	bl	8000fec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb8:	f7ff fcee 	bl	8000998 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fbc:	f7ff fe28 	bl	8000c10 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000fc0:	f7ff fe66 	bl	8000c90 <MX_I2C2_Init>
  MX_LCD_Init();
 8000fc4:	f7ff ff18 	bl	8000df8 <MX_LCD_Init>
  MX_QUADSPI_Init();
 8000fc8:	f000 f8c2 	bl	8001150 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000fcc:	f000 f9a2 	bl	8001314 <MX_SAI1_Init>
  MX_SPI2_Init();
 8000fd0:	f000 fac0 	bl	8001554 <MX_SPI2_Init>
  MX_USB_HOST_Init();
 8000fd4:	f009 fa80 	bl	800a4d8 <MX_USB_HOST_Init>
  MX_UART4_Init();
 8000fd8:	f000 fed8 	bl	8001d8c <MX_UART4_Init>
  MX_RTC_Init();
 8000fdc:	f000 f922 	bl	8001224 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
#ifdef RUN_TEST_PROGRAM
  //Test_program();
  test_disp();
 8000fe0:	f7ff fb56 	bl	8000690 <test_disp>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000fe4:	f009 fa9e 	bl	800a524 <MX_USB_HOST_Process>
 8000fe8:	e7fc      	b.n	8000fe4 <main+0x38>
	...

08000fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b0b8      	sub	sp, #224	; 0xe0
 8000ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ff6:	2244      	movs	r2, #68	; 0x44
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f009 fdb2 	bl	800ab64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001000:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001010:	463b      	mov	r3, r7
 8001012:	2288      	movs	r2, #136	; 0x88
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f009 fda4 	bl	800ab64 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800101c:	f003 fbdc 	bl	80047d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001020:	4b45      	ldr	r3, [pc, #276]	; (8001138 <SystemClock_Config+0x14c>)
 8001022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001026:	4a44      	ldr	r2, [pc, #272]	; (8001138 <SystemClock_Config+0x14c>)
 8001028:	f023 0318 	bic.w	r3, r3, #24
 800102c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001030:	231c      	movs	r3, #28
 8001032:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001036:	2301      	movs	r3, #1
 8001038:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800103c:	2301      	movs	r3, #1
 800103e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001042:	2301      	movs	r3, #1
 8001044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800104e:	2360      	movs	r3, #96	; 0x60
 8001050:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001054:	2302      	movs	r3, #2
 8001056:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800105a:	2301      	movs	r3, #1
 800105c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001060:	2301      	movs	r3, #1
 8001062:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001066:	2314      	movs	r3, #20
 8001068:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800106c:	2307      	movs	r3, #7
 800106e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001072:	2302      	movs	r3, #2
 8001074:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001078:	2302      	movs	r3, #2
 800107a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001082:	4618      	mov	r0, r3
 8001084:	f003 fcf4 	bl	8004a70 <HAL_RCC_OscConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800108e:	f000 f857 	bl	8001140 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001092:	230f      	movs	r3, #15
 8001094:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001098:	2303      	movs	r3, #3
 800109a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010b0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80010b4:	2101      	movs	r1, #1
 80010b6:	4618      	mov	r0, r3
 80010b8:	f004 f88a 	bl	80051d0 <HAL_RCC_ClockConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80010c2:	f000 f83d 	bl	8001140 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <SystemClock_Config+0x150>)
 80010c8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80010e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80010e8:	2301      	movs	r3, #1
 80010ea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010ec:	2301      	movs	r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80010f0:	2318      	movs	r3, #24
 80010f2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010f4:	2307      	movs	r3, #7
 80010f6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 8001100:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001104:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001106:	463b      	mov	r3, r7
 8001108:	4618      	mov	r0, r3
 800110a:	f004 fa65 	bl	80055d8 <HAL_RCCEx_PeriphCLKConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8001114:	f000 f814 	bl	8001140 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001118:	f44f 7000 	mov.w	r0, #512	; 0x200
 800111c:	f003 fb7a 	bl	8004814 <HAL_PWREx_ControlVoltageScaling>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0x13e>
  {
    Error_Handler();
 8001126:	f000 f80b 	bl	8001140 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800112a:	f005 f9b3 	bl	8006494 <HAL_RCCEx_EnableMSIPLLMode>
}
 800112e:	bf00      	nop
 8001130:	37e0      	adds	r7, #224	; 0xe0
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40021000 	.word	0x40021000
 800113c:	000228c8 	.word	0x000228c8

08001140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_QUADSPI_Init+0x44>)
 8001156:	4a10      	ldr	r2, [pc, #64]	; (8001198 <MX_QUADSPI_Init+0x48>)
 8001158:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_QUADSPI_Init+0x44>)
 800115c:	22ff      	movs	r2, #255	; 0xff
 800115e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_QUADSPI_Init+0x44>)
 8001162:	2201      	movs	r2, #1
 8001164:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <MX_QUADSPI_Init+0x44>)
 8001168:	2200      	movs	r2, #0
 800116a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_QUADSPI_Init+0x44>)
 800116e:	2201      	movs	r2, #1
 8001170:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <MX_QUADSPI_Init+0x44>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_QUADSPI_Init+0x44>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_QUADSPI_Init+0x44>)
 8001180:	f003 fbae 	bl	80048e0 <HAL_QSPI_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800118a:	f7ff ffd9 	bl	8001140 <Error_Handler>
  }

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200005bc 	.word	0x200005bc
 8001198:	a0001000 	.word	0xa0001000

0800119c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a17      	ldr	r2, [pc, #92]	; (8001218 <HAL_QSPI_MspInit+0x7c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d128      	bne.n	8001210 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80011be:	4b17      	ldr	r3, [pc, #92]	; (800121c <HAL_QSPI_MspInit+0x80>)
 80011c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011c2:	4a16      	ldr	r2, [pc, #88]	; (800121c <HAL_QSPI_MspInit+0x80>)
 80011c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c8:	6513      	str	r3, [r2, #80]	; 0x50
 80011ca:	4b14      	ldr	r3, [pc, #80]	; (800121c <HAL_QSPI_MspInit+0x80>)
 80011cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <HAL_QSPI_MspInit+0x80>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	4a10      	ldr	r2, [pc, #64]	; (800121c <HAL_QSPI_MspInit+0x80>)
 80011dc:	f043 0310 	orr.w	r3, r3, #16
 80011e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <HAL_QSPI_MspInit+0x80>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 80011ee:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80011f2:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001200:	230a      	movs	r3, #10
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <HAL_QSPI_MspInit+0x84>)
 800120c:	f001 f806 	bl	800221c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001210:	bf00      	nop
 8001212:	3728      	adds	r7, #40	; 0x28
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	a0001000 	.word	0xa0001000
 800121c:	40021000 	.word	0x40021000
 8001220:	48001000 	.word	0x48001000

08001224 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001238:	2300      	movs	r3, #0
 800123a:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800123c:	4b25      	ldr	r3, [pc, #148]	; (80012d4 <MX_RTC_Init+0xb0>)
 800123e:	4a26      	ldr	r2, [pc, #152]	; (80012d8 <MX_RTC_Init+0xb4>)
 8001240:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001242:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <MX_RTC_Init+0xb0>)
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001248:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <MX_RTC_Init+0xb0>)
 800124a:	227f      	movs	r2, #127	; 0x7f
 800124c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <MX_RTC_Init+0xb0>)
 8001250:	22ff      	movs	r2, #255	; 0xff
 8001252:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001254:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <MX_RTC_Init+0xb0>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800125a:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <MX_RTC_Init+0xb0>)
 800125c:	2200      	movs	r2, #0
 800125e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001260:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <MX_RTC_Init+0xb0>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001266:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <MX_RTC_Init+0xb0>)
 8001268:	2200      	movs	r2, #0
 800126a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800126c:	4819      	ldr	r0, [pc, #100]	; (80012d4 <MX_RTC_Init+0xb0>)
 800126e:	f005 fbc3 	bl	80069f8 <HAL_RTC_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001278:	f7ff ff62 	bl	8001140 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800127c:	2300      	movs	r3, #0
 800127e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001280:	2300      	movs	r3, #0
 8001282:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001284:	2300      	movs	r3, #0
 8001286:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	2201      	movs	r2, #1
 8001294:	4619      	mov	r1, r3
 8001296:	480f      	ldr	r0, [pc, #60]	; (80012d4 <MX_RTC_Init+0xb0>)
 8001298:	f005 fc2c 	bl	8006af4 <HAL_RTC_SetTime>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80012a2:	f7ff ff4d 	bl	8001140 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80012a6:	2301      	movs	r3, #1
 80012a8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80012aa:	2301      	movs	r3, #1
 80012ac:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80012ae:	2301      	movs	r3, #1
 80012b0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80012b6:	463b      	mov	r3, r7
 80012b8:	2201      	movs	r2, #1
 80012ba:	4619      	mov	r1, r3
 80012bc:	4805      	ldr	r0, [pc, #20]	; (80012d4 <MX_RTC_Init+0xb0>)
 80012be:	f005 fcb6 	bl	8006c2e <HAL_RTC_SetDate>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80012c8:	f7ff ff3a 	bl	8001140 <Error_Handler>
  }

}
 80012cc:	bf00      	nop
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000600 	.word	0x20000600
 80012d8:	40002800 	.word	0x40002800

080012dc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a08      	ldr	r2, [pc, #32]	; (800130c <HAL_RTC_MspInit+0x30>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d107      	bne.n	80012fe <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012ee:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_RTC_MspInit+0x34>)
 80012f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <HAL_RTC_MspInit+0x34>)
 80012f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40002800 	.word	0x40002800
 8001310:	40021000 	.word	0x40021000

08001314 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001318:	4b4d      	ldr	r3, [pc, #308]	; (8001450 <MX_SAI1_Init+0x13c>)
 800131a:	4a4e      	ldr	r2, [pc, #312]	; (8001454 <MX_SAI1_Init+0x140>)
 800131c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800131e:	4b4c      	ldr	r3, [pc, #304]	; (8001450 <MX_SAI1_Init+0x13c>)
 8001320:	2200      	movs	r2, #0
 8001322:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001324:	4b4a      	ldr	r3, [pc, #296]	; (8001450 <MX_SAI1_Init+0x13c>)
 8001326:	2200      	movs	r2, #0
 8001328:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800132a:	4b49      	ldr	r3, [pc, #292]	; (8001450 <MX_SAI1_Init+0x13c>)
 800132c:	2240      	movs	r2, #64	; 0x40
 800132e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001330:	4b47      	ldr	r3, [pc, #284]	; (8001450 <MX_SAI1_Init+0x13c>)
 8001332:	2200      	movs	r2, #0
 8001334:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001336:	4b46      	ldr	r3, [pc, #280]	; (8001450 <MX_SAI1_Init+0x13c>)
 8001338:	2200      	movs	r2, #0
 800133a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800133c:	4b44      	ldr	r3, [pc, #272]	; (8001450 <MX_SAI1_Init+0x13c>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001342:	4b43      	ldr	r3, [pc, #268]	; (8001450 <MX_SAI1_Init+0x13c>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001348:	4b41      	ldr	r3, [pc, #260]	; (8001450 <MX_SAI1_Init+0x13c>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800134e:	4b40      	ldr	r3, [pc, #256]	; (8001450 <MX_SAI1_Init+0x13c>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001354:	4b3e      	ldr	r3, [pc, #248]	; (8001450 <MX_SAI1_Init+0x13c>)
 8001356:	4a40      	ldr	r2, [pc, #256]	; (8001458 <MX_SAI1_Init+0x144>)
 8001358:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800135a:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <MX_SAI1_Init+0x13c>)
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001360:	4b3b      	ldr	r3, [pc, #236]	; (8001450 <MX_SAI1_Init+0x13c>)
 8001362:	2200      	movs	r2, #0
 8001364:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001366:	4b3a      	ldr	r3, [pc, #232]	; (8001450 <MX_SAI1_Init+0x13c>)
 8001368:	2200      	movs	r2, #0
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800136c:	4b38      	ldr	r3, [pc, #224]	; (8001450 <MX_SAI1_Init+0x13c>)
 800136e:	2200      	movs	r2, #0
 8001370:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001372:	4b37      	ldr	r3, [pc, #220]	; (8001450 <MX_SAI1_Init+0x13c>)
 8001374:	2208      	movs	r2, #8
 8001376:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001378:	4b35      	ldr	r3, [pc, #212]	; (8001450 <MX_SAI1_Init+0x13c>)
 800137a:	2201      	movs	r2, #1
 800137c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800137e:	4b34      	ldr	r3, [pc, #208]	; (8001450 <MX_SAI1_Init+0x13c>)
 8001380:	2200      	movs	r2, #0
 8001382:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001384:	4b32      	ldr	r3, [pc, #200]	; (8001450 <MX_SAI1_Init+0x13c>)
 8001386:	2200      	movs	r2, #0
 8001388:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800138a:	4b31      	ldr	r3, [pc, #196]	; (8001450 <MX_SAI1_Init+0x13c>)
 800138c:	2200      	movs	r2, #0
 800138e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001390:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <MX_SAI1_Init+0x13c>)
 8001392:	2200      	movs	r2, #0
 8001394:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001396:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <MX_SAI1_Init+0x13c>)
 8001398:	2200      	movs	r2, #0
 800139a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800139c:	4b2c      	ldr	r3, [pc, #176]	; (8001450 <MX_SAI1_Init+0x13c>)
 800139e:	2201      	movs	r2, #1
 80013a0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80013a2:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <MX_SAI1_Init+0x13c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80013a8:	4829      	ldr	r0, [pc, #164]	; (8001450 <MX_SAI1_Init+0x13c>)
 80013aa:	f005 fd7f 	bl	8006eac <HAL_SAI_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 80013b4:	f7ff fec4 	bl	8001140 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 80013b8:	4b28      	ldr	r3, [pc, #160]	; (800145c <MX_SAI1_Init+0x148>)
 80013ba:	4a29      	ldr	r2, [pc, #164]	; (8001460 <MX_SAI1_Init+0x14c>)
 80013bc:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 80013be:	4b27      	ldr	r3, [pc, #156]	; (800145c <MX_SAI1_Init+0x148>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80013c4:	4b25      	ldr	r3, [pc, #148]	; (800145c <MX_SAI1_Init+0x148>)
 80013c6:	2203      	movs	r2, #3
 80013c8:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 80013ca:	4b24      	ldr	r3, [pc, #144]	; (800145c <MX_SAI1_Init+0x148>)
 80013cc:	2240      	movs	r2, #64	; 0x40
 80013ce:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80013d0:	4b22      	ldr	r3, [pc, #136]	; (800145c <MX_SAI1_Init+0x148>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80013d6:	4b21      	ldr	r3, [pc, #132]	; (800145c <MX_SAI1_Init+0x148>)
 80013d8:	2200      	movs	r2, #0
 80013da:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80013dc:	4b1f      	ldr	r3, [pc, #124]	; (800145c <MX_SAI1_Init+0x148>)
 80013de:	2201      	movs	r2, #1
 80013e0:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <MX_SAI1_Init+0x148>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <MX_SAI1_Init+0x148>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <MX_SAI1_Init+0x148>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <MX_SAI1_Init+0x148>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <MX_SAI1_Init+0x148>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001400:	4b16      	ldr	r3, [pc, #88]	; (800145c <MX_SAI1_Init+0x148>)
 8001402:	2200      	movs	r2, #0
 8001404:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <MX_SAI1_Init+0x148>)
 8001408:	2208      	movs	r2, #8
 800140a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <MX_SAI1_Init+0x148>)
 800140e:	2201      	movs	r2, #1
 8001410:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <MX_SAI1_Init+0x148>)
 8001414:	2200      	movs	r2, #0
 8001416:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001418:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_SAI1_Init+0x148>)
 800141a:	2200      	movs	r2, #0
 800141c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <MX_SAI1_Init+0x148>)
 8001420:	2200      	movs	r2, #0
 8001422:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001424:	4b0d      	ldr	r3, [pc, #52]	; (800145c <MX_SAI1_Init+0x148>)
 8001426:	2200      	movs	r2, #0
 8001428:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_SAI1_Init+0x148>)
 800142c:	2200      	movs	r2, #0
 800142e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <MX_SAI1_Init+0x148>)
 8001432:	2201      	movs	r2, #1
 8001434:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_SAI1_Init+0x148>)
 8001438:	2200      	movs	r2, #0
 800143a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 800143c:	4807      	ldr	r0, [pc, #28]	; (800145c <MX_SAI1_Init+0x148>)
 800143e:	f005 fd35 	bl	8006eac <HAL_SAI_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8001448:	f7ff fe7a 	bl	8001140 <Error_Handler>
  }

}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200006a8 	.word	0x200006a8
 8001454:	40015404 	.word	0x40015404
 8001458:	0002ee00 	.word	0x0002ee00
 800145c:	20000624 	.word	0x20000624
 8001460:	40015424 	.word	0x40015424

08001464 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a33      	ldr	r2, [pc, #204]	; (8001540 <HAL_SAI_MspInit+0xdc>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d135      	bne.n	80014e2 <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001476:	4b33      	ldr	r3, [pc, #204]	; (8001544 <HAL_SAI_MspInit+0xe0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10b      	bne.n	8001496 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800147e:	4b32      	ldr	r3, [pc, #200]	; (8001548 <HAL_SAI_MspInit+0xe4>)
 8001480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001482:	4a31      	ldr	r2, [pc, #196]	; (8001548 <HAL_SAI_MspInit+0xe4>)
 8001484:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001488:	6613      	str	r3, [r2, #96]	; 0x60
 800148a:	4b2f      	ldr	r3, [pc, #188]	; (8001548 <HAL_SAI_MspInit+0xe4>)
 800148c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001496:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <HAL_SAI_MspInit+0xe0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	4a29      	ldr	r2, [pc, #164]	; (8001544 <HAL_SAI_MspInit+0xe0>)
 800149e:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B 
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 80014a0:	2374      	movs	r3, #116	; 0x74
 80014a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80014b0:	230d      	movs	r3, #13
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	4824      	ldr	r0, [pc, #144]	; (800154c <HAL_SAI_MspInit+0xe8>)
 80014bc:	f000 feae 	bl	800221c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 80014c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80014d2:	230d      	movs	r3, #13
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	481b      	ldr	r0, [pc, #108]	; (800154c <HAL_SAI_MspInit+0xe8>)
 80014de:	f000 fe9d 	bl	800221c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a1a      	ldr	r2, [pc, #104]	; (8001550 <HAL_SAI_MspInit+0xec>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d124      	bne.n	8001536 <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_SAI_MspInit+0xe0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10b      	bne.n	800150c <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <HAL_SAI_MspInit+0xe4>)
 80014f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f8:	4a13      	ldr	r2, [pc, #76]	; (8001548 <HAL_SAI_MspInit+0xe4>)
 80014fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014fe:	6613      	str	r3, [r2, #96]	; 0x60
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_SAI_MspInit+0xe4>)
 8001502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800150c:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <HAL_SAI_MspInit+0xe0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3301      	adds	r3, #1
 8001512:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <HAL_SAI_MspInit+0xe0>)
 8001514:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE7     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001526:	230d      	movs	r3, #13
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4806      	ldr	r0, [pc, #24]	; (800154c <HAL_SAI_MspInit+0xe8>)
 8001532:	f000 fe73 	bl	800221c <HAL_GPIO_Init>

    }
}
 8001536:	bf00      	nop
 8001538:	3728      	adds	r7, #40	; 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40015404 	.word	0x40015404
 8001544:	200000c8 	.word	0x200000c8
 8001548:	40021000 	.word	0x40021000
 800154c:	48001000 	.word	0x48001000
 8001550:	40015424 	.word	0x40015424

08001554 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <MX_SPI2_Init+0x74>)
 800155a:	4a1c      	ldr	r2, [pc, #112]	; (80015cc <MX_SPI2_Init+0x78>)
 800155c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <MX_SPI2_Init+0x74>)
 8001560:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001564:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <MX_SPI2_Init+0x74>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800156c:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <MX_SPI2_Init+0x74>)
 800156e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001572:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <MX_SPI2_Init+0x74>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <MX_SPI2_Init+0x74>)
 800157c:	2200      	movs	r2, #0
 800157e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_SPI2_Init+0x74>)
 8001582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001586:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_SPI2_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_SPI2_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_SPI2_Init+0x74>)
 8001596:	2200      	movs	r2, #0
 8001598:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MX_SPI2_Init+0x74>)
 800159c:	2200      	movs	r2, #0
 800159e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_SPI2_Init+0x74>)
 80015a2:	2207      	movs	r2, #7
 80015a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MX_SPI2_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_SPI2_Init+0x74>)
 80015ae:	2208      	movs	r2, #8
 80015b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_SPI2_Init+0x74>)
 80015b4:	f005 fe14 	bl	80071e0 <HAL_SPI_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80015be:	f7ff fdbf 	bl	8001140 <Error_Handler>
  }

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000072c 	.word	0x2000072c
 80015cc:	40003800 	.word	0x40003800

080015d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a17      	ldr	r2, [pc, #92]	; (800164c <HAL_SPI_MspInit+0x7c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d127      	bne.n	8001642 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <HAL_SPI_MspInit+0x80>)
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	4a16      	ldr	r2, [pc, #88]	; (8001650 <HAL_SPI_MspInit+0x80>)
 80015f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015fc:	6593      	str	r3, [r2, #88]	; 0x58
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_SPI_MspInit+0x80>)
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_SPI_MspInit+0x80>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	4a10      	ldr	r2, [pc, #64]	; (8001650 <HAL_SPI_MspInit+0x80>)
 8001610:	f043 0308 	orr.w	r3, r3, #8
 8001614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_SPI_MspInit+0x80>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8001622:	231a      	movs	r3, #26
 8001624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001632:	2305      	movs	r3, #5
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	4805      	ldr	r0, [pc, #20]	; (8001654 <HAL_SPI_MspInit+0x84>)
 800163e:	f000 fded 	bl	800221c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001642:	bf00      	nop
 8001644:	3728      	adds	r7, #40	; 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40003800 	.word	0x40003800
 8001650:	40021000 	.word	0x40021000
 8001654:	48000c00 	.word	0x48000c00

08001658 <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af04      	add	r7, sp, #16
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	9302      	str	r3, [sp, #8]
 8001678:	2301      	movs	r3, #1
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	1dfb      	adds	r3, r7, #7
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	2301      	movs	r3, #1
 8001682:	2200      	movs	r2, #0
 8001684:	2178      	movs	r1, #120	; 0x78
 8001686:	4803      	ldr	r0, [pc, #12]	; (8001694 <ssd1306_WriteCommand+0x2c>)
 8001688:	f002 fc50 	bl	8003f2c <HAL_I2C_Mem_Write>
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200004e8 	.word	0x200004e8

08001698 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af04      	add	r7, sp, #16
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	f04f 32ff 	mov.w	r2, #4294967295
 80016aa:	9202      	str	r2, [sp, #8]
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2301      	movs	r3, #1
 80016b4:	2240      	movs	r2, #64	; 0x40
 80016b6:	2178      	movs	r1, #120	; 0x78
 80016b8:	4803      	ldr	r0, [pc, #12]	; (80016c8 <ssd1306_WriteData+0x30>)
 80016ba:	f002 fc37 	bl	8003f2c <HAL_I2C_Mem_Write>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200004e8 	.word	0x200004e8

080016cc <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 80016d0:	f7ff ffc2 	bl	8001658 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80016d4:	2064      	movs	r0, #100	; 0x64
 80016d6:	f000 fc6d 	bl	8001fb4 <HAL_Delay>

    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 80016da:	20ae      	movs	r0, #174	; 0xae
 80016dc:	f7ff ffc4 	bl	8001668 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80016e0:	2020      	movs	r0, #32
 80016e2:	f7ff ffc1 	bl	8001668 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7ff ffbe 	bl	8001668 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80016ec:	20b0      	movs	r0, #176	; 0xb0
 80016ee:	f7ff ffbb 	bl	8001668 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80016f2:	20c8      	movs	r0, #200	; 0xc8
 80016f4:	f7ff ffb8 	bl	8001668 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80016f8:	2000      	movs	r0, #0
 80016fa:	f7ff ffb5 	bl	8001668 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80016fe:	2010      	movs	r0, #16
 8001700:	f7ff ffb2 	bl	8001668 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001704:	2040      	movs	r0, #64	; 0x40
 8001706:	f7ff ffaf 	bl	8001668 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 800170a:	2081      	movs	r0, #129	; 0x81
 800170c:	f7ff ffac 	bl	8001668 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8001710:	20ff      	movs	r0, #255	; 0xff
 8001712:	f7ff ffa9 	bl	8001668 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001716:	20a1      	movs	r0, #161	; 0xa1
 8001718:	f7ff ffa6 	bl	8001668 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800171c:	20a6      	movs	r0, #166	; 0xa6
 800171e:	f7ff ffa3 	bl	8001668 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001722:	20a8      	movs	r0, #168	; 0xa8
 8001724:	f7ff ffa0 	bl	8001668 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001728:	203f      	movs	r0, #63	; 0x3f
 800172a:	f7ff ff9d 	bl	8001668 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800172e:	20a4      	movs	r0, #164	; 0xa4
 8001730:	f7ff ff9a 	bl	8001668 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001734:	20d3      	movs	r0, #211	; 0xd3
 8001736:	f7ff ff97 	bl	8001668 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800173a:	2000      	movs	r0, #0
 800173c:	f7ff ff94 	bl	8001668 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001740:	20d5      	movs	r0, #213	; 0xd5
 8001742:	f7ff ff91 	bl	8001668 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001746:	20f0      	movs	r0, #240	; 0xf0
 8001748:	f7ff ff8e 	bl	8001668 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800174c:	20d9      	movs	r0, #217	; 0xd9
 800174e:	f7ff ff8b 	bl	8001668 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001752:	2022      	movs	r0, #34	; 0x22
 8001754:	f7ff ff88 	bl	8001668 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001758:	20da      	movs	r0, #218	; 0xda
 800175a:	f7ff ff85 	bl	8001668 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800175e:	2012      	movs	r0, #18
 8001760:	f7ff ff82 	bl	8001668 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001764:	20db      	movs	r0, #219	; 0xdb
 8001766:	f7ff ff7f 	bl	8001668 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800176a:	2020      	movs	r0, #32
 800176c:	f7ff ff7c 	bl	8001668 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001770:	208d      	movs	r0, #141	; 0x8d
 8001772:	f7ff ff79 	bl	8001668 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001776:	2014      	movs	r0, #20
 8001778:	f7ff ff76 	bl	8001668 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800177c:	20af      	movs	r0, #175	; 0xaf
 800177e:	f7ff ff73 	bl	8001668 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8001782:	2000      	movs	r0, #0
 8001784:	f000 f810 	bl	80017a8 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001788:	f000 f830 	bl	80017ec <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <ssd1306_Init+0xd8>)
 800178e:	2200      	movs	r2, #0
 8001790:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001792:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <ssd1306_Init+0xd8>)
 8001794:	2200      	movs	r2, #0
 8001796:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001798:	4b02      	ldr	r3, [pc, #8]	; (80017a4 <ssd1306_Init+0xd8>)
 800179a:	2201      	movs	r2, #1
 800179c:	715a      	strb	r2, [r3, #5]
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200004cc 	.word	0x200004cc

080017a8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	e00d      	b.n	80017d4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <ssd1306_Fill+0x1a>
 80017be:	2100      	movs	r1, #0
 80017c0:	e000      	b.n	80017c4 <ssd1306_Fill+0x1c>
 80017c2:	21ff      	movs	r1, #255	; 0xff
 80017c4:	4a08      	ldr	r2, [pc, #32]	; (80017e8 <ssd1306_Fill+0x40>)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4413      	add	r3, r2
 80017ca:	460a      	mov	r2, r1
 80017cc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	3301      	adds	r3, #1
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017da:	d3ed      	bcc.n	80017b8 <ssd1306_Fill+0x10>
    }
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	200000cc 	.word	0x200000cc

080017ec <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80017f2:	2300      	movs	r3, #0
 80017f4:	71fb      	strb	r3, [r7, #7]
 80017f6:	e016      	b.n	8001826 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	3b50      	subs	r3, #80	; 0x50
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff32 	bl	8001668 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001804:	2000      	movs	r0, #0
 8001806:	f7ff ff2f 	bl	8001668 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800180a:	2010      	movs	r0, #16
 800180c:	f7ff ff2c 	bl	8001668 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	01db      	lsls	r3, r3, #7
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <ssd1306_UpdateScreen+0x48>)
 8001816:	4413      	add	r3, r2
 8001818:	2180      	movs	r1, #128	; 0x80
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ff3c 	bl	8001698 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	3301      	adds	r3, #1
 8001824:	71fb      	strb	r3, [r7, #7]
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	2b07      	cmp	r3, #7
 800182a:	d9e5      	bls.n	80017f8 <ssd1306_UpdateScreen+0xc>
    }
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200000cc 	.word	0x200000cc

08001838 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
 8001842:	460b      	mov	r3, r1
 8001844:	71bb      	strb	r3, [r7, #6]
 8001846:	4613      	mov	r3, r2
 8001848:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	2b00      	cmp	r3, #0
 8001850:	db48      	blt.n	80018e4 <ssd1306_DrawPixel+0xac>
 8001852:	79bb      	ldrb	r3, [r7, #6]
 8001854:	2b3f      	cmp	r3, #63	; 0x3f
 8001856:	d845      	bhi.n	80018e4 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8001858:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <ssd1306_DrawPixel+0xb8>)
 800185a:	791b      	ldrb	r3, [r3, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8001860:	797b      	ldrb	r3, [r7, #5]
 8001862:	2b00      	cmp	r3, #0
 8001864:	bf0c      	ite	eq
 8001866:	2301      	moveq	r3, #1
 8001868:	2300      	movne	r3, #0
 800186a:	b2db      	uxtb	r3, r3
 800186c:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the right color
    if(color == White) {
 800186e:	797b      	ldrb	r3, [r7, #5]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d11a      	bne.n	80018aa <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001874:	79fa      	ldrb	r2, [r7, #7]
 8001876:	79bb      	ldrb	r3, [r7, #6]
 8001878:	08db      	lsrs	r3, r3, #3
 800187a:	b2d8      	uxtb	r0, r3
 800187c:	4603      	mov	r3, r0
 800187e:	01db      	lsls	r3, r3, #7
 8001880:	4413      	add	r3, r2
 8001882:	4a1c      	ldr	r2, [pc, #112]	; (80018f4 <ssd1306_DrawPixel+0xbc>)
 8001884:	5cd3      	ldrb	r3, [r2, r3]
 8001886:	b25a      	sxtb	r2, r3
 8001888:	79bb      	ldrb	r3, [r7, #6]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	2101      	movs	r1, #1
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	b25b      	sxtb	r3, r3
 8001896:	4313      	orrs	r3, r2
 8001898:	b259      	sxtb	r1, r3
 800189a:	79fa      	ldrb	r2, [r7, #7]
 800189c:	4603      	mov	r3, r0
 800189e:	01db      	lsls	r3, r3, #7
 80018a0:	4413      	add	r3, r2
 80018a2:	b2c9      	uxtb	r1, r1
 80018a4:	4a13      	ldr	r2, [pc, #76]	; (80018f4 <ssd1306_DrawPixel+0xbc>)
 80018a6:	54d1      	strb	r1, [r2, r3]
 80018a8:	e01d      	b.n	80018e6 <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80018aa:	79fa      	ldrb	r2, [r7, #7]
 80018ac:	79bb      	ldrb	r3, [r7, #6]
 80018ae:	08db      	lsrs	r3, r3, #3
 80018b0:	b2d8      	uxtb	r0, r3
 80018b2:	4603      	mov	r3, r0
 80018b4:	01db      	lsls	r3, r3, #7
 80018b6:	4413      	add	r3, r2
 80018b8:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <ssd1306_DrawPixel+0xbc>)
 80018ba:	5cd3      	ldrb	r3, [r2, r3]
 80018bc:	b25a      	sxtb	r2, r3
 80018be:	79bb      	ldrb	r3, [r7, #6]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	2101      	movs	r1, #1
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	b25b      	sxtb	r3, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	b25b      	sxtb	r3, r3
 80018d0:	4013      	ands	r3, r2
 80018d2:	b259      	sxtb	r1, r3
 80018d4:	79fa      	ldrb	r2, [r7, #7]
 80018d6:	4603      	mov	r3, r0
 80018d8:	01db      	lsls	r3, r3, #7
 80018da:	4413      	add	r3, r2
 80018dc:	b2c9      	uxtb	r1, r1
 80018de:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <ssd1306_DrawPixel+0xbc>)
 80018e0:	54d1      	strb	r1, [r2, r3]
 80018e2:	e000      	b.n	80018e6 <ssd1306_DrawPixel+0xae>
        return;
 80018e4:	bf00      	nop
    }
}
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	200004cc 	.word	0x200004cc
 80018f4:	200000cc 	.word	0x200000cc

080018f8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80018f8:	b590      	push	{r4, r7, lr}
 80018fa:	b089      	sub	sp, #36	; 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4604      	mov	r4, r0
 8001900:	1d38      	adds	r0, r7, #4
 8001902:	e880 0006 	stmia.w	r0, {r1, r2}
 8001906:	461a      	mov	r2, r3
 8001908:	4623      	mov	r3, r4
 800190a:	73fb      	strb	r3, [r7, #15]
 800190c:	4613      	mov	r3, r2
 800190e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	2b1f      	cmp	r3, #31
 8001914:	d902      	bls.n	800191c <ssd1306_WriteChar+0x24>
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	2b7e      	cmp	r3, #126	; 0x7e
 800191a:	d901      	bls.n	8001920 <ssd1306_WriteChar+0x28>
        return 0;
 800191c:	2300      	movs	r3, #0
 800191e:	e06d      	b.n	80019fc <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001920:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <ssd1306_WriteChar+0x10c>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	793b      	ldrb	r3, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	2b80      	cmp	r3, #128	; 0x80
 800192c:	dc06      	bgt.n	800193c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800192e:	4b35      	ldr	r3, [pc, #212]	; (8001a04 <ssd1306_WriteChar+0x10c>)
 8001930:	885b      	ldrh	r3, [r3, #2]
 8001932:	461a      	mov	r2, r3
 8001934:	797b      	ldrb	r3, [r7, #5]
 8001936:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001938:	2b40      	cmp	r3, #64	; 0x40
 800193a:	dd01      	ble.n	8001940 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800193c:	2300      	movs	r3, #0
 800193e:	e05d      	b.n	80019fc <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
 8001944:	e04c      	b.n	80019e0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	3b20      	subs	r3, #32
 800194c:	7979      	ldrb	r1, [r7, #5]
 800194e:	fb01 f303 	mul.w	r3, r1, r3
 8001952:	4619      	mov	r1, r3
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	440b      	add	r3, r1
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001960:	2300      	movs	r3, #0
 8001962:	61bb      	str	r3, [r7, #24]
 8001964:	e034      	b.n	80019d0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d012      	beq.n	800199c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001976:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <ssd1306_WriteChar+0x10c>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	b2da      	uxtb	r2, r3
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	4413      	add	r3, r2
 8001982:	b2d8      	uxtb	r0, r3
 8001984:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <ssd1306_WriteChar+0x10c>)
 8001986:	885b      	ldrh	r3, [r3, #2]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	4413      	add	r3, r2
 8001990:	b2db      	uxtb	r3, r3
 8001992:	7bba      	ldrb	r2, [r7, #14]
 8001994:	4619      	mov	r1, r3
 8001996:	f7ff ff4f 	bl	8001838 <ssd1306_DrawPixel>
 800199a:	e016      	b.n	80019ca <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <ssd1306_WriteChar+0x10c>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	4413      	add	r3, r2
 80019a8:	b2d8      	uxtb	r0, r3
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <ssd1306_WriteChar+0x10c>)
 80019ac:	885b      	ldrh	r3, [r3, #2]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	b2d9      	uxtb	r1, r3
 80019b8:	7bbb      	ldrb	r3, [r7, #14]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	bf0c      	ite	eq
 80019be:	2301      	moveq	r3, #1
 80019c0:	2300      	movne	r3, #0
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	461a      	mov	r2, r3
 80019c6:	f7ff ff37 	bl	8001838 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	3301      	adds	r3, #1
 80019ce:	61bb      	str	r3, [r7, #24]
 80019d0:	793b      	ldrb	r3, [r7, #4]
 80019d2:	461a      	mov	r2, r3
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d3c5      	bcc.n	8001966 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3301      	adds	r3, #1
 80019de:	61fb      	str	r3, [r7, #28]
 80019e0:	797b      	ldrb	r3, [r7, #5]
 80019e2:	461a      	mov	r2, r3
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d3ad      	bcc.n	8001946 <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <ssd1306_WriteChar+0x10c>)
 80019ec:	881a      	ldrh	r2, [r3, #0]
 80019ee:	793b      	ldrb	r3, [r7, #4]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <ssd1306_WriteChar+0x10c>)
 80019f8:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3724      	adds	r7, #36	; 0x24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd90      	pop	{r4, r7, pc}
 8001a04:	200004cc 	.word	0x200004cc

08001a08 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	1d38      	adds	r0, r7, #4
 8001a12:	e880 0006 	stmia.w	r0, {r1, r2}
 8001a16:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001a18:	e012      	b.n	8001a40 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	7818      	ldrb	r0, [r3, #0]
 8001a1e:	78fb      	ldrb	r3, [r7, #3]
 8001a20:	1d3a      	adds	r2, r7, #4
 8001a22:	ca06      	ldmia	r2, {r1, r2}
 8001a24:	f7ff ff68 	bl	80018f8 <ssd1306_WriteChar>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d002      	beq.n	8001a3a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	e008      	b.n	8001a4c <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1e8      	bne.n	8001a1a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	781b      	ldrb	r3, [r3, #0]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	460a      	mov	r2, r1
 8001a5e:	71fb      	strb	r3, [r7, #7]
 8001a60:	4613      	mov	r3, r2
 8001a62:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <ssd1306_SetCursor+0x2c>)
 8001a6a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001a6c:	79bb      	ldrb	r3, [r7, #6]
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <ssd1306_SetCursor+0x2c>)
 8001a72:	805a      	strh	r2, [r3, #2]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	200004cc 	.word	0x200004cc

08001a84 <BSP_JOY_Init>:
 *     @arg  JOY_MODE_GPIO: Joystick pins will be used as simple IOs
 *     @arg  JOY_MODE_EXTI: Joystick pins will be connected to EXTI line
 *                                 with interrupt generation capability
 * @retval HAL_OK: if all initializations are OK. Other value if error.
 */
uint8_t BSP_JOY_Init(JOYMode_TypeDef Joy_Mode) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08e      	sub	sp, #56	; 0x38
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
	JOYState_TypeDef joykey;
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Initialized the Joystick. */
	//for (joykey = JOY_SEL; joykey < (JOY_SEL + JOYn) ; joykey++)
	joykey = JOY_DOWN;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	/* Enable the JOY clock */
	JOYx_GPIO_CLK_ENABLE(joykey);
 8001a94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10c      	bne.n	8001ab6 <BSP_JOY_Init+0x32>
 8001a9c:	4b48      	ldr	r3, [pc, #288]	; (8001bc0 <BSP_JOY_Init+0x13c>)
 8001a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa0:	4a47      	ldr	r2, [pc, #284]	; (8001bc0 <BSP_JOY_Init+0x13c>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa8:	4b45      	ldr	r3, [pc, #276]	; (8001bc0 <BSP_JOY_Init+0x13c>)
 8001aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	e042      	b.n	8001b3c <BSP_JOY_Init+0xb8>
 8001ab6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d10c      	bne.n	8001ad8 <BSP_JOY_Init+0x54>
 8001abe:	4b40      	ldr	r3, [pc, #256]	; (8001bc0 <BSP_JOY_Init+0x13c>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	4a3f      	ldr	r2, [pc, #252]	; (8001bc0 <BSP_JOY_Init+0x13c>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aca:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <BSP_JOY_Init+0x13c>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	61bb      	str	r3, [r7, #24]
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	e031      	b.n	8001b3c <BSP_JOY_Init+0xb8>
 8001ad8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d10c      	bne.n	8001afa <BSP_JOY_Init+0x76>
 8001ae0:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <BSP_JOY_Init+0x13c>)
 8001ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae4:	4a36      	ldr	r2, [pc, #216]	; (8001bc0 <BSP_JOY_Init+0x13c>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aec:	4b34      	ldr	r3, [pc, #208]	; (8001bc0 <BSP_JOY_Init+0x13c>)
 8001aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	e020      	b.n	8001b3c <BSP_JOY_Init+0xb8>
 8001afa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d10c      	bne.n	8001b1c <BSP_JOY_Init+0x98>
 8001b02:	4b2f      	ldr	r3, [pc, #188]	; (8001bc0 <BSP_JOY_Init+0x13c>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	4a2e      	ldr	r2, [pc, #184]	; (8001bc0 <BSP_JOY_Init+0x13c>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <BSP_JOY_Init+0x13c>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	e00f      	b.n	8001b3c <BSP_JOY_Init+0xb8>
 8001b1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d10b      	bne.n	8001b3c <BSP_JOY_Init+0xb8>
 8001b24:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <BSP_JOY_Init+0x13c>)
 8001b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b28:	4a25      	ldr	r2, [pc, #148]	; (8001bc0 <BSP_JOY_Init+0x13c>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b30:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <BSP_JOY_Init+0x13c>)
 8001b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]

	GPIO_InitStruct.Pin = JOY_PIN[joykey];
 8001b3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b40:	4a20      	ldr	r2, [pc, #128]	; (8001bc4 <BSP_JOY_Init+0x140>)
 8001b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b46:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (Joy_Mode == JOY_MODE_GPIO) {
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10d      	bne.n	8001b72 <BSP_JOY_Init+0xee>
		/* Configure Joy pin as input */
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(JOY_PORT[joykey], &GPIO_InitStruct);
 8001b5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b5e:	4a1a      	ldr	r2, [pc, #104]	; (8001bc8 <BSP_JOY_Init+0x144>)
 8001b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b64:	f107 0220 	add.w	r2, r7, #32
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 fb56 	bl	800221c <HAL_GPIO_Init>
 8001b70:	e021      	b.n	8001bb6 <BSP_JOY_Init+0x132>
	} else if (Joy_Mode == JOY_MODE_EXTI) {
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d11e      	bne.n	8001bb6 <BSP_JOY_Init+0x132>
		/* Configure Joy pin as input with External interrupt */
		GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <BSP_JOY_Init+0x148>)
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(JOY_PORT[joykey], &GPIO_InitStruct);
 8001b7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b80:	4a11      	ldr	r2, [pc, #68]	; (8001bc8 <BSP_JOY_Init+0x144>)
 8001b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b86:	f107 0220 	add.w	r2, r7, #32
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 fb45 	bl	800221c <HAL_GPIO_Init>

		/* Enable and set Joy EXTI Interrupt to the lowest priority */
		HAL_NVIC_SetPriority((IRQn_Type) (JOY_IRQn[joykey]), 0x0F, 0x00);
 8001b92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b96:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <BSP_JOY_Init+0x14c>)
 8001b98:	5cd3      	ldrb	r3, [r2, r3]
 8001b9a:	b25b      	sxtb	r3, r3
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	210f      	movs	r1, #15
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f000 fb04 	bl	80021ae <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ((IRQn_Type) (JOY_IRQn[joykey]));
 8001ba6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001baa:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <BSP_JOY_Init+0x14c>)
 8001bac:	5cd3      	ldrb	r3, [r2, r3]
 8001bae:	b25b      	sxtb	r3, r3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 fb18 	bl	80021e6 <HAL_NVIC_EnableIRQ>
	}

	return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3738      	adds	r7, #56	; 0x38
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	0800b810 	.word	0x0800b810
 8001bc8:	20000008 	.word	0x20000008
 8001bcc:	10210000 	.word	0x10210000
 8001bd0:	0800b81c 	.word	0x0800b81c

08001bd4 <BSP_JOY_GetState>:
 *            @arg  JOY_DOWN
 *            @arg  JOY_LEFT
 *            @arg  JOY_RIGHT
 *            @arg  JOY_UP
 */
JOYState_TypeDef BSP_JOY_GetState(void) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
	JOYState_TypeDef joykey;

	//for (joykey = JOY_SEL; joykey < (JOY_SEL + JOYn); joykey++) {
	joykey =JOY_DOWN;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	71fb      	strb	r3, [r7, #7]
		if (HAL_GPIO_ReadPin(JOY_PORT[joykey], JOY_PIN[joykey])
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	4a09      	ldr	r2, [pc, #36]	; (8001c08 <BSP_JOY_GetState+0x34>)
 8001be2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	4a08      	ldr	r2, [pc, #32]	; (8001c0c <BSP_JOY_GetState+0x38>)
 8001bea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f000 fcbc 	bl	800256c <HAL_GPIO_ReadPin>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d101      	bne.n	8001bfe <BSP_JOY_GetState+0x2a>
				== GPIO_PIN_SET) {
			/* Return Code Joystick key pressed */
			return joykey;
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	e000      	b.n	8001c00 <BSP_JOY_GetState+0x2c>
		}
	//}

	/* No Joystick key pressed */
	return JOY_NONE;
 8001bfe:	2305      	movs	r3, #5
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000008 	.word	0x20000008
 8001c0c:	0800b810 	.word	0x0800b810

08001c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_MspInit+0x44>)
 8001c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1a:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <HAL_MspInit+0x44>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6613      	str	r3, [r2, #96]	; 0x60
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <HAL_MspInit+0x44>)
 8001c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_MspInit+0x44>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <HAL_MspInit+0x44>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	6593      	str	r3, [r2, #88]	; 0x58
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_MspInit+0x44>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000

08001c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <HardFault_Handler+0x4>

08001c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <MemManage_Handler+0x4>

08001c72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c76:	e7fe      	b.n	8001c76 <BusFault_Handler+0x4>

08001c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <UsageFault_Handler+0x4>

08001c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cac:	f000 f964 	bl	8001f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <OTG_FS_IRQHandler+0x10>)
 8001cba:	f000 ff09 	bl	8002ad0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000be0 	.word	0x20000be0

08001cc8 <_sbrk>:
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <_sbrk+0x50>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <_sbrk+0x16>
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <_sbrk+0x50>)
 8001cda:	4a10      	ldr	r2, [pc, #64]	; (8001d1c <_sbrk+0x54>)
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <_sbrk+0x50>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <_sbrk+0x50>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	466a      	mov	r2, sp
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d907      	bls.n	8001d02 <_sbrk+0x3a>
 8001cf2:	f008 fefd 	bl	800aaf0 <__errno>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	230c      	movs	r3, #12
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001d00:	e006      	b.n	8001d10 <_sbrk+0x48>
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <_sbrk+0x50>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	4a03      	ldr	r2, [pc, #12]	; (8001d18 <_sbrk+0x50>)
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	200004d4 	.word	0x200004d4
 8001d1c:	20000ea8 	.word	0x20000ea8

08001d20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d24:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <SystemInit+0x64>)
 8001d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2a:	4a16      	ldr	r2, [pc, #88]	; (8001d84 <SystemInit+0x64>)
 8001d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d34:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <SystemInit+0x68>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a13      	ldr	r2, [pc, #76]	; (8001d88 <SystemInit+0x68>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <SystemInit+0x68>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <SystemInit+0x68>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a0f      	ldr	r2, [pc, #60]	; (8001d88 <SystemInit+0x68>)
 8001d4c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001d50:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001d54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001d56:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <SystemInit+0x68>)
 8001d58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d5c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <SystemInit+0x68>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a09      	ldr	r2, [pc, #36]	; (8001d88 <SystemInit+0x68>)
 8001d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001d6a:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <SystemInit+0x68>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <SystemInit+0x64>)
 8001d72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d76:	609a      	str	r2, [r3, #8]
#endif
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000ed00 	.word	0xe000ed00
 8001d88:	40021000 	.word	0x40021000

08001d8c <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001d90:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <MX_UART4_Init+0x58>)
 8001d92:	4a15      	ldr	r2, [pc, #84]	; (8001de8 <MX_UART4_Init+0x5c>)
 8001d94:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d96:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <MX_UART4_Init+0x58>)
 8001d98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d9c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d9e:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <MX_UART4_Init+0x58>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001da4:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <MX_UART4_Init+0x58>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001daa:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <MX_UART4_Init+0x58>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <MX_UART4_Init+0x58>)
 8001db2:	220c      	movs	r2, #12
 8001db4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001db6:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <MX_UART4_Init+0x58>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <MX_UART4_Init+0x58>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dc2:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <MX_UART4_Init+0x58>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <MX_UART4_Init+0x58>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001dce:	4805      	ldr	r0, [pc, #20]	; (8001de4 <MX_UART4_Init+0x58>)
 8001dd0:	f005 fa90 	bl	80072f4 <HAL_UART_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001dda:	f7ff f9b1 	bl	8001140 <Error_Handler>
  }

}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000790 	.word	0x20000790
 8001de8:	40004c00 	.word	0x40004c00

08001dec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a17      	ldr	r2, [pc, #92]	; (8001e68 <HAL_UART_MspInit+0x7c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d128      	bne.n	8001e60 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e0e:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <HAL_UART_MspInit+0x80>)
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	4a16      	ldr	r2, [pc, #88]	; (8001e6c <HAL_UART_MspInit+0x80>)
 8001e14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e18:	6593      	str	r3, [r2, #88]	; 0x58
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <HAL_UART_MspInit+0x80>)
 8001e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e26:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <HAL_UART_MspInit+0x80>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <HAL_UART_MspInit+0x80>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <HAL_UART_MspInit+0x80>)
 8001e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e4e:	2308      	movs	r3, #8
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4619      	mov	r1, r3
 8001e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5c:	f000 f9de 	bl	800221c <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001e60:	bf00      	nop
 8001e62:	3728      	adds	r7, #40	; 0x28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40004c00 	.word	0x40004c00
 8001e6c:	40021000 	.word	0x40021000

08001e70 <Reset_Handler>:
 8001e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea8 <LoopForever+0x2>
 8001e74:	2100      	movs	r1, #0
 8001e76:	e003      	b.n	8001e80 <LoopCopyDataInit>

08001e78 <CopyDataInit>:
 8001e78:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <LoopForever+0x6>)
 8001e7a:	585b      	ldr	r3, [r3, r1]
 8001e7c:	5043      	str	r3, [r0, r1]
 8001e7e:	3104      	adds	r1, #4

08001e80 <LoopCopyDataInit>:
 8001e80:	480b      	ldr	r0, [pc, #44]	; (8001eb0 <LoopForever+0xa>)
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <LoopForever+0xe>)
 8001e84:	1842      	adds	r2, r0, r1
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d3f6      	bcc.n	8001e78 <CopyDataInit>
 8001e8a:	4a0b      	ldr	r2, [pc, #44]	; (8001eb8 <LoopForever+0x12>)
 8001e8c:	e002      	b.n	8001e94 <LoopFillZerobss>

08001e8e <FillZerobss>:
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f842 3b04 	str.w	r3, [r2], #4

08001e94 <LoopFillZerobss>:
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <LoopForever+0x16>)
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d3f9      	bcc.n	8001e8e <FillZerobss>
 8001e9a:	f7ff ff41 	bl	8001d20 <SystemInit>
 8001e9e:	f008 fe2d 	bl	800aafc <__libc_init_array>
 8001ea2:	f7ff f883 	bl	8000fac <main>

08001ea6 <LoopForever>:
 8001ea6:	e7fe      	b.n	8001ea6 <LoopForever>
 8001ea8:	20018000 	.word	0x20018000
 8001eac:	0800b87c 	.word	0x0800b87c
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	200000ac 	.word	0x200000ac
 8001eb8:	200000ac 	.word	0x200000ac
 8001ebc:	20000ea8 	.word	0x20000ea8

08001ec0 <ADC1_2_IRQHandler>:
 8001ec0:	e7fe      	b.n	8001ec0 <ADC1_2_IRQHandler>
	...

08001ec4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <HAL_Init+0x3c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a0b      	ldr	r2, [pc, #44]	; (8001f00 <HAL_Init+0x3c>)
 8001ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eda:	2003      	movs	r0, #3
 8001edc:	f000 f95c 	bl	8002198 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f000 f80f 	bl	8001f04 <HAL_InitTick>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	71fb      	strb	r3, [r7, #7]
 8001ef0:	e001      	b.n	8001ef6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ef2:	f7ff fe8d 	bl	8001c10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40022000 	.word	0x40022000

08001f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f10:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <HAL_InitTick+0x68>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d022      	beq.n	8001f5e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f18:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <HAL_InitTick+0x6c>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <HAL_InitTick+0x68>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f24:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 f968 	bl	8002202 <HAL_SYSTICK_Config>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10f      	bne.n	8001f58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b0f      	cmp	r3, #15
 8001f3c:	d809      	bhi.n	8001f52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	f04f 30ff 	mov.w	r0, #4294967295
 8001f46:	f000 f932 	bl	80021ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <HAL_InitTick+0x70>)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	e007      	b.n	8001f62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	73fb      	strb	r3, [r7, #15]
 8001f56:	e004      	b.n	8001f62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
 8001f5c:	e001      	b.n	8001f62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000024 	.word	0x20000024
 8001f70:	2000001c 	.word	0x2000001c
 8001f74:	20000020 	.word	0x20000020

08001f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_IncTick+0x1c>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <HAL_IncTick+0x20>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4413      	add	r3, r2
 8001f86:	4a03      	ldr	r2, [pc, #12]	; (8001f94 <HAL_IncTick+0x1c>)
 8001f88:	6013      	str	r3, [r2, #0]
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	20000810 	.word	0x20000810
 8001f98:	20000024 	.word	0x20000024

08001f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <HAL_GetTick+0x14>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20000810 	.word	0x20000810

08001fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fbc:	f7ff ffee 	bl	8001f9c <HAL_GetTick>
 8001fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fcc:	d004      	beq.n	8001fd8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <HAL_Delay+0x40>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fd8:	bf00      	nop
 8001fda:	f7ff ffdf 	bl	8001f9c <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d8f7      	bhi.n	8001fda <HAL_Delay+0x26>
  {
  }
}
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000024 	.word	0x20000024

08001ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002014:	4013      	ands	r3, r2
 8002016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202a:	4a04      	ldr	r2, [pc, #16]	; (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	60d3      	str	r3, [r2, #12]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <__NVIC_GetPriorityGrouping+0x18>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	0a1b      	lsrs	r3, r3, #8
 800204a:	f003 0307 	and.w	r3, r3, #7
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	2b00      	cmp	r3, #0
 800206c:	db0b      	blt.n	8002086 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	f003 021f 	and.w	r2, r3, #31
 8002074:	4907      	ldr	r1, [pc, #28]	; (8002094 <__NVIC_EnableIRQ+0x38>)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	095b      	lsrs	r3, r3, #5
 800207c:	2001      	movs	r0, #1
 800207e:	fa00 f202 	lsl.w	r2, r0, r2
 8002082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000e100 	.word	0xe000e100

08002098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	6039      	str	r1, [r7, #0]
 80020a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	db0a      	blt.n	80020c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	490c      	ldr	r1, [pc, #48]	; (80020e4 <__NVIC_SetPriority+0x4c>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	0112      	lsls	r2, r2, #4
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	440b      	add	r3, r1
 80020bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c0:	e00a      	b.n	80020d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4908      	ldr	r1, [pc, #32]	; (80020e8 <__NVIC_SetPriority+0x50>)
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	3b04      	subs	r3, #4
 80020d0:	0112      	lsls	r2, r2, #4
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	440b      	add	r3, r1
 80020d6:	761a      	strb	r2, [r3, #24]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000e100 	.word	0xe000e100
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f1c3 0307 	rsb	r3, r3, #7
 8002106:	2b04      	cmp	r3, #4
 8002108:	bf28      	it	cs
 800210a:	2304      	movcs	r3, #4
 800210c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3304      	adds	r3, #4
 8002112:	2b06      	cmp	r3, #6
 8002114:	d902      	bls.n	800211c <NVIC_EncodePriority+0x30>
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3b03      	subs	r3, #3
 800211a:	e000      	b.n	800211e <NVIC_EncodePriority+0x32>
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	f04f 32ff 	mov.w	r2, #4294967295
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43da      	mvns	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	401a      	ands	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002134:	f04f 31ff 	mov.w	r1, #4294967295
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	43d9      	mvns	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	4313      	orrs	r3, r2
         );
}
 8002146:	4618      	mov	r0, r3
 8002148:	3724      	adds	r7, #36	; 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002164:	d301      	bcc.n	800216a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002166:	2301      	movs	r3, #1
 8002168:	e00f      	b.n	800218a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800216a:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <SysTick_Config+0x40>)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002172:	210f      	movs	r1, #15
 8002174:	f04f 30ff 	mov.w	r0, #4294967295
 8002178:	f7ff ff8e 	bl	8002098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <SysTick_Config+0x40>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <SysTick_Config+0x40>)
 8002184:	2207      	movs	r2, #7
 8002186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	e000e010 	.word	0xe000e010

08002198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff ff29 	bl	8001ff8 <__NVIC_SetPriorityGrouping>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b086      	sub	sp, #24
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	4603      	mov	r3, r0
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021c0:	f7ff ff3e 	bl	8002040 <__NVIC_GetPriorityGrouping>
 80021c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	6978      	ldr	r0, [r7, #20]
 80021cc:	f7ff ff8e 	bl	80020ec <NVIC_EncodePriority>
 80021d0:	4602      	mov	r2, r0
 80021d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff5d 	bl	8002098 <__NVIC_SetPriority>
}
 80021de:	bf00      	nop
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff31 	bl	800205c <__NVIC_EnableIRQ>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff ffa2 	bl	8002154 <SysTick_Config>
 8002210:	4603      	mov	r3, r0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800221c:	b480      	push	{r7}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800222a:	e17f      	b.n	800252c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	2101      	movs	r1, #1
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	fa01 f303 	lsl.w	r3, r1, r3
 8002238:	4013      	ands	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8171 	beq.w	8002526 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x38>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b12      	cmp	r3, #18
 8002252:	d123      	bne.n	800229c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	08da      	lsrs	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3208      	adds	r2, #8
 800225c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	220f      	movs	r2, #15
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	08da      	lsrs	r2, r3, #3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3208      	adds	r2, #8
 8002296:	6939      	ldr	r1, [r7, #16]
 8002298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0203 	and.w	r2, r3, #3
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d00b      	beq.n	80022f0 <HAL_GPIO_Init+0xd4>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d007      	beq.n	80022f0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022e4:	2b11      	cmp	r3, #17
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b12      	cmp	r3, #18
 80022ee:	d130      	bne.n	8002352 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	2203      	movs	r2, #3
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002326:	2201      	movs	r2, #1
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4013      	ands	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	091b      	lsrs	r3, r3, #4
 800233c:	f003 0201 	and.w	r2, r3, #1
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	2b03      	cmp	r3, #3
 800235c:	d118      	bne.n	8002390 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002362:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002364:	2201      	movs	r2, #1
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	08db      	lsrs	r3, r3, #3
 800237a:	f003 0201 	and.w	r2, r3, #1
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 80ac 	beq.w	8002526 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ce:	4b5e      	ldr	r3, [pc, #376]	; (8002548 <HAL_GPIO_Init+0x32c>)
 80023d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d2:	4a5d      	ldr	r2, [pc, #372]	; (8002548 <HAL_GPIO_Init+0x32c>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6613      	str	r3, [r2, #96]	; 0x60
 80023da:	4b5b      	ldr	r3, [pc, #364]	; (8002548 <HAL_GPIO_Init+0x32c>)
 80023dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023e6:	4a59      	ldr	r2, [pc, #356]	; (800254c <HAL_GPIO_Init+0x330>)
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	089b      	lsrs	r3, r3, #2
 80023ec:	3302      	adds	r3, #2
 80023ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	220f      	movs	r2, #15
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002410:	d025      	beq.n	800245e <HAL_GPIO_Init+0x242>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a4e      	ldr	r2, [pc, #312]	; (8002550 <HAL_GPIO_Init+0x334>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d01f      	beq.n	800245a <HAL_GPIO_Init+0x23e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a4d      	ldr	r2, [pc, #308]	; (8002554 <HAL_GPIO_Init+0x338>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d019      	beq.n	8002456 <HAL_GPIO_Init+0x23a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a4c      	ldr	r2, [pc, #304]	; (8002558 <HAL_GPIO_Init+0x33c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d013      	beq.n	8002452 <HAL_GPIO_Init+0x236>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a4b      	ldr	r2, [pc, #300]	; (800255c <HAL_GPIO_Init+0x340>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00d      	beq.n	800244e <HAL_GPIO_Init+0x232>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a4a      	ldr	r2, [pc, #296]	; (8002560 <HAL_GPIO_Init+0x344>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d007      	beq.n	800244a <HAL_GPIO_Init+0x22e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a49      	ldr	r2, [pc, #292]	; (8002564 <HAL_GPIO_Init+0x348>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d101      	bne.n	8002446 <HAL_GPIO_Init+0x22a>
 8002442:	2306      	movs	r3, #6
 8002444:	e00c      	b.n	8002460 <HAL_GPIO_Init+0x244>
 8002446:	2307      	movs	r3, #7
 8002448:	e00a      	b.n	8002460 <HAL_GPIO_Init+0x244>
 800244a:	2305      	movs	r3, #5
 800244c:	e008      	b.n	8002460 <HAL_GPIO_Init+0x244>
 800244e:	2304      	movs	r3, #4
 8002450:	e006      	b.n	8002460 <HAL_GPIO_Init+0x244>
 8002452:	2303      	movs	r3, #3
 8002454:	e004      	b.n	8002460 <HAL_GPIO_Init+0x244>
 8002456:	2302      	movs	r3, #2
 8002458:	e002      	b.n	8002460 <HAL_GPIO_Init+0x244>
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <HAL_GPIO_Init+0x244>
 800245e:	2300      	movs	r3, #0
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	f002 0203 	and.w	r2, r2, #3
 8002466:	0092      	lsls	r2, r2, #2
 8002468:	4093      	lsls	r3, r2
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002470:	4936      	ldr	r1, [pc, #216]	; (800254c <HAL_GPIO_Init+0x330>)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	089b      	lsrs	r3, r3, #2
 8002476:	3302      	adds	r3, #2
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800247e:	4b3a      	ldr	r3, [pc, #232]	; (8002568 <HAL_GPIO_Init+0x34c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	43db      	mvns	r3, r3
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	4013      	ands	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024a2:	4a31      	ldr	r2, [pc, #196]	; (8002568 <HAL_GPIO_Init+0x34c>)
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80024a8:	4b2f      	ldr	r3, [pc, #188]	; (8002568 <HAL_GPIO_Init+0x34c>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024cc:	4a26      	ldr	r2, [pc, #152]	; (8002568 <HAL_GPIO_Init+0x34c>)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024d2:	4b25      	ldr	r3, [pc, #148]	; (8002568 <HAL_GPIO_Init+0x34c>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	43db      	mvns	r3, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024f6:	4a1c      	ldr	r2, [pc, #112]	; (8002568 <HAL_GPIO_Init+0x34c>)
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024fc:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <HAL_GPIO_Init+0x34c>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	43db      	mvns	r3, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002520:	4a11      	ldr	r2, [pc, #68]	; (8002568 <HAL_GPIO_Init+0x34c>)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	3301      	adds	r3, #1
 800252a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	fa22 f303 	lsr.w	r3, r2, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	f47f ae78 	bne.w	800222c <HAL_GPIO_Init+0x10>
  }
}
 800253c:	bf00      	nop
 800253e:	371c      	adds	r7, #28
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	40021000 	.word	0x40021000
 800254c:	40010000 	.word	0x40010000
 8002550:	48000400 	.word	0x48000400
 8002554:	48000800 	.word	0x48000800
 8002558:	48000c00 	.word	0x48000c00
 800255c:	48001000 	.word	0x48001000
 8002560:	48001400 	.word	0x48001400
 8002564:	48001800 	.word	0x48001800
 8002568:	40010400 	.word	0x40010400

0800256c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	887b      	ldrh	r3, [r7, #2]
 800257e:	4013      	ands	r3, r2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
 8002588:	e001      	b.n	800258e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800258a:	2300      	movs	r3, #0
 800258c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800258e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	807b      	strh	r3, [r7, #2]
 80025a8:	4613      	mov	r3, r2
 80025aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025ac:	787b      	ldrb	r3, [r7, #1]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025b2:	887a      	ldrh	r2, [r7, #2]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025b8:	e002      	b.n	80025c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80025cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ce:	b08f      	sub	sp, #60	; 0x3c
 80025d0:	af0a      	add	r7, sp, #40	; 0x28
 80025d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e054      	b.n	8002688 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d106      	bne.n	80025fe <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f007 ffcb 	bl	800a594 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2203      	movs	r2, #3
 8002602:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d102      	bne.n	8002618 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f005 fb91 	bl	8007d44 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	687e      	ldr	r6, [r7, #4]
 800262a:	466d      	mov	r5, sp
 800262c:	f106 0410 	add.w	r4, r6, #16
 8002630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002632:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002638:	e894 0003 	ldmia.w	r4, {r0, r1}
 800263c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002640:	1d33      	adds	r3, r6, #4
 8002642:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002644:	6838      	ldr	r0, [r7, #0]
 8002646:	f005 fb1a 	bl	8007c7e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2101      	movs	r1, #1
 8002650:	4618      	mov	r0, r3
 8002652:	f005 fb88 	bl	8007d66 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	687e      	ldr	r6, [r7, #4]
 800265e:	466d      	mov	r5, sp
 8002660:	f106 0410 	add.w	r4, r6, #16
 8002664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800266a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800266c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002670:	e885 0003 	stmia.w	r5, {r0, r1}
 8002674:	1d33      	adds	r3, r6, #4
 8002676:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002678:	6838      	ldr	r0, [r7, #0]
 800267a:	f005 fc97 	bl	8007fac <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002690 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002690:	b590      	push	{r4, r7, lr}
 8002692:	b089      	sub	sp, #36	; 0x24
 8002694:	af04      	add	r7, sp, #16
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	4608      	mov	r0, r1
 800269a:	4611      	mov	r1, r2
 800269c:	461a      	mov	r2, r3
 800269e:	4603      	mov	r3, r0
 80026a0:	70fb      	strb	r3, [r7, #3]
 80026a2:	460b      	mov	r3, r1
 80026a4:	70bb      	strb	r3, [r7, #2]
 80026a6:	4613      	mov	r3, r2
 80026a8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_HCD_HC_Init+0x28>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e07f      	b.n	80027b8 <HAL_HCD_HC_Init+0x128>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80026c0:	78fa      	ldrb	r2, [r7, #3]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	440b      	add	r3, r1
 80026ce:	333d      	adds	r3, #61	; 0x3d
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	440b      	add	r3, r1
 80026e2:	3338      	adds	r3, #56	; 0x38
 80026e4:	787a      	ldrb	r2, [r7, #1]
 80026e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80026e8:	78fa      	ldrb	r2, [r7, #3]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	440b      	add	r3, r1
 80026f6:	3340      	adds	r3, #64	; 0x40
 80026f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80026fa:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	440b      	add	r3, r1
 800270a:	3339      	adds	r3, #57	; 0x39
 800270c:	78fa      	ldrb	r2, [r7, #3]
 800270e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	440b      	add	r3, r1
 800271e:	333f      	adds	r3, #63	; 0x3f
 8002720:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002724:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002726:	78fa      	ldrb	r2, [r7, #3]
 8002728:	78bb      	ldrb	r3, [r7, #2]
 800272a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800272e:	b2d8      	uxtb	r0, r3
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	440b      	add	r3, r1
 800273c:	333a      	adds	r3, #58	; 0x3a
 800273e:	4602      	mov	r2, r0
 8002740:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002742:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002746:	2b00      	cmp	r3, #0
 8002748:	da0a      	bge.n	8002760 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	440b      	add	r3, r1
 8002758:	333b      	adds	r3, #59	; 0x3b
 800275a:	2201      	movs	r2, #1
 800275c:	701a      	strb	r2, [r3, #0]
 800275e:	e009      	b.n	8002774 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	440b      	add	r3, r1
 800276e:	333b      	adds	r3, #59	; 0x3b
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	440b      	add	r3, r1
 8002782:	333c      	adds	r3, #60	; 0x3c
 8002784:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002788:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	787c      	ldrb	r4, [r7, #1]
 8002790:	78ba      	ldrb	r2, [r7, #2]
 8002792:	78f9      	ldrb	r1, [r7, #3]
 8002794:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002796:	9302      	str	r3, [sp, #8]
 8002798:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	4623      	mov	r3, r4
 80027a6:	f005 fd45 	bl	8008234 <USB_HC_Init>
 80027aa:	4603      	mov	r3, r0
 80027ac:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd90      	pop	{r4, r7, pc}

080027c0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_HCD_HC_Halt+0x1e>
 80027da:	2302      	movs	r3, #2
 80027dc:	e00f      	b.n	80027fe <HAL_HCD_HC_Halt+0x3e>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f005 ff23 	bl	800863a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	4608      	mov	r0, r1
 8002812:	4611      	mov	r1, r2
 8002814:	461a      	mov	r2, r3
 8002816:	4603      	mov	r3, r0
 8002818:	70fb      	strb	r3, [r7, #3]
 800281a:	460b      	mov	r3, r1
 800281c:	70bb      	strb	r3, [r7, #2]
 800281e:	4613      	mov	r3, r2
 8002820:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8002822:	78fa      	ldrb	r2, [r7, #3]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	440b      	add	r3, r1
 8002830:	333b      	adds	r3, #59	; 0x3b
 8002832:	78ba      	ldrb	r2, [r7, #2]
 8002834:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002836:	78fa      	ldrb	r2, [r7, #3]
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	440b      	add	r3, r1
 8002844:	333f      	adds	r3, #63	; 0x3f
 8002846:	787a      	ldrb	r2, [r7, #1]
 8002848:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800284a:	7c3b      	ldrb	r3, [r7, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	440b      	add	r3, r1
 800285e:	3342      	adds	r3, #66	; 0x42
 8002860:	2203      	movs	r2, #3
 8002862:	701a      	strb	r2, [r3, #0]
 8002864:	e009      	b.n	800287a <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	3342      	adds	r3, #66	; 0x42
 8002876:	2202      	movs	r2, #2
 8002878:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800287a:	787b      	ldrb	r3, [r7, #1]
 800287c:	2b03      	cmp	r3, #3
 800287e:	f200 80d6 	bhi.w	8002a2e <HAL_HCD_HC_SubmitRequest+0x226>
 8002882:	a201      	add	r2, pc, #4	; (adr r2, 8002888 <HAL_HCD_HC_SubmitRequest+0x80>)
 8002884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002888:	08002899 	.word	0x08002899
 800288c:	08002a19 	.word	0x08002a19
 8002890:	08002905 	.word	0x08002905
 8002894:	0800298f 	.word	0x0800298f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002898:	7c3b      	ldrb	r3, [r7, #16]
 800289a:	2b01      	cmp	r3, #1
 800289c:	f040 80c9 	bne.w	8002a32 <HAL_HCD_HC_SubmitRequest+0x22a>
 80028a0:	78bb      	ldrb	r3, [r7, #2]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f040 80c5 	bne.w	8002a32 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 80028a8:	8b3b      	ldrh	r3, [r7, #24]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80028ae:	78fa      	ldrb	r2, [r7, #3]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	440b      	add	r3, r1
 80028bc:	3351      	adds	r3, #81	; 0x51
 80028be:	2201      	movs	r2, #1
 80028c0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028c2:	78fa      	ldrb	r2, [r7, #3]
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	440b      	add	r3, r1
 80028d0:	3351      	adds	r3, #81	; 0x51
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10a      	bne.n	80028ee <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028d8:	78fa      	ldrb	r2, [r7, #3]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	440b      	add	r3, r1
 80028e6:	3342      	adds	r3, #66	; 0x42
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80028ec:	e0a1      	b.n	8002a32 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028ee:	78fa      	ldrb	r2, [r7, #3]
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	440b      	add	r3, r1
 80028fc:	3342      	adds	r3, #66	; 0x42
 80028fe:	2202      	movs	r2, #2
 8002900:	701a      	strb	r2, [r3, #0]
      break;
 8002902:	e096      	b.n	8002a32 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002904:	78bb      	ldrb	r3, [r7, #2]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d120      	bne.n	800294c <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	440b      	add	r3, r1
 8002918:	3351      	adds	r3, #81	; 0x51
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10a      	bne.n	8002936 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002920:	78fa      	ldrb	r2, [r7, #3]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	440b      	add	r3, r1
 800292e:	3342      	adds	r3, #66	; 0x42
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002934:	e07e      	b.n	8002a34 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002936:	78fa      	ldrb	r2, [r7, #3]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	440b      	add	r3, r1
 8002944:	3342      	adds	r3, #66	; 0x42
 8002946:	2202      	movs	r2, #2
 8002948:	701a      	strb	r2, [r3, #0]
      break;
 800294a:	e073      	b.n	8002a34 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	440b      	add	r3, r1
 800295a:	3350      	adds	r3, #80	; 0x50
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10a      	bne.n	8002978 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002962:	78fa      	ldrb	r2, [r7, #3]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	440b      	add	r3, r1
 8002970:	3342      	adds	r3, #66	; 0x42
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
      break;
 8002976:	e05d      	b.n	8002a34 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	440b      	add	r3, r1
 8002986:	3342      	adds	r3, #66	; 0x42
 8002988:	2202      	movs	r2, #2
 800298a:	701a      	strb	r2, [r3, #0]
      break;
 800298c:	e052      	b.n	8002a34 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800298e:	78bb      	ldrb	r3, [r7, #2]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d120      	bne.n	80029d6 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	440b      	add	r3, r1
 80029a2:	3351      	adds	r3, #81	; 0x51
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10a      	bne.n	80029c0 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029aa:	78fa      	ldrb	r2, [r7, #3]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	440b      	add	r3, r1
 80029b8:	3342      	adds	r3, #66	; 0x42
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80029be:	e039      	b.n	8002a34 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029c0:	78fa      	ldrb	r2, [r7, #3]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	440b      	add	r3, r1
 80029ce:	3342      	adds	r3, #66	; 0x42
 80029d0:	2202      	movs	r2, #2
 80029d2:	701a      	strb	r2, [r3, #0]
      break;
 80029d4:	e02e      	b.n	8002a34 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	440b      	add	r3, r1
 80029e4:	3350      	adds	r3, #80	; 0x50
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10a      	bne.n	8002a02 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	440b      	add	r3, r1
 80029fa:	3342      	adds	r3, #66	; 0x42
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
      break;
 8002a00:	e018      	b.n	8002a34 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a02:	78fa      	ldrb	r2, [r7, #3]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	440b      	add	r3, r1
 8002a10:	3342      	adds	r3, #66	; 0x42
 8002a12:	2202      	movs	r2, #2
 8002a14:	701a      	strb	r2, [r3, #0]
      break;
 8002a16:	e00d      	b.n	8002a34 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	440b      	add	r3, r1
 8002a26:	3342      	adds	r3, #66	; 0x42
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
      break;
 8002a2c:	e002      	b.n	8002a34 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8002a2e:	bf00      	nop
 8002a30:	e000      	b.n	8002a34 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8002a32:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	440b      	add	r3, r1
 8002a42:	3344      	adds	r3, #68	; 0x44
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002a48:	78fa      	ldrb	r2, [r7, #3]
 8002a4a:	8b39      	ldrh	r1, [r7, #24]
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4403      	add	r3, r0
 8002a58:	3348      	adds	r3, #72	; 0x48
 8002a5a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002a5c:	78fa      	ldrb	r2, [r7, #3]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	440b      	add	r3, r1
 8002a6a:	335c      	adds	r3, #92	; 0x5c
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002a70:	78fa      	ldrb	r2, [r7, #3]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	440b      	add	r3, r1
 8002a7e:	334c      	adds	r3, #76	; 0x4c
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a84:	78fa      	ldrb	r2, [r7, #3]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	440b      	add	r3, r1
 8002a92:	3339      	adds	r3, #57	; 0x39
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	440b      	add	r3, r1
 8002aa6:	335d      	adds	r3, #93	; 0x5d
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6818      	ldr	r0, [r3, #0]
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	3338      	adds	r3, #56	; 0x38
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	4413      	add	r3, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f005 fca9 	bl	8008418 <USB_HC_StartXfer>
 8002ac6:	4603      	mov	r3, r0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f005 fa1d 	bl	8007f26 <USB_GetMode>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	f040 80f1 	bne.w	8002cd6 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f005 fa01 	bl	8007f00 <USB_ReadInterrupts>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80e7 	beq.w	8002cd4 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f005 f9f8 	bl	8007f00 <USB_ReadInterrupts>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b1a:	d104      	bne.n	8002b26 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f005 f9e8 	bl	8007f00 <USB_ReadInterrupts>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b3a:	d104      	bne.n	8002b46 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f005 f9d8 	bl	8007f00 <USB_ReadInterrupts>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b5a:	d104      	bne.n	8002b66 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f005 f9c8 	bl	8007f00 <USB_ReadInterrupts>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d103      	bne.n	8002b82 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f005 f9ba 	bl	8007f00 <USB_ReadInterrupts>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b96:	d117      	bne.n	8002bc8 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002ba6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002baa:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f007 fd73 	bl	800a698 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f005 fa75 	bl	80080a8 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002bc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f005 f997 	bl	8007f00 <USB_ReadInterrupts>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bdc:	d102      	bne.n	8002be4 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f001 f884 	bl	8003cec <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f005 f989 	bl	8007f00 <USB_ReadInterrupts>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f003 0308 	and.w	r3, r3, #8
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d106      	bne.n	8002c06 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f007 fd31 	bl	800a660 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2208      	movs	r2, #8
 8002c04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f005 f978 	bl	8007f00 <USB_ReadInterrupts>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c1a:	d138      	bne.n	8002c8e <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f005 fcf9 	bl	8008618 <USB_HC_ReadInterrupt>
 8002c26:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	e025      	b.n	8002c7a <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d018      	beq.n	8002c74 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c58:	d106      	bne.n	8002c68 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f8cf 	bl	8002e04 <HCD_HC_IN_IRQHandler>
 8002c66:	e005      	b.n	8002c74 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fc3b 	bl	80034ea <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	3301      	adds	r3, #1
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d3d4      	bcc.n	8002c2e <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f005 f934 	bl	8007f00 <USB_ReadInterrupts>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	2b10      	cmp	r3, #16
 8002ca0:	d101      	bne.n	8002ca6 <HAL_HCD_IRQHandler+0x1d6>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <HAL_HCD_IRQHandler+0x1d8>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d014      	beq.n	8002cd6 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699a      	ldr	r2, [r3, #24]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0210 	bic.w	r2, r2, #16
 8002cba:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 ff69 	bl	8003b94 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699a      	ldr	r2, [r3, #24]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f042 0210 	orr.w	r2, r2, #16
 8002cd0:	619a      	str	r2, [r3, #24]
 8002cd2:	e000      	b.n	8002cd6 <HAL_HCD_IRQHandler+0x206>
      return;
 8002cd4:	bf00      	nop
    }
  }
}
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_HCD_Start+0x16>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e013      	b.n	8002d1a <HAL_HCD_Start+0x3e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f005 f80f 	bl	8007d22 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2101      	movs	r1, #1
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f005 fa30 	bl	8008170 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_HCD_Stop+0x16>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e00d      	b.n	8002d54 <HAL_HCD_Stop+0x32>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f005 fd77 	bl	8008838 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f005 f9d7 	bl	800811c <USB_ResetPort>
 8002d6e:	4603      	mov	r3, r0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002d84:	78fa      	ldrb	r2, [r7, #3]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	440b      	add	r3, r1
 8002d92:	335c      	adds	r3, #92	; 0x5c
 8002d94:	781b      	ldrb	r3, [r3, #0]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	460b      	mov	r3, r1
 8002dac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002dae:	78fa      	ldrb	r2, [r7, #3]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	440b      	add	r3, r1
 8002dbc:	334c      	adds	r3, #76	; 0x4c
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f005 fa19 	bl	8008210 <USB_GetCurrentFrame>
 8002dde:	4603      	mov	r3, r0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f005 f9f4 	bl	80081e2 <USB_GetHostSpeed>
 8002dfa:	4603      	mov	r3, r0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002e1a:	78fb      	ldrb	r3, [r7, #3]
 8002e1c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d119      	bne.n	8002e68 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e40:	461a      	mov	r2, r3
 8002e42:	2304      	movs	r3, #4
 8002e44:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	0151      	lsls	r1, r2, #5
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	440a      	add	r2, r1
 8002e5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e60:	f043 0302 	orr.w	r3, r3, #2
 8002e64:	60d3      	str	r3, [r2, #12]
 8002e66:	e095      	b.n	8002f94 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	d109      	bne.n	8002e92 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	2320      	movs	r3, #32
 8002e8e:	6093      	str	r3, [r2, #8]
 8002e90:	e080      	b.n	8002f94 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d134      	bne.n	8002f12 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	0151      	lsls	r1, r2, #5
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	440a      	add	r2, r1
 8002ebe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ec2:	f043 0302 	orr.w	r3, r3, #2
 8002ec6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	440b      	add	r3, r1
 8002ed6:	335d      	adds	r3, #93	; 0x5d
 8002ed8:	2205      	movs	r2, #5
 8002eda:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee8:	461a      	mov	r2, r3
 8002eea:	2310      	movs	r3, #16
 8002eec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efa:	461a      	mov	r2, r3
 8002efc:	2308      	movs	r3, #8
 8002efe:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	4611      	mov	r1, r2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f005 fb95 	bl	800863a <USB_HC_Halt>
 8002f10:	e040      	b.n	8002f94 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f28:	d134      	bne.n	8002f94 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	0151      	lsls	r1, r2, #5
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	440a      	add	r2, r1
 8002f40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f44:	f043 0302 	orr.w	r3, r3, #2
 8002f48:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f005 fb70 	bl	800863a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f66:	461a      	mov	r2, r3
 8002f68:	2310      	movs	r3, #16
 8002f6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	440b      	add	r3, r1
 8002f7a:	335d      	adds	r3, #93	; 0x5d
 8002f7c:	2208      	movs	r2, #8
 8002f7e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f92:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002faa:	d122      	bne.n	8002ff2 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	0151      	lsls	r1, r2, #5
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	440a      	add	r2, r1
 8002fc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fc6:	f043 0302 	orr.w	r3, r3, #2
 8002fca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f005 fb2f 	bl	800863a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe8:	461a      	mov	r2, r3
 8002fea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fee:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002ff0:	e277      	b.n	80034e2 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b01      	cmp	r3, #1
 8003006:	f040 80a1 	bne.w	800314c <HCD_HC_IN_IRQHandler+0x348>
    hhcd->hc[ch_num].state = HC_XFRC;
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	440b      	add	r3, r1
 8003018:	335d      	adds	r3, #93	; 0x5d
 800301a:	2201      	movs	r2, #1
 800301c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	440b      	add	r3, r1
 800302c:	3358      	adds	r3, #88	; 0x58
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4413      	add	r3, r2
 800303a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303e:	461a      	mov	r2, r3
 8003040:	2301      	movs	r3, #1
 8003042:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	440b      	add	r3, r1
 8003052:	333f      	adds	r3, #63	; 0x3f
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <HCD_HC_IN_IRQHandler+0x26c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	440b      	add	r3, r1
 8003068:	333f      	adds	r3, #63	; 0x3f
 800306a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800306c:	2b02      	cmp	r3, #2
 800306e:	d121      	bne.n	80030b4 <HCD_HC_IN_IRQHandler+0x2b0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4413      	add	r3, r2
 8003078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	0151      	lsls	r1, r2, #5
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	440a      	add	r2, r1
 8003086:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800308a:	f043 0302 	orr.w	r3, r3, #2
 800308e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f005 facd 	bl	800863a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ac:	461a      	mov	r2, r3
 80030ae:	2310      	movs	r3, #16
 80030b0:	6093      	str	r3, [r2, #8]
 80030b2:	e034      	b.n	800311e <HCD_HC_IN_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	440b      	add	r3, r1
 80030c2:	333f      	adds	r3, #63	; 0x3f
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	d129      	bne.n	800311e <HCD_HC_IN_IRQHandler+0x31a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	0151      	lsls	r1, r2, #5
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	440a      	add	r2, r1
 80030e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030e8:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	440b      	add	r3, r1
 80030f8:	335c      	adds	r3, #92	; 0x5c
 80030fa:	2201      	movs	r2, #1
 80030fc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	b2d8      	uxtb	r0, r3
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	440b      	add	r3, r1
 8003110:	335c      	adds	r3, #92	; 0x5c
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	4601      	mov	r1, r0
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f007 facb 	bl	800a6b4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	440b      	add	r3, r1
 800312c:	3350      	adds	r3, #80	; 0x50
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	f083 0301 	eor.w	r3, r3, #1
 8003134:	b2d8      	uxtb	r0, r3
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	440b      	add	r3, r1
 8003144:	3350      	adds	r3, #80	; 0x50
 8003146:	4602      	mov	r2, r0
 8003148:	701a      	strb	r2, [r3, #0]
}
 800314a:	e1ca      	b.n	80034e2 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4413      	add	r3, r2
 8003154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b02      	cmp	r3, #2
 8003160:	f040 80f1 	bne.w	8003346 <HCD_HC_IN_IRQHandler+0x542>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	4413      	add	r3, r2
 800316c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	0151      	lsls	r1, r2, #5
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	440a      	add	r2, r1
 800317a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800317e:	f023 0302 	bic.w	r3, r3, #2
 8003182:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	440b      	add	r3, r1
 8003192:	335d      	adds	r3, #93	; 0x5d
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d10a      	bne.n	80031b0 <HCD_HC_IN_IRQHandler+0x3ac>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	440b      	add	r3, r1
 80031a8:	335c      	adds	r3, #92	; 0x5c
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]
 80031ae:	e0b0      	b.n	8003312 <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	440b      	add	r3, r1
 80031be:	335d      	adds	r3, #93	; 0x5d
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b05      	cmp	r3, #5
 80031c4:	d10a      	bne.n	80031dc <HCD_HC_IN_IRQHandler+0x3d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	440b      	add	r3, r1
 80031d4:	335c      	adds	r3, #92	; 0x5c
 80031d6:	2205      	movs	r2, #5
 80031d8:	701a      	strb	r2, [r3, #0]
 80031da:	e09a      	b.n	8003312 <HCD_HC_IN_IRQHandler+0x50e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	440b      	add	r3, r1
 80031ea:	335d      	adds	r3, #93	; 0x5d
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b06      	cmp	r3, #6
 80031f0:	d00a      	beq.n	8003208 <HCD_HC_IN_IRQHandler+0x404>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	440b      	add	r3, r1
 8003200:	335d      	adds	r3, #93	; 0x5d
 8003202:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003204:	2b08      	cmp	r3, #8
 8003206:	d156      	bne.n	80032b6 <HCD_HC_IN_IRQHandler+0x4b2>
      hhcd->hc[ch_num].ErrCnt++;
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	440b      	add	r3, r1
 8003216:	3358      	adds	r3, #88	; 0x58
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	1c59      	adds	r1, r3, #1
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	4403      	add	r3, r0
 800322a:	3358      	adds	r3, #88	; 0x58
 800322c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	440b      	add	r3, r1
 800323c:	3358      	adds	r3, #88	; 0x58
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b03      	cmp	r3, #3
 8003242:	d914      	bls.n	800326e <HCD_HC_IN_IRQHandler+0x46a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	440b      	add	r3, r1
 8003252:	3358      	adds	r3, #88	; 0x58
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	440b      	add	r3, r1
 8003266:	335c      	adds	r3, #92	; 0x5c
 8003268:	2204      	movs	r2, #4
 800326a:	701a      	strb	r2, [r3, #0]
 800326c:	e009      	b.n	8003282 <HCD_HC_IN_IRQHandler+0x47e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	440b      	add	r3, r1
 800327c:	335c      	adds	r3, #92	; 0x5c
 800327e:	2202      	movs	r2, #2
 8003280:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4413      	add	r3, r2
 800328a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003298:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032a0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ae:	461a      	mov	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	e02d      	b.n	8003312 <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	440b      	add	r3, r1
 80032c4:	335d      	adds	r3, #93	; 0x5d
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d122      	bne.n	8003312 <HCD_HC_IN_IRQHandler+0x50e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	440b      	add	r3, r1
 80032da:	335c      	adds	r3, #92	; 0x5c
 80032dc:	2202      	movs	r2, #2
 80032de:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032f6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032fe:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	4413      	add	r3, r2
 8003308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330c:	461a      	mov	r2, r3
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4413      	add	r3, r2
 800331a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331e:	461a      	mov	r2, r3
 8003320:	2302      	movs	r3, #2
 8003322:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	b2d8      	uxtb	r0, r3
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	440b      	add	r3, r1
 8003336:	335c      	adds	r3, #92	; 0x5c
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	4601      	mov	r1, r0
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f007 f9b8 	bl	800a6b4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003344:	e0cd      	b.n	80034e2 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003358:	2b80      	cmp	r3, #128	; 0x80
 800335a:	d13e      	bne.n	80033da <HCD_HC_IN_IRQHandler+0x5d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4413      	add	r3, r2
 8003364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	0151      	lsls	r1, r2, #5
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	440a      	add	r2, r1
 8003372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003376:	f043 0302 	orr.w	r3, r3, #2
 800337a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	440b      	add	r3, r1
 800338a:	3358      	adds	r3, #88	; 0x58
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	1c59      	adds	r1, r3, #1
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	4403      	add	r3, r0
 800339e:	3358      	adds	r3, #88	; 0x58
 80033a0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	440b      	add	r3, r1
 80033b0:	335d      	adds	r3, #93	; 0x5d
 80033b2:	2206      	movs	r2, #6
 80033b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	4611      	mov	r1, r2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f005 f93a 	bl	800863a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d2:	461a      	mov	r2, r3
 80033d4:	2380      	movs	r3, #128	; 0x80
 80033d6:	6093      	str	r3, [r2, #8]
}
 80033d8:	e083      	b.n	80034e2 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b10      	cmp	r3, #16
 80033ee:	d178      	bne.n	80034e2 <HCD_HC_IN_IRQHandler+0x6de>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	440b      	add	r3, r1
 80033fe:	333f      	adds	r3, #63	; 0x3f
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b03      	cmp	r3, #3
 8003404:	d122      	bne.n	800344c <HCD_HC_IN_IRQHandler+0x648>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	440b      	add	r3, r1
 8003414:	3358      	adds	r3, #88	; 0x58
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4413      	add	r3, r2
 8003422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	0151      	lsls	r1, r2, #5
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	440a      	add	r2, r1
 8003430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003434:	f043 0302 	orr.w	r3, r3, #2
 8003438:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	4611      	mov	r1, r2
 8003444:	4618      	mov	r0, r3
 8003446:	f005 f8f8 	bl	800863a <USB_HC_Halt>
 800344a:	e041      	b.n	80034d0 <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	440b      	add	r3, r1
 800345a:	333f      	adds	r3, #63	; 0x3f
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <HCD_HC_IN_IRQHandler+0x674>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4613      	mov	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	440b      	add	r3, r1
 8003470:	333f      	adds	r3, #63	; 0x3f
 8003472:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003474:	2b02      	cmp	r3, #2
 8003476:	d12b      	bne.n	80034d0 <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	440b      	add	r3, r1
 8003486:	3358      	adds	r3, #88	; 0x58
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	440b      	add	r3, r1
 800349a:	335d      	adds	r3, #93	; 0x5d
 800349c:	2203      	movs	r2, #3
 800349e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	0151      	lsls	r1, r2, #5
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	440a      	add	r2, r1
 80034b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034ba:	f043 0302 	orr.w	r3, r3, #2
 80034be:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	4611      	mov	r1, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f005 f8b5 	bl	800863a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034dc:	461a      	mov	r2, r3
 80034de:	2310      	movs	r3, #16
 80034e0:	6093      	str	r3, [r2, #8]
}
 80034e2:	bf00      	nop
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b086      	sub	sp, #24
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	460b      	mov	r3, r1
 80034f4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4413      	add	r3, r2
 800350c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b04      	cmp	r3, #4
 8003518:	d119      	bne.n	800354e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	015a      	lsls	r2, r3, #5
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	4413      	add	r3, r2
 8003522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003526:	461a      	mov	r2, r3
 8003528:	2304      	movs	r3, #4
 800352a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4413      	add	r3, r2
 8003534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	0151      	lsls	r1, r2, #5
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	440a      	add	r2, r1
 8003542:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003546:	f043 0302 	orr.w	r3, r3, #2
 800354a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800354c:	e31e      	b.n	8003b8c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	015a      	lsls	r2, r3, #5
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4413      	add	r3, r2
 8003556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 0320 	and.w	r3, r3, #32
 8003560:	2b20      	cmp	r3, #32
 8003562:	d141      	bne.n	80035e8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	4413      	add	r3, r2
 800356c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003570:	461a      	mov	r2, r3
 8003572:	2320      	movs	r3, #32
 8003574:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4613      	mov	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	440b      	add	r3, r1
 8003584:	333d      	adds	r3, #61	; 0x3d
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b01      	cmp	r3, #1
 800358a:	f040 82ff 	bne.w	8003b8c <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	440b      	add	r3, r1
 800359c:	333d      	adds	r3, #61	; 0x3d
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	440b      	add	r3, r1
 80035b0:	335c      	adds	r3, #92	; 0x5c
 80035b2:	2202      	movs	r2, #2
 80035b4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	0151      	lsls	r1, r2, #5
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	440a      	add	r2, r1
 80035cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035d0:	f043 0302 	orr.w	r3, r3, #2
 80035d4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	4611      	mov	r1, r2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f005 f82a 	bl	800863a <USB_HC_Halt>
}
 80035e6:	e2d1      	b.n	8003b8c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fa:	2b40      	cmp	r3, #64	; 0x40
 80035fc:	d13f      	bne.n	800367e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	440b      	add	r3, r1
 800360c:	335d      	adds	r3, #93	; 0x5d
 800360e:	2204      	movs	r2, #4
 8003610:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	440b      	add	r3, r1
 8003620:	333d      	adds	r3, #61	; 0x3d
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	440b      	add	r3, r1
 8003634:	3358      	adds	r3, #88	; 0x58
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4413      	add	r3, r2
 8003642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	0151      	lsls	r1, r2, #5
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	440a      	add	r2, r1
 8003650:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003654:	f043 0302 	orr.w	r3, r3, #2
 8003658:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f004 ffe8 	bl	800863a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4413      	add	r3, r2
 8003672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003676:	461a      	mov	r2, r3
 8003678:	2340      	movs	r3, #64	; 0x40
 800367a:	6093      	str	r3, [r2, #8]
}
 800367c:	e286      	b.n	8003b8c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4413      	add	r3, r2
 8003686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003694:	d122      	bne.n	80036dc <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4413      	add	r3, r2
 800369e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	0151      	lsls	r1, r2, #5
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	440a      	add	r2, r1
 80036ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036b0:	f043 0302 	orr.w	r3, r3, #2
 80036b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	4611      	mov	r1, r2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f004 ffba 	bl	800863a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d2:	461a      	mov	r2, r3
 80036d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036d8:	6093      	str	r3, [r2, #8]
}
 80036da:	e257      	b.n	8003b8c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d135      	bne.n	800375e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	440b      	add	r3, r1
 8003700:	3358      	adds	r3, #88	; 0x58
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4413      	add	r3, r2
 800370e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	0151      	lsls	r1, r2, #5
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	440a      	add	r2, r1
 800371c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003720:	f043 0302 	orr.w	r3, r3, #2
 8003724:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	4611      	mov	r1, r2
 8003730:	4618      	mov	r0, r3
 8003732:	f004 ff82 	bl	800863a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4413      	add	r3, r2
 800373e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003742:	461a      	mov	r2, r3
 8003744:	2301      	movs	r3, #1
 8003746:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	440b      	add	r3, r1
 8003756:	335d      	adds	r3, #93	; 0x5d
 8003758:	2201      	movs	r2, #1
 800375a:	701a      	strb	r2, [r3, #0]
}
 800375c:	e216      	b.n	8003b8c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4413      	add	r3, r2
 8003766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b08      	cmp	r3, #8
 8003772:	d12b      	bne.n	80037cc <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	4413      	add	r3, r2
 800377c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003780:	461a      	mov	r2, r3
 8003782:	2308      	movs	r3, #8
 8003784:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4413      	add	r3, r2
 800378e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	0151      	lsls	r1, r2, #5
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	440a      	add	r2, r1
 800379c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037a0:	f043 0302 	orr.w	r3, r3, #2
 80037a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	4611      	mov	r1, r2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f004 ff42 	bl	800863a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	440b      	add	r3, r1
 80037c4:	335d      	adds	r3, #93	; 0x5d
 80037c6:	2205      	movs	r2, #5
 80037c8:	701a      	strb	r2, [r3, #0]
}
 80037ca:	e1df      	b.n	8003b8c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 0310 	and.w	r3, r3, #16
 80037de:	2b10      	cmp	r3, #16
 80037e0:	d135      	bne.n	800384e <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	440b      	add	r3, r1
 80037f0:	3358      	adds	r3, #88	; 0x58
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4613      	mov	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	440b      	add	r3, r1
 8003804:	335d      	adds	r3, #93	; 0x5d
 8003806:	2203      	movs	r2, #3
 8003808:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	4413      	add	r3, r2
 8003812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	0151      	lsls	r1, r2, #5
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	440a      	add	r2, r1
 8003820:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003824:	f043 0302 	orr.w	r3, r3, #2
 8003828:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	4611      	mov	r1, r2
 8003834:	4618      	mov	r0, r3
 8003836:	f004 ff00 	bl	800863a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	4413      	add	r3, r2
 8003842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003846:	461a      	mov	r2, r3
 8003848:	2310      	movs	r3, #16
 800384a:	6093      	str	r3, [r2, #8]
}
 800384c:	e19e      	b.n	8003b8c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4413      	add	r3, r2
 8003856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003860:	2b80      	cmp	r3, #128	; 0x80
 8003862:	d12b      	bne.n	80038bc <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	4413      	add	r3, r2
 800386c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	0151      	lsls	r1, r2, #5
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	440a      	add	r2, r1
 800387a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800387e:	f043 0302 	orr.w	r3, r3, #2
 8003882:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	4611      	mov	r1, r2
 800388e:	4618      	mov	r0, r3
 8003890:	f004 fed3 	bl	800863a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	440b      	add	r3, r1
 80038a2:	335d      	adds	r3, #93	; 0x5d
 80038a4:	2206      	movs	r2, #6
 80038a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b4:	461a      	mov	r2, r3
 80038b6:	2380      	movs	r3, #128	; 0x80
 80038b8:	6093      	str	r3, [r2, #8]
}
 80038ba:	e167      	b.n	8003b8c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d2:	d135      	bne.n	8003940 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	0151      	lsls	r1, r2, #5
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	440a      	add	r2, r1
 80038ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038ee:	f043 0302 	orr.w	r3, r3, #2
 80038f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	4611      	mov	r1, r2
 80038fe:	4618      	mov	r0, r3
 8003900:	f004 fe9b 	bl	800863a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4413      	add	r3, r2
 800390c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003910:	461a      	mov	r2, r3
 8003912:	2310      	movs	r3, #16
 8003914:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4413      	add	r3, r2
 800391e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003922:	461a      	mov	r2, r3
 8003924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003928:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	440b      	add	r3, r1
 8003938:	335d      	adds	r3, #93	; 0x5d
 800393a:	2208      	movs	r2, #8
 800393c:	701a      	strb	r2, [r3, #0]
}
 800393e:	e125      	b.n	8003b8c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4413      	add	r3, r2
 8003948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b02      	cmp	r3, #2
 8003954:	f040 811a 	bne.w	8003b8c <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4413      	add	r3, r2
 8003960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	0151      	lsls	r1, r2, #5
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	440a      	add	r2, r1
 800396e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003972:	f023 0302 	bic.w	r3, r3, #2
 8003976:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	440b      	add	r3, r1
 8003986:	335d      	adds	r3, #93	; 0x5d
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d137      	bne.n	80039fe <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	440b      	add	r3, r1
 800399c:	335c      	adds	r3, #92	; 0x5c
 800399e:	2201      	movs	r2, #1
 80039a0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	440b      	add	r3, r1
 80039b0:	333f      	adds	r3, #63	; 0x3f
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d00b      	beq.n	80039d0 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	440b      	add	r3, r1
 80039c6:	333f      	adds	r3, #63	; 0x3f
 80039c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	f040 80c5 	bne.w	8003b5a <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4613      	mov	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	440b      	add	r3, r1
 80039de:	3351      	adds	r3, #81	; 0x51
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	f083 0301 	eor.w	r3, r3, #1
 80039e6:	b2d8      	uxtb	r0, r3
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	440b      	add	r3, r1
 80039f6:	3351      	adds	r3, #81	; 0x51
 80039f8:	4602      	mov	r2, r0
 80039fa:	701a      	strb	r2, [r3, #0]
 80039fc:	e0ad      	b.n	8003b5a <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	440b      	add	r3, r1
 8003a0c:	335d      	adds	r3, #93	; 0x5d
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d10a      	bne.n	8003a2a <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	440b      	add	r3, r1
 8003a22:	335c      	adds	r3, #92	; 0x5c
 8003a24:	2202      	movs	r2, #2
 8003a26:	701a      	strb	r2, [r3, #0]
 8003a28:	e097      	b.n	8003b5a <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	440b      	add	r3, r1
 8003a38:	335d      	adds	r3, #93	; 0x5d
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d10a      	bne.n	8003a56 <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	440b      	add	r3, r1
 8003a4e:	335c      	adds	r3, #92	; 0x5c
 8003a50:	2202      	movs	r2, #2
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	e081      	b.n	8003b5a <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	440b      	add	r3, r1
 8003a64:	335d      	adds	r3, #93	; 0x5d
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b05      	cmp	r3, #5
 8003a6a:	d10a      	bne.n	8003a82 <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	440b      	add	r3, r1
 8003a7a:	335c      	adds	r3, #92	; 0x5c
 8003a7c:	2205      	movs	r2, #5
 8003a7e:	701a      	strb	r2, [r3, #0]
 8003a80:	e06b      	b.n	8003b5a <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	440b      	add	r3, r1
 8003a90:	335d      	adds	r3, #93	; 0x5d
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b06      	cmp	r3, #6
 8003a96:	d00a      	beq.n	8003aae <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	440b      	add	r3, r1
 8003aa6:	335d      	adds	r3, #93	; 0x5d
 8003aa8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d155      	bne.n	8003b5a <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	440b      	add	r3, r1
 8003abc:	3358      	adds	r3, #88	; 0x58
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	1c59      	adds	r1, r3, #1
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	4403      	add	r3, r0
 8003ad0:	3358      	adds	r3, #88	; 0x58
 8003ad2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	440b      	add	r3, r1
 8003ae2:	3358      	adds	r3, #88	; 0x58
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b03      	cmp	r3, #3
 8003ae8:	d914      	bls.n	8003b14 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	440b      	add	r3, r1
 8003af8:	3358      	adds	r3, #88	; 0x58
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	4613      	mov	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	440b      	add	r3, r1
 8003b0c:	335c      	adds	r3, #92	; 0x5c
 8003b0e:	2204      	movs	r2, #4
 8003b10:	701a      	strb	r2, [r3, #0]
 8003b12:	e009      	b.n	8003b28 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	440b      	add	r3, r1
 8003b22:	335c      	adds	r3, #92	; 0x5c
 8003b24:	2202      	movs	r2, #2
 8003b26:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b3e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b46:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b54:	461a      	mov	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	015a      	lsls	r2, r3, #5
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b66:	461a      	mov	r2, r3
 8003b68:	2302      	movs	r3, #2
 8003b6a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	b2d8      	uxtb	r0, r3
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	440b      	add	r3, r1
 8003b7e:	335c      	adds	r3, #92	; 0x5c
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	4601      	mov	r1, r0
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f006 fd94 	bl	800a6b4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003b8c:	bf00      	nop
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	; 0x28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	0c5b      	lsrs	r3, r3, #17
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	091b      	lsrs	r3, r3, #4
 8003bc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bc8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d003      	beq.n	8003bd8 <HCD_RXQLVL_IRQHandler+0x44>
 8003bd0:	2b05      	cmp	r3, #5
 8003bd2:	f000 8082 	beq.w	8003cda <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003bd6:	e083      	b.n	8003ce0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d07f      	beq.n	8003cde <HCD_RXQLVL_IRQHandler+0x14a>
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	440b      	add	r3, r1
 8003bec:	3344      	adds	r3, #68	; 0x44
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d074      	beq.n	8003cde <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6818      	ldr	r0, [r3, #0]
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	440b      	add	r3, r1
 8003c06:	3344      	adds	r3, #68	; 0x44
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	b292      	uxth	r2, r2
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f004 f94d 	bl	8007eae <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	440b      	add	r3, r1
 8003c22:	3344      	adds	r3, #68	; 0x44
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	18d1      	adds	r1, r2, r3
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	4403      	add	r3, r0
 8003c38:	3344      	adds	r3, #68	; 0x44
 8003c3a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	440b      	add	r3, r1
 8003c4a:	334c      	adds	r3, #76	; 0x4c
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	18d1      	adds	r1, r2, r3
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4613      	mov	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4403      	add	r3, r0
 8003c60:	334c      	adds	r3, #76	; 0x4c
 8003c62:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c70:	691a      	ldr	r2, [r3, #16]
 8003c72:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <HCD_RXQLVL_IRQHandler+0x154>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d031      	beq.n	8003cde <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c90:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c98:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	440b      	add	r3, r1
 8003cba:	3350      	adds	r3, #80	; 0x50
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	f083 0301 	eor.w	r3, r3, #1
 8003cc2:	b2d8      	uxtb	r0, r3
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	440b      	add	r3, r1
 8003cd2:	3350      	adds	r3, #80	; 0x50
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	701a      	strb	r2, [r3, #0]
      break;
 8003cd8:	e001      	b.n	8003cde <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003cda:	bf00      	nop
 8003cdc:	e000      	b.n	8003ce0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003cde:	bf00      	nop
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	3728      	adds	r7, #40	; 0x28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	1ff80000 	.word	0x1ff80000

08003cec <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003d18:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d113      	bne.n	8003d4c <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d10a      	bne.n	8003d44 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699a      	ldr	r2, [r3, #24]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003d3c:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f006 fc9c 	bl	800a67c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f043 0302 	orr.w	r3, r3, #2
 8003d4a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f003 0308 	and.w	r3, r3, #8
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d147      	bne.n	8003de6 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f043 0308 	orr.w	r3, r3, #8
 8003d5c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d129      	bne.n	8003dbc <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d113      	bne.n	8003d98 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003d76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d7a:	d106      	bne.n	8003d8a <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2102      	movs	r1, #2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f004 f990 	bl	80080a8 <USB_InitFSLSPClkSel>
 8003d88:	e011      	b.n	8003dae <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2101      	movs	r1, #1
 8003d90:	4618      	mov	r0, r3
 8003d92:	f004 f989 	bl	80080a8 <USB_InitFSLSPClkSel>
 8003d96:	e00a      	b.n	8003dae <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d106      	bne.n	8003dae <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003da6:	461a      	mov	r2, r3
 8003da8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003dac:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f006 fc8e 	bl	800a6d0 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f006 fc61 	bl	800a67c <HAL_HCD_Connect_Callback>
 8003dba:	e014      	b.n	8003de6 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f006 fc95 	bl	800a6ec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003dd0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003dd4:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699a      	ldr	r2, [r3, #24]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003de4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f003 0320 	and.w	r3, r3, #32
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	d103      	bne.n	8003df8 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f043 0320 	orr.w	r3, r3, #32
 8003df6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003dfe:	461a      	mov	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	6013      	str	r3, [r2, #0]
}
 8003e04:	bf00      	nop
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e081      	b.n	8003f22 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fc ff6c 	bl	8000d10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2224      	movs	r2, #36	; 0x24
 8003e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d107      	bne.n	8003e86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e82:	609a      	str	r2, [r3, #8]
 8003e84:	e006      	b.n	8003e94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d104      	bne.n	8003ea6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ea4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6812      	ldr	r2, [r2, #0]
 8003eb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ec8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691a      	ldr	r2, [r3, #16]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	ea42 0103 	orr.w	r1, r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	021a      	lsls	r2, r3, #8
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69d9      	ldr	r1, [r3, #28]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1a      	ldr	r2, [r3, #32]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	4608      	mov	r0, r1
 8003f36:	4611      	mov	r1, r2
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	817b      	strh	r3, [r7, #10]
 8003f3e:	460b      	mov	r3, r1
 8003f40:	813b      	strh	r3, [r7, #8]
 8003f42:	4613      	mov	r3, r2
 8003f44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	f040 80f9 	bne.w	8004146 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_I2C_Mem_Write+0x34>
 8003f5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d105      	bne.n	8003f6c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f66:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0ed      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d101      	bne.n	8003f7a <HAL_I2C_Mem_Write+0x4e>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e0e6      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f82:	f7fe f80b 	bl	8001f9c <HAL_GetTick>
 8003f86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	2319      	movs	r3, #25
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f955 	bl	8004244 <I2C_WaitOnFlagUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0d1      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2221      	movs	r2, #33	; 0x21
 8003fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2240      	movs	r2, #64	; 0x40
 8003fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a3a      	ldr	r2, [r7, #32]
 8003fbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fcc:	88f8      	ldrh	r0, [r7, #6]
 8003fce:	893a      	ldrh	r2, [r7, #8]
 8003fd0:	8979      	ldrh	r1, [r7, #10]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	9301      	str	r3, [sp, #4]
 8003fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	4603      	mov	r3, r0
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f8b9 	bl	8004154 <I2C_RequestMemoryWrite>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0a9      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2bff      	cmp	r3, #255	; 0xff
 8003ffc:	d90e      	bls.n	800401c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	22ff      	movs	r2, #255	; 0xff
 8004002:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004008:	b2da      	uxtb	r2, r3
 800400a:	8979      	ldrh	r1, [r7, #10]
 800400c:	2300      	movs	r3, #0
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 fa37 	bl	8004488 <I2C_TransferConfig>
 800401a:	e00f      	b.n	800403c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402a:	b2da      	uxtb	r2, r3
 800402c:	8979      	ldrh	r1, [r7, #10]
 800402e:	2300      	movs	r3, #0
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 fa26 	bl	8004488 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f93f 	bl	80042c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e07b      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	781a      	ldrb	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d034      	beq.n	80040f4 <HAL_I2C_Mem_Write+0x1c8>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408e:	2b00      	cmp	r3, #0
 8004090:	d130      	bne.n	80040f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004098:	2200      	movs	r2, #0
 800409a:	2180      	movs	r1, #128	; 0x80
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 f8d1 	bl	8004244 <I2C_WaitOnFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e04d      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2bff      	cmp	r3, #255	; 0xff
 80040b4:	d90e      	bls.n	80040d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	22ff      	movs	r2, #255	; 0xff
 80040ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	8979      	ldrh	r1, [r7, #10]
 80040c4:	2300      	movs	r3, #0
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 f9db 	bl	8004488 <I2C_TransferConfig>
 80040d2:	e00f      	b.n	80040f4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	8979      	ldrh	r1, [r7, #10]
 80040e6:	2300      	movs	r3, #0
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 f9ca 	bl	8004488 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d19e      	bne.n	800403c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 f91e 	bl	8004344 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e01a      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2220      	movs	r2, #32
 8004118:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6859      	ldr	r1, [r3, #4]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <HAL_I2C_Mem_Write+0x224>)
 8004126:	400b      	ands	r3, r1
 8004128:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	e000      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004146:	2302      	movs	r3, #2
  }
}
 8004148:	4618      	mov	r0, r3
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	fe00e800 	.word	0xfe00e800

08004154 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af02      	add	r7, sp, #8
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	4608      	mov	r0, r1
 800415e:	4611      	mov	r1, r2
 8004160:	461a      	mov	r2, r3
 8004162:	4603      	mov	r3, r0
 8004164:	817b      	strh	r3, [r7, #10]
 8004166:	460b      	mov	r3, r1
 8004168:	813b      	strh	r3, [r7, #8]
 800416a:	4613      	mov	r3, r2
 800416c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	b2da      	uxtb	r2, r3
 8004172:	8979      	ldrh	r1, [r7, #10]
 8004174:	4b20      	ldr	r3, [pc, #128]	; (80041f8 <I2C_RequestMemoryWrite+0xa4>)
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f983 	bl	8004488 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004182:	69fa      	ldr	r2, [r7, #28]
 8004184:	69b9      	ldr	r1, [r7, #24]
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 f89c 	bl	80042c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e02c      	b.n	80041f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004196:	88fb      	ldrh	r3, [r7, #6]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d105      	bne.n	80041a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800419c:	893b      	ldrh	r3, [r7, #8]
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	629a      	str	r2, [r3, #40]	; 0x28
 80041a6:	e015      	b.n	80041d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041a8:	893b      	ldrh	r3, [r7, #8]
 80041aa:	0a1b      	lsrs	r3, r3, #8
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041b6:	69fa      	ldr	r2, [r7, #28]
 80041b8:	69b9      	ldr	r1, [r7, #24]
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 f882 	bl	80042c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e012      	b.n	80041f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041ca:	893b      	ldrh	r3, [r7, #8]
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	2200      	movs	r2, #0
 80041dc:	2180      	movs	r1, #128	; 0x80
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f830 	bl	8004244 <I2C_WaitOnFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	80002000 	.word	0x80002000

080041fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b02      	cmp	r3, #2
 8004210:	d103      	bne.n	800421a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2200      	movs	r2, #0
 8004218:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b01      	cmp	r3, #1
 8004226:	d007      	beq.n	8004238 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699a      	ldr	r2, [r3, #24]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	619a      	str	r2, [r3, #24]
  }
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	603b      	str	r3, [r7, #0]
 8004250:	4613      	mov	r3, r2
 8004252:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004254:	e022      	b.n	800429c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425c:	d01e      	beq.n	800429c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425e:	f7fd fe9d 	bl	8001f9c <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d302      	bcc.n	8004274 <I2C_WaitOnFlagUntilTimeout+0x30>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d113      	bne.n	800429c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004278:	f043 0220 	orr.w	r2, r3, #32
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e00f      	b.n	80042bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699a      	ldr	r2, [r3, #24]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	4013      	ands	r3, r2
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	bf0c      	ite	eq
 80042ac:	2301      	moveq	r3, #1
 80042ae:	2300      	movne	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	461a      	mov	r2, r3
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d0cd      	beq.n	8004256 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042d0:	e02c      	b.n	800432c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	68b9      	ldr	r1, [r7, #8]
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 f870 	bl	80043bc <I2C_IsAcknowledgeFailed>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e02a      	b.n	800433c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ec:	d01e      	beq.n	800432c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ee:	f7fd fe55 	bl	8001f9c <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d302      	bcc.n	8004304 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d113      	bne.n	800432c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004308:	f043 0220 	orr.w	r2, r3, #32
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e007      	b.n	800433c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b02      	cmp	r3, #2
 8004338:	d1cb      	bne.n	80042d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004350:	e028      	b.n	80043a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	68b9      	ldr	r1, [r7, #8]
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f830 	bl	80043bc <I2C_IsAcknowledgeFailed>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e026      	b.n	80043b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004366:	f7fd fe19 	bl	8001f9c <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	429a      	cmp	r2, r3
 8004374:	d302      	bcc.n	800437c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d113      	bne.n	80043a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004380:	f043 0220 	orr.w	r2, r3, #32
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e007      	b.n	80043b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	d1cf      	bne.n	8004352 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	f003 0310 	and.w	r3, r3, #16
 80043d2:	2b10      	cmp	r3, #16
 80043d4:	d151      	bne.n	800447a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043d6:	e022      	b.n	800441e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043de:	d01e      	beq.n	800441e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e0:	f7fd fddc 	bl	8001f9c <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d302      	bcc.n	80043f6 <I2C_IsAcknowledgeFailed+0x3a>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d113      	bne.n	800441e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	f043 0220 	orr.w	r2, r3, #32
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2220      	movs	r2, #32
 8004406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e02e      	b.n	800447c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b20      	cmp	r3, #32
 800442a:	d1d5      	bne.n	80043d8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2210      	movs	r2, #16
 8004432:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2220      	movs	r2, #32
 800443a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f7ff fedd 	bl	80041fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6859      	ldr	r1, [r3, #4]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <I2C_IsAcknowledgeFailed+0xc8>)
 800444e:	400b      	ands	r3, r1
 8004450:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004456:	f043 0204 	orr.w	r2, r3, #4
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	fe00e800 	.word	0xfe00e800

08004488 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	607b      	str	r3, [r7, #4]
 8004492:	460b      	mov	r3, r1
 8004494:	817b      	strh	r3, [r7, #10]
 8004496:	4613      	mov	r3, r2
 8004498:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	0d5b      	lsrs	r3, r3, #21
 80044a4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80044a8:	4b0d      	ldr	r3, [pc, #52]	; (80044e0 <I2C_TransferConfig+0x58>)
 80044aa:	430b      	orrs	r3, r1
 80044ac:	43db      	mvns	r3, r3
 80044ae:	ea02 0103 	and.w	r1, r2, r3
 80044b2:	897b      	ldrh	r3, [r7, #10]
 80044b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80044b8:	7a7b      	ldrb	r3, [r7, #9]
 80044ba:	041b      	lsls	r3, r3, #16
 80044bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	431a      	orrs	r2, r3
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	431a      	orrs	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80044d2:	bf00      	nop
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	03ff63ff 	.word	0x03ff63ff

080044e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d138      	bne.n	800456c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004504:	2302      	movs	r3, #2
 8004506:	e032      	b.n	800456e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2224      	movs	r2, #36	; 0x24
 8004514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0201 	bic.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004536:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6819      	ldr	r1, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004568:	2300      	movs	r3, #0
 800456a:	e000      	b.n	800456e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800456c:	2302      	movs	r3, #2
  }
}
 800456e:	4618      	mov	r0, r3
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800457a:	b480      	push	{r7}
 800457c:	b085      	sub	sp, #20
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b20      	cmp	r3, #32
 800458e:	d139      	bne.n	8004604 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004596:	2b01      	cmp	r3, #1
 8004598:	d101      	bne.n	800459e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800459a:	2302      	movs	r3, #2
 800459c:	e033      	b.n	8004606 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2224      	movs	r2, #36	; 0x24
 80045aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0201 	bic.w	r2, r2, #1
 80045bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	e000      	b.n	8004606 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004604:	2302      	movs	r3, #2
  }
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
	...

08004614 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e0af      	b.n	8004786 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d106      	bne.n	8004640 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7fc fc14 	bl	8000e68 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0201 	bic.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8004658:	2300      	movs	r3, #0
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	e00a      	b.n	8004674 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	3304      	adds	r3, #4
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	2200      	movs	r2, #0
 800466c:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	3301      	adds	r3, #1
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2b0f      	cmp	r3, #15
 8004678:	d9f1      	bls.n	800465e <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0204 	orr.w	r2, r2, #4
 8004688:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	4b3f      	ldr	r3, [pc, #252]	; (8004790 <HAL_LCD_Init+0x17c>)
 8004692:	4013      	ands	r3, r2
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6851      	ldr	r1, [r2, #4]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6892      	ldr	r2, [r2, #8]
 800469c:	4311      	orrs	r1, r2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80046a2:	4311      	orrs	r1, r2
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80046a8:	4311      	orrs	r1, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	69d2      	ldr	r2, [r2, #28]
 80046ae:	4311      	orrs	r1, r2
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6a12      	ldr	r2, [r2, #32]
 80046b4:	4311      	orrs	r1, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6992      	ldr	r2, [r2, #24]
 80046ba:	4311      	orrs	r1, r2
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046c0:	4311      	orrs	r1, r2
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6812      	ldr	r2, [r2, #0]
 80046c6:	430b      	orrs	r3, r1
 80046c8:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f862 	bl	8004794 <LCD_WaitForSynchro>
 80046d0:	4603      	mov	r3, r0
 80046d2:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 80046d4:	7cfb      	ldrb	r3, [r7, #19]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_LCD_Init+0xca>
  {
    return status;
 80046da:	7cfb      	ldrb	r3, [r7, #19]
 80046dc:	e053      	b.n	8004786 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f042 0201 	orr.w	r2, r2, #1
 8004714:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8004716:	f7fd fc41 	bl	8001f9c <HAL_GetTick>
 800471a:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 800471c:	e00c      	b.n	8004738 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800471e:	f7fd fc3d 	bl	8001f9c <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800472c:	d904      	bls.n	8004738 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2208      	movs	r2, #8
 8004732:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e026      	b.n	8004786 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b01      	cmp	r3, #1
 8004744:	d1eb      	bne.n	800471e <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8004746:	f7fd fc29 	bl	8001f9c <HAL_GetTick>
 800474a:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 800474c:	e00c      	b.n	8004768 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800474e:	f7fd fc25 	bl	8001f9c <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800475c:	d904      	bls.n	8004768 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2210      	movs	r2, #16
 8004762:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e00e      	b.n	8004786 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 0310 	and.w	r3, r3, #16
 8004772:	2b10      	cmp	r3, #16
 8004774:	d1eb      	bne.n	800474e <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8004784:	7cfb      	ldrb	r3, [r7, #19]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	fc00000e 	.word	0xfc00000e

08004794 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 800479c:	f7fd fbfe 	bl	8001f9c <HAL_GetTick>
 80047a0:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 80047a2:	e00c      	b.n	80047be <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80047a4:	f7fd fbfa 	bl	8001f9c <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047b2:	d904      	bls.n	80047be <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e007      	b.n	80047ce <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d1eb      	bne.n	80047a4 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047dc:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a04      	ldr	r2, [pc, #16]	; (80047f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e6:	6013      	str	r3, [r2, #0]
}
 80047e8:	bf00      	nop
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	40007000 	.word	0x40007000

080047f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80047fc:	4b04      	ldr	r3, [pc, #16]	; (8004810 <HAL_PWREx_GetVoltageRange+0x18>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004804:	4618      	mov	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	40007000 	.word	0x40007000

08004814 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004822:	d130      	bne.n	8004886 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004824:	4b23      	ldr	r3, [pc, #140]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800482c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004830:	d038      	beq.n	80048a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004832:	4b20      	ldr	r3, [pc, #128]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800483a:	4a1e      	ldr	r2, [pc, #120]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800483c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004840:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004842:	4b1d      	ldr	r3, [pc, #116]	; (80048b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2232      	movs	r2, #50	; 0x32
 8004848:	fb02 f303 	mul.w	r3, r2, r3
 800484c:	4a1b      	ldr	r2, [pc, #108]	; (80048bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800484e:	fba2 2303 	umull	r2, r3, r2, r3
 8004852:	0c9b      	lsrs	r3, r3, #18
 8004854:	3301      	adds	r3, #1
 8004856:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004858:	e002      	b.n	8004860 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3b01      	subs	r3, #1
 800485e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004860:	4b14      	ldr	r3, [pc, #80]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486c:	d102      	bne.n	8004874 <HAL_PWREx_ControlVoltageScaling+0x60>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1f2      	bne.n	800485a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004874:	4b0f      	ldr	r3, [pc, #60]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004880:	d110      	bne.n	80048a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e00f      	b.n	80048a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004886:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800488e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004892:	d007      	beq.n	80048a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004894:	4b07      	ldr	r3, [pc, #28]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800489c:	4a05      	ldr	r2, [pc, #20]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800489e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40007000 	.word	0x40007000
 80048b8:	2000001c 	.word	0x2000001c
 80048bc:	431bde83 	.word	0x431bde83

080048c0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80048c4:	4b05      	ldr	r3, [pc, #20]	; (80048dc <HAL_PWREx_EnableVddUSB+0x1c>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	4a04      	ldr	r2, [pc, #16]	; (80048dc <HAL_PWREx_EnableVddUSB+0x1c>)
 80048ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048ce:	6053      	str	r3, [r2, #4]
}
 80048d0:	bf00      	nop
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40007000 	.word	0x40007000

080048e0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80048e8:	f7fd fb58 	bl	8001f9c <HAL_GetTick>
 80048ec:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e06f      	b.n	80049d8 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_QSPI_Init+0x28>
 8004904:	2302      	movs	r3, #2
 8004906:	e067      	b.n	80049d8 <HAL_QSPI_Init+0xf8>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10b      	bne.n	8004934 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7fc fc39 	bl	800119c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800492a:	f241 3188 	movw	r1, #5000	; 0x1388
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f858 	bl	80049e4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	3b01      	subs	r3, #1
 8004944:	021a      	lsls	r2, r3, #8
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	2120      	movs	r1, #32
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f850 	bl	8004a00 <QSPI_WaitFlagStateUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004964:	7afb      	ldrb	r3, [r7, #11]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d131      	bne.n	80049ce <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004974:	f023 0310 	bic.w	r3, r3, #16
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6852      	ldr	r2, [r2, #4]
 800497c:	0611      	lsls	r1, r2, #24
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	68d2      	ldr	r2, [r2, #12]
 8004982:	4311      	orrs	r1, r2
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6812      	ldr	r2, [r2, #0]
 8004988:	430b      	orrs	r3, r1
 800498a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	4b13      	ldr	r3, [pc, #76]	; (80049e0 <HAL_QSPI_Init+0x100>)
 8004994:	4013      	ands	r3, r2
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	6912      	ldr	r2, [r2, #16]
 800499a:	0411      	lsls	r1, r2, #16
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6952      	ldr	r2, [r2, #20]
 80049a0:	4311      	orrs	r1, r2
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6992      	ldr	r2, [r2, #24]
 80049a6:	4311      	orrs	r1, r2
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	430b      	orrs	r3, r1
 80049ae:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0201 	orr.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80049d6:	7afb      	ldrb	r3, [r7, #11]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	ffe0f8fe 	.word	0xffe0f8fe

080049e4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004a10:	e01a      	b.n	8004a48 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d016      	beq.n	8004a48 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1a:	f7fd fabf 	bl	8001f9c <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d302      	bcc.n	8004a30 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10b      	bne.n	8004a48 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2204      	movs	r2, #4
 8004a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3c:	f043 0201 	orr.w	r2, r3, #1
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e00e      	b.n	8004a66 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	bf14      	ite	ne
 8004a56:	2301      	movne	r3, #1
 8004a58:	2300      	moveq	r3, #0
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	79fb      	ldrb	r3, [r7, #7]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d1d6      	bne.n	8004a12 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
	...

08004a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e39d      	b.n	80051be <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a82:	4ba4      	ldr	r3, [pc, #656]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 030c 	and.w	r3, r3, #12
 8004a8a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a8c:	4ba1      	ldr	r3, [pc, #644]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f003 0303 	and.w	r3, r3, #3
 8004a94:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0310 	and.w	r3, r3, #16
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 80e1 	beq.w	8004c66 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d007      	beq.n	8004aba <HAL_RCC_OscConfig+0x4a>
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	2b0c      	cmp	r3, #12
 8004aae:	f040 8088 	bne.w	8004bc2 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	f040 8084 	bne.w	8004bc2 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004aba:	4b96      	ldr	r3, [pc, #600]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x62>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e375      	b.n	80051be <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1a      	ldr	r2, [r3, #32]
 8004ad6:	4b8f      	ldr	r3, [pc, #572]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d004      	beq.n	8004aec <HAL_RCC_OscConfig+0x7c>
 8004ae2:	4b8c      	ldr	r3, [pc, #560]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aea:	e005      	b.n	8004af8 <HAL_RCC_OscConfig+0x88>
 8004aec:	4b89      	ldr	r3, [pc, #548]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004af2:	091b      	lsrs	r3, r3, #4
 8004af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d223      	bcs.n	8004b44 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fd09 	bl	8005518 <RCC_SetFlashLatencyFromMSIRange>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e356      	b.n	80051be <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b10:	4b80      	ldr	r3, [pc, #512]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a7f      	ldr	r2, [pc, #508]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004b16:	f043 0308 	orr.w	r3, r3, #8
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	4b7d      	ldr	r3, [pc, #500]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	497a      	ldr	r1, [pc, #488]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b2e:	4b79      	ldr	r3, [pc, #484]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	021b      	lsls	r3, r3, #8
 8004b3c:	4975      	ldr	r1, [pc, #468]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	604b      	str	r3, [r1, #4]
 8004b42:	e022      	b.n	8004b8a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b44:	4b73      	ldr	r3, [pc, #460]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a72      	ldr	r2, [pc, #456]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004b4a:	f043 0308 	orr.w	r3, r3, #8
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	4b70      	ldr	r3, [pc, #448]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	496d      	ldr	r1, [pc, #436]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b62:	4b6c      	ldr	r3, [pc, #432]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	021b      	lsls	r3, r3, #8
 8004b70:	4968      	ldr	r1, [pc, #416]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fccc 	bl	8005518 <RCC_SetFlashLatencyFromMSIRange>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e319      	b.n	80051be <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b8a:	f000 fc03 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8004b8e:	4601      	mov	r1, r0
 8004b90:	4b60      	ldr	r3, [pc, #384]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	091b      	lsrs	r3, r3, #4
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	4a5f      	ldr	r2, [pc, #380]	; (8004d18 <HAL_RCC_OscConfig+0x2a8>)
 8004b9c:	5cd3      	ldrb	r3, [r2, r3]
 8004b9e:	f003 031f 	and.w	r3, r3, #31
 8004ba2:	fa21 f303 	lsr.w	r3, r1, r3
 8004ba6:	4a5d      	ldr	r2, [pc, #372]	; (8004d1c <HAL_RCC_OscConfig+0x2ac>)
 8004ba8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004baa:	4b5d      	ldr	r3, [pc, #372]	; (8004d20 <HAL_RCC_OscConfig+0x2b0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fd f9a8 	bl	8001f04 <HAL_InitTick>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d052      	beq.n	8004c64 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
 8004bc0:	e2fd      	b.n	80051be <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d032      	beq.n	8004c30 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004bca:	4b52      	ldr	r3, [pc, #328]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a51      	ldr	r2, [pc, #324]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004bd6:	f7fd f9e1 	bl	8001f9c <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bde:	f7fd f9dd 	bl	8001f9c <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e2e6      	b.n	80051be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bf0:	4b48      	ldr	r3, [pc, #288]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0f0      	beq.n	8004bde <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bfc:	4b45      	ldr	r3, [pc, #276]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a44      	ldr	r2, [pc, #272]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004c02:	f043 0308 	orr.w	r3, r3, #8
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	4b42      	ldr	r3, [pc, #264]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	493f      	ldr	r1, [pc, #252]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c1a:	4b3e      	ldr	r3, [pc, #248]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	021b      	lsls	r3, r3, #8
 8004c28:	493a      	ldr	r1, [pc, #232]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	604b      	str	r3, [r1, #4]
 8004c2e:	e01a      	b.n	8004c66 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c30:	4b38      	ldr	r3, [pc, #224]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a37      	ldr	r2, [pc, #220]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c3c:	f7fd f9ae 	bl	8001f9c <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c44:	f7fd f9aa 	bl	8001f9c <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e2b3      	b.n	80051be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c56:	4b2f      	ldr	r3, [pc, #188]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f0      	bne.n	8004c44 <HAL_RCC_OscConfig+0x1d4>
 8004c62:	e000      	b.n	8004c66 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d074      	beq.n	8004d5c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d005      	beq.n	8004c84 <HAL_RCC_OscConfig+0x214>
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	2b0c      	cmp	r3, #12
 8004c7c:	d10e      	bne.n	8004c9c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d10b      	bne.n	8004c9c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c84:	4b23      	ldr	r3, [pc, #140]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d064      	beq.n	8004d5a <HAL_RCC_OscConfig+0x2ea>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d160      	bne.n	8004d5a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e290      	b.n	80051be <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca4:	d106      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x244>
 8004ca6:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a1a      	ldr	r2, [pc, #104]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	e01d      	b.n	8004cf0 <HAL_RCC_OscConfig+0x280>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cbc:	d10c      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x268>
 8004cbe:	4b15      	ldr	r3, [pc, #84]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a14      	ldr	r2, [pc, #80]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a11      	ldr	r2, [pc, #68]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	e00b      	b.n	8004cf0 <HAL_RCC_OscConfig+0x280>
 8004cd8:	4b0e      	ldr	r3, [pc, #56]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a0d      	ldr	r2, [pc, #52]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce2:	6013      	str	r3, [r2, #0]
 8004ce4:	4b0b      	ldr	r3, [pc, #44]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a0a      	ldr	r2, [pc, #40]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01c      	beq.n	8004d32 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf8:	f7fd f950 	bl	8001f9c <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cfe:	e011      	b.n	8004d24 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d00:	f7fd f94c 	bl	8001f9c <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b64      	cmp	r3, #100	; 0x64
 8004d0c:	d90a      	bls.n	8004d24 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e255      	b.n	80051be <HAL_RCC_OscConfig+0x74e>
 8004d12:	bf00      	nop
 8004d14:	40021000 	.word	0x40021000
 8004d18:	0800b824 	.word	0x0800b824
 8004d1c:	2000001c 	.word	0x2000001c
 8004d20:	20000020 	.word	0x20000020
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d24:	4bae      	ldr	r3, [pc, #696]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0e7      	beq.n	8004d00 <HAL_RCC_OscConfig+0x290>
 8004d30:	e014      	b.n	8004d5c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d32:	f7fd f933 	bl	8001f9c <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d3a:	f7fd f92f 	bl	8001f9c <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b64      	cmp	r3, #100	; 0x64
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e238      	b.n	80051be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d4c:	4ba4      	ldr	r3, [pc, #656]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1f0      	bne.n	8004d3a <HAL_RCC_OscConfig+0x2ca>
 8004d58:	e000      	b.n	8004d5c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d5a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d060      	beq.n	8004e2a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	d005      	beq.n	8004d7a <HAL_RCC_OscConfig+0x30a>
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	2b0c      	cmp	r3, #12
 8004d72:	d119      	bne.n	8004da8 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d116      	bne.n	8004da8 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d7a:	4b99      	ldr	r3, [pc, #612]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d005      	beq.n	8004d92 <HAL_RCC_OscConfig+0x322>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e215      	b.n	80051be <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d92:	4b93      	ldr	r3, [pc, #588]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	061b      	lsls	r3, r3, #24
 8004da0:	498f      	ldr	r1, [pc, #572]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004da6:	e040      	b.n	8004e2a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d023      	beq.n	8004df8 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004db0:	4b8b      	ldr	r3, [pc, #556]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a8a      	ldr	r2, [pc, #552]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbc:	f7fd f8ee 	bl	8001f9c <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dc4:	f7fd f8ea 	bl	8001f9c <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e1f3      	b.n	80051be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dd6:	4b82      	ldr	r3, [pc, #520]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0f0      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de2:	4b7f      	ldr	r3, [pc, #508]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	061b      	lsls	r3, r3, #24
 8004df0:	497b      	ldr	r1, [pc, #492]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	604b      	str	r3, [r1, #4]
 8004df6:	e018      	b.n	8004e2a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004df8:	4b79      	ldr	r3, [pc, #484]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a78      	ldr	r2, [pc, #480]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004dfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e04:	f7fd f8ca 	bl	8001f9c <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e0c:	f7fd f8c6 	bl	8001f9c <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e1cf      	b.n	80051be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e1e:	4b70      	ldr	r3, [pc, #448]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f0      	bne.n	8004e0c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0308 	and.w	r3, r3, #8
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d03c      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d01c      	beq.n	8004e78 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e3e:	4b68      	ldr	r3, [pc, #416]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e44:	4a66      	ldr	r2, [pc, #408]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4e:	f7fd f8a5 	bl	8001f9c <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e56:	f7fd f8a1 	bl	8001f9c <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e1aa      	b.n	80051be <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e68:	4b5d      	ldr	r3, [pc, #372]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0ef      	beq.n	8004e56 <HAL_RCC_OscConfig+0x3e6>
 8004e76:	e01b      	b.n	8004eb0 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e78:	4b59      	ldr	r3, [pc, #356]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e7e:	4a58      	ldr	r2, [pc, #352]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004e80:	f023 0301 	bic.w	r3, r3, #1
 8004e84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e88:	f7fd f888 	bl	8001f9c <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e90:	f7fd f884 	bl	8001f9c <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e18d      	b.n	80051be <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ea2:	4b4f      	ldr	r3, [pc, #316]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1ef      	bne.n	8004e90 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 80a5 	beq.w	8005008 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ec2:	4b47      	ldr	r3, [pc, #284]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10d      	bne.n	8004eea <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ece:	4b44      	ldr	r3, [pc, #272]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed2:	4a43      	ldr	r2, [pc, #268]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8004eda:	4b41      	ldr	r3, [pc, #260]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee2:	60bb      	str	r3, [r7, #8]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eea:	4b3e      	ldr	r3, [pc, #248]	; (8004fe4 <HAL_RCC_OscConfig+0x574>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d118      	bne.n	8004f28 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ef6:	4b3b      	ldr	r3, [pc, #236]	; (8004fe4 <HAL_RCC_OscConfig+0x574>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a3a      	ldr	r2, [pc, #232]	; (8004fe4 <HAL_RCC_OscConfig+0x574>)
 8004efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f02:	f7fd f84b 	bl	8001f9c <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f08:	e008      	b.n	8004f1c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f0a:	f7fd f847 	bl	8001f9c <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e150      	b.n	80051be <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f1c:	4b31      	ldr	r3, [pc, #196]	; (8004fe4 <HAL_RCC_OscConfig+0x574>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0f0      	beq.n	8004f0a <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d108      	bne.n	8004f42 <HAL_RCC_OscConfig+0x4d2>
 8004f30:	4b2b      	ldr	r3, [pc, #172]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f36:	4a2a      	ldr	r2, [pc, #168]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004f38:	f043 0301 	orr.w	r3, r3, #1
 8004f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f40:	e024      	b.n	8004f8c <HAL_RCC_OscConfig+0x51c>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	2b05      	cmp	r3, #5
 8004f48:	d110      	bne.n	8004f6c <HAL_RCC_OscConfig+0x4fc>
 8004f4a:	4b25      	ldr	r3, [pc, #148]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f50:	4a23      	ldr	r2, [pc, #140]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004f52:	f043 0304 	orr.w	r3, r3, #4
 8004f56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f5a:	4b21      	ldr	r3, [pc, #132]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f60:	4a1f      	ldr	r2, [pc, #124]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004f62:	f043 0301 	orr.w	r3, r3, #1
 8004f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f6a:	e00f      	b.n	8004f8c <HAL_RCC_OscConfig+0x51c>
 8004f6c:	4b1c      	ldr	r3, [pc, #112]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f72:	4a1b      	ldr	r2, [pc, #108]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004f74:	f023 0301 	bic.w	r3, r3, #1
 8004f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f7c:	4b18      	ldr	r3, [pc, #96]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f82:	4a17      	ldr	r2, [pc, #92]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004f84:	f023 0304 	bic.w	r3, r3, #4
 8004f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d016      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f94:	f7fd f802 	bl	8001f9c <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f9a:	e00a      	b.n	8004fb2 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f9c:	f7fc fffe 	bl	8001f9c <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e105      	b.n	80051be <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fb2:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <HAL_RCC_OscConfig+0x570>)
 8004fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0ed      	beq.n	8004f9c <HAL_RCC_OscConfig+0x52c>
 8004fc0:	e019      	b.n	8004ff6 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc2:	f7fc ffeb 	bl	8001f9c <HAL_GetTick>
 8004fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fc8:	e00e      	b.n	8004fe8 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fca:	f7fc ffe7 	bl	8001f9c <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d905      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e0ee      	b.n	80051be <HAL_RCC_OscConfig+0x74e>
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fe8:	4b77      	ldr	r3, [pc, #476]	; (80051c8 <HAL_RCC_OscConfig+0x758>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1e9      	bne.n	8004fca <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ff6:	7ffb      	ldrb	r3, [r7, #31]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d105      	bne.n	8005008 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ffc:	4b72      	ldr	r3, [pc, #456]	; (80051c8 <HAL_RCC_OscConfig+0x758>)
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005000:	4a71      	ldr	r2, [pc, #452]	; (80051c8 <HAL_RCC_OscConfig+0x758>)
 8005002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005006:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 80d5 	beq.w	80051bc <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	2b0c      	cmp	r3, #12
 8005016:	f000 808e 	beq.w	8005136 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501e:	2b02      	cmp	r3, #2
 8005020:	d15b      	bne.n	80050da <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005022:	4b69      	ldr	r3, [pc, #420]	; (80051c8 <HAL_RCC_OscConfig+0x758>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a68      	ldr	r2, [pc, #416]	; (80051c8 <HAL_RCC_OscConfig+0x758>)
 8005028:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800502c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502e:	f7fc ffb5 	bl	8001f9c <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005034:	e008      	b.n	8005048 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005036:	f7fc ffb1 	bl	8001f9c <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e0ba      	b.n	80051be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005048:	4b5f      	ldr	r3, [pc, #380]	; (80051c8 <HAL_RCC_OscConfig+0x758>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1f0      	bne.n	8005036 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005054:	4b5c      	ldr	r3, [pc, #368]	; (80051c8 <HAL_RCC_OscConfig+0x758>)
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	4b5c      	ldr	r3, [pc, #368]	; (80051cc <HAL_RCC_OscConfig+0x75c>)
 800505a:	4013      	ands	r3, r2
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005064:	3a01      	subs	r2, #1
 8005066:	0112      	lsls	r2, r2, #4
 8005068:	4311      	orrs	r1, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800506e:	0212      	lsls	r2, r2, #8
 8005070:	4311      	orrs	r1, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005076:	0852      	lsrs	r2, r2, #1
 8005078:	3a01      	subs	r2, #1
 800507a:	0552      	lsls	r2, r2, #21
 800507c:	4311      	orrs	r1, r2
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005082:	0852      	lsrs	r2, r2, #1
 8005084:	3a01      	subs	r2, #1
 8005086:	0652      	lsls	r2, r2, #25
 8005088:	4311      	orrs	r1, r2
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800508e:	0912      	lsrs	r2, r2, #4
 8005090:	0452      	lsls	r2, r2, #17
 8005092:	430a      	orrs	r2, r1
 8005094:	494c      	ldr	r1, [pc, #304]	; (80051c8 <HAL_RCC_OscConfig+0x758>)
 8005096:	4313      	orrs	r3, r2
 8005098:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800509a:	4b4b      	ldr	r3, [pc, #300]	; (80051c8 <HAL_RCC_OscConfig+0x758>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a4a      	ldr	r2, [pc, #296]	; (80051c8 <HAL_RCC_OscConfig+0x758>)
 80050a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050a4:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050a6:	4b48      	ldr	r3, [pc, #288]	; (80051c8 <HAL_RCC_OscConfig+0x758>)
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	4a47      	ldr	r2, [pc, #284]	; (80051c8 <HAL_RCC_OscConfig+0x758>)
 80050ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050b0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b2:	f7fc ff73 	bl	8001f9c <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ba:	f7fc ff6f 	bl	8001f9c <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e078      	b.n	80051be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050cc:	4b3e      	ldr	r3, [pc, #248]	; (80051c8 <HAL_RCC_OscConfig+0x758>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0f0      	beq.n	80050ba <HAL_RCC_OscConfig+0x64a>
 80050d8:	e070      	b.n	80051bc <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050da:	4b3b      	ldr	r3, [pc, #236]	; (80051c8 <HAL_RCC_OscConfig+0x758>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a3a      	ldr	r2, [pc, #232]	; (80051c8 <HAL_RCC_OscConfig+0x758>)
 80050e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050e4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80050e6:	4b38      	ldr	r3, [pc, #224]	; (80051c8 <HAL_RCC_OscConfig+0x758>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d105      	bne.n	80050fe <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80050f2:	4b35      	ldr	r3, [pc, #212]	; (80051c8 <HAL_RCC_OscConfig+0x758>)
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	4a34      	ldr	r2, [pc, #208]	; (80051c8 <HAL_RCC_OscConfig+0x758>)
 80050f8:	f023 0303 	bic.w	r3, r3, #3
 80050fc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80050fe:	4b32      	ldr	r3, [pc, #200]	; (80051c8 <HAL_RCC_OscConfig+0x758>)
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	4a31      	ldr	r2, [pc, #196]	; (80051c8 <HAL_RCC_OscConfig+0x758>)
 8005104:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800510c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510e:	f7fc ff45 	bl	8001f9c <HAL_GetTick>
 8005112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005114:	e008      	b.n	8005128 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005116:	f7fc ff41 	bl	8001f9c <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e04a      	b.n	80051be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005128:	4b27      	ldr	r3, [pc, #156]	; (80051c8 <HAL_RCC_OscConfig+0x758>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1f0      	bne.n	8005116 <HAL_RCC_OscConfig+0x6a6>
 8005134:	e042      	b.n	80051bc <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	2b01      	cmp	r3, #1
 800513c:	d101      	bne.n	8005142 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e03d      	b.n	80051be <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8005142:	4b21      	ldr	r3, [pc, #132]	; (80051c8 <HAL_RCC_OscConfig+0x758>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f003 0203 	and.w	r2, r3, #3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005152:	429a      	cmp	r2, r3
 8005154:	d130      	bne.n	80051b8 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005160:	3b01      	subs	r3, #1
 8005162:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005164:	429a      	cmp	r2, r3
 8005166:	d127      	bne.n	80051b8 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005172:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005174:	429a      	cmp	r2, r3
 8005176:	d11f      	bne.n	80051b8 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005182:	2a07      	cmp	r2, #7
 8005184:	bf14      	ite	ne
 8005186:	2201      	movne	r2, #1
 8005188:	2200      	moveq	r2, #0
 800518a:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800518c:	4293      	cmp	r3, r2
 800518e:	d113      	bne.n	80051b8 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519a:	085b      	lsrs	r3, r3, #1
 800519c:	3b01      	subs	r3, #1
 800519e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d109      	bne.n	80051b8 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	085b      	lsrs	r3, r3, #1
 80051b0:	3b01      	subs	r3, #1
 80051b2:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d001      	beq.n	80051bc <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e000      	b.n	80051be <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3720      	adds	r7, #32
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	40021000 	.word	0x40021000
 80051cc:	f99d808c 	.word	0xf99d808c

080051d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e0c8      	b.n	8005376 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051e4:	4b66      	ldr	r3, [pc, #408]	; (8005380 <HAL_RCC_ClockConfig+0x1b0>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d910      	bls.n	8005214 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f2:	4b63      	ldr	r3, [pc, #396]	; (8005380 <HAL_RCC_ClockConfig+0x1b0>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f023 0207 	bic.w	r2, r3, #7
 80051fa:	4961      	ldr	r1, [pc, #388]	; (8005380 <HAL_RCC_ClockConfig+0x1b0>)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	4313      	orrs	r3, r2
 8005200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005202:	4b5f      	ldr	r3, [pc, #380]	; (8005380 <HAL_RCC_ClockConfig+0x1b0>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0307 	and.w	r3, r3, #7
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d001      	beq.n	8005214 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e0b0      	b.n	8005376 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b00      	cmp	r3, #0
 800521e:	d04c      	beq.n	80052ba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b03      	cmp	r3, #3
 8005226:	d107      	bne.n	8005238 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005228:	4b56      	ldr	r3, [pc, #344]	; (8005384 <HAL_RCC_ClockConfig+0x1b4>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d121      	bne.n	8005278 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e09e      	b.n	8005376 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	2b02      	cmp	r3, #2
 800523e:	d107      	bne.n	8005250 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005240:	4b50      	ldr	r3, [pc, #320]	; (8005384 <HAL_RCC_ClockConfig+0x1b4>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d115      	bne.n	8005278 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e092      	b.n	8005376 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d107      	bne.n	8005268 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005258:	4b4a      	ldr	r3, [pc, #296]	; (8005384 <HAL_RCC_ClockConfig+0x1b4>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d109      	bne.n	8005278 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e086      	b.n	8005376 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005268:	4b46      	ldr	r3, [pc, #280]	; (8005384 <HAL_RCC_ClockConfig+0x1b4>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e07e      	b.n	8005376 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005278:	4b42      	ldr	r3, [pc, #264]	; (8005384 <HAL_RCC_ClockConfig+0x1b4>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f023 0203 	bic.w	r2, r3, #3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	493f      	ldr	r1, [pc, #252]	; (8005384 <HAL_RCC_ClockConfig+0x1b4>)
 8005286:	4313      	orrs	r3, r2
 8005288:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800528a:	f7fc fe87 	bl	8001f9c <HAL_GetTick>
 800528e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005290:	e00a      	b.n	80052a8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005292:	f7fc fe83 	bl	8001f9c <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e066      	b.n	8005376 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a8:	4b36      	ldr	r3, [pc, #216]	; (8005384 <HAL_RCC_ClockConfig+0x1b4>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 020c 	and.w	r2, r3, #12
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d1eb      	bne.n	8005292 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d008      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052c6:	4b2f      	ldr	r3, [pc, #188]	; (8005384 <HAL_RCC_ClockConfig+0x1b4>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	492c      	ldr	r1, [pc, #176]	; (8005384 <HAL_RCC_ClockConfig+0x1b4>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052d8:	4b29      	ldr	r3, [pc, #164]	; (8005380 <HAL_RCC_ClockConfig+0x1b0>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d210      	bcs.n	8005308 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052e6:	4b26      	ldr	r3, [pc, #152]	; (8005380 <HAL_RCC_ClockConfig+0x1b0>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f023 0207 	bic.w	r2, r3, #7
 80052ee:	4924      	ldr	r1, [pc, #144]	; (8005380 <HAL_RCC_ClockConfig+0x1b0>)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052f6:	4b22      	ldr	r3, [pc, #136]	; (8005380 <HAL_RCC_ClockConfig+0x1b0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	429a      	cmp	r2, r3
 8005302:	d001      	beq.n	8005308 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e036      	b.n	8005376 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	2b00      	cmp	r3, #0
 8005312:	d008      	beq.n	8005326 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005314:	4b1b      	ldr	r3, [pc, #108]	; (8005384 <HAL_RCC_ClockConfig+0x1b4>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	4918      	ldr	r1, [pc, #96]	; (8005384 <HAL_RCC_ClockConfig+0x1b4>)
 8005322:	4313      	orrs	r3, r2
 8005324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0308 	and.w	r3, r3, #8
 800532e:	2b00      	cmp	r3, #0
 8005330:	d009      	beq.n	8005346 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005332:	4b14      	ldr	r3, [pc, #80]	; (8005384 <HAL_RCC_ClockConfig+0x1b4>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	4910      	ldr	r1, [pc, #64]	; (8005384 <HAL_RCC_ClockConfig+0x1b4>)
 8005342:	4313      	orrs	r3, r2
 8005344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005346:	f000 f825 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 800534a:	4601      	mov	r1, r0
 800534c:	4b0d      	ldr	r3, [pc, #52]	; (8005384 <HAL_RCC_ClockConfig+0x1b4>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	091b      	lsrs	r3, r3, #4
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	4a0c      	ldr	r2, [pc, #48]	; (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 8005358:	5cd3      	ldrb	r3, [r2, r3]
 800535a:	f003 031f 	and.w	r3, r3, #31
 800535e:	fa21 f303 	lsr.w	r3, r1, r3
 8005362:	4a0a      	ldr	r2, [pc, #40]	; (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005366:	4b0a      	ldr	r3, [pc, #40]	; (8005390 <HAL_RCC_ClockConfig+0x1c0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f7fc fdca 	bl	8001f04 <HAL_InitTick>
 8005370:	4603      	mov	r3, r0
 8005372:	72fb      	strb	r3, [r7, #11]

  return status;
 8005374:	7afb      	ldrb	r3, [r7, #11]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	40022000 	.word	0x40022000
 8005384:	40021000 	.word	0x40021000
 8005388:	0800b824 	.word	0x0800b824
 800538c:	2000001c 	.word	0x2000001c
 8005390:	20000020 	.word	0x20000020

08005394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005394:	b480      	push	{r7}
 8005396:	b089      	sub	sp, #36	; 0x24
 8005398:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	61fb      	str	r3, [r7, #28]
 800539e:	2300      	movs	r3, #0
 80053a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053a2:	4b3d      	ldr	r3, [pc, #244]	; (8005498 <HAL_RCC_GetSysClockFreq+0x104>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f003 030c 	and.w	r3, r3, #12
 80053aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053ac:	4b3a      	ldr	r3, [pc, #232]	; (8005498 <HAL_RCC_GetSysClockFreq+0x104>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0303 	and.w	r3, r3, #3
 80053b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <HAL_RCC_GetSysClockFreq+0x34>
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	2b0c      	cmp	r3, #12
 80053c0:	d121      	bne.n	8005406 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d11e      	bne.n	8005406 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80053c8:	4b33      	ldr	r3, [pc, #204]	; (8005498 <HAL_RCC_GetSysClockFreq+0x104>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0308 	and.w	r3, r3, #8
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d107      	bne.n	80053e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80053d4:	4b30      	ldr	r3, [pc, #192]	; (8005498 <HAL_RCC_GetSysClockFreq+0x104>)
 80053d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053da:	0a1b      	lsrs	r3, r3, #8
 80053dc:	f003 030f 	and.w	r3, r3, #15
 80053e0:	61fb      	str	r3, [r7, #28]
 80053e2:	e005      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80053e4:	4b2c      	ldr	r3, [pc, #176]	; (8005498 <HAL_RCC_GetSysClockFreq+0x104>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	091b      	lsrs	r3, r3, #4
 80053ea:	f003 030f 	and.w	r3, r3, #15
 80053ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80053f0:	4a2a      	ldr	r2, [pc, #168]	; (800549c <HAL_RCC_GetSysClockFreq+0x108>)
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10d      	bne.n	800541c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005404:	e00a      	b.n	800541c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	2b04      	cmp	r3, #4
 800540a:	d102      	bne.n	8005412 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800540c:	4b24      	ldr	r3, [pc, #144]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800540e:	61bb      	str	r3, [r7, #24]
 8005410:	e004      	b.n	800541c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	2b08      	cmp	r3, #8
 8005416:	d101      	bne.n	800541c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005418:	4b22      	ldr	r3, [pc, #136]	; (80054a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800541a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	2b0c      	cmp	r3, #12
 8005420:	d133      	bne.n	800548a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005422:	4b1d      	ldr	r3, [pc, #116]	; (8005498 <HAL_RCC_GetSysClockFreq+0x104>)
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	f003 0303 	and.w	r3, r3, #3
 800542a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d002      	beq.n	8005438 <HAL_RCC_GetSysClockFreq+0xa4>
 8005432:	2b03      	cmp	r3, #3
 8005434:	d003      	beq.n	800543e <HAL_RCC_GetSysClockFreq+0xaa>
 8005436:	e005      	b.n	8005444 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005438:	4b19      	ldr	r3, [pc, #100]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800543a:	617b      	str	r3, [r7, #20]
      break;
 800543c:	e005      	b.n	800544a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800543e:	4b19      	ldr	r3, [pc, #100]	; (80054a4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005440:	617b      	str	r3, [r7, #20]
      break;
 8005442:	e002      	b.n	800544a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	617b      	str	r3, [r7, #20]
      break;
 8005448:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800544a:	4b13      	ldr	r3, [pc, #76]	; (8005498 <HAL_RCC_GetSysClockFreq+0x104>)
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	091b      	lsrs	r3, r3, #4
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	3301      	adds	r3, #1
 8005456:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005458:	4b0f      	ldr	r3, [pc, #60]	; (8005498 <HAL_RCC_GetSysClockFreq+0x104>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	0a1b      	lsrs	r3, r3, #8
 800545e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	fb02 f203 	mul.w	r2, r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	fbb2 f3f3 	udiv	r3, r2, r3
 800546e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005470:	4b09      	ldr	r3, [pc, #36]	; (8005498 <HAL_RCC_GetSysClockFreq+0x104>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	0e5b      	lsrs	r3, r3, #25
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	3301      	adds	r3, #1
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	fbb2 f3f3 	udiv	r3, r2, r3
 8005488:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800548a:	69bb      	ldr	r3, [r7, #24]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3724      	adds	r7, #36	; 0x24
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	40021000 	.word	0x40021000
 800549c:	0800b83c 	.word	0x0800b83c
 80054a0:	00f42400 	.word	0x00f42400
 80054a4:	007a1200 	.word	0x007a1200

080054a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054ac:	4b03      	ldr	r3, [pc, #12]	; (80054bc <HAL_RCC_GetHCLKFreq+0x14>)
 80054ae:	681b      	ldr	r3, [r3, #0]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	2000001c 	.word	0x2000001c

080054c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054c4:	f7ff fff0 	bl	80054a8 <HAL_RCC_GetHCLKFreq>
 80054c8:	4601      	mov	r1, r0
 80054ca:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	0a1b      	lsrs	r3, r3, #8
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	4a04      	ldr	r2, [pc, #16]	; (80054e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054d6:	5cd3      	ldrb	r3, [r2, r3]
 80054d8:	f003 031f 	and.w	r3, r3, #31
 80054dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40021000 	.word	0x40021000
 80054e8:	0800b834 	.word	0x0800b834

080054ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80054f0:	f7ff ffda 	bl	80054a8 <HAL_RCC_GetHCLKFreq>
 80054f4:	4601      	mov	r1, r0
 80054f6:	4b06      	ldr	r3, [pc, #24]	; (8005510 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	0adb      	lsrs	r3, r3, #11
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	4a04      	ldr	r2, [pc, #16]	; (8005514 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005502:	5cd3      	ldrb	r3, [r2, r3]
 8005504:	f003 031f 	and.w	r3, r3, #31
 8005508:	fa21 f303 	lsr.w	r3, r1, r3
}
 800550c:	4618      	mov	r0, r3
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40021000 	.word	0x40021000
 8005514:	0800b834 	.word	0x0800b834

08005518 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005520:	2300      	movs	r3, #0
 8005522:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005524:	4b2a      	ldr	r3, [pc, #168]	; (80055d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005530:	f7ff f962 	bl	80047f8 <HAL_PWREx_GetVoltageRange>
 8005534:	6178      	str	r0, [r7, #20]
 8005536:	e014      	b.n	8005562 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005538:	4b25      	ldr	r3, [pc, #148]	; (80055d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800553a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553c:	4a24      	ldr	r2, [pc, #144]	; (80055d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800553e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005542:	6593      	str	r3, [r2, #88]	; 0x58
 8005544:	4b22      	ldr	r3, [pc, #136]	; (80055d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005550:	f7ff f952 	bl	80047f8 <HAL_PWREx_GetVoltageRange>
 8005554:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005556:	4b1e      	ldr	r3, [pc, #120]	; (80055d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555a:	4a1d      	ldr	r2, [pc, #116]	; (80055d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800555c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005560:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005568:	d10b      	bne.n	8005582 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b80      	cmp	r3, #128	; 0x80
 800556e:	d919      	bls.n	80055a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2ba0      	cmp	r3, #160	; 0xa0
 8005574:	d902      	bls.n	800557c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005576:	2302      	movs	r3, #2
 8005578:	613b      	str	r3, [r7, #16]
 800557a:	e013      	b.n	80055a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800557c:	2301      	movs	r3, #1
 800557e:	613b      	str	r3, [r7, #16]
 8005580:	e010      	b.n	80055a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b80      	cmp	r3, #128	; 0x80
 8005586:	d902      	bls.n	800558e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005588:	2303      	movs	r3, #3
 800558a:	613b      	str	r3, [r7, #16]
 800558c:	e00a      	b.n	80055a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b80      	cmp	r3, #128	; 0x80
 8005592:	d102      	bne.n	800559a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005594:	2302      	movs	r3, #2
 8005596:	613b      	str	r3, [r7, #16]
 8005598:	e004      	b.n	80055a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b70      	cmp	r3, #112	; 0x70
 800559e:	d101      	bne.n	80055a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055a0:	2301      	movs	r3, #1
 80055a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80055a4:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f023 0207 	bic.w	r2, r3, #7
 80055ac:	4909      	ldr	r1, [pc, #36]	; (80055d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80055b4:	4b07      	ldr	r3, [pc, #28]	; (80055d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d001      	beq.n	80055c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3718      	adds	r7, #24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	40021000 	.word	0x40021000
 80055d4:	40022000 	.word	0x40022000

080055d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055e0:	2300      	movs	r3, #0
 80055e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055e4:	2300      	movs	r3, #0
 80055e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d03f      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055fc:	d01c      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80055fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005602:	d802      	bhi.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00e      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005608:	e01f      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800560a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800560e:	d003      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005610:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005614:	d01c      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005616:	e018      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005618:	4b85      	ldr	r3, [pc, #532]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	4a84      	ldr	r2, [pc, #528]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800561e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005622:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005624:	e015      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	3304      	adds	r3, #4
 800562a:	2100      	movs	r1, #0
 800562c:	4618      	mov	r0, r3
 800562e:	f000 ff41 	bl	80064b4 <RCCEx_PLLSAI1_Config>
 8005632:	4603      	mov	r3, r0
 8005634:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005636:	e00c      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3320      	adds	r3, #32
 800563c:	2100      	movs	r1, #0
 800563e:	4618      	mov	r0, r3
 8005640:	f001 f828 	bl	8006694 <RCCEx_PLLSAI2_Config>
 8005644:	4603      	mov	r3, r0
 8005646:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005648:	e003      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	74fb      	strb	r3, [r7, #19]
      break;
 800564e:	e000      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005650:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005652:	7cfb      	ldrb	r3, [r7, #19]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10b      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005658:	4b75      	ldr	r3, [pc, #468]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005666:	4972      	ldr	r1, [pc, #456]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800566e:	e001      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005670:	7cfb      	ldrb	r3, [r7, #19]
 8005672:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d03f      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005688:	d01c      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800568a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800568e:	d802      	bhi.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00e      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005694:	e01f      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005696:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800569a:	d003      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800569c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80056a0:	d01c      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x104>
 80056a2:	e018      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056a4:	4b62      	ldr	r3, [pc, #392]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	4a61      	ldr	r2, [pc, #388]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056b0:	e015      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3304      	adds	r3, #4
 80056b6:	2100      	movs	r1, #0
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 fefb 	bl	80064b4 <RCCEx_PLLSAI1_Config>
 80056be:	4603      	mov	r3, r0
 80056c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056c2:	e00c      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3320      	adds	r3, #32
 80056c8:	2100      	movs	r1, #0
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 ffe2 	bl	8006694 <RCCEx_PLLSAI2_Config>
 80056d0:	4603      	mov	r3, r0
 80056d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056d4:	e003      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	74fb      	strb	r3, [r7, #19]
      break;
 80056da:	e000      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80056dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056de:	7cfb      	ldrb	r3, [r7, #19]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10b      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056e4:	4b52      	ldr	r3, [pc, #328]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056f2:	494f      	ldr	r1, [pc, #316]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80056fa:	e001      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056fc:	7cfb      	ldrb	r3, [r7, #19]
 80056fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 80a0 	beq.w	800584e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800570e:	2300      	movs	r3, #0
 8005710:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005712:	4b47      	ldr	r3, [pc, #284]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005722:	2300      	movs	r3, #0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00d      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005728:	4b41      	ldr	r3, [pc, #260]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800572a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572c:	4a40      	ldr	r2, [pc, #256]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800572e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005732:	6593      	str	r3, [r2, #88]	; 0x58
 8005734:	4b3e      	ldr	r3, [pc, #248]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005740:	2301      	movs	r3, #1
 8005742:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005744:	4b3b      	ldr	r3, [pc, #236]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a3a      	ldr	r2, [pc, #232]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800574a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800574e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005750:	f7fc fc24 	bl	8001f9c <HAL_GetTick>
 8005754:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005756:	e009      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005758:	f7fc fc20 	bl	8001f9c <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d902      	bls.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	74fb      	strb	r3, [r7, #19]
        break;
 800576a:	e005      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800576c:	4b31      	ldr	r3, [pc, #196]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0ef      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005778:	7cfb      	ldrb	r3, [r7, #19]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d15c      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800577e:	4b2c      	ldr	r3, [pc, #176]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005788:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01f      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	429a      	cmp	r2, r3
 800579a:	d019      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800579c:	4b24      	ldr	r3, [pc, #144]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800579e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057a8:	4b21      	ldr	r3, [pc, #132]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ae:	4a20      	ldr	r2, [pc, #128]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057b8:	4b1d      	ldr	r3, [pc, #116]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057be:	4a1c      	ldr	r2, [pc, #112]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057c8:	4a19      	ldr	r2, [pc, #100]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d016      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057da:	f7fc fbdf 	bl	8001f9c <HAL_GetTick>
 80057de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057e0:	e00b      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e2:	f7fc fbdb 	bl	8001f9c <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d902      	bls.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	74fb      	strb	r3, [r7, #19]
            break;
 80057f8:	e006      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057fa:	4b0d      	ldr	r3, [pc, #52]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0ec      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005808:	7cfb      	ldrb	r3, [r7, #19]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10c      	bne.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800580e:	4b08      	ldr	r3, [pc, #32]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005814:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800581e:	4904      	ldr	r1, [pc, #16]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005820:	4313      	orrs	r3, r2
 8005822:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005826:	e009      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005828:	7cfb      	ldrb	r3, [r7, #19]
 800582a:	74bb      	strb	r3, [r7, #18]
 800582c:	e006      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800582e:	bf00      	nop
 8005830:	40021000 	.word	0x40021000
 8005834:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005838:	7cfb      	ldrb	r3, [r7, #19]
 800583a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800583c:	7c7b      	ldrb	r3, [r7, #17]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d105      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005842:	4b9e      	ldr	r3, [pc, #632]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005846:	4a9d      	ldr	r2, [pc, #628]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800584c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800585a:	4b98      	ldr	r3, [pc, #608]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800585c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005860:	f023 0203 	bic.w	r2, r3, #3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	4994      	ldr	r1, [pc, #592]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800586a:	4313      	orrs	r3, r2
 800586c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800587c:	4b8f      	ldr	r3, [pc, #572]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800587e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005882:	f023 020c 	bic.w	r2, r3, #12
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588a:	498c      	ldr	r1, [pc, #560]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800588c:	4313      	orrs	r3, r2
 800588e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800589e:	4b87      	ldr	r3, [pc, #540]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ac:	4983      	ldr	r1, [pc, #524]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058c0:	4b7e      	ldr	r3, [pc, #504]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ce:	497b      	ldr	r1, [pc, #492]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0310 	and.w	r3, r3, #16
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058e2:	4b76      	ldr	r3, [pc, #472]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058f0:	4972      	ldr	r1, [pc, #456]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0320 	and.w	r3, r3, #32
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00a      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005904:	4b6d      	ldr	r3, [pc, #436]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005912:	496a      	ldr	r1, [pc, #424]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005926:	4b65      	ldr	r3, [pc, #404]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005934:	4961      	ldr	r1, [pc, #388]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005948:	4b5c      	ldr	r3, [pc, #368]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800594a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005956:	4959      	ldr	r1, [pc, #356]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005958:	4313      	orrs	r3, r2
 800595a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800596a:	4b54      	ldr	r3, [pc, #336]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800596c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005970:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005978:	4950      	ldr	r1, [pc, #320]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800597a:	4313      	orrs	r3, r2
 800597c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00a      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800598c:	4b4b      	ldr	r3, [pc, #300]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800598e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005992:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599a:	4948      	ldr	r1, [pc, #288]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800599c:	4313      	orrs	r3, r2
 800599e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00a      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059ae:	4b43      	ldr	r3, [pc, #268]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059bc:	493f      	ldr	r1, [pc, #252]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d028      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059d0:	4b3a      	ldr	r3, [pc, #232]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059de:	4937      	ldr	r1, [pc, #220]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059ee:	d106      	bne.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059f0:	4b32      	ldr	r3, [pc, #200]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	4a31      	ldr	r2, [pc, #196]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059fa:	60d3      	str	r3, [r2, #12]
 80059fc:	e011      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a06:	d10c      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	3304      	adds	r3, #4
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 fd50 	bl	80064b4 <RCCEx_PLLSAI1_Config>
 8005a14:	4603      	mov	r3, r0
 8005a16:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005a18:	7cfb      	ldrb	r3, [r7, #19]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8005a1e:	7cfb      	ldrb	r3, [r7, #19]
 8005a20:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d028      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a2e:	4b23      	ldr	r3, [pc, #140]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a3c:	491f      	ldr	r1, [pc, #124]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a4c:	d106      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a4e:	4b1b      	ldr	r3, [pc, #108]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	4a1a      	ldr	r2, [pc, #104]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a58:	60d3      	str	r3, [r2, #12]
 8005a5a:	e011      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a64:	d10c      	bne.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 fd21 	bl	80064b4 <RCCEx_PLLSAI1_Config>
 8005a72:	4603      	mov	r3, r0
 8005a74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a76:	7cfb      	ldrb	r3, [r7, #19]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8005a7c:	7cfb      	ldrb	r3, [r7, #19]
 8005a7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d02b      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a8c:	4b0b      	ldr	r3, [pc, #44]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a9a:	4908      	ldr	r1, [pc, #32]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aaa:	d109      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aac:	4b03      	ldr	r3, [pc, #12]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	4a02      	ldr	r2, [pc, #8]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ab6:	60d3      	str	r3, [r2, #12]
 8005ab8:	e014      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005aba:	bf00      	nop
 8005abc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ac8:	d10c      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	3304      	adds	r3, #4
 8005ace:	2101      	movs	r1, #1
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fcef 	bl	80064b4 <RCCEx_PLLSAI1_Config>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ada:	7cfb      	ldrb	r3, [r7, #19]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005ae0:	7cfb      	ldrb	r3, [r7, #19]
 8005ae2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d02f      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005af0:	4b2b      	ldr	r3, [pc, #172]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005afe:	4928      	ldr	r1, [pc, #160]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b0e:	d10d      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	3304      	adds	r3, #4
 8005b14:	2102      	movs	r1, #2
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 fccc 	bl	80064b4 <RCCEx_PLLSAI1_Config>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b20:	7cfb      	ldrb	r3, [r7, #19]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d014      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005b26:	7cfb      	ldrb	r3, [r7, #19]
 8005b28:	74bb      	strb	r3, [r7, #18]
 8005b2a:	e011      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b34:	d10c      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3320      	adds	r3, #32
 8005b3a:	2102      	movs	r1, #2
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 fda9 	bl	8006694 <RCCEx_PLLSAI2_Config>
 8005b42:	4603      	mov	r3, r0
 8005b44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b46:	7cfb      	ldrb	r3, [r7, #19]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005b4c:	7cfb      	ldrb	r3, [r7, #19]
 8005b4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00a      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b5c:	4b10      	ldr	r3, [pc, #64]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b62:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b6a:	490d      	ldr	r1, [pc, #52]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00b      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b7e:	4b08      	ldr	r3, [pc, #32]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b8e:	4904      	ldr	r1, [pc, #16]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b96:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	40021000 	.word	0x40021000

08005ba4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b088      	sub	sp, #32
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bb6:	d137      	bne.n	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005bb8:	4bb8      	ldr	r3, [pc, #736]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bc2:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bca:	d014      	beq.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8005bcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bd0:	d01e      	beq.n	8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8005bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd6:	d001      	beq.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005bd8:	f000 bc53 	b.w	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005bdc:	4baf      	ldr	r3, [pc, #700]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	f040 8446 	bne.w	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        frequency = LSE_VALUE;
 8005bec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bf0:	61fb      	str	r3, [r7, #28]
      break;
 8005bf2:	f000 bc41 	b.w	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005bf6:	4ba9      	ldr	r3, [pc, #676]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	f040 843b 	bne.w	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          frequency = LSI_VALUE;
 8005c06:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005c0a:	61fb      	str	r3, [r7, #28]
      break;
 8005c0c:	f000 bc36 	b.w	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c10:	4ba2      	ldr	r3, [pc, #648]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c1c:	f040 8430 	bne.w	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        frequency = HSE_VALUE / 32U;
 8005c20:	4b9f      	ldr	r3, [pc, #636]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005c22:	61fb      	str	r3, [r7, #28]
      break;
 8005c24:	f000 bc2c 	b.w	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c28:	4b9c      	ldr	r3, [pc, #624]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f003 0303 	and.w	r3, r3, #3
 8005c30:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d023      	beq.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005c38:	2b03      	cmp	r3, #3
 8005c3a:	d02e      	beq.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d139      	bne.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005c40:	4b96      	ldr	r3, [pc, #600]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d116      	bne.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005c4c:	4b93      	ldr	r3, [pc, #588]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0308 	and.w	r3, r3, #8
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d005      	beq.n	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8005c58:	4b90      	ldr	r3, [pc, #576]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	091b      	lsrs	r3, r3, #4
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	e005      	b.n	8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8005c64:	4b8d      	ldr	r3, [pc, #564]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c6a:	0a1b      	lsrs	r3, r3, #8
 8005c6c:	f003 030f 	and.w	r3, r3, #15
 8005c70:	4a8c      	ldr	r2, [pc, #560]	; (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c76:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005c78:	e01f      	b.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	61bb      	str	r3, [r7, #24]
      break;
 8005c7e:	e01c      	b.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c80:	4b86      	ldr	r3, [pc, #536]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c8c:	d102      	bne.n	8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8005c8e:	4b86      	ldr	r3, [pc, #536]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005c90:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005c92:	e012      	b.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8005c94:	2300      	movs	r3, #0
 8005c96:	61bb      	str	r3, [r7, #24]
      break;
 8005c98:	e00f      	b.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c9a:	4b80      	ldr	r3, [pc, #512]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ca6:	d102      	bne.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8005ca8:	4b80      	ldr	r3, [pc, #512]	; (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8005caa:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005cac:	e005      	b.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61bb      	str	r3, [r7, #24]
      break;
 8005cb2:	e002      	b.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	61bb      	str	r3, [r7, #24]
      break;
 8005cb8:	bf00      	nop
    }

    switch(PeriphClk)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cc0:	f000 8337 	beq.w	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 8005cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cc8:	d825      	bhi.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8005cca:	2b10      	cmp	r3, #16
 8005ccc:	f000 81df 	beq.w	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005cd0:	2b10      	cmp	r3, #16
 8005cd2:	d80f      	bhi.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	f000 8128 	beq.w	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d803      	bhi.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	f000 80ec 	beq.w	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005ce4:	e3cd      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	f000 8169 	beq.w	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	f000 819a 	beq.w	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 8005cf2:	e3c6      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005cf4:	2b40      	cmp	r3, #64	; 0x40
 8005cf6:	f000 82b3 	beq.w	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
 8005cfa:	2b40      	cmp	r3, #64	; 0x40
 8005cfc:	d803      	bhi.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8005cfe:	2b20      	cmp	r3, #32
 8005d00:	f000 81fd 	beq.w	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 8005d04:	e3bd      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005d06:	2b80      	cmp	r3, #128	; 0x80
 8005d08:	f000 82cd 	beq.w	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8005d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d10:	f000 82ec 	beq.w	80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x748>
      break;
 8005d14:	e3b5      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005d16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d1a:	f000 822d 	beq.w	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8005d1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d22:	d811      	bhi.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8005d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d28:	d021      	beq.n	8005d6e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8005d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d2e:	d804      	bhi.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d34:	f000 833e 	beq.w	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
      break;
 8005d38:	e3a3      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d3e:	d01d      	beq.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8005d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d44:	d021      	beq.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8005d46:	e39c      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d4c:	f000 8277 	beq.w	800623e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 8005d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d54:	d804      	bhi.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d5a:	f000 8371 	beq.w	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
      break;
 8005d5e:	e390      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8005d60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d64:	d011      	beq.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005d66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d6a:	d00e      	beq.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8005d6c:	e389      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005d6e:	69b9      	ldr	r1, [r7, #24]
 8005d70:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005d74:	f000 fd68 	bl	8006848 <RCCEx_GetSAIxPeriphCLKFreq>
 8005d78:	61f8      	str	r0, [r7, #28]
      break;
 8005d7a:	e382      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005d7c:	69b9      	ldr	r1, [r7, #24]
 8005d7e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005d82:	f000 fd61 	bl	8006848 <RCCEx_GetSAIxPeriphCLKFreq>
 8005d86:	61f8      	str	r0, [r7, #28]
      break;
 8005d88:	e37b      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005d8a:	4b44      	ldr	r3, [pc, #272]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d90:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005d94:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d9c:	d023      	beq.n	8005de6 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 8005d9e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005da2:	d003      	beq.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005da4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005da8:	d04a      	beq.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 8005daa:	e086      	b.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005dac:	4b3b      	ldr	r3, [pc, #236]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d17b      	bne.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005db8:	4b38      	ldr	r3, [pc, #224]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0308 	and.w	r3, r3, #8
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d005      	beq.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8005dc4:	4b35      	ldr	r3, [pc, #212]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	091b      	lsrs	r3, r3, #4
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	e005      	b.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8005dd0:	4b32      	ldr	r3, [pc, #200]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dd6:	0a1b      	lsrs	r3, r3, #8
 8005dd8:	f003 030f 	and.w	r3, r3, #15
 8005ddc:	4a31      	ldr	r2, [pc, #196]	; (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005de2:	61fb      	str	r3, [r7, #28]
          break;
 8005de4:	e064      	b.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005de6:	4b2d      	ldr	r3, [pc, #180]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005df2:	d15f      	bne.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005df4:	4b29      	ldr	r3, [pc, #164]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e00:	d158      	bne.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005e02:	4b26      	ldr	r3, [pc, #152]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	0a1b      	lsrs	r3, r3, #8
 8005e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e0c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	fb02 f203 	mul.w	r2, r2, r3
 8005e16:	4b21      	ldr	r3, [pc, #132]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	091b      	lsrs	r3, r3, #4
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	3301      	adds	r3, #1
 8005e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e26:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005e28:	4b1c      	ldr	r3, [pc, #112]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	0d5b      	lsrs	r3, r3, #21
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	3301      	adds	r3, #1
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e3c:	61fb      	str	r3, [r7, #28]
          break;
 8005e3e:	e039      	b.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005e40:	4b16      	ldr	r3, [pc, #88]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e4c:	d134      	bne.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005e4e:	4b13      	ldr	r3, [pc, #76]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e5a:	d12d      	bne.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005e5c:	4b0f      	ldr	r3, [pc, #60]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	0a1b      	lsrs	r3, r3, #8
 8005e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e66:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	fb02 f203 	mul.w	r2, r2, r3
 8005e70:	4b0a      	ldr	r3, [pc, #40]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	091b      	lsrs	r3, r3, #4
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e80:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005e82:	4b06      	ldr	r3, [pc, #24]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	0d5b      	lsrs	r3, r3, #21
 8005e88:	f003 0303 	and.w	r3, r3, #3
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e96:	61fb      	str	r3, [r7, #28]
          break;
 8005e98:	e00e      	b.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005e9a:	bf00      	nop
 8005e9c:	40021000 	.word	0x40021000
 8005ea0:	0003d090 	.word	0x0003d090
 8005ea4:	0800b83c 	.word	0x0800b83c
 8005ea8:	00f42400 	.word	0x00f42400
 8005eac:	007a1200 	.word	0x007a1200
          break;
 8005eb0:	bf00      	nop
 8005eb2:	e2e6      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005eb4:	bf00      	nop
 8005eb6:	e2e4      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005eb8:	bf00      	nop
        break;
 8005eba:	e2e2      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005ebc:	4bac      	ldr	r3, [pc, #688]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d827      	bhi.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8005ece:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed4:	08005ee5 	.word	0x08005ee5
 8005ed8:	08005eed 	.word	0x08005eed
 8005edc:	08005ef5 	.word	0x08005ef5
 8005ee0:	08005f09 	.word	0x08005f09
          frequency = HAL_RCC_GetPCLK2Freq();
 8005ee4:	f7ff fb02 	bl	80054ec <HAL_RCC_GetPCLK2Freq>
 8005ee8:	61f8      	str	r0, [r7, #28]
          break;
 8005eea:	e01d      	b.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 8005eec:	f7ff fa52 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8005ef0:	61f8      	str	r0, [r7, #28]
          break;
 8005ef2:	e019      	b.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ef4:	4b9e      	ldr	r3, [pc, #632]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f00:	d10f      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 8005f02:	4b9c      	ldr	r3, [pc, #624]	; (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005f04:	61fb      	str	r3, [r7, #28]
          break;
 8005f06:	e00c      	b.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005f08:	4b99      	ldr	r3, [pc, #612]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d107      	bne.n	8005f26 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 8005f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f1a:	61fb      	str	r3, [r7, #28]
          break;
 8005f1c:	e003      	b.n	8005f26 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 8005f1e:	bf00      	nop
 8005f20:	e2af      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005f22:	bf00      	nop
 8005f24:	e2ad      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005f26:	bf00      	nop
        break;
 8005f28:	e2ab      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005f2a:	4b91      	ldr	r3, [pc, #580]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f30:	f003 030c 	and.w	r3, r3, #12
 8005f34:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	2b0c      	cmp	r3, #12
 8005f3a:	d83a      	bhi.n	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8005f3c:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8005f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f42:	bf00      	nop
 8005f44:	08005f79 	.word	0x08005f79
 8005f48:	08005fb3 	.word	0x08005fb3
 8005f4c:	08005fb3 	.word	0x08005fb3
 8005f50:	08005fb3 	.word	0x08005fb3
 8005f54:	08005f81 	.word	0x08005f81
 8005f58:	08005fb3 	.word	0x08005fb3
 8005f5c:	08005fb3 	.word	0x08005fb3
 8005f60:	08005fb3 	.word	0x08005fb3
 8005f64:	08005f89 	.word	0x08005f89
 8005f68:	08005fb3 	.word	0x08005fb3
 8005f6c:	08005fb3 	.word	0x08005fb3
 8005f70:	08005fb3 	.word	0x08005fb3
 8005f74:	08005f9d 	.word	0x08005f9d
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f78:	f7ff faa2 	bl	80054c0 <HAL_RCC_GetPCLK1Freq>
 8005f7c:	61f8      	str	r0, [r7, #28]
          break;
 8005f7e:	e01d      	b.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f80:	f7ff fa08 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8005f84:	61f8      	str	r0, [r7, #28]
          break;
 8005f86:	e019      	b.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f88:	4b79      	ldr	r3, [pc, #484]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f94:	d10f      	bne.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 8005f96:	4b77      	ldr	r3, [pc, #476]	; (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005f98:	61fb      	str	r3, [r7, #28]
          break;
 8005f9a:	e00c      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005f9c:	4b74      	ldr	r3, [pc, #464]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d107      	bne.n	8005fba <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 8005faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fae:	61fb      	str	r3, [r7, #28]
          break;
 8005fb0:	e003      	b.n	8005fba <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 8005fb2:	bf00      	nop
 8005fb4:	e265      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005fb6:	bf00      	nop
 8005fb8:	e263      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8005fba:	bf00      	nop
        break;
 8005fbc:	e261      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005fbe:	4b6c      	ldr	r3, [pc, #432]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fc8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	2b10      	cmp	r3, #16
 8005fce:	d00d      	beq.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8005fd0:	2b10      	cmp	r3, #16
 8005fd2:	d802      	bhi.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d005      	beq.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 8005fd8:	e024      	b.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	d00a      	beq.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8005fde:	2b30      	cmp	r3, #48	; 0x30
 8005fe0:	d012      	beq.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 8005fe2:	e01f      	b.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005fe4:	f7ff fa6c 	bl	80054c0 <HAL_RCC_GetPCLK1Freq>
 8005fe8:	61f8      	str	r0, [r7, #28]
          break;
 8005fea:	e01b      	b.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 8005fec:	f7ff f9d2 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8005ff0:	61f8      	str	r0, [r7, #28]
          break;
 8005ff2:	e017      	b.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ff4:	4b5e      	ldr	r3, [pc, #376]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006000:	d10d      	bne.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 8006002:	4b5c      	ldr	r3, [pc, #368]	; (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8006004:	61fb      	str	r3, [r7, #28]
          break;
 8006006:	e00a      	b.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006008:	4b59      	ldr	r3, [pc, #356]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800600a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b02      	cmp	r3, #2
 8006014:	d105      	bne.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 8006016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800601a:	61fb      	str	r3, [r7, #28]
          break;
 800601c:	e001      	b.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800601e:	bf00      	nop
 8006020:	e22f      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006022:	bf00      	nop
        break;
 8006024:	e22d      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006026:	4b52      	ldr	r3, [pc, #328]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006030:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	2b40      	cmp	r3, #64	; 0x40
 8006036:	d00d      	beq.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 8006038:	2b40      	cmp	r3, #64	; 0x40
 800603a:	d802      	bhi.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800603c:	2b00      	cmp	r3, #0
 800603e:	d005      	beq.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 8006040:	e024      	b.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 8006042:	2b80      	cmp	r3, #128	; 0x80
 8006044:	d00a      	beq.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8006046:	2bc0      	cmp	r3, #192	; 0xc0
 8006048:	d012      	beq.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 800604a:	e01f      	b.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800604c:	f7ff fa38 	bl	80054c0 <HAL_RCC_GetPCLK1Freq>
 8006050:	61f8      	str	r0, [r7, #28]
          break;
 8006052:	e01b      	b.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 8006054:	f7ff f99e 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8006058:	61f8      	str	r0, [r7, #28]
          break;
 800605a:	e017      	b.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800605c:	4b44      	ldr	r3, [pc, #272]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006068:	d10d      	bne.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 800606a:	4b42      	ldr	r3, [pc, #264]	; (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800606c:	61fb      	str	r3, [r7, #28]
          break;
 800606e:	e00a      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006070:	4b3f      	ldr	r3, [pc, #252]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b02      	cmp	r3, #2
 800607c:	d105      	bne.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 800607e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006082:	61fb      	str	r3, [r7, #28]
          break;
 8006084:	e001      	b.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 8006086:	bf00      	nop
 8006088:	e1fb      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800608a:	bf00      	nop
        break;
 800608c:	e1f9      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800608e:	4b38      	ldr	r3, [pc, #224]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006098:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a0:	d010      	beq.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80060a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a6:	d802      	bhi.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d007      	beq.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 80060ac:	e026      	b.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 80060ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b2:	d00b      	beq.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80060b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060b8:	d012      	beq.n	80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 80060ba:	e01f      	b.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 80060bc:	f7ff fa00 	bl	80054c0 <HAL_RCC_GetPCLK1Freq>
 80060c0:	61f8      	str	r0, [r7, #28]
          break;
 80060c2:	e01b      	b.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 80060c4:	f7ff f966 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 80060c8:	61f8      	str	r0, [r7, #28]
          break;
 80060ca:	e017      	b.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060cc:	4b28      	ldr	r3, [pc, #160]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060d8:	d10d      	bne.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 80060da:	4b26      	ldr	r3, [pc, #152]	; (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80060dc:	61fb      	str	r3, [r7, #28]
          break;
 80060de:	e00a      	b.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80060e0:	4b23      	ldr	r3, [pc, #140]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80060e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d105      	bne.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 80060ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060f2:	61fb      	str	r3, [r7, #28]
          break;
 80060f4:	e001      	b.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 80060f6:	bf00      	nop
 80060f8:	e1c3      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80060fa:	bf00      	nop
        break;
 80060fc:	e1c1      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80060fe:	4b1c      	ldr	r3, [pc, #112]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006104:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006108:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006110:	d010      	beq.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8006112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006116:	d802      	bhi.n	800611e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006118:	2b00      	cmp	r3, #0
 800611a:	d007      	beq.n	800612c <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 800611c:	e026      	b.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 800611e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006122:	d00b      	beq.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8006124:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006128:	d012      	beq.n	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 800612a:	e01f      	b.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800612c:	f7ff f9c8 	bl	80054c0 <HAL_RCC_GetPCLK1Freq>
 8006130:	61f8      	str	r0, [r7, #28]
          break;
 8006132:	e01b      	b.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 8006134:	f7ff f92e 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8006138:	61f8      	str	r0, [r7, #28]
          break;
 800613a:	e017      	b.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800613c:	4b0c      	ldr	r3, [pc, #48]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006148:	d10d      	bne.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 800614a:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800614c:	61fb      	str	r3, [r7, #28]
          break;
 800614e:	e00a      	b.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006150:	4b07      	ldr	r3, [pc, #28]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b02      	cmp	r3, #2
 800615c:	d105      	bne.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 800615e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006162:	61fb      	str	r3, [r7, #28]
          break;
 8006164:	e001      	b.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 8006166:	bf00      	nop
 8006168:	e18b      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800616a:	bf00      	nop
        break;
 800616c:	e189      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800616e:	bf00      	nop
 8006170:	40021000 	.word	0x40021000
 8006174:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006178:	4bae      	ldr	r3, [pc, #696]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800617a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006182:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800618a:	d02f      	beq.n	80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 800618c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006190:	d003      	beq.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006192:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006196:	d004      	beq.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 8006198:	e050      	b.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetSysClockFreq();
 800619a:	f7ff f8fb 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 800619e:	61f8      	str	r0, [r7, #28]
          break;
 80061a0:	e04c      	b.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 80061a2:	4ba4      	ldr	r3, [pc, #656]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d043      	beq.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80061ae:	4ba1      	ldr	r3, [pc, #644]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	0a1b      	lsrs	r3, r3, #8
 80061b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061b8:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	fb02 f203 	mul.w	r2, r2, r3
 80061c2:	4b9c      	ldr	r3, [pc, #624]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	091b      	lsrs	r3, r3, #4
 80061c8:	f003 0307 	and.w	r3, r3, #7
 80061cc:	3301      	adds	r3, #1
 80061ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d2:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80061d4:	4b97      	ldr	r3, [pc, #604]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	0e5b      	lsrs	r3, r3, #25
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	3301      	adds	r3, #1
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e8:	61fb      	str	r3, [r7, #28]
          break;
 80061ea:	e024      	b.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 80061ec:	4b91      	ldr	r3, [pc, #580]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d020      	beq.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80061f8:	4b8e      	ldr	r3, [pc, #568]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	0a1b      	lsrs	r3, r3, #8
 80061fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006202:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	fb02 f203 	mul.w	r2, r2, r3
 800620c:	4b89      	ldr	r3, [pc, #548]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	091b      	lsrs	r3, r3, #4
 8006212:	f003 0307 	and.w	r3, r3, #7
 8006216:	3301      	adds	r3, #1
 8006218:	fbb2 f3f3 	udiv	r3, r2, r3
 800621c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800621e:	4b85      	ldr	r3, [pc, #532]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	0e5b      	lsrs	r3, r3, #25
 8006224:	f003 0303 	and.w	r3, r3, #3
 8006228:	3301      	adds	r3, #1
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006232:	61fb      	str	r3, [r7, #28]
          break;
 8006234:	e001      	b.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          break;
 8006236:	bf00      	nop
 8006238:	e123      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800623a:	bf00      	nop
        break;
 800623c:	e121      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800623e:	4b7d      	ldr	r3, [pc, #500]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006244:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006248:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d103      	bne.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006250:	f7ff f94c 	bl	80054ec <HAL_RCC_GetPCLK2Freq>
 8006254:	61f8      	str	r0, [r7, #28]
        break;
 8006256:	e114      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 8006258:	f7ff f89c 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 800625c:	61f8      	str	r0, [r7, #28]
        break;
 800625e:	e110      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006260:	4b74      	ldr	r3, [pc, #464]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006266:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800626a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006272:	d009      	beq.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8006274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006278:	d00a      	beq.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 800627a:	2b00      	cmp	r3, #0
 800627c:	d000      	beq.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          break;
 800627e:	e011      	b.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006280:	f7ff f91e 	bl	80054c0 <HAL_RCC_GetPCLK1Freq>
 8006284:	61f8      	str	r0, [r7, #28]
          break;
 8006286:	e00d      	b.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetSysClockFreq();
 8006288:	f7ff f884 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 800628c:	61f8      	str	r0, [r7, #28]
          break;
 800628e:	e009      	b.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006290:	4b68      	ldr	r3, [pc, #416]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800629c:	d101      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
            frequency = HSI_VALUE;
 800629e:	4b66      	ldr	r3, [pc, #408]	; (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80062a0:	61fb      	str	r3, [r7, #28]
          break;
 80062a2:	bf00      	nop
        break;
 80062a4:	e0ed      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80062a6:	4b63      	ldr	r3, [pc, #396]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80062a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80062b0:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062b8:	d009      	beq.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80062ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062be:	d00a      	beq.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d000      	beq.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 80062c4:	e011      	b.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetPCLK1Freq();
 80062c6:	f7ff f8fb 	bl	80054c0 <HAL_RCC_GetPCLK1Freq>
 80062ca:	61f8      	str	r0, [r7, #28]
          break;
 80062cc:	e00d      	b.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetSysClockFreq();
 80062ce:	f7ff f861 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 80062d2:	61f8      	str	r0, [r7, #28]
          break;
 80062d4:	e009      	b.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062d6:	4b57      	ldr	r3, [pc, #348]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062e2:	d101      	bne.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
            frequency = HSI_VALUE;
 80062e4:	4b54      	ldr	r3, [pc, #336]	; (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80062e6:	61fb      	str	r3, [r7, #28]
          break;
 80062e8:	bf00      	nop
        break;
 80062ea:	e0ca      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80062ec:	4b51      	ldr	r3, [pc, #324]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80062ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062f6:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062fe:	d009      	beq.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006300:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006304:	d00a      	beq.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d000      	beq.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 800630a:	e011      	b.n	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800630c:	f7ff f8d8 	bl	80054c0 <HAL_RCC_GetPCLK1Freq>
 8006310:	61f8      	str	r0, [r7, #28]
          break;
 8006312:	e00d      	b.n	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetSysClockFreq();
 8006314:	f7ff f83e 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8006318:	61f8      	str	r0, [r7, #28]
          break;
 800631a:	e009      	b.n	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800631c:	4b45      	ldr	r3, [pc, #276]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006328:	d101      	bne.n	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            frequency = HSI_VALUE;
 800632a:	4b43      	ldr	r3, [pc, #268]	; (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800632c:	61fb      	str	r3, [r7, #28]
          break;
 800632e:	bf00      	nop
        break;
 8006330:	e0a7      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006332:	4b40      	ldr	r3, [pc, #256]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006338:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800633c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006344:	d010      	beq.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8006346:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800634a:	d802      	bhi.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 800634c:	2b00      	cmp	r3, #0
 800634e:	d007      	beq.n	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
          break;
 8006350:	e02f      	b.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
        switch(srcclk)
 8006352:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006356:	d012      	beq.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8006358:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800635c:	d019      	beq.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800635e:	e028      	b.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006360:	f7ff f8ae 	bl	80054c0 <HAL_RCC_GetPCLK1Freq>
 8006364:	61f8      	str	r0, [r7, #28]
          break;
 8006366:	e024      	b.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006368:	4b32      	ldr	r3, [pc, #200]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800636a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b02      	cmp	r3, #2
 8006374:	d118      	bne.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
              frequency = LSI_VALUE;
 8006376:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800637a:	61fb      	str	r3, [r7, #28]
          break;
 800637c:	e014      	b.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800637e:	4b2d      	ldr	r3, [pc, #180]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800638a:	d10f      	bne.n	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>
            frequency = HSI_VALUE;
 800638c:	4b2a      	ldr	r3, [pc, #168]	; (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800638e:	61fb      	str	r3, [r7, #28]
          break;
 8006390:	e00c      	b.n	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006392:	4b28      	ldr	r3, [pc, #160]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006398:	f003 0302 	and.w	r3, r3, #2
 800639c:	2b02      	cmp	r3, #2
 800639e:	d107      	bne.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
            frequency = LSE_VALUE;
 80063a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063a4:	61fb      	str	r3, [r7, #28]
          break;
 80063a6:	e003      	b.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          break;
 80063a8:	bf00      	nop
 80063aa:	e06a      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80063ac:	bf00      	nop
 80063ae:	e068      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80063b0:	bf00      	nop
        break;
 80063b2:	e066      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80063b4:	4b1f      	ldr	r3, [pc, #124]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80063b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80063be:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063c6:	d010      	beq.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80063c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063cc:	d802      	bhi.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d007      	beq.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          break;
 80063d2:	e034      	b.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
        switch(srcclk)
 80063d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063d8:	d012      	beq.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 80063da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063de:	d019      	beq.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          break;
 80063e0:	e02d      	b.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80063e2:	f7ff f86d 	bl	80054c0 <HAL_RCC_GetPCLK1Freq>
 80063e6:	61f8      	str	r0, [r7, #28]
          break;
 80063e8:	e029      	b.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80063ea:	4b12      	ldr	r3, [pc, #72]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80063ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d118      	bne.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = LSI_VALUE;
 80063f8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80063fc:	61fb      	str	r3, [r7, #28]
          break;
 80063fe:	e014      	b.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006400:	4b0c      	ldr	r3, [pc, #48]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800640c:	d10f      	bne.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
            frequency = HSI_VALUE;
 800640e:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006410:	61fb      	str	r3, [r7, #28]
          break;
 8006412:	e00c      	b.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006414:	4b07      	ldr	r3, [pc, #28]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b02      	cmp	r3, #2
 8006420:	d10c      	bne.n	800643c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
            frequency = LSE_VALUE;
 8006422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006426:	61fb      	str	r3, [r7, #28]
          break;
 8006428:	e008      	b.n	800643c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          break;
 800642a:	bf00      	nop
 800642c:	e029      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800642e:	bf00      	nop
 8006430:	e027      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006432:	bf00      	nop
 8006434:	40021000 	.word	0x40021000
 8006438:	00f42400 	.word	0x00f42400
          break;
 800643c:	bf00      	nop
        break;
 800643e:	e020      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8006440:	4b12      	ldr	r3, [pc, #72]	; (800648c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006446:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800644a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
 8006452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006456:	d004      	beq.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          break;
 8006458:	e00d      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800645a:	f7ff f831 	bl	80054c0 <HAL_RCC_GetPCLK1Freq>
 800645e:	61f8      	str	r0, [r7, #28]
          break;
 8006460:	e009      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006462:	4b0a      	ldr	r3, [pc, #40]	; (800648c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800646a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800646e:	d101      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
            frequency = HSI_VALUE;
 8006470:	4b07      	ldr	r3, [pc, #28]	; (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
 8006472:	61fb      	str	r3, [r7, #28]
          break;
 8006474:	bf00      	nop
        break;
 8006476:	e004      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8006478:	bf00      	nop
 800647a:	e002      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 800647c:	bf00      	nop
 800647e:	e000      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8006480:	bf00      	nop
    }
  }

  return(frequency);
 8006482:	69fb      	ldr	r3, [r7, #28]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3720      	adds	r7, #32
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	40021000 	.word	0x40021000
 8006490:	00f42400 	.word	0x00f42400

08006494 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006494:	b480      	push	{r7}
 8006496:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006498:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a04      	ldr	r2, [pc, #16]	; (80064b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800649e:	f043 0304 	orr.w	r3, r3, #4
 80064a2:	6013      	str	r3, [r2, #0]
}
 80064a4:	bf00      	nop
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	40021000 	.word	0x40021000

080064b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064c2:	4b73      	ldr	r3, [pc, #460]	; (8006690 <RCCEx_PLLSAI1_Config+0x1dc>)
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f003 0303 	and.w	r3, r3, #3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d018      	beq.n	8006500 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80064ce:	4b70      	ldr	r3, [pc, #448]	; (8006690 <RCCEx_PLLSAI1_Config+0x1dc>)
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f003 0203 	and.w	r2, r3, #3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d10d      	bne.n	80064fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
       ||
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d009      	beq.n	80064fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80064e6:	4b6a      	ldr	r3, [pc, #424]	; (8006690 <RCCEx_PLLSAI1_Config+0x1dc>)
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	091b      	lsrs	r3, r3, #4
 80064ec:	f003 0307 	and.w	r3, r3, #7
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
       ||
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d044      	beq.n	8006584 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	73fb      	strb	r3, [r7, #15]
 80064fe:	e041      	b.n	8006584 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b02      	cmp	r3, #2
 8006506:	d00c      	beq.n	8006522 <RCCEx_PLLSAI1_Config+0x6e>
 8006508:	2b03      	cmp	r3, #3
 800650a:	d013      	beq.n	8006534 <RCCEx_PLLSAI1_Config+0x80>
 800650c:	2b01      	cmp	r3, #1
 800650e:	d120      	bne.n	8006552 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006510:	4b5f      	ldr	r3, [pc, #380]	; (8006690 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d11d      	bne.n	8006558 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006520:	e01a      	b.n	8006558 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006522:	4b5b      	ldr	r3, [pc, #364]	; (8006690 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800652a:	2b00      	cmp	r3, #0
 800652c:	d116      	bne.n	800655c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006532:	e013      	b.n	800655c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006534:	4b56      	ldr	r3, [pc, #344]	; (8006690 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10f      	bne.n	8006560 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006540:	4b53      	ldr	r3, [pc, #332]	; (8006690 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d109      	bne.n	8006560 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006550:	e006      	b.n	8006560 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	73fb      	strb	r3, [r7, #15]
      break;
 8006556:	e004      	b.n	8006562 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006558:	bf00      	nop
 800655a:	e002      	b.n	8006562 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800655c:	bf00      	nop
 800655e:	e000      	b.n	8006562 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006560:	bf00      	nop
    }

    if(status == HAL_OK)
 8006562:	7bfb      	ldrb	r3, [r7, #15]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10d      	bne.n	8006584 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006568:	4b49      	ldr	r3, [pc, #292]	; (8006690 <RCCEx_PLLSAI1_Config+0x1dc>)
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6819      	ldr	r1, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	3b01      	subs	r3, #1
 800657a:	011b      	lsls	r3, r3, #4
 800657c:	430b      	orrs	r3, r1
 800657e:	4944      	ldr	r1, [pc, #272]	; (8006690 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006580:	4313      	orrs	r3, r2
 8006582:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d17d      	bne.n	8006686 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800658a:	4b41      	ldr	r3, [pc, #260]	; (8006690 <RCCEx_PLLSAI1_Config+0x1dc>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a40      	ldr	r2, [pc, #256]	; (8006690 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006590:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006596:	f7fb fd01 	bl	8001f9c <HAL_GetTick>
 800659a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800659c:	e009      	b.n	80065b2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800659e:	f7fb fcfd 	bl	8001f9c <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d902      	bls.n	80065b2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	73fb      	strb	r3, [r7, #15]
        break;
 80065b0:	e005      	b.n	80065be <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065b2:	4b37      	ldr	r3, [pc, #220]	; (8006690 <RCCEx_PLLSAI1_Config+0x1dc>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1ef      	bne.n	800659e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80065be:	7bfb      	ldrb	r3, [r7, #15]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d160      	bne.n	8006686 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d111      	bne.n	80065ee <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065ca:	4b31      	ldr	r3, [pc, #196]	; (8006690 <RCCEx_PLLSAI1_Config+0x1dc>)
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80065d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	6892      	ldr	r2, [r2, #8]
 80065da:	0211      	lsls	r1, r2, #8
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	68d2      	ldr	r2, [r2, #12]
 80065e0:	0912      	lsrs	r2, r2, #4
 80065e2:	0452      	lsls	r2, r2, #17
 80065e4:	430a      	orrs	r2, r1
 80065e6:	492a      	ldr	r1, [pc, #168]	; (8006690 <RCCEx_PLLSAI1_Config+0x1dc>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	610b      	str	r3, [r1, #16]
 80065ec:	e027      	b.n	800663e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d112      	bne.n	800661a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065f4:	4b26      	ldr	r3, [pc, #152]	; (8006690 <RCCEx_PLLSAI1_Config+0x1dc>)
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80065fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	6892      	ldr	r2, [r2, #8]
 8006604:	0211      	lsls	r1, r2, #8
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6912      	ldr	r2, [r2, #16]
 800660a:	0852      	lsrs	r2, r2, #1
 800660c:	3a01      	subs	r2, #1
 800660e:	0552      	lsls	r2, r2, #21
 8006610:	430a      	orrs	r2, r1
 8006612:	491f      	ldr	r1, [pc, #124]	; (8006690 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006614:	4313      	orrs	r3, r2
 8006616:	610b      	str	r3, [r1, #16]
 8006618:	e011      	b.n	800663e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800661a:	4b1d      	ldr	r3, [pc, #116]	; (8006690 <RCCEx_PLLSAI1_Config+0x1dc>)
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006622:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	6892      	ldr	r2, [r2, #8]
 800662a:	0211      	lsls	r1, r2, #8
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	6952      	ldr	r2, [r2, #20]
 8006630:	0852      	lsrs	r2, r2, #1
 8006632:	3a01      	subs	r2, #1
 8006634:	0652      	lsls	r2, r2, #25
 8006636:	430a      	orrs	r2, r1
 8006638:	4915      	ldr	r1, [pc, #84]	; (8006690 <RCCEx_PLLSAI1_Config+0x1dc>)
 800663a:	4313      	orrs	r3, r2
 800663c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800663e:	4b14      	ldr	r3, [pc, #80]	; (8006690 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a13      	ldr	r2, [pc, #76]	; (8006690 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006644:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006648:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800664a:	f7fb fca7 	bl	8001f9c <HAL_GetTick>
 800664e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006650:	e009      	b.n	8006666 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006652:	f7fb fca3 	bl	8001f9c <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	2b02      	cmp	r3, #2
 800665e:	d902      	bls.n	8006666 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	73fb      	strb	r3, [r7, #15]
          break;
 8006664:	e005      	b.n	8006672 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006666:	4b0a      	ldr	r3, [pc, #40]	; (8006690 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d0ef      	beq.n	8006652 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8006672:	7bfb      	ldrb	r3, [r7, #15]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d106      	bne.n	8006686 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006678:	4b05      	ldr	r3, [pc, #20]	; (8006690 <RCCEx_PLLSAI1_Config+0x1dc>)
 800667a:	691a      	ldr	r2, [r3, #16]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	4903      	ldr	r1, [pc, #12]	; (8006690 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006682:	4313      	orrs	r3, r2
 8006684:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006686:	7bfb      	ldrb	r3, [r7, #15]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	40021000 	.word	0x40021000

08006694 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80066a2:	4b68      	ldr	r3, [pc, #416]	; (8006844 <RCCEx_PLLSAI2_Config+0x1b0>)
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d018      	beq.n	80066e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80066ae:	4b65      	ldr	r3, [pc, #404]	; (8006844 <RCCEx_PLLSAI2_Config+0x1b0>)
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f003 0203 	and.w	r2, r3, #3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d10d      	bne.n	80066da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
       ||
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d009      	beq.n	80066da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80066c6:	4b5f      	ldr	r3, [pc, #380]	; (8006844 <RCCEx_PLLSAI2_Config+0x1b0>)
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	091b      	lsrs	r3, r3, #4
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
       ||
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d044      	beq.n	8006764 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	73fb      	strb	r3, [r7, #15]
 80066de:	e041      	b.n	8006764 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d00c      	beq.n	8006702 <RCCEx_PLLSAI2_Config+0x6e>
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d013      	beq.n	8006714 <RCCEx_PLLSAI2_Config+0x80>
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d120      	bne.n	8006732 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80066f0:	4b54      	ldr	r3, [pc, #336]	; (8006844 <RCCEx_PLLSAI2_Config+0x1b0>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d11d      	bne.n	8006738 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006700:	e01a      	b.n	8006738 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006702:	4b50      	ldr	r3, [pc, #320]	; (8006844 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800670a:	2b00      	cmp	r3, #0
 800670c:	d116      	bne.n	800673c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006712:	e013      	b.n	800673c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006714:	4b4b      	ldr	r3, [pc, #300]	; (8006844 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10f      	bne.n	8006740 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006720:	4b48      	ldr	r3, [pc, #288]	; (8006844 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d109      	bne.n	8006740 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006730:	e006      	b.n	8006740 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	73fb      	strb	r3, [r7, #15]
      break;
 8006736:	e004      	b.n	8006742 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006738:	bf00      	nop
 800673a:	e002      	b.n	8006742 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800673c:	bf00      	nop
 800673e:	e000      	b.n	8006742 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006740:	bf00      	nop
    }

    if(status == HAL_OK)
 8006742:	7bfb      	ldrb	r3, [r7, #15]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10d      	bne.n	8006764 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006748:	4b3e      	ldr	r3, [pc, #248]	; (8006844 <RCCEx_PLLSAI2_Config+0x1b0>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6819      	ldr	r1, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	3b01      	subs	r3, #1
 800675a:	011b      	lsls	r3, r3, #4
 800675c:	430b      	orrs	r3, r1
 800675e:	4939      	ldr	r1, [pc, #228]	; (8006844 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006760:	4313      	orrs	r3, r2
 8006762:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d167      	bne.n	800683a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800676a:	4b36      	ldr	r3, [pc, #216]	; (8006844 <RCCEx_PLLSAI2_Config+0x1b0>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a35      	ldr	r2, [pc, #212]	; (8006844 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006776:	f7fb fc11 	bl	8001f9c <HAL_GetTick>
 800677a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800677c:	e009      	b.n	8006792 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800677e:	f7fb fc0d 	bl	8001f9c <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d902      	bls.n	8006792 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	73fb      	strb	r3, [r7, #15]
        break;
 8006790:	e005      	b.n	800679e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006792:	4b2c      	ldr	r3, [pc, #176]	; (8006844 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1ef      	bne.n	800677e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800679e:	7bfb      	ldrb	r3, [r7, #15]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d14a      	bne.n	800683a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d111      	bne.n	80067ce <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80067aa:	4b26      	ldr	r3, [pc, #152]	; (8006844 <RCCEx_PLLSAI2_Config+0x1b0>)
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80067b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	6892      	ldr	r2, [r2, #8]
 80067ba:	0211      	lsls	r1, r2, #8
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	68d2      	ldr	r2, [r2, #12]
 80067c0:	0912      	lsrs	r2, r2, #4
 80067c2:	0452      	lsls	r2, r2, #17
 80067c4:	430a      	orrs	r2, r1
 80067c6:	491f      	ldr	r1, [pc, #124]	; (8006844 <RCCEx_PLLSAI2_Config+0x1b0>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	614b      	str	r3, [r1, #20]
 80067cc:	e011      	b.n	80067f2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80067ce:	4b1d      	ldr	r3, [pc, #116]	; (8006844 <RCCEx_PLLSAI2_Config+0x1b0>)
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80067d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	6892      	ldr	r2, [r2, #8]
 80067de:	0211      	lsls	r1, r2, #8
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	6912      	ldr	r2, [r2, #16]
 80067e4:	0852      	lsrs	r2, r2, #1
 80067e6:	3a01      	subs	r2, #1
 80067e8:	0652      	lsls	r2, r2, #25
 80067ea:	430a      	orrs	r2, r1
 80067ec:	4915      	ldr	r1, [pc, #84]	; (8006844 <RCCEx_PLLSAI2_Config+0x1b0>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80067f2:	4b14      	ldr	r3, [pc, #80]	; (8006844 <RCCEx_PLLSAI2_Config+0x1b0>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a13      	ldr	r2, [pc, #76]	; (8006844 <RCCEx_PLLSAI2_Config+0x1b0>)
 80067f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067fc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067fe:	f7fb fbcd 	bl	8001f9c <HAL_GetTick>
 8006802:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006804:	e009      	b.n	800681a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006806:	f7fb fbc9 	bl	8001f9c <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	2b02      	cmp	r3, #2
 8006812:	d902      	bls.n	800681a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	73fb      	strb	r3, [r7, #15]
          break;
 8006818:	e005      	b.n	8006826 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800681a:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <RCCEx_PLLSAI2_Config+0x1b0>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d0ef      	beq.n	8006806 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d106      	bne.n	800683a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800682c:	4b05      	ldr	r3, [pc, #20]	; (8006844 <RCCEx_PLLSAI2_Config+0x1b0>)
 800682e:	695a      	ldr	r2, [r3, #20]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	4903      	ldr	r1, [pc, #12]	; (8006844 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006836:	4313      	orrs	r3, r2
 8006838:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800683a:	7bfb      	ldrb	r3, [r7, #15]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	40021000 	.word	0x40021000

08006848 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006848:	b480      	push	{r7}
 800684a:	b089      	sub	sp, #36	; 0x24
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006852:	2300      	movs	r3, #0
 8006854:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006864:	d10c      	bne.n	8006880 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006866:	4b62      	ldr	r3, [pc, #392]	; (80069f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006870:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006878:	d112      	bne.n	80068a0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800687a:	4b5e      	ldr	r3, [pc, #376]	; (80069f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 800687c:	61fb      	str	r3, [r7, #28]
 800687e:	e00f      	b.n	80068a0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006886:	d10b      	bne.n	80068a0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006888:	4b59      	ldr	r3, [pc, #356]	; (80069f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800688a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006892:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800689a:	d101      	bne.n	80068a0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800689c:	4b55      	ldr	r3, [pc, #340]	; (80069f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 800689e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f040 809c 	bne.w	80069e0 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
  {
    pllvco = InputFrequency;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068b2:	d003      	beq.n	80068bc <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068ba:	d12d      	bne.n	8006918 <RCCEx_GetSAIxPeriphCLKFreq+0xd0>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 80068bc:	4b4c      	ldr	r3, [pc, #304]	; (80069f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 808b 	beq.w	80069e0 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80068ca:	4b49      	ldr	r3, [pc, #292]	; (80069f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	091b      	lsrs	r3, r3, #4
 80068d0:	f003 0307 	and.w	r3, r3, #7
 80068d4:	3301      	adds	r3, #1
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068dc:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80068de:	4b44      	ldr	r3, [pc, #272]	; (80069f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	0a1b      	lsrs	r3, r3, #8
 80068e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068e8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10a      	bne.n	8006906 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80068f0:	4b3f      	ldr	r3, [pc, #252]	; (80069f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d002      	beq.n	8006902 <RCCEx_GetSAIxPeriphCLKFreq+0xba>
          {
            pllp = 17U;
 80068fc:	2311      	movs	r3, #17
 80068fe:	617b      	str	r3, [r7, #20]
 8006900:	e001      	b.n	8006906 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
          }
          else
          {
            pllp = 7U;
 8006902:	2307      	movs	r3, #7
 8006904:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	fb02 f203 	mul.w	r2, r2, r3
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	fbb2 f3f3 	udiv	r3, r2, r3
 8006914:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8006916:	e063      	b.n	80069e0 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d12c      	bne.n	8006978 <RCCEx_GetSAIxPeriphCLKFreq+0x130>
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 800691e:	4b34      	ldr	r3, [pc, #208]	; (80069f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d05a      	beq.n	80069e0 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800692a:	4b31      	ldr	r3, [pc, #196]	; (80069f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	091b      	lsrs	r3, r3, #4
 8006930:	f003 0307 	and.w	r3, r3, #7
 8006934:	3301      	adds	r3, #1
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	fbb2 f3f3 	udiv	r3, r2, r3
 800693c:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800693e:	4b2c      	ldr	r3, [pc, #176]	; (80069f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	0a1b      	lsrs	r3, r3, #8
 8006944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006948:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10a      	bne.n	8006966 <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006950:	4b27      	ldr	r3, [pc, #156]	; (80069f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <RCCEx_GetSAIxPeriphCLKFreq+0x11a>
          {
            pllp = 17U;
 800695c:	2311      	movs	r3, #17
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	e001      	b.n	8006966 <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
          }
          else
          {
            pllp = 7U;
 8006962:	2307      	movs	r3, #7
 8006964:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	fb02 f203 	mul.w	r2, r2, r3
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	fbb2 f3f3 	udiv	r3, r2, r3
 8006974:	61fb      	str	r3, [r7, #28]
 8006976:	e033      	b.n	80069e0 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800697e:	d003      	beq.n	8006988 <RCCEx_GetSAIxPeriphCLKFreq+0x140>
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006986:	d12b      	bne.n	80069e0 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8006988:	4b19      	ldr	r3, [pc, #100]	; (80069f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d025      	beq.n	80069e0 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006994:	4b16      	ldr	r3, [pc, #88]	; (80069f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	091b      	lsrs	r3, r3, #4
 800699a:	f003 0307 	and.w	r3, r3, #7
 800699e:	3301      	adds	r3, #1
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80069a8:	4b11      	ldr	r3, [pc, #68]	; (80069f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	0a1b      	lsrs	r3, r3, #8
 80069ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069b2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10a      	bne.n	80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80069ba:	4b0d      	ldr	r3, [pc, #52]	; (80069f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d002      	beq.n	80069cc <RCCEx_GetSAIxPeriphCLKFreq+0x184>
          {
            pllp = 17U;
 80069c6:	2311      	movs	r3, #17
 80069c8:	617b      	str	r3, [r7, #20]
 80069ca:	e001      	b.n	80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
          }
          else
          {
            pllp = 7U;
 80069cc:	2307      	movs	r3, #7
 80069ce:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	fb02 f203 	mul.w	r2, r2, r3
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	fbb2 f3f3 	udiv	r3, r2, r3
 80069de:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80069e0:	69fb      	ldr	r3, [r7, #28]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3724      	adds	r7, #36	; 0x24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	40021000 	.word	0x40021000
 80069f4:	001fff68 	.word	0x001fff68

080069f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d06f      	beq.n	8006aea <HAL_RTC_Init+0xf2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d106      	bne.n	8006a24 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7fa fc5c 	bl	80012dc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	22ca      	movs	r2, #202	; 0xca
 8006a32:	625a      	str	r2, [r3, #36]	; 0x24
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2253      	movs	r2, #83	; 0x53
 8006a3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 f9a3 	bl	8006d88 <RTC_EnterInitMode>
 8006a42:	4603      	mov	r3, r0
 8006a44:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006a46:	7bfb      	ldrb	r3, [r7, #15]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d14e      	bne.n	8006aea <HAL_RTC_Init+0xf2>
#if defined(STM32L412xx) || defined(STM32L422xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	6812      	ldr	r2, [r2, #0]
 8006a56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a5e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6899      	ldr	r1, [r3, #8]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	431a      	orrs	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	68d2      	ldr	r2, [r2, #12]
 8006a86:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6919      	ldr	r1, [r3, #16]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	041a      	lsls	r2, r3, #16
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f9a7 	bl	8006df0 <RTC_ExitInitMode>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d11e      	bne.n	8006aea <HAL_RTC_Init+0xf2>
      {
#if defined(STM32L412xx) || defined(STM32L422xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0203 	bic.w	r2, r2, #3
 8006aba:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	69da      	ldr	r2, [r3, #28]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	431a      	orrs	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	22ff      	movs	r2, #255	; 0xff
 8006ada:	625a      	str	r2, [r3, #36]	; 0x24

        if (status == HAL_OK)
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d103      	bne.n	8006aea <HAL_RTC_Init+0xf2>
        {
          hrtc->State = HAL_RTC_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
      }
    }
  }

  return status;
 8006aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006af4:	b590      	push	{r4, r7, lr}
 8006af6:	b087      	sub	sp, #28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d101      	bne.n	8006b0e <HAL_RTC_SetTime+0x1a>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	e08b      	b.n	8006c26 <HAL_RTC_SetTime+0x132>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2202      	movs	r2, #2
 8006b1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	22ca      	movs	r2, #202	; 0xca
 8006b24:	625a      	str	r2, [r3, #36]	; 0x24
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2253      	movs	r2, #83	; 0x53
 8006b2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 f92a 	bl	8006d88 <RTC_EnterInitMode>
 8006b34:	4603      	mov	r3, r0
 8006b36:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006b38:	7cfb      	ldrb	r3, [r7, #19]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d163      	bne.n	8006c06 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d126      	bne.n	8006b92 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d102      	bne.n	8006b58 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2200      	movs	r2, #0
 8006b56:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 f985 	bl	8006e6c <RTC_ByteToBcd2>
 8006b62:	4603      	mov	r3, r0
 8006b64:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	785b      	ldrb	r3, [r3, #1]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 f97e 	bl	8006e6c <RTC_ByteToBcd2>
 8006b70:	4603      	mov	r3, r0
 8006b72:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b74:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	789b      	ldrb	r3, [r3, #2]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 f976 	bl	8006e6c <RTC_ByteToBcd2>
 8006b80:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b82:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	78db      	ldrb	r3, [r3, #3]
 8006b8a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	e018      	b.n	8006bc4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d102      	bne.n	8006ba6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	785b      	ldrb	r3, [r3, #1]
 8006bb0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006bb2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006bb8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	78db      	ldrb	r3, [r3, #3]
 8006bbe:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006bce:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006bd2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	689a      	ldr	r2, [r3, #8]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006be2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6899      	ldr	r1, [r3, #8]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	68da      	ldr	r2, [r3, #12]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 f8f7 	bl	8006df0 <RTC_ExitInitMode>
 8006c02:	4603      	mov	r3, r0
 8006c04:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	22ff      	movs	r2, #255	; 0xff
 8006c0c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006c0e:	7cfb      	ldrb	r3, [r7, #19]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d103      	bne.n	8006c1c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006c24:	7cfb      	ldrb	r3, [r7, #19]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	371c      	adds	r7, #28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd90      	pop	{r4, r7, pc}

08006c2e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006c2e:	b590      	push	{r4, r7, lr}
 8006c30:	b087      	sub	sp, #28
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	60f8      	str	r0, [r7, #12]
 8006c36:	60b9      	str	r1, [r7, #8]
 8006c38:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d101      	bne.n	8006c48 <HAL_RTC_SetDate+0x1a>
 8006c44:	2302      	movs	r3, #2
 8006c46:	e075      	b.n	8006d34 <HAL_RTC_SetDate+0x106>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10e      	bne.n	8006c7c <HAL_RTC_SetDate+0x4e>
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	785b      	ldrb	r3, [r3, #1]
 8006c62:	f003 0310 	and.w	r3, r3, #16
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d008      	beq.n	8006c7c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	785b      	ldrb	r3, [r3, #1]
 8006c6e:	f023 0310 	bic.w	r3, r3, #16
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	330a      	adds	r3, #10
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d11c      	bne.n	8006cbc <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	78db      	ldrb	r3, [r3, #3]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 f8f0 	bl	8006e6c <RTC_ByteToBcd2>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	785b      	ldrb	r3, [r3, #1]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f000 f8e9 	bl	8006e6c <RTC_ByteToBcd2>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006c9e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	789b      	ldrb	r3, [r3, #2]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 f8e1 	bl	8006e6c <RTC_ByteToBcd2>
 8006caa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006cac:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	617b      	str	r3, [r7, #20]
 8006cba:	e00e      	b.n	8006cda <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	78db      	ldrb	r3, [r3, #3]
 8006cc0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	785b      	ldrb	r3, [r3, #1]
 8006cc6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006cc8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006cce:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	22ca      	movs	r2, #202	; 0xca
 8006ce0:	625a      	str	r2, [r3, #36]	; 0x24
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2253      	movs	r2, #83	; 0x53
 8006ce8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 f84c 	bl	8006d88 <RTC_EnterInitMode>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006cf4:	7cfb      	ldrb	r3, [r7, #19]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10c      	bne.n	8006d14 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d04:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006d08:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 f870 	bl	8006df0 <RTC_ExitInitMode>
 8006d10:	4603      	mov	r3, r0
 8006d12:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	22ff      	movs	r2, #255	; 0xff
 8006d1a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006d1c:	7cfb      	ldrb	r3, [r7, #19]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d103      	bne.n	8006d2a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006d32:	7cfb      	ldrb	r3, [r7, #19]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	371c      	adds	r7, #28
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd90      	pop	{r4, r7, pc}

08006d3c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68da      	ldr	r2, [r3, #12]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006d52:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006d54:	f7fb f922 	bl	8001f9c <HAL_GetTick>
 8006d58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006d5a:	e009      	b.n	8006d70 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006d5c:	f7fb f91e 	bl	8001f9c <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d6a:	d901      	bls.n	8006d70 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e007      	b.n	8006d80 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	f003 0320 	and.w	r3, r3, #32
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d0ee      	beq.n	8006d5c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d120      	bne.n	8006de4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f04f 32ff 	mov.w	r2, #4294967295
 8006daa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006dac:	f7fb f8f6 	bl	8001f9c <HAL_GetTick>
 8006db0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006db2:	e00d      	b.n	8006dd0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006db4:	f7fb f8f2 	bl	8001f9c <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dc2:	d905      	bls.n	8006dd0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2203      	movs	r2, #3
 8006dcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d102      	bne.n	8006de4 <RTC_EnterInitMode+0x5c>
 8006dde:	7bfb      	ldrb	r3, [r7, #15]
 8006de0:	2b03      	cmp	r3, #3
 8006de2:	d1e7      	bne.n	8006db4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return status;
 8006de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
	...

08006df0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006dfc:	4b1a      	ldr	r3, [pc, #104]	; (8006e68 <RTC_ExitInitMode+0x78>)
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	4a19      	ldr	r2, [pc, #100]	; (8006e68 <RTC_ExitInitMode+0x78>)
 8006e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e06:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006e08:	4b17      	ldr	r3, [pc, #92]	; (8006e68 <RTC_ExitInitMode+0x78>)
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f003 0320 	and.w	r3, r3, #32
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10c      	bne.n	8006e2e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f7ff ff91 	bl	8006d3c <HAL_RTC_WaitForSynchro>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d01e      	beq.n	8006e5e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2203      	movs	r2, #3
 8006e24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	73fb      	strb	r3, [r7, #15]
 8006e2c:	e017      	b.n	8006e5e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006e2e:	4b0e      	ldr	r3, [pc, #56]	; (8006e68 <RTC_ExitInitMode+0x78>)
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	4a0d      	ldr	r2, [pc, #52]	; (8006e68 <RTC_ExitInitMode+0x78>)
 8006e34:	f023 0320 	bic.w	r3, r3, #32
 8006e38:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7ff ff7e 	bl	8006d3c <HAL_RTC_WaitForSynchro>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d005      	beq.n	8006e52 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2203      	movs	r2, #3
 8006e4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006e52:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <RTC_ExitInitMode+0x78>)
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	4a04      	ldr	r2, [pc, #16]	; (8006e68 <RTC_ExitInitMode+0x78>)
 8006e58:	f043 0320 	orr.w	r3, r3, #32
 8006e5c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	40002800 	.word	0x40002800

08006e6c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	4603      	mov	r3, r0
 8006e74:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8006e7a:	79fb      	ldrb	r3, [r7, #7]
 8006e7c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8006e7e:	e005      	b.n	8006e8c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	3301      	adds	r3, #1
 8006e84:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8006e86:	7afb      	ldrb	r3, [r7, #11]
 8006e88:	3b0a      	subs	r3, #10
 8006e8a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006e8c:	7afb      	ldrb	r3, [r7, #11]
 8006e8e:	2b09      	cmp	r3, #9
 8006e90:	d8f6      	bhi.n	8006e80 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	011b      	lsls	r3, r3, #4
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	7afb      	ldrb	r3, [r7, #11]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	b2db      	uxtb	r3, r3
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3714      	adds	r7, #20
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e14a      	b.n	8007154 <HAL_SAI_Init+0x2a8>
      return HAL_ERROR;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d106      	bne.n	8006ed8 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7fa fac6 	bl	8001464 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f94d 	bl	8007178 <SAI_Disable>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e135      	b.n	8007154 <HAL_SAI_Init+0x2a8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d007      	beq.n	8006f08 <HAL_SAI_Init+0x5c>
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d302      	bcc.n	8006f02 <HAL_SAI_Init+0x56>
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d006      	beq.n	8006f0e <HAL_SAI_Init+0x62>
 8006f00:	e008      	b.n	8006f14 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006f02:	2300      	movs	r3, #0
 8006f04:	61fb      	str	r3, [r7, #28]
      break;
 8006f06:	e008      	b.n	8006f1a <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006f08:	2310      	movs	r3, #16
 8006f0a:	61fb      	str	r3, [r7, #28]
      break;
 8006f0c:	e005      	b.n	8006f1a <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006f0e:	2320      	movs	r3, #32
 8006f10:	61fb      	str	r3, [r7, #28]
      break;
 8006f12:	e002      	b.n	8006f1a <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8006f14:	2300      	movs	r3, #0
 8006f16:	61fb      	str	r3, [r7, #28]
      break;
 8006f18:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d81d      	bhi.n	8006f5e <HAL_SAI_Init+0xb2>
 8006f22:	a201      	add	r2, pc, #4	; (adr r2, 8006f28 <HAL_SAI_Init+0x7c>)
 8006f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f28:	08006f39 	.word	0x08006f39
 8006f2c:	08006f3f 	.word	0x08006f3f
 8006f30:	08006f47 	.word	0x08006f47
 8006f34:	08006f4f 	.word	0x08006f4f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	617b      	str	r3, [r7, #20]
      break;
 8006f3c:	e012      	b.n	8006f64 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f42:	617b      	str	r3, [r7, #20]
      break;
 8006f44:	e00e      	b.n	8006f64 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006f46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f4a:	617b      	str	r3, [r7, #20]
      break;
 8006f4c:	e00a      	b.n	8006f64 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006f4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f52:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	f043 0301 	orr.w	r3, r3, #1
 8006f5a:	61fb      	str	r3, [r7, #28]
      break;
 8006f5c:	e002      	b.n	8006f64 <HAL_SAI_Init+0xb8>
    default :
      syncen_bits = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	617b      	str	r3, [r7, #20]
      break;
 8006f62:	bf00      	nop

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a7c      	ldr	r2, [pc, #496]	; (800715c <HAL_SAI_Init+0x2b0>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d004      	beq.n	8006f78 <HAL_SAI_Init+0xcc>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a7b      	ldr	r2, [pc, #492]	; (8007160 <HAL_SAI_Init+0x2b4>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d103      	bne.n	8006f80 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8006f78:	4a7a      	ldr	r2, [pc, #488]	; (8007164 <HAL_SAI_Init+0x2b8>)
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	e002      	b.n	8006f86 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006f80:	4a79      	ldr	r2, [pc, #484]	; (8007168 <HAL_SAI_Init+0x2bc>)
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	6013      	str	r3, [r2, #0]

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || */
  /* STM32L496xx || STM32L4A6xx || */
  /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d038      	beq.n	8007000 <HAL_SAI_Init+0x154>
    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a72      	ldr	r2, [pc, #456]	; (800715c <HAL_SAI_Init+0x2b0>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d004      	beq.n	8006fa2 <HAL_SAI_Init+0xf6>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a70      	ldr	r2, [pc, #448]	; (8007160 <HAL_SAI_Init+0x2b4>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d105      	bne.n	8006fae <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006fa2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006fa6:	f7fe fdfd 	bl	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006faa:	6138      	str	r0, [r7, #16]
 8006fac:	e004      	b.n	8006fb8 <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006fae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006fb2:	f7fe fdf7 	bl	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006fb6:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	005b      	lsls	r3, r3, #1
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	69db      	ldr	r3, [r3, #28]
 8006fc8:	025b      	lsls	r3, r3, #9
 8006fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fce:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4a66      	ldr	r2, [pc, #408]	; (800716c <HAL_SAI_Init+0x2c0>)
 8006fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd8:	08da      	lsrs	r2, r3, #3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006fde:	68f9      	ldr	r1, [r7, #12]
 8006fe0:	4b62      	ldr	r3, [pc, #392]	; (800716c <HAL_SAI_Init+0x2c0>)
 8006fe2:	fba3 2301 	umull	r2, r3, r3, r1
 8006fe6:	08da      	lsrs	r2, r3, #3
 8006fe8:	4613      	mov	r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	4413      	add	r3, r2
 8006fee:	005b      	lsls	r3, r3, #1
 8006ff0:	1aca      	subs	r2, r1, r3
 8006ff2:	2a08      	cmp	r2, #8
 8006ff4:	d904      	bls.n	8007000 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	1c5a      	adds	r2, r3, #1
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <HAL_SAI_Init+0x164>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	2b02      	cmp	r3, #2
 800700e:	d109      	bne.n	8007024 <HAL_SAI_Init+0x178>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007014:	2b01      	cmp	r3, #1
 8007016:	d101      	bne.n	800701c <HAL_SAI_Init+0x170>
 8007018:	2300      	movs	r3, #0
 800701a:	e001      	b.n	8007020 <HAL_SAI_Init+0x174>
 800701c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007020:	61bb      	str	r3, [r7, #24]
 8007022:	e008      	b.n	8007036 <HAL_SAI_Init+0x18a>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007028:	2b01      	cmp	r3, #1
 800702a:	d102      	bne.n	8007032 <HAL_SAI_Init+0x186>
 800702c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007030:	e000      	b.n	8007034 <HAL_SAI_Init+0x188>
 8007032:	2300      	movs	r3, #0
 8007034:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	6819      	ldr	r1, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	4b4b      	ldr	r3, [pc, #300]	; (8007170 <HAL_SAI_Init+0x2c4>)
 8007042:	400b      	ands	r3, r1
 8007044:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	6819      	ldr	r1, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007054:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800705a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007060:	431a      	orrs	r2, r3
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800706e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800707a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a1b      	ldr	r3, [r3, #32]
 8007080:	051b      	lsls	r3, r3, #20
 8007082:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	430a      	orrs	r2, r1
 800708a:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	6812      	ldr	r2, [r2, #0]
 8007096:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800709a:	f023 030f 	bic.w	r3, r3, #15
 800709e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6859      	ldr	r1, [r3, #4]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	699a      	ldr	r2, [r3, #24]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ae:	431a      	orrs	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	431a      	orrs	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	6899      	ldr	r1, [r3, #8]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	4b2a      	ldr	r3, [pc, #168]	; (8007174 <HAL_SAI_Init+0x2c8>)
 80070ca:	400b      	ands	r3, r1
 80070cc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6899      	ldr	r1, [r3, #8]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80070de:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80070e4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80070ea:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f0:	3b01      	subs	r3, #1
 80070f2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80070f4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	430a      	orrs	r2, r1
 80070fc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68d9      	ldr	r1, [r3, #12]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	f24f 0320 	movw	r3, #61472	; 0xf020
 800710c:	400b      	ands	r3, r1
 800710e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68d9      	ldr	r1, [r3, #12]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800711e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007124:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007126:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800712c:	3b01      	subs	r3, #1
 800712e:	021b      	lsls	r3, r3, #8
 8007130:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	430a      	orrs	r2, r1
 8007138:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3720      	adds	r7, #32
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	40015404 	.word	0x40015404
 8007160:	40015424 	.word	0x40015424
 8007164:	40015400 	.word	0x40015400
 8007168:	40015800 	.word	0x40015800
 800716c:	cccccccd 	.word	0xcccccccd
 8007170:	ff05c010 	.word	0xff05c010
 8007174:	fff88000 	.word	0xfff88000

08007178 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007178:	b490      	push	{r4, r7}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007180:	4b15      	ldr	r3, [pc, #84]	; (80071d8 <SAI_Disable+0x60>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a15      	ldr	r2, [pc, #84]	; (80071dc <SAI_Disable+0x64>)
 8007186:	fba2 2303 	umull	r2, r3, r2, r3
 800718a:	0b1b      	lsrs	r3, r3, #12
 800718c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80071a0:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80071a2:	2c00      	cmp	r4, #0
 80071a4:	d10a      	bne.n	80071bc <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	73fb      	strb	r3, [r7, #15]
      break;
 80071ba:	e007      	b.n	80071cc <SAI_Disable+0x54>
    }
    count--;
 80071bc:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1ea      	bne.n	80071a2 <SAI_Disable+0x2a>

  return status;
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bc90      	pop	{r4, r7}
 80071d6:	4770      	bx	lr
 80071d8:	2000001c 	.word	0x2000001c
 80071dc:	95cbec1b 	.word	0x95cbec1b

080071e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e07c      	b.n	80072ec <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b00      	cmp	r3, #0
 8007202:	d106      	bne.n	8007212 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7fa f9df 	bl	80015d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2202      	movs	r2, #2
 8007216:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007228:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007232:	d902      	bls.n	800723a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007234:	2300      	movs	r3, #0
 8007236:	60fb      	str	r3, [r7, #12]
 8007238:	e002      	b.n	8007240 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800723a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800723e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007248:	d007      	beq.n	800725a <HAL_SPI_Init+0x7a>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007252:	d002      	beq.n	800725a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10b      	bne.n	800727a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800726a:	d903      	bls.n	8007274 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2202      	movs	r2, #2
 8007270:	631a      	str	r2, [r3, #48]	; 0x30
 8007272:	e002      	b.n	800727a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	431a      	orrs	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	431a      	orrs	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	431a      	orrs	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007298:	431a      	orrs	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	69db      	ldr	r3, [r3, #28]
 800729e:	431a      	orrs	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	ea42 0103 	orr.w	r1, r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	0c1b      	lsrs	r3, r3, #16
 80072ba:	f003 0204 	and.w	r2, r3, #4
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c2:	431a      	orrs	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c8:	431a      	orrs	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	ea42 0103 	orr.w	r1, r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	430a      	orrs	r2, r1
 80072da:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e040      	b.n	8007388 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800730a:	2b00      	cmp	r3, #0
 800730c:	d106      	bne.n	800731c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7fa fd68 	bl	8001dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2224      	movs	r2, #36	; 0x24
 8007320:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 0201 	bic.w	r2, r2, #1
 8007330:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f82c 	bl	8007390 <UART_SetConfig>
 8007338:	4603      	mov	r3, r0
 800733a:	2b01      	cmp	r3, #1
 800733c:	d101      	bne.n	8007342 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e022      	b.n	8007388 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	2b00      	cmp	r3, #0
 8007348:	d002      	beq.n	8007350 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fb68 	bl	8007a20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685a      	ldr	r2, [r3, #4]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800735e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689a      	ldr	r2, [r3, #8]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800736e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f042 0201 	orr.w	r2, r2, #1
 800737e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fbef 	bl	8007b64 <UART_CheckIdleState>
 8007386:	4603      	mov	r3, r0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007390:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007394:	b088      	sub	sp, #32
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800739a:	2300      	movs	r3, #0
 800739c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80073a2:	2300      	movs	r3, #0
 80073a4:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	431a      	orrs	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	431a      	orrs	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	4bac      	ldr	r3, [pc, #688]	; (8007678 <UART_SetConfig+0x2e8>)
 80073c6:	4013      	ands	r3, r2
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	6812      	ldr	r2, [r2, #0]
 80073cc:	69f9      	ldr	r1, [r7, #28]
 80073ce:	430b      	orrs	r3, r1
 80073d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68da      	ldr	r2, [r3, #12]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4aa2      	ldr	r2, [pc, #648]	; (800767c <UART_SetConfig+0x2ec>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d004      	beq.n	8007402 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a1b      	ldr	r3, [r3, #32]
 80073fc:	69fa      	ldr	r2, [r7, #28]
 80073fe:	4313      	orrs	r3, r2
 8007400:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	69fa      	ldr	r2, [r7, #28]
 8007412:	430a      	orrs	r2, r1
 8007414:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a99      	ldr	r2, [pc, #612]	; (8007680 <UART_SetConfig+0x2f0>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d121      	bne.n	8007464 <UART_SetConfig+0xd4>
 8007420:	4b98      	ldr	r3, [pc, #608]	; (8007684 <UART_SetConfig+0x2f4>)
 8007422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007426:	f003 0303 	and.w	r3, r3, #3
 800742a:	2b03      	cmp	r3, #3
 800742c:	d816      	bhi.n	800745c <UART_SetConfig+0xcc>
 800742e:	a201      	add	r2, pc, #4	; (adr r2, 8007434 <UART_SetConfig+0xa4>)
 8007430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007434:	08007445 	.word	0x08007445
 8007438:	08007451 	.word	0x08007451
 800743c:	0800744b 	.word	0x0800744b
 8007440:	08007457 	.word	0x08007457
 8007444:	2301      	movs	r3, #1
 8007446:	76fb      	strb	r3, [r7, #27]
 8007448:	e0e8      	b.n	800761c <UART_SetConfig+0x28c>
 800744a:	2302      	movs	r3, #2
 800744c:	76fb      	strb	r3, [r7, #27]
 800744e:	e0e5      	b.n	800761c <UART_SetConfig+0x28c>
 8007450:	2304      	movs	r3, #4
 8007452:	76fb      	strb	r3, [r7, #27]
 8007454:	e0e2      	b.n	800761c <UART_SetConfig+0x28c>
 8007456:	2308      	movs	r3, #8
 8007458:	76fb      	strb	r3, [r7, #27]
 800745a:	e0df      	b.n	800761c <UART_SetConfig+0x28c>
 800745c:	2310      	movs	r3, #16
 800745e:	76fb      	strb	r3, [r7, #27]
 8007460:	bf00      	nop
 8007462:	e0db      	b.n	800761c <UART_SetConfig+0x28c>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a87      	ldr	r2, [pc, #540]	; (8007688 <UART_SetConfig+0x2f8>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d134      	bne.n	80074d8 <UART_SetConfig+0x148>
 800746e:	4b85      	ldr	r3, [pc, #532]	; (8007684 <UART_SetConfig+0x2f4>)
 8007470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007474:	f003 030c 	and.w	r3, r3, #12
 8007478:	2b0c      	cmp	r3, #12
 800747a:	d829      	bhi.n	80074d0 <UART_SetConfig+0x140>
 800747c:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <UART_SetConfig+0xf4>)
 800747e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007482:	bf00      	nop
 8007484:	080074b9 	.word	0x080074b9
 8007488:	080074d1 	.word	0x080074d1
 800748c:	080074d1 	.word	0x080074d1
 8007490:	080074d1 	.word	0x080074d1
 8007494:	080074c5 	.word	0x080074c5
 8007498:	080074d1 	.word	0x080074d1
 800749c:	080074d1 	.word	0x080074d1
 80074a0:	080074d1 	.word	0x080074d1
 80074a4:	080074bf 	.word	0x080074bf
 80074a8:	080074d1 	.word	0x080074d1
 80074ac:	080074d1 	.word	0x080074d1
 80074b0:	080074d1 	.word	0x080074d1
 80074b4:	080074cb 	.word	0x080074cb
 80074b8:	2300      	movs	r3, #0
 80074ba:	76fb      	strb	r3, [r7, #27]
 80074bc:	e0ae      	b.n	800761c <UART_SetConfig+0x28c>
 80074be:	2302      	movs	r3, #2
 80074c0:	76fb      	strb	r3, [r7, #27]
 80074c2:	e0ab      	b.n	800761c <UART_SetConfig+0x28c>
 80074c4:	2304      	movs	r3, #4
 80074c6:	76fb      	strb	r3, [r7, #27]
 80074c8:	e0a8      	b.n	800761c <UART_SetConfig+0x28c>
 80074ca:	2308      	movs	r3, #8
 80074cc:	76fb      	strb	r3, [r7, #27]
 80074ce:	e0a5      	b.n	800761c <UART_SetConfig+0x28c>
 80074d0:	2310      	movs	r3, #16
 80074d2:	76fb      	strb	r3, [r7, #27]
 80074d4:	bf00      	nop
 80074d6:	e0a1      	b.n	800761c <UART_SetConfig+0x28c>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a6b      	ldr	r2, [pc, #428]	; (800768c <UART_SetConfig+0x2fc>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d120      	bne.n	8007524 <UART_SetConfig+0x194>
 80074e2:	4b68      	ldr	r3, [pc, #416]	; (8007684 <UART_SetConfig+0x2f4>)
 80074e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074ec:	2b10      	cmp	r3, #16
 80074ee:	d00f      	beq.n	8007510 <UART_SetConfig+0x180>
 80074f0:	2b10      	cmp	r3, #16
 80074f2:	d802      	bhi.n	80074fa <UART_SetConfig+0x16a>
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d005      	beq.n	8007504 <UART_SetConfig+0x174>
 80074f8:	e010      	b.n	800751c <UART_SetConfig+0x18c>
 80074fa:	2b20      	cmp	r3, #32
 80074fc:	d005      	beq.n	800750a <UART_SetConfig+0x17a>
 80074fe:	2b30      	cmp	r3, #48	; 0x30
 8007500:	d009      	beq.n	8007516 <UART_SetConfig+0x186>
 8007502:	e00b      	b.n	800751c <UART_SetConfig+0x18c>
 8007504:	2300      	movs	r3, #0
 8007506:	76fb      	strb	r3, [r7, #27]
 8007508:	e088      	b.n	800761c <UART_SetConfig+0x28c>
 800750a:	2302      	movs	r3, #2
 800750c:	76fb      	strb	r3, [r7, #27]
 800750e:	e085      	b.n	800761c <UART_SetConfig+0x28c>
 8007510:	2304      	movs	r3, #4
 8007512:	76fb      	strb	r3, [r7, #27]
 8007514:	e082      	b.n	800761c <UART_SetConfig+0x28c>
 8007516:	2308      	movs	r3, #8
 8007518:	76fb      	strb	r3, [r7, #27]
 800751a:	e07f      	b.n	800761c <UART_SetConfig+0x28c>
 800751c:	2310      	movs	r3, #16
 800751e:	76fb      	strb	r3, [r7, #27]
 8007520:	bf00      	nop
 8007522:	e07b      	b.n	800761c <UART_SetConfig+0x28c>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a59      	ldr	r2, [pc, #356]	; (8007690 <UART_SetConfig+0x300>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d120      	bne.n	8007570 <UART_SetConfig+0x1e0>
 800752e:	4b55      	ldr	r3, [pc, #340]	; (8007684 <UART_SetConfig+0x2f4>)
 8007530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007534:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007538:	2b40      	cmp	r3, #64	; 0x40
 800753a:	d00f      	beq.n	800755c <UART_SetConfig+0x1cc>
 800753c:	2b40      	cmp	r3, #64	; 0x40
 800753e:	d802      	bhi.n	8007546 <UART_SetConfig+0x1b6>
 8007540:	2b00      	cmp	r3, #0
 8007542:	d005      	beq.n	8007550 <UART_SetConfig+0x1c0>
 8007544:	e010      	b.n	8007568 <UART_SetConfig+0x1d8>
 8007546:	2b80      	cmp	r3, #128	; 0x80
 8007548:	d005      	beq.n	8007556 <UART_SetConfig+0x1c6>
 800754a:	2bc0      	cmp	r3, #192	; 0xc0
 800754c:	d009      	beq.n	8007562 <UART_SetConfig+0x1d2>
 800754e:	e00b      	b.n	8007568 <UART_SetConfig+0x1d8>
 8007550:	2300      	movs	r3, #0
 8007552:	76fb      	strb	r3, [r7, #27]
 8007554:	e062      	b.n	800761c <UART_SetConfig+0x28c>
 8007556:	2302      	movs	r3, #2
 8007558:	76fb      	strb	r3, [r7, #27]
 800755a:	e05f      	b.n	800761c <UART_SetConfig+0x28c>
 800755c:	2304      	movs	r3, #4
 800755e:	76fb      	strb	r3, [r7, #27]
 8007560:	e05c      	b.n	800761c <UART_SetConfig+0x28c>
 8007562:	2308      	movs	r3, #8
 8007564:	76fb      	strb	r3, [r7, #27]
 8007566:	e059      	b.n	800761c <UART_SetConfig+0x28c>
 8007568:	2310      	movs	r3, #16
 800756a:	76fb      	strb	r3, [r7, #27]
 800756c:	bf00      	nop
 800756e:	e055      	b.n	800761c <UART_SetConfig+0x28c>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a47      	ldr	r2, [pc, #284]	; (8007694 <UART_SetConfig+0x304>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d124      	bne.n	80075c4 <UART_SetConfig+0x234>
 800757a:	4b42      	ldr	r3, [pc, #264]	; (8007684 <UART_SetConfig+0x2f4>)
 800757c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007588:	d012      	beq.n	80075b0 <UART_SetConfig+0x220>
 800758a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800758e:	d802      	bhi.n	8007596 <UART_SetConfig+0x206>
 8007590:	2b00      	cmp	r3, #0
 8007592:	d007      	beq.n	80075a4 <UART_SetConfig+0x214>
 8007594:	e012      	b.n	80075bc <UART_SetConfig+0x22c>
 8007596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800759a:	d006      	beq.n	80075aa <UART_SetConfig+0x21a>
 800759c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075a0:	d009      	beq.n	80075b6 <UART_SetConfig+0x226>
 80075a2:	e00b      	b.n	80075bc <UART_SetConfig+0x22c>
 80075a4:	2300      	movs	r3, #0
 80075a6:	76fb      	strb	r3, [r7, #27]
 80075a8:	e038      	b.n	800761c <UART_SetConfig+0x28c>
 80075aa:	2302      	movs	r3, #2
 80075ac:	76fb      	strb	r3, [r7, #27]
 80075ae:	e035      	b.n	800761c <UART_SetConfig+0x28c>
 80075b0:	2304      	movs	r3, #4
 80075b2:	76fb      	strb	r3, [r7, #27]
 80075b4:	e032      	b.n	800761c <UART_SetConfig+0x28c>
 80075b6:	2308      	movs	r3, #8
 80075b8:	76fb      	strb	r3, [r7, #27]
 80075ba:	e02f      	b.n	800761c <UART_SetConfig+0x28c>
 80075bc:	2310      	movs	r3, #16
 80075be:	76fb      	strb	r3, [r7, #27]
 80075c0:	bf00      	nop
 80075c2:	e02b      	b.n	800761c <UART_SetConfig+0x28c>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a2c      	ldr	r2, [pc, #176]	; (800767c <UART_SetConfig+0x2ec>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d124      	bne.n	8007618 <UART_SetConfig+0x288>
 80075ce:	4b2d      	ldr	r3, [pc, #180]	; (8007684 <UART_SetConfig+0x2f4>)
 80075d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075dc:	d012      	beq.n	8007604 <UART_SetConfig+0x274>
 80075de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075e2:	d802      	bhi.n	80075ea <UART_SetConfig+0x25a>
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d007      	beq.n	80075f8 <UART_SetConfig+0x268>
 80075e8:	e012      	b.n	8007610 <UART_SetConfig+0x280>
 80075ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ee:	d006      	beq.n	80075fe <UART_SetConfig+0x26e>
 80075f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075f4:	d009      	beq.n	800760a <UART_SetConfig+0x27a>
 80075f6:	e00b      	b.n	8007610 <UART_SetConfig+0x280>
 80075f8:	2300      	movs	r3, #0
 80075fa:	76fb      	strb	r3, [r7, #27]
 80075fc:	e00e      	b.n	800761c <UART_SetConfig+0x28c>
 80075fe:	2302      	movs	r3, #2
 8007600:	76fb      	strb	r3, [r7, #27]
 8007602:	e00b      	b.n	800761c <UART_SetConfig+0x28c>
 8007604:	2304      	movs	r3, #4
 8007606:	76fb      	strb	r3, [r7, #27]
 8007608:	e008      	b.n	800761c <UART_SetConfig+0x28c>
 800760a:	2308      	movs	r3, #8
 800760c:	76fb      	strb	r3, [r7, #27]
 800760e:	e005      	b.n	800761c <UART_SetConfig+0x28c>
 8007610:	2310      	movs	r3, #16
 8007612:	76fb      	strb	r3, [r7, #27]
 8007614:	bf00      	nop
 8007616:	e001      	b.n	800761c <UART_SetConfig+0x28c>
 8007618:	2310      	movs	r3, #16
 800761a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a16      	ldr	r2, [pc, #88]	; (800767c <UART_SetConfig+0x2ec>)
 8007622:	4293      	cmp	r3, r2
 8007624:	f040 80fa 	bne.w	800781c <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007628:	7efb      	ldrb	r3, [r7, #27]
 800762a:	2b08      	cmp	r3, #8
 800762c:	d836      	bhi.n	800769c <UART_SetConfig+0x30c>
 800762e:	a201      	add	r2, pc, #4	; (adr r2, 8007634 <UART_SetConfig+0x2a4>)
 8007630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007634:	08007659 	.word	0x08007659
 8007638:	0800769d 	.word	0x0800769d
 800763c:	08007661 	.word	0x08007661
 8007640:	0800769d 	.word	0x0800769d
 8007644:	08007667 	.word	0x08007667
 8007648:	0800769d 	.word	0x0800769d
 800764c:	0800769d 	.word	0x0800769d
 8007650:	0800769d 	.word	0x0800769d
 8007654:	0800766f 	.word	0x0800766f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8007658:	f7fd ff32 	bl	80054c0 <HAL_RCC_GetPCLK1Freq>
 800765c:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800765e:	e020      	b.n	80076a2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8007660:	4b0d      	ldr	r3, [pc, #52]	; (8007698 <UART_SetConfig+0x308>)
 8007662:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007664:	e01d      	b.n	80076a2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8007666:	f7fd fe95 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 800766a:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800766c:	e019      	b.n	80076a2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800766e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007672:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007674:	e015      	b.n	80076a2 <UART_SetConfig+0x312>
 8007676:	bf00      	nop
 8007678:	efff69f3 	.word	0xefff69f3
 800767c:	40008000 	.word	0x40008000
 8007680:	40013800 	.word	0x40013800
 8007684:	40021000 	.word	0x40021000
 8007688:	40004400 	.word	0x40004400
 800768c:	40004800 	.word	0x40004800
 8007690:	40004c00 	.word	0x40004c00
 8007694:	40005000 	.word	0x40005000
 8007698:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	74fb      	strb	r3, [r7, #19]
        break;
 80076a0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f000 81ac 	beq.w	8007a02 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	4613      	mov	r3, r2
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	4413      	add	r3, r2
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d305      	bcc.n	80076c6 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d902      	bls.n	80076cc <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	74fb      	strb	r3, [r7, #19]
 80076ca:	e19a      	b.n	8007a02 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 80076cc:	7efb      	ldrb	r3, [r7, #27]
 80076ce:	2b08      	cmp	r3, #8
 80076d0:	f200 8091 	bhi.w	80077f6 <UART_SetConfig+0x466>
 80076d4:	a201      	add	r2, pc, #4	; (adr r2, 80076dc <UART_SetConfig+0x34c>)
 80076d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076da:	bf00      	nop
 80076dc:	08007701 	.word	0x08007701
 80076e0:	080077f7 	.word	0x080077f7
 80076e4:	0800774d 	.word	0x0800774d
 80076e8:	080077f7 	.word	0x080077f7
 80076ec:	08007781 	.word	0x08007781
 80076f0:	080077f7 	.word	0x080077f7
 80076f4:	080077f7 	.word	0x080077f7
 80076f8:	080077f7 	.word	0x080077f7
 80076fc:	080077cd 	.word	0x080077cd
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007700:	f7fd fede 	bl	80054c0 <HAL_RCC_GetPCLK1Freq>
 8007704:	4603      	mov	r3, r0
 8007706:	4619      	mov	r1, r3
 8007708:	f04f 0200 	mov.w	r2, #0
 800770c:	f04f 0300 	mov.w	r3, #0
 8007710:	f04f 0400 	mov.w	r4, #0
 8007714:	0214      	lsls	r4, r2, #8
 8007716:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800771a:	020b      	lsls	r3, r1, #8
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	6852      	ldr	r2, [r2, #4]
 8007720:	0852      	lsrs	r2, r2, #1
 8007722:	4611      	mov	r1, r2
 8007724:	f04f 0200 	mov.w	r2, #0
 8007728:	eb13 0b01 	adds.w	fp, r3, r1
 800772c:	eb44 0c02 	adc.w	ip, r4, r2
 8007730:	4658      	mov	r0, fp
 8007732:	4661      	mov	r1, ip
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f04f 0400 	mov.w	r4, #0
 800773c:	461a      	mov	r2, r3
 800773e:	4623      	mov	r3, r4
 8007740:	f7f8 fd42 	bl	80001c8 <__aeabi_uldivmod>
 8007744:	4603      	mov	r3, r0
 8007746:	460c      	mov	r4, r1
 8007748:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800774a:	e057      	b.n	80077fc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	085b      	lsrs	r3, r3, #1
 8007752:	f04f 0400 	mov.w	r4, #0
 8007756:	49b1      	ldr	r1, [pc, #708]	; (8007a1c <UART_SetConfig+0x68c>)
 8007758:	f04f 0200 	mov.w	r2, #0
 800775c:	eb13 0b01 	adds.w	fp, r3, r1
 8007760:	eb44 0c02 	adc.w	ip, r4, r2
 8007764:	4658      	mov	r0, fp
 8007766:	4661      	mov	r1, ip
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f04f 0400 	mov.w	r4, #0
 8007770:	461a      	mov	r2, r3
 8007772:	4623      	mov	r3, r4
 8007774:	f7f8 fd28 	bl	80001c8 <__aeabi_uldivmod>
 8007778:	4603      	mov	r3, r0
 800777a:	460c      	mov	r4, r1
 800777c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800777e:	e03d      	b.n	80077fc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007780:	f7fd fe08 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8007784:	4603      	mov	r3, r0
 8007786:	4619      	mov	r1, r3
 8007788:	f04f 0200 	mov.w	r2, #0
 800778c:	f04f 0300 	mov.w	r3, #0
 8007790:	f04f 0400 	mov.w	r4, #0
 8007794:	0214      	lsls	r4, r2, #8
 8007796:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800779a:	020b      	lsls	r3, r1, #8
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	6852      	ldr	r2, [r2, #4]
 80077a0:	0852      	lsrs	r2, r2, #1
 80077a2:	4611      	mov	r1, r2
 80077a4:	f04f 0200 	mov.w	r2, #0
 80077a8:	eb13 0b01 	adds.w	fp, r3, r1
 80077ac:	eb44 0c02 	adc.w	ip, r4, r2
 80077b0:	4658      	mov	r0, fp
 80077b2:	4661      	mov	r1, ip
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f04f 0400 	mov.w	r4, #0
 80077bc:	461a      	mov	r2, r3
 80077be:	4623      	mov	r3, r4
 80077c0:	f7f8 fd02 	bl	80001c8 <__aeabi_uldivmod>
 80077c4:	4603      	mov	r3, r0
 80077c6:	460c      	mov	r4, r1
 80077c8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80077ca:	e017      	b.n	80077fc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	085b      	lsrs	r3, r3, #1
 80077d2:	f04f 0400 	mov.w	r4, #0
 80077d6:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80077da:	f144 0100 	adc.w	r1, r4, #0
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f04f 0400 	mov.w	r4, #0
 80077e6:	461a      	mov	r2, r3
 80077e8:	4623      	mov	r3, r4
 80077ea:	f7f8 fced 	bl	80001c8 <__aeabi_uldivmod>
 80077ee:	4603      	mov	r3, r0
 80077f0:	460c      	mov	r4, r1
 80077f2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80077f4:	e002      	b.n	80077fc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	74fb      	strb	r3, [r7, #19]
            break;
 80077fa:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007802:	d308      	bcc.n	8007816 <UART_SetConfig+0x486>
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800780a:	d204      	bcs.n	8007816 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	60da      	str	r2, [r3, #12]
 8007814:	e0f5      	b.n	8007a02 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	74fb      	strb	r3, [r7, #19]
 800781a:	e0f2      	b.n	8007a02 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007824:	d17f      	bne.n	8007926 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8007826:	7efb      	ldrb	r3, [r7, #27]
 8007828:	2b08      	cmp	r3, #8
 800782a:	d85c      	bhi.n	80078e6 <UART_SetConfig+0x556>
 800782c:	a201      	add	r2, pc, #4	; (adr r2, 8007834 <UART_SetConfig+0x4a4>)
 800782e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007832:	bf00      	nop
 8007834:	08007859 	.word	0x08007859
 8007838:	08007877 	.word	0x08007877
 800783c:	08007895 	.word	0x08007895
 8007840:	080078e7 	.word	0x080078e7
 8007844:	080078b1 	.word	0x080078b1
 8007848:	080078e7 	.word	0x080078e7
 800784c:	080078e7 	.word	0x080078e7
 8007850:	080078e7 	.word	0x080078e7
 8007854:	080078cf 	.word	0x080078cf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007858:	f7fd fe32 	bl	80054c0 <HAL_RCC_GetPCLK1Freq>
 800785c:	4603      	mov	r3, r0
 800785e:	005a      	lsls	r2, r3, #1
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	085b      	lsrs	r3, r3, #1
 8007866:	441a      	add	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007870:	b29b      	uxth	r3, r3
 8007872:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007874:	e03a      	b.n	80078ec <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007876:	f7fd fe39 	bl	80054ec <HAL_RCC_GetPCLK2Freq>
 800787a:	4603      	mov	r3, r0
 800787c:	005a      	lsls	r2, r3, #1
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	085b      	lsrs	r3, r3, #1
 8007884:	441a      	add	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	fbb2 f3f3 	udiv	r3, r2, r3
 800788e:	b29b      	uxth	r3, r3
 8007890:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007892:	e02b      	b.n	80078ec <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	085b      	lsrs	r3, r3, #1
 800789a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800789e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	6852      	ldr	r2, [r2, #4]
 80078a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80078ae:	e01d      	b.n	80078ec <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80078b0:	f7fd fd70 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 80078b4:	4603      	mov	r3, r0
 80078b6:	005a      	lsls	r2, r3, #1
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	085b      	lsrs	r3, r3, #1
 80078be:	441a      	add	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80078cc:	e00e      	b.n	80078ec <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	085b      	lsrs	r3, r3, #1
 80078d4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80078e4:	e002      	b.n	80078ec <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	74fb      	strb	r3, [r7, #19]
        break;
 80078ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	2b0f      	cmp	r3, #15
 80078f0:	d916      	bls.n	8007920 <UART_SetConfig+0x590>
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078f8:	d212      	bcs.n	8007920 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	f023 030f 	bic.w	r3, r3, #15
 8007902:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	085b      	lsrs	r3, r3, #1
 8007908:	b29b      	uxth	r3, r3
 800790a:	f003 0307 	and.w	r3, r3, #7
 800790e:	b29a      	uxth	r2, r3
 8007910:	897b      	ldrh	r3, [r7, #10]
 8007912:	4313      	orrs	r3, r2
 8007914:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	897a      	ldrh	r2, [r7, #10]
 800791c:	60da      	str	r2, [r3, #12]
 800791e:	e070      	b.n	8007a02 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	74fb      	strb	r3, [r7, #19]
 8007924:	e06d      	b.n	8007a02 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8007926:	7efb      	ldrb	r3, [r7, #27]
 8007928:	2b08      	cmp	r3, #8
 800792a:	d859      	bhi.n	80079e0 <UART_SetConfig+0x650>
 800792c:	a201      	add	r2, pc, #4	; (adr r2, 8007934 <UART_SetConfig+0x5a4>)
 800792e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007932:	bf00      	nop
 8007934:	08007959 	.word	0x08007959
 8007938:	08007975 	.word	0x08007975
 800793c:	08007991 	.word	0x08007991
 8007940:	080079e1 	.word	0x080079e1
 8007944:	080079ad 	.word	0x080079ad
 8007948:	080079e1 	.word	0x080079e1
 800794c:	080079e1 	.word	0x080079e1
 8007950:	080079e1 	.word	0x080079e1
 8007954:	080079c9 	.word	0x080079c9
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007958:	f7fd fdb2 	bl	80054c0 <HAL_RCC_GetPCLK1Freq>
 800795c:	4602      	mov	r2, r0
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	085b      	lsrs	r3, r3, #1
 8007964:	441a      	add	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	fbb2 f3f3 	udiv	r3, r2, r3
 800796e:	b29b      	uxth	r3, r3
 8007970:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007972:	e038      	b.n	80079e6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007974:	f7fd fdba 	bl	80054ec <HAL_RCC_GetPCLK2Freq>
 8007978:	4602      	mov	r2, r0
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	085b      	lsrs	r3, r3, #1
 8007980:	441a      	add	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	fbb2 f3f3 	udiv	r3, r2, r3
 800798a:	b29b      	uxth	r3, r3
 800798c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800798e:	e02a      	b.n	80079e6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	085b      	lsrs	r3, r3, #1
 8007996:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800799a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	6852      	ldr	r2, [r2, #4]
 80079a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80079aa:	e01c      	b.n	80079e6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80079ac:	f7fd fcf2 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 80079b0:	4602      	mov	r2, r0
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	085b      	lsrs	r3, r3, #1
 80079b8:	441a      	add	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80079c6:	e00e      	b.n	80079e6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	085b      	lsrs	r3, r3, #1
 80079ce:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079da:	b29b      	uxth	r3, r3
 80079dc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80079de:	e002      	b.n	80079e6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	74fb      	strb	r3, [r7, #19]
        break;
 80079e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	2b0f      	cmp	r3, #15
 80079ea:	d908      	bls.n	80079fe <UART_SetConfig+0x66e>
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079f2:	d204      	bcs.n	80079fe <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	60da      	str	r2, [r3, #12]
 80079fc:	e001      	b.n	8007a02 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007a0e:	7cfb      	ldrb	r3, [r7, #19]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3720      	adds	r7, #32
 8007a14:	46bd      	mov	sp, r7
 8007a16:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007a1a:	bf00      	nop
 8007a1c:	f4240000 	.word	0xf4240000

08007a20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00a      	beq.n	8007a4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	430a      	orrs	r2, r1
 8007a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4e:	f003 0302 	and.w	r3, r3, #2
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00a      	beq.n	8007a6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a70:	f003 0304 	and.w	r3, r3, #4
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00a      	beq.n	8007a8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	430a      	orrs	r2, r1
 8007a8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a92:	f003 0308 	and.w	r3, r3, #8
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00a      	beq.n	8007ab0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	430a      	orrs	r2, r1
 8007aae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab4:	f003 0310 	and.w	r3, r3, #16
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00a      	beq.n	8007ad2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	f003 0320 	and.w	r3, r3, #32
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	430a      	orrs	r2, r1
 8007af2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d01a      	beq.n	8007b36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	430a      	orrs	r2, r1
 8007b14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b1e:	d10a      	bne.n	8007b36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00a      	beq.n	8007b58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	430a      	orrs	r2, r1
 8007b56:	605a      	str	r2, [r3, #4]
  }
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af02      	add	r7, sp, #8
 8007b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007b72:	f7fa fa13 	bl	8001f9c <HAL_GetTick>
 8007b76:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0308 	and.w	r3, r3, #8
 8007b82:	2b08      	cmp	r3, #8
 8007b84:	d10e      	bne.n	8007ba4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f82a 	bl	8007bee <UART_WaitOnFlagUntilTimeout>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e020      	b.n	8007be6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0304 	and.w	r3, r3, #4
 8007bae:	2b04      	cmp	r3, #4
 8007bb0:	d10e      	bne.n	8007bd0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f814 	bl	8007bee <UART_WaitOnFlagUntilTimeout>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d001      	beq.n	8007bd0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e00a      	b.n	8007be6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	60f8      	str	r0, [r7, #12]
 8007bf6:	60b9      	str	r1, [r7, #8]
 8007bf8:	603b      	str	r3, [r7, #0]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bfe:	e02a      	b.n	8007c56 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c06:	d026      	beq.n	8007c56 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c08:	f7fa f9c8 	bl	8001f9c <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	69ba      	ldr	r2, [r7, #24]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d302      	bcc.n	8007c1e <UART_WaitOnFlagUntilTimeout+0x30>
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d11b      	bne.n	8007c56 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c2c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f022 0201 	bic.w	r2, r2, #1
 8007c3c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2220      	movs	r2, #32
 8007c42:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2220      	movs	r2, #32
 8007c48:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e00f      	b.n	8007c76 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	69da      	ldr	r2, [r3, #28]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	4013      	ands	r3, r2
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	bf0c      	ite	eq
 8007c66:	2301      	moveq	r3, #1
 8007c68:	2300      	movne	r3, #0
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	79fb      	ldrb	r3, [r7, #7]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d0c5      	beq.n	8007c00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c7e:	b084      	sub	sp, #16
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	f107 001c 	add.w	r0, r7, #28
 8007c8c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d122      	bne.n	8007cdc <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d105      	bne.n	8007cd0 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f937 	bl	8007f44 <USB_CoreReset>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	73fb      	strb	r3, [r7, #15]
 8007cda:	e01a      	b.n	8007d12 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f92b 	bl	8007f44 <USB_CoreReset>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d106      	bne.n	8007d06 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	639a      	str	r2, [r3, #56]	; 0x38
 8007d04:	e005      	b.n	8007d12 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d1e:	b004      	add	sp, #16
 8007d20:	4770      	bx	lr

08007d22 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f043 0201 	orr.w	r2, r3, #1
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	f023 0201 	bic.w	r2, r3, #1
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b082      	sub	sp, #8
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d7e:	78fb      	ldrb	r3, [r7, #3]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d106      	bne.n	8007d92 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	60da      	str	r2, [r3, #12]
 8007d90:	e00b      	b.n	8007daa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d92:	78fb      	ldrb	r3, [r7, #3]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d106      	bne.n	8007da6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	60da      	str	r2, [r3, #12]
 8007da4:	e001      	b.n	8007daa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e003      	b.n	8007db2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007daa:	2032      	movs	r0, #50	; 0x32
 8007dac:	f7fa f902 	bl	8001fb4 <HAL_Delay>

  return HAL_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
	...

08007dbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	019b      	lsls	r3, r3, #6
 8007dce:	f043 0220 	orr.w	r2, r3, #32
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4a09      	ldr	r2, [pc, #36]	; (8007e04 <USB_FlushTxFifo+0x48>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d901      	bls.n	8007de8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e006      	b.n	8007df6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	f003 0320 	and.w	r3, r3, #32
 8007df0:	2b20      	cmp	r3, #32
 8007df2:	d0f0      	beq.n	8007dd6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	00030d40 	.word	0x00030d40

08007e08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007e10:	2300      	movs	r3, #0
 8007e12:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2210      	movs	r2, #16
 8007e18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	60fb      	str	r3, [r7, #12]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4a09      	ldr	r2, [pc, #36]	; (8007e48 <USB_FlushRxFifo+0x40>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d901      	bls.n	8007e2c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e006      	b.n	8007e3a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	f003 0310 	and.w	r3, r3, #16
 8007e34:	2b10      	cmp	r3, #16
 8007e36:	d0f0      	beq.n	8007e1a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	00030d40 	.word	0x00030d40

08007e4c <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b089      	sub	sp, #36	; 0x24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	4611      	mov	r1, r2
 8007e58:	461a      	mov	r2, r3
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	71fb      	strb	r3, [r7, #7]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8007e6a:	88bb      	ldrh	r3, [r7, #4]
 8007e6c:	3303      	adds	r3, #3
 8007e6e:	089b      	lsrs	r3, r3, #2
 8007e70:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8007e72:	2300      	movs	r3, #0
 8007e74:	61bb      	str	r3, [r7, #24]
 8007e76:	e00f      	b.n	8007e98 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e78:	79fb      	ldrb	r3, [r7, #7]
 8007e7a:	031a      	lsls	r2, r3, #12
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	4413      	add	r3, r2
 8007e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e84:	461a      	mov	r2, r3
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	3304      	adds	r3, #4
 8007e90:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	3301      	adds	r3, #1
 8007e96:	61bb      	str	r3, [r7, #24]
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d3eb      	bcc.n	8007e78 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3724      	adds	r7, #36	; 0x24
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b089      	sub	sp, #36	; 0x24
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	60f8      	str	r0, [r7, #12]
 8007eb6:	60b9      	str	r1, [r7, #8]
 8007eb8:	4613      	mov	r3, r2
 8007eba:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007ec4:	88fb      	ldrh	r3, [r7, #6]
 8007ec6:	3303      	adds	r3, #3
 8007ec8:	089b      	lsrs	r3, r3, #2
 8007eca:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007ecc:	2300      	movs	r3, #0
 8007ece:	61bb      	str	r3, [r7, #24]
 8007ed0:	e00b      	b.n	8007eea <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	601a      	str	r2, [r3, #0]
    pDest++;
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	61bb      	str	r3, [r7, #24]
 8007eea:	69ba      	ldr	r2, [r7, #24]
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d3ef      	bcc.n	8007ed2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007ef2:	69fb      	ldr	r3, [r7, #28]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3724      	adds	r7, #36	; 0x24
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	695b      	ldr	r3, [r3, #20]
 8007f0c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	4013      	ands	r3, r2
 8007f16:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f18:	68fb      	ldr	r3, [r7, #12]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b083      	sub	sp, #12
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	f003 0301 	and.w	r3, r3, #1
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
	...

08007f44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	3301      	adds	r3, #1
 8007f54:	60fb      	str	r3, [r7, #12]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	4a13      	ldr	r2, [pc, #76]	; (8007fa8 <USB_CoreReset+0x64>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d901      	bls.n	8007f62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e01b      	b.n	8007f9a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	daf2      	bge.n	8007f50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	f043 0201 	orr.w	r2, r3, #1
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	60fb      	str	r3, [r7, #12]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4a09      	ldr	r2, [pc, #36]	; (8007fa8 <USB_CoreReset+0x64>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d901      	bls.n	8007f8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e006      	b.n	8007f9a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	f003 0301 	and.w	r3, r3, #1
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d0f0      	beq.n	8007f7a <USB_CoreReset+0x36>

  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	00030d40 	.word	0x00030d40

08007fac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fac:	b084      	sub	sp, #16
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b084      	sub	sp, #16
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	f107 001c 	add.w	r0, r7, #28
 8007fba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fc8:	461a      	mov	r2, r3
 8007fca:	2300      	movs	r3, #0
 8007fcc:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ff4:	f023 0304 	bic.w	r3, r3, #4
 8007ff8:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007ffa:	2110      	movs	r1, #16
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f7ff fedd 	bl	8007dbc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7ff ff00 	bl	8007e08 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008008:	2300      	movs	r3, #0
 800800a:	60fb      	str	r3, [r7, #12]
 800800c:	e015      	b.n	800803a <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	015a      	lsls	r2, r3, #5
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	4413      	add	r3, r2
 8008016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800801a:	461a      	mov	r2, r3
 800801c:	f04f 33ff 	mov.w	r3, #4294967295
 8008020:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	015a      	lsls	r2, r3, #5
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	4413      	add	r3, r2
 800802a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800802e:	461a      	mov	r2, r3
 8008030:	2300      	movs	r3, #0
 8008032:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	3301      	adds	r3, #1
 8008038:	60fb      	str	r3, [r7, #12]
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	429a      	cmp	r2, r3
 8008040:	d3e5      	bcc.n	800800e <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008042:	2101      	movs	r1, #1
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f893 	bl	8008170 <USB_DriveVbus>

  HAL_Delay(200U);
 800804a:	20c8      	movs	r0, #200	; 0xc8
 800804c:	f7f9 ffb2 	bl	8001fb4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f04f 32ff 	mov.w	r2, #4294967295
 800805c:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2280      	movs	r2, #128	; 0x80
 8008062:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a0d      	ldr	r2, [pc, #52]	; (800809c <USB_HostInit+0xf0>)
 8008068:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a0c      	ldr	r2, [pc, #48]	; (80080a0 <USB_HostInit+0xf4>)
 800806e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	f043 0210 	orr.w	r2, r3, #16
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	699a      	ldr	r2, [r3, #24]
 8008082:	4b08      	ldr	r3, [pc, #32]	; (80080a4 <USB_HostInit+0xf8>)
 8008084:	4313      	orrs	r3, r2
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008096:	b004      	add	sp, #16
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	00600080 	.word	0x00600080
 80080a0:	004000e0 	.word	0x004000e0
 80080a4:	a3200008 	.word	0xa3200008

080080a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080c6:	f023 0303 	bic.w	r3, r3, #3
 80080ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	78fb      	ldrb	r3, [r7, #3]
 80080d6:	f003 0303 	and.w	r3, r3, #3
 80080da:	68f9      	ldr	r1, [r7, #12]
 80080dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80080e0:	4313      	orrs	r3, r2
 80080e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80080e4:	78fb      	ldrb	r3, [r7, #3]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d107      	bne.n	80080fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080f0:	461a      	mov	r2, r3
 80080f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80080f6:	6053      	str	r3, [r2, #4]
 80080f8:	e009      	b.n	800810e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80080fa:	78fb      	ldrb	r3, [r7, #3]
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d106      	bne.n	800810e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008106:	461a      	mov	r2, r3
 8008108:	f241 7370 	movw	r3, #6000	; 0x1770
 800810c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3714      	adds	r7, #20
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008128:	2300      	movs	r3, #0
 800812a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800813c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800814a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800814c:	2064      	movs	r0, #100	; 0x64
 800814e:	f7f9 ff31 	bl	8001fb4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800815a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800815e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008160:	200a      	movs	r0, #10
 8008162:	f7f9 ff27 	bl	8001fb4 <HAL_Delay>

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008180:	2300      	movs	r3, #0
 8008182:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008194:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d109      	bne.n	80081b4 <USB_DriveVbus+0x44>
 80081a0:	78fb      	ldrb	r3, [r7, #3]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d106      	bne.n	80081b4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80081ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80081b2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081be:	d109      	bne.n	80081d4 <USB_DriveVbus+0x64>
 80081c0:	78fb      	ldrb	r3, [r7, #3]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d106      	bne.n	80081d4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80081ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081d2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3714      	adds	r7, #20
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b085      	sub	sp, #20
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	0c5b      	lsrs	r3, r3, #17
 8008200:	f003 0303 	and.w	r3, r3, #3
}
 8008204:	4618      	mov	r0, r3
 8008206:	3714      	adds	r7, #20
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	b29b      	uxth	r3, r3
}
 8008226:	4618      	mov	r0, r3
 8008228:	3714      	adds	r7, #20
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
	...

08008234 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8008234:	b480      	push	{r7}
 8008236:	b087      	sub	sp, #28
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	4608      	mov	r0, r1
 800823e:	4611      	mov	r1, r2
 8008240:	461a      	mov	r2, r3
 8008242:	4603      	mov	r3, r0
 8008244:	70fb      	strb	r3, [r7, #3]
 8008246:	460b      	mov	r3, r1
 8008248:	70bb      	strb	r3, [r7, #2]
 800824a:	4613      	mov	r3, r2
 800824c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008256:	78fb      	ldrb	r3, [r7, #3]
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	4413      	add	r3, r2
 800825e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008262:	461a      	mov	r2, r3
 8008264:	f04f 33ff 	mov.w	r3, #4294967295
 8008268:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800826a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800826e:	2b03      	cmp	r3, #3
 8008270:	d867      	bhi.n	8008342 <USB_HC_Init+0x10e>
 8008272:	a201      	add	r2, pc, #4	; (adr r2, 8008278 <USB_HC_Init+0x44>)
 8008274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008278:	08008289 	.word	0x08008289
 800827c:	08008305 	.word	0x08008305
 8008280:	08008289 	.word	0x08008289
 8008284:	080082c7 	.word	0x080082c7
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008288:	78fb      	ldrb	r3, [r7, #3]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	4413      	add	r3, r2
 8008290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008294:	461a      	mov	r2, r3
 8008296:	f240 439d 	movw	r3, #1181	; 0x49d
 800829a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800829c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	da51      	bge.n	8008348 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80082a4:	78fb      	ldrb	r3, [r7, #3]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	78fa      	ldrb	r2, [r7, #3]
 80082b4:	0151      	lsls	r1, r2, #5
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	440a      	add	r2, r1
 80082ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082c2:	60d3      	str	r3, [r2, #12]
      }
      break;
 80082c4:	e040      	b.n	8008348 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80082c6:	78fb      	ldrb	r3, [r7, #3]
 80082c8:	015a      	lsls	r2, r3, #5
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082d2:	461a      	mov	r2, r3
 80082d4:	f240 639d 	movw	r3, #1693	; 0x69d
 80082d8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80082da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	da34      	bge.n	800834c <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80082e2:	78fb      	ldrb	r3, [r7, #3]
 80082e4:	015a      	lsls	r2, r3, #5
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	4413      	add	r3, r2
 80082ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	78fa      	ldrb	r2, [r7, #3]
 80082f2:	0151      	lsls	r1, r2, #5
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	440a      	add	r2, r1
 80082f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008300:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008302:	e023      	b.n	800834c <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008304:	78fb      	ldrb	r3, [r7, #3]
 8008306:	015a      	lsls	r2, r3, #5
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	4413      	add	r3, r2
 800830c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008310:	461a      	mov	r2, r3
 8008312:	f240 2325 	movw	r3, #549	; 0x225
 8008316:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008318:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800831c:	2b00      	cmp	r3, #0
 800831e:	da17      	bge.n	8008350 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008320:	78fb      	ldrb	r3, [r7, #3]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	4413      	add	r3, r2
 8008328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	78fa      	ldrb	r2, [r7, #3]
 8008330:	0151      	lsls	r1, r2, #5
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	440a      	add	r2, r1
 8008336:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800833a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800833e:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008340:	e006      	b.n	8008350 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	75fb      	strb	r3, [r7, #23]
      break;
 8008346:	e004      	b.n	8008352 <USB_HC_Init+0x11e>
      break;
 8008348:	bf00      	nop
 800834a:	e002      	b.n	8008352 <USB_HC_Init+0x11e>
      break;
 800834c:	bf00      	nop
 800834e:	e000      	b.n	8008352 <USB_HC_Init+0x11e>
      break;
 8008350:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008358:	699a      	ldr	r2, [r3, #24]
 800835a:	78fb      	ldrb	r3, [r7, #3]
 800835c:	f003 030f 	and.w	r3, r3, #15
 8008360:	2101      	movs	r1, #1
 8008362:	fa01 f303 	lsl.w	r3, r1, r3
 8008366:	68b9      	ldr	r1, [r7, #8]
 8008368:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800836c:	4313      	orrs	r3, r2
 800836e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800837c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008380:	2b00      	cmp	r3, #0
 8008382:	da03      	bge.n	800838c <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008384:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008388:	613b      	str	r3, [r7, #16]
 800838a:	e001      	b.n	8008390 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 800838c:	2300      	movs	r3, #0
 800838e:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8008390:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008394:	2b02      	cmp	r3, #2
 8008396:	d103      	bne.n	80083a0 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008398:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800839c:	60fb      	str	r3, [r7, #12]
 800839e:	e001      	b.n	80083a4 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80083a0:	2300      	movs	r3, #0
 80083a2:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083a4:	787b      	ldrb	r3, [r7, #1]
 80083a6:	059b      	lsls	r3, r3, #22
 80083a8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80083ac:	78bb      	ldrb	r3, [r7, #2]
 80083ae:	02db      	lsls	r3, r3, #11
 80083b0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083b4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80083b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80083ba:	049b      	lsls	r3, r3, #18
 80083bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80083c0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80083c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083ce:	78fb      	ldrb	r3, [r7, #3]
 80083d0:	0159      	lsls	r1, r3, #5
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	440b      	add	r3, r1
 80083d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083da:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083e0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80083e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	d10f      	bne.n	800840a <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80083ea:	78fb      	ldrb	r3, [r7, #3]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	78fa      	ldrb	r2, [r7, #3]
 80083fa:	0151      	lsls	r1, r2, #5
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	440a      	add	r2, r1
 8008400:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008404:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008408:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800840a:	7dfb      	ldrb	r3, [r7, #23]
}
 800840c:	4618      	mov	r0, r3
 800840e:	371c      	adds	r7, #28
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b088      	sub	sp, #32
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	785b      	ldrb	r3, [r3, #1]
 800842a:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800842c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008430:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d018      	beq.n	800846c <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	8912      	ldrh	r2, [r2, #8]
 8008442:	4413      	add	r3, r2
 8008444:	3b01      	subs	r3, #1
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	8912      	ldrh	r2, [r2, #8]
 800844a:	fbb3 f3f2 	udiv	r3, r3, r2
 800844e:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8008450:	8bfa      	ldrh	r2, [r7, #30]
 8008452:	8a7b      	ldrh	r3, [r7, #18]
 8008454:	429a      	cmp	r2, r3
 8008456:	d90b      	bls.n	8008470 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8008458:	8a7b      	ldrh	r3, [r7, #18]
 800845a:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800845c:	8bfb      	ldrh	r3, [r7, #30]
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	8912      	ldrh	r2, [r2, #8]
 8008462:	fb02 f203 	mul.w	r2, r2, r3
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	611a      	str	r2, [r3, #16]
 800846a:	e001      	b.n	8008470 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 800846c:	2301      	movs	r3, #1
 800846e:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	78db      	ldrb	r3, [r3, #3]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d006      	beq.n	8008486 <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008478:	8bfb      	ldrh	r3, [r7, #30]
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	8912      	ldrh	r2, [r2, #8]
 800847e:	fb02 f203 	mul.w	r2, r2, r3
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800848e:	8bfb      	ldrh	r3, [r7, #30]
 8008490:	04d9      	lsls	r1, r3, #19
 8008492:	4b5f      	ldr	r3, [pc, #380]	; (8008610 <USB_HC_StartXfer+0x1f8>)
 8008494:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008496:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	7a9b      	ldrb	r3, [r3, #10]
 800849c:	075b      	lsls	r3, r3, #29
 800849e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80084a2:	6979      	ldr	r1, [r7, #20]
 80084a4:	0148      	lsls	r0, r1, #5
 80084a6:	69b9      	ldr	r1, [r7, #24]
 80084a8:	4401      	add	r1, r0
 80084aa:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80084ae:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80084b0:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	bf0c      	ite	eq
 80084c2:	2301      	moveq	r3, #1
 80084c4:	2300      	movne	r3, #0
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	015a      	lsls	r2, r3, #5
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	0151      	lsls	r1, r2, #5
 80084dc:	69ba      	ldr	r2, [r7, #24]
 80084de:	440a      	add	r2, r1
 80084e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80084e8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	7c7b      	ldrb	r3, [r7, #17]
 80084fa:	075b      	lsls	r3, r3, #29
 80084fc:	6979      	ldr	r1, [r7, #20]
 80084fe:	0148      	lsls	r0, r1, #5
 8008500:	69b9      	ldr	r1, [r7, #24]
 8008502:	4401      	add	r1, r0
 8008504:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008508:	4313      	orrs	r3, r2
 800850a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	015a      	lsls	r2, r3, #5
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	4413      	add	r3, r2
 8008514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a3e      	ldr	r2, [pc, #248]	; (8008614 <USB_HC_StartXfer+0x1fc>)
 800851c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800851e:	4b3d      	ldr	r3, [pc, #244]	; (8008614 <USB_HC_StartXfer+0x1fc>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008526:	4a3b      	ldr	r2, [pc, #236]	; (8008614 <USB_HC_StartXfer+0x1fc>)
 8008528:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	78db      	ldrb	r3, [r3, #3]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d006      	beq.n	8008540 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008532:	4b38      	ldr	r3, [pc, #224]	; (8008614 <USB_HC_StartXfer+0x1fc>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800853a:	4a36      	ldr	r2, [pc, #216]	; (8008614 <USB_HC_StartXfer+0x1fc>)
 800853c:	6013      	str	r3, [r2, #0]
 800853e:	e005      	b.n	800854c <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008540:	4b34      	ldr	r3, [pc, #208]	; (8008614 <USB_HC_StartXfer+0x1fc>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008548:	4a32      	ldr	r2, [pc, #200]	; (8008614 <USB_HC_StartXfer+0x1fc>)
 800854a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800854c:	4b31      	ldr	r3, [pc, #196]	; (8008614 <USB_HC_StartXfer+0x1fc>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008554:	4a2f      	ldr	r2, [pc, #188]	; (8008614 <USB_HC_StartXfer+0x1fc>)
 8008556:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	4413      	add	r3, r2
 8008560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008564:	461a      	mov	r2, r3
 8008566:	4b2b      	ldr	r3, [pc, #172]	; (8008614 <USB_HC_StartXfer+0x1fc>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	78db      	ldrb	r3, [r3, #3]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d148      	bne.n	8008606 <USB_HC_StartXfer+0x1ee>
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d044      	beq.n	8008606 <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	79db      	ldrb	r3, [r3, #7]
 8008580:	2b03      	cmp	r3, #3
 8008582:	d831      	bhi.n	80085e8 <USB_HC_StartXfer+0x1d0>
 8008584:	a201      	add	r2, pc, #4	; (adr r2, 800858c <USB_HC_StartXfer+0x174>)
 8008586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858a:	bf00      	nop
 800858c:	0800859d 	.word	0x0800859d
 8008590:	080085c1 	.word	0x080085c1
 8008594:	0800859d 	.word	0x0800859d
 8008598:	080085c1 	.word	0x080085c1
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	3303      	adds	r3, #3
 80085a2:	089b      	lsrs	r3, r3, #2
 80085a4:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80085a6:	89fa      	ldrh	r2, [r7, #14]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d91c      	bls.n	80085ec <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	f043 0220 	orr.w	r2, r3, #32
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	619a      	str	r2, [r3, #24]
          }
          break;
 80085be:	e015      	b.n	80085ec <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	3303      	adds	r3, #3
 80085c6:	089b      	lsrs	r3, r3, #2
 80085c8:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80085ca:	89fa      	ldrh	r2, [r7, #14]
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d90a      	bls.n	80085f0 <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	619a      	str	r2, [r3, #24]
          }
          break;
 80085e6:	e003      	b.n	80085f0 <USB_HC_StartXfer+0x1d8>

        default:
          break;
 80085e8:	bf00      	nop
 80085ea:	e002      	b.n	80085f2 <USB_HC_StartXfer+0x1da>
          break;
 80085ec:	bf00      	nop
 80085ee:	e000      	b.n	80085f2 <USB_HC_StartXfer+0x1da>
          break;
 80085f0:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	68d9      	ldr	r1, [r3, #12]
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	785a      	ldrb	r2, [r3, #1]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	b29b      	uxth	r3, r3
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f7ff fc23 	bl	8007e4c <USB_WritePacket>
    }

  return HAL_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3720      	adds	r7, #32
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}
 8008610:	1ff80000 	.word	0x1ff80000
 8008614:	200004d8 	.word	0x200004d8

08008618 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	b29b      	uxth	r3, r3
}
 800862e:	4618      	mov	r0, r3
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800863a:	b480      	push	{r7}
 800863c:	b087      	sub	sp, #28
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	460b      	mov	r3, r1
 8008644:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800864a:	78fb      	ldrb	r3, [r7, #3]
 800864c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800864e:	2300      	movs	r3, #0
 8008650:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	015a      	lsls	r2, r3, #5
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	4413      	add	r3, r2
 800865a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	0c9b      	lsrs	r3, r3, #18
 8008662:	f003 0303 	and.w	r3, r3, #3
 8008666:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d002      	beq.n	8008674 <USB_HC_Halt+0x3a>
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	2b02      	cmp	r3, #2
 8008672:	d16c      	bne.n	800874e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	4413      	add	r3, r2
 800867c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	0151      	lsls	r1, r2, #5
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	440a      	add	r2, r1
 800868a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800868e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008692:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d143      	bne.n	8008728 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	015a      	lsls	r2, r3, #5
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	4413      	add	r3, r2
 80086a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	0151      	lsls	r1, r2, #5
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	440a      	add	r2, r1
 80086b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	015a      	lsls	r2, r3, #5
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	0151      	lsls	r1, r2, #5
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	440a      	add	r2, r1
 80086d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	0151      	lsls	r1, r2, #5
 80086f2:	693a      	ldr	r2, [r7, #16]
 80086f4:	440a      	add	r2, r1
 80086f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086fe:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	3301      	adds	r3, #1
 8008704:	617b      	str	r3, [r7, #20]
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800870c:	d81d      	bhi.n	800874a <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	015a      	lsls	r2, r3, #5
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	4413      	add	r3, r2
 8008716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008720:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008724:	d0ec      	beq.n	8008700 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008726:	e080      	b.n	800882a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	4413      	add	r3, r2
 8008730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	0151      	lsls	r1, r2, #5
 800873a:	693a      	ldr	r2, [r7, #16]
 800873c:	440a      	add	r2, r1
 800873e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008742:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008746:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008748:	e06f      	b.n	800882a <USB_HC_Halt+0x1f0>
          break;
 800874a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800874c:	e06d      	b.n	800882a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	015a      	lsls	r2, r3, #5
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	4413      	add	r3, r2
 8008756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	0151      	lsls	r1, r2, #5
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	440a      	add	r2, r1
 8008764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008768:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800876c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800877a:	2b00      	cmp	r3, #0
 800877c:	d143      	bne.n	8008806 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	015a      	lsls	r2, r3, #5
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	4413      	add	r3, r2
 8008786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	0151      	lsls	r1, r2, #5
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	440a      	add	r2, r1
 8008794:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008798:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800879c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	015a      	lsls	r2, r3, #5
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	4413      	add	r3, r2
 80087a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	0151      	lsls	r1, r2, #5
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	440a      	add	r2, r1
 80087b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087bc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	015a      	lsls	r2, r3, #5
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	4413      	add	r3, r2
 80087c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	0151      	lsls	r1, r2, #5
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	440a      	add	r2, r1
 80087d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087dc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	3301      	adds	r3, #1
 80087e2:	617b      	str	r3, [r7, #20]
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087ea:	d81d      	bhi.n	8008828 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	015a      	lsls	r2, r3, #5
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	4413      	add	r3, r2
 80087f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008802:	d0ec      	beq.n	80087de <USB_HC_Halt+0x1a4>
 8008804:	e011      	b.n	800882a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	015a      	lsls	r2, r3, #5
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	4413      	add	r3, r2
 800880e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	0151      	lsls	r1, r2, #5
 8008818:	693a      	ldr	r2, [r7, #16]
 800881a:	440a      	add	r2, r1
 800881c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008820:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008824:	6013      	str	r3, [r2, #0]
 8008826:	e000      	b.n	800882a <USB_HC_Halt+0x1f0>
          break;
 8008828:	bf00      	nop
    }
  }

  return HAL_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	371c      	adds	r7, #28
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008844:	2300      	movs	r3, #0
 8008846:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f7ff fa7b 	bl	8007d44 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800884e:	2110      	movs	r1, #16
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff fab3 	bl	8007dbc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7ff fad6 	bl	8007e08 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800885c:	2300      	movs	r3, #0
 800885e:	613b      	str	r3, [r7, #16]
 8008860:	e01f      	b.n	80088a2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	015a      	lsls	r2, r3, #5
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	4413      	add	r3, r2
 800886a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008878:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008880:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008888:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	015a      	lsls	r2, r3, #5
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	4413      	add	r3, r2
 8008892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008896:	461a      	mov	r2, r3
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	3301      	adds	r3, #1
 80088a0:	613b      	str	r3, [r7, #16]
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	2b0f      	cmp	r3, #15
 80088a6:	d9dc      	bls.n	8008862 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80088a8:	2300      	movs	r3, #0
 80088aa:	613b      	str	r3, [r7, #16]
 80088ac:	e034      	b.n	8008918 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	015a      	lsls	r2, r3, #5
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088c4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088cc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088d4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088e2:	461a      	mov	r2, r3
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	3301      	adds	r3, #1
 80088ec:	617b      	str	r3, [r7, #20]
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088f4:	d80c      	bhi.n	8008910 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	015a      	lsls	r2, r3, #5
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	4413      	add	r3, r2
 80088fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800890c:	d0ec      	beq.n	80088e8 <USB_StopHost+0xb0>
 800890e:	e000      	b.n	8008912 <USB_StopHost+0xda>
        break;
 8008910:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	3301      	adds	r3, #1
 8008916:	613b      	str	r3, [r7, #16]
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	2b0f      	cmp	r3, #15
 800891c:	d9c7      	bls.n	80088ae <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008924:	461a      	mov	r2, r3
 8008926:	f04f 33ff 	mov.w	r3, #4294967295
 800892a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f04f 32ff 	mov.w	r2, #4294967295
 8008932:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7ff f9f4 	bl	8007d22 <USB_EnableGlobalInt>

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3718      	adds	r7, #24
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8008944:	b590      	push	{r4, r7, lr}
 8008946:	b089      	sub	sp, #36	; 0x24
 8008948:	af04      	add	r7, sp, #16
 800894a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800894c:	2302      	movs	r3, #2
 800894e:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8008950:	2301      	movs	r3, #1
 8008952:	2202      	movs	r2, #2
 8008954:	2102      	movs	r1, #2
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fc3a 	bl	80091d0 <USBH_FindInterface>
 800895c:	4603      	mov	r3, r0
 800895e:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8008960:	7bbb      	ldrb	r3, [r7, #14]
 8008962:	2bff      	cmp	r3, #255	; 0xff
 8008964:	f000 812a 	beq.w	8008bbc <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8008968:	7bbb      	ldrb	r3, [r7, #14]
 800896a:	4619      	mov	r1, r3
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 fc13 	bl	8009198 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8008978:	2050      	movs	r0, #80	; 0x50
 800897a:	f002 f8e3 	bl	800ab44 <malloc>
 800897e:	4603      	mov	r3, r0
 8008980:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008988:	69db      	ldr	r3, [r3, #28]
 800898a:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800898c:	7bbb      	ldrb	r3, [r7, #14]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	211a      	movs	r1, #26
 8008992:	fb01 f303 	mul.w	r3, r1, r3
 8008996:	4413      	add	r3, r2
 8008998:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	b25b      	sxtb	r3, r3
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	da15      	bge.n	80089d0 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80089a4:	7bbb      	ldrb	r3, [r7, #14]
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	211a      	movs	r1, #26
 80089aa:	fb01 f303 	mul.w	r3, r1, r3
 80089ae:	4413      	add	r3, r2
 80089b0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80089b4:	781a      	ldrb	r2, [r3, #0]
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80089ba:	7bbb      	ldrb	r3, [r7, #14]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	211a      	movs	r1, #26
 80089c0:	fb01 f303 	mul.w	r3, r1, r3
 80089c4:	4413      	add	r3, r2
 80089c6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80089ca:	881a      	ldrh	r2, [r3, #0]
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	785b      	ldrb	r3, [r3, #1]
 80089d4:	4619      	mov	r1, r3
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f001 fd21 	bl	800a41e <USBH_AllocPipe>
 80089dc:	4603      	mov	r3, r0
 80089de:	461a      	mov	r2, r3
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	7819      	ldrb	r1, [r3, #0]
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	7858      	ldrb	r0, [r3, #1]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	8952      	ldrh	r2, [r2, #10]
 80089fc:	9202      	str	r2, [sp, #8]
 80089fe:	2203      	movs	r2, #3
 8008a00:	9201      	str	r2, [sp, #4]
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	4623      	mov	r3, r4
 8008a06:	4602      	mov	r2, r0
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f001 fcd9 	bl	800a3c0 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	2200      	movs	r2, #0
 8008a14:	4619      	mov	r1, r3
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f001 ffe4 	bl	800a9e4 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	2200      	movs	r2, #0
 8008a20:	210a      	movs	r1, #10
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fbd4 	bl	80091d0 <USBH_FindInterface>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8008a2c:	7bbb      	ldrb	r3, [r7, #14]
 8008a2e:	2bff      	cmp	r3, #255	; 0xff
 8008a30:	f000 80c4 	beq.w	8008bbc <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008a34:	7bbb      	ldrb	r3, [r7, #14]
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	211a      	movs	r1, #26
 8008a3a:	fb01 f303 	mul.w	r3, r1, r3
 8008a3e:	4413      	add	r3, r2
 8008a40:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	b25b      	sxtb	r3, r3
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	da16      	bge.n	8008a7a <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008a4c:	7bbb      	ldrb	r3, [r7, #14]
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	211a      	movs	r1, #26
 8008a52:	fb01 f303 	mul.w	r3, r1, r3
 8008a56:	4413      	add	r3, r2
 8008a58:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008a5c:	781a      	ldrb	r2, [r3, #0]
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008a62:	7bbb      	ldrb	r3, [r7, #14]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	211a      	movs	r1, #26
 8008a68:	fb01 f303 	mul.w	r3, r1, r3
 8008a6c:	4413      	add	r3, r2
 8008a6e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008a72:	881a      	ldrh	r2, [r3, #0]
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	835a      	strh	r2, [r3, #26]
 8008a78:	e015      	b.n	8008aa6 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008a7a:	7bbb      	ldrb	r3, [r7, #14]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	211a      	movs	r1, #26
 8008a80:	fb01 f303 	mul.w	r3, r1, r3
 8008a84:	4413      	add	r3, r2
 8008a86:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008a8a:	781a      	ldrb	r2, [r3, #0]
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	211a      	movs	r1, #26
 8008a96:	fb01 f303 	mul.w	r3, r1, r3
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008aa0:	881a      	ldrh	r2, [r3, #0]
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008aa6:	7bbb      	ldrb	r3, [r7, #14]
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	211a      	movs	r1, #26
 8008aac:	fb01 f303 	mul.w	r3, r1, r3
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f203 3352 	addw	r3, r3, #850	; 0x352
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	b25b      	sxtb	r3, r3
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	da16      	bge.n	8008aec <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008abe:	7bbb      	ldrb	r3, [r7, #14]
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	211a      	movs	r1, #26
 8008ac4:	fb01 f303 	mul.w	r3, r1, r3
 8008ac8:	4413      	add	r3, r2
 8008aca:	f203 3352 	addw	r3, r3, #850	; 0x352
 8008ace:	781a      	ldrb	r2, [r3, #0]
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008ad4:	7bbb      	ldrb	r3, [r7, #14]
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	211a      	movs	r1, #26
 8008ada:	fb01 f303 	mul.w	r3, r1, r3
 8008ade:	4413      	add	r3, r2
 8008ae0:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8008ae4:	881a      	ldrh	r2, [r3, #0]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	835a      	strh	r2, [r3, #26]
 8008aea:	e015      	b.n	8008b18 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008aec:	7bbb      	ldrb	r3, [r7, #14]
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	211a      	movs	r1, #26
 8008af2:	fb01 f303 	mul.w	r3, r1, r3
 8008af6:	4413      	add	r3, r2
 8008af8:	f203 3352 	addw	r3, r3, #850	; 0x352
 8008afc:	781a      	ldrb	r2, [r3, #0]
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008b02:	7bbb      	ldrb	r3, [r7, #14]
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	211a      	movs	r1, #26
 8008b08:	fb01 f303 	mul.w	r3, r1, r3
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8008b12:	881a      	ldrh	r2, [r3, #0]
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	7b9b      	ldrb	r3, [r3, #14]
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f001 fc7d 	bl	800a41e <USBH_AllocPipe>
 8008b24:	4603      	mov	r3, r0
 8008b26:	461a      	mov	r2, r3
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	7bdb      	ldrb	r3, [r3, #15]
 8008b30:	4619      	mov	r1, r3
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f001 fc73 	bl	800a41e <USBH_AllocPipe>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	7b59      	ldrb	r1, [r3, #13]
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	7b98      	ldrb	r0, [r3, #14]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	8b12      	ldrh	r2, [r2, #24]
 8008b58:	9202      	str	r2, [sp, #8]
 8008b5a:	2202      	movs	r2, #2
 8008b5c:	9201      	str	r2, [sp, #4]
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	4623      	mov	r3, r4
 8008b62:	4602      	mov	r2, r0
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f001 fc2b 	bl	800a3c0 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	7b19      	ldrb	r1, [r3, #12]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	7bd8      	ldrb	r0, [r3, #15]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	8b52      	ldrh	r2, [r2, #26]
 8008b82:	9202      	str	r2, [sp, #8]
 8008b84:	2202      	movs	r2, #2
 8008b86:	9201      	str	r2, [sp, #4]
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	4623      	mov	r3, r4
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f001 fc16 	bl	800a3c0 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	7b5b      	ldrb	r3, [r3, #13]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f001 ff1d 	bl	800a9e4 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	7b1b      	ldrb	r3, [r3, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f001 ff16 	bl	800a9e4 <USBH_LL_SetToggle>
      status = USBH_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3714      	adds	r7, #20
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd90      	pop	{r4, r7, pc}

08008bc6 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b084      	sub	sp, #16
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008bd4:	69db      	ldr	r3, [r3, #28]
 8008bd6:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00e      	beq.n	8008bfe <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	4619      	mov	r1, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f001 fc09 	bl	800a3fe <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f001 fc31 	bl	800a45a <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	7b1b      	ldrb	r3, [r3, #12]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00e      	beq.n	8008c24 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	7b1b      	ldrb	r3, [r3, #12]
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f001 fbf6 	bl	800a3fe <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	7b1b      	ldrb	r3, [r3, #12]
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f001 fc1e 	bl	800a45a <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	7b5b      	ldrb	r3, [r3, #13]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00e      	beq.n	8008c4a <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	7b5b      	ldrb	r3, [r3, #13]
 8008c30:	4619      	mov	r1, r3
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f001 fbe3 	bl	800a3fe <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	7b5b      	ldrb	r3, [r3, #13]
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f001 fc0b 	bl	800a45a <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00b      	beq.n	8008c6e <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008c5c:	69db      	ldr	r3, [r3, #28]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f001 ff78 	bl	800ab54 <free>
    phost->pActiveClass->pData = 0U;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8008c80:	2302      	movs	r3, #2
 8008c82:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008c8a:	69db      	ldr	r3, [r3, #28]
 8008c8c:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	3340      	adds	r3, #64	; 0x40
 8008c92:	4619      	mov	r1, r3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f8b2 	bl	8008dfe <GetLineCoding>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d105      	bne.n	8008cb0 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008caa:	2102      	movs	r1, #2
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	4798      	blx	r3
  }
  return status;
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
	...

08008cbc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008cd2:	69db      	ldr	r3, [r3, #28]
 8008cd4:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008cdc:	2b04      	cmp	r3, #4
 8008cde:	d877      	bhi.n	8008dd0 <USBH_CDC_Process+0x114>
 8008ce0:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <USBH_CDC_Process+0x2c>)
 8008ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce6:	bf00      	nop
 8008ce8:	08008cfd 	.word	0x08008cfd
 8008cec:	08008d03 	.word	0x08008d03
 8008cf0:	08008d33 	.word	0x08008d33
 8008cf4:	08008da7 	.word	0x08008da7
 8008cf8:	08008db5 	.word	0x08008db5
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73fb      	strb	r3, [r7, #15]
    break;
 8008d00:	e06d      	b.n	8008dde <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d06:	4619      	mov	r1, r3
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 f897 	bl	8008e3c <SetLineCoding>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8008d12:	7bbb      	ldrb	r3, [r7, #14]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d104      	bne.n	8008d22 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8008d20:	e058      	b.n	8008dd4 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d055      	beq.n	8008dd4 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	2204      	movs	r2, #4
 8008d2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8008d30:	e050      	b.n	8008dd4 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	3340      	adds	r3, #64	; 0x40
 8008d36:	4619      	mov	r1, r3
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f860 	bl	8008dfe <GetLineCoding>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8008d42:	7bbb      	ldrb	r3, [r7, #14]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d126      	bne.n	8008d96 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d5a:	791b      	ldrb	r3, [r3, #4]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d13b      	bne.n	8008dd8 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d6a:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d133      	bne.n	8008dd8 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d7a:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d12b      	bne.n	8008dd8 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d88:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d124      	bne.n	8008dd8 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f95a 	bl	8009048 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8008d94:	e020      	b.n	8008dd8 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8008d96:	7bbb      	ldrb	r3, [r7, #14]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d01d      	beq.n	8008dd8 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2204      	movs	r2, #4
 8008da0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8008da4:	e018      	b.n	8008dd8 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f867 	bl	8008e7a <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f8dc 	bl	8008f6a <CDC_ProcessReception>
    break;
 8008db2:	e014      	b.n	8008dde <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8008db4:	2100      	movs	r1, #0
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fece 	bl	8009b58 <USBH_ClrFeature>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8008dc0:	7bbb      	ldrb	r3, [r7, #14]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10a      	bne.n	8008ddc <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8008dce:	e005      	b.n	8008ddc <USBH_CDC_Process+0x120>

  default:
    break;
 8008dd0:	bf00      	nop
 8008dd2:	e004      	b.n	8008dde <USBH_CDC_Process+0x122>
    break;
 8008dd4:	bf00      	nop
 8008dd6:	e002      	b.n	8008dde <USBH_CDC_Process+0x122>
    break;
 8008dd8:	bf00      	nop
 8008dda:	e000      	b.n	8008dde <USBH_CDC_Process+0x122>
    break;
 8008ddc:	bf00      	nop

  }

  return status;
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	370c      	adds	r7, #12
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b082      	sub	sp, #8
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	22a1      	movs	r2, #161	; 0xa1
 8008e0c:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2221      	movs	r2, #33	; 0x21
 8008e12:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2207      	movs	r2, #7
 8008e24:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	2207      	movs	r2, #7
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f001 f873 	bl	8009f18 <USBH_CtlReq>
 8008e32:	4603      	mov	r3, r0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2221      	movs	r2, #33	; 0x21
 8008e4a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2220      	movs	r2, #32
 8008e50:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2207      	movs	r2, #7
 8008e62:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	2207      	movs	r2, #7
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f001 f854 	bl	8009f18 <USBH_CtlReq>
 8008e70:	4603      	mov	r3, r0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b086      	sub	sp, #24
 8008e7e:	af02      	add	r7, sp, #8
 8008e80:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008e88:	69db      	ldr	r3, [r3, #28]
 8008e8a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d002      	beq.n	8008ea0 <CDC_ProcessTransmission+0x26>
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	d025      	beq.n	8008eea <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8008e9e:	e060      	b.n	8008f62 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	8b12      	ldrh	r2, [r2, #24]
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d90c      	bls.n	8008ec6 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	69d9      	ldr	r1, [r3, #28]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	8b1a      	ldrh	r2, [r3, #24]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	7b58      	ldrb	r0, [r3, #13]
 8008eb8:	2301      	movs	r3, #1
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f001 fa3b 	bl	800a33a <USBH_BulkSendData>
 8008ec4:	e00c      	b.n	8008ee0 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	7b58      	ldrb	r0, [r3, #13]
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	4603      	mov	r3, r0
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f001 fa2d 	bl	800a33a <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8008ee8:	e03b      	b.n	8008f62 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	7b5b      	ldrb	r3, [r3, #13]
 8008eee:	4619      	mov	r1, r3
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f001 fd4d 	bl	800a990 <USBH_LL_GetURBState>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8008efa:	7afb      	ldrb	r3, [r7, #11]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d128      	bne.n	8008f52 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	8b12      	ldrh	r2, [r2, #24]
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d90e      	bls.n	8008f2a <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	8b12      	ldrh	r2, [r2, #24]
 8008f14:	1a9a      	subs	r2, r3, r2
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	8b12      	ldrh	r2, [r2, #24]
 8008f22:	441a      	add	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	61da      	str	r2, [r3, #28]
 8008f28:	e002      	b.n	8008f30 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d004      	beq.n	8008f42 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8008f40:	e00e      	b.n	8008f60 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f868 	bl	8009020 <USBH_CDC_TransmitCallback>
    break;
 8008f50:	e006      	b.n	8008f60 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8008f52:	7afb      	ldrb	r3, [r7, #11]
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d103      	bne.n	8008f60 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8008f60:	bf00      	nop
  }
}
 8008f62:	bf00      	nop
 8008f64:	3710      	adds	r7, #16
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b086      	sub	sp, #24
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008f86:	2b03      	cmp	r3, #3
 8008f88:	d002      	beq.n	8008f90 <CDC_ProcessReception+0x26>
 8008f8a:	2b04      	cmp	r3, #4
 8008f8c:	d00e      	beq.n	8008fac <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8008f8e:	e043      	b.n	8009018 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	6a19      	ldr	r1, [r3, #32]
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	8b5a      	ldrh	r2, [r3, #26]
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	7b1b      	ldrb	r3, [r3, #12]
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f001 f9f1 	bl	800a384 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	2204      	movs	r2, #4
 8008fa6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8008faa:	e035      	b.n	8009018 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	7b1b      	ldrb	r3, [r3, #12]
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f001 fcec 	bl	800a990 <USBH_LL_GetURBState>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8008fbc:	7cfb      	ldrb	r3, [r7, #19]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d129      	bne.n	8009016 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	7b1b      	ldrb	r3, [r3, #12]
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f001 fc4f 	bl	800a86c <USBH_LL_GetLastXferSize>
 8008fce:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d016      	beq.n	8009008 <CDC_ProcessReception+0x9e>
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	8b5b      	ldrh	r3, [r3, #26]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d910      	bls.n	8009008 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	1ad2      	subs	r2, r2, r3
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	6a1a      	ldr	r2, [r3, #32]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	441a      	add	r2, r3
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	2203      	movs	r2, #3
 8009002:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8009006:	e006      	b.n	8009016 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f80f 	bl	8009034 <USBH_CDC_ReceiveCallback>
    break;
 8009016:	bf00      	nop
  }
}
 8009018:	bf00      	nop
 800901a:	3718      	adds	r7, #24
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]

}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]

}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]

}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	4613      	mov	r3, r2
 8009068:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009070:	2302      	movs	r3, #2
 8009072:	e019      	b.n	80090a8 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	79fa      	ldrb	r2, [r7, #7]
 8009078:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f000 f80f 	bl	80090b0 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d003      	beq.n	80090a0 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	68ba      	ldr	r2, [r7, #8]
 800909c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f001 fb31 	bl	800a708 <USBH_LL_Init>

  return USBH_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80090b8:	2300      	movs	r3, #0
 80090ba:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80090bc:	e008      	b.n	80090d0 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	32e0      	adds	r2, #224	; 0xe0
 80090c4:	2100      	movs	r1, #0
 80090c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	3301      	adds	r3, #1
 80090ce:	60fb      	str	r3, [r7, #12]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2b0e      	cmp	r3, #14
 80090d4:	d9f3      	bls.n	80090be <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80090d6:	2300      	movs	r3, #0
 80090d8:	60fb      	str	r3, [r7, #12]
 80090da:	e009      	b.n	80090f0 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	4413      	add	r3, r2
 80090e2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80090e6:	2200      	movs	r2, #0
 80090e8:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	3301      	adds	r3, #1
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090f6:	d3f1      	bcc.n	80090dc <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2201      	movs	r2, #1
 8009116:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2240      	movs	r2, #64	; 0x40
 800911c:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3714      	adds	r7, #20
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009142:	b480      	push	{r7}
 8009144:	b085      	sub	sp, #20
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 800914c:	2300      	movs	r3, #0
 800914e:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d017      	beq.n	8009186 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800915c:	2b00      	cmp	r3, #0
 800915e:	d10f      	bne.n	8009180 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009166:	1c59      	adds	r1, r3, #1
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	33dc      	adds	r3, #220	; 0xdc
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4413      	add	r3, r2
 8009176:	683a      	ldr	r2, [r7, #0]
 8009178:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	73fb      	strb	r3, [r7, #15]
 800917e:	e004      	b.n	800918a <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009180:	2302      	movs	r3, #2
 8009182:	73fb      	strb	r3, [r7, #15]
 8009184:	e001      	b.n	800918a <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009186:	2302      	movs	r3, #2
 8009188:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800918a:	7bfb      	ldrb	r3, [r7, #15]
}
 800918c:	4618      	mov	r0, r3
 800918e:	3714      	adds	r7, #20
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	460b      	mov	r3, r1
 80091a2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 80091ae:	78fa      	ldrb	r2, [r7, #3]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d204      	bcs.n	80091be <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	78fa      	ldrb	r2, [r7, #3]
 80091b8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 80091bc:	e001      	b.n	80091c2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 80091be:	2302      	movs	r3, #2
 80091c0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80091c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b087      	sub	sp, #28
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	4608      	mov	r0, r1
 80091da:	4611      	mov	r1, r2
 80091dc:	461a      	mov	r2, r3
 80091de:	4603      	mov	r3, r0
 80091e0:	70fb      	strb	r3, [r7, #3]
 80091e2:	460b      	mov	r3, r1
 80091e4:	70bb      	strb	r3, [r7, #2]
 80091e6:	4613      	mov	r3, r2
 80091e8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 80091ea:	2300      	movs	r3, #0
 80091ec:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80091ee:	2300      	movs	r3, #0
 80091f0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80091f8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80091fa:	e025      	b.n	8009248 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80091fc:	7dfb      	ldrb	r3, [r7, #23]
 80091fe:	221a      	movs	r2, #26
 8009200:	fb02 f303 	mul.w	r3, r2, r3
 8009204:	3308      	adds	r3, #8
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	4413      	add	r3, r2
 800920a:	3302      	adds	r3, #2
 800920c:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	795b      	ldrb	r3, [r3, #5]
 8009212:	78fa      	ldrb	r2, [r7, #3]
 8009214:	429a      	cmp	r2, r3
 8009216:	d002      	beq.n	800921e <USBH_FindInterface+0x4e>
 8009218:	78fb      	ldrb	r3, [r7, #3]
 800921a:	2bff      	cmp	r3, #255	; 0xff
 800921c:	d111      	bne.n	8009242 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8009222:	78ba      	ldrb	r2, [r7, #2]
 8009224:	429a      	cmp	r2, r3
 8009226:	d002      	beq.n	800922e <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8009228:	78bb      	ldrb	r3, [r7, #2]
 800922a:	2bff      	cmp	r3, #255	; 0xff
 800922c:	d109      	bne.n	8009242 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8009232:	787a      	ldrb	r2, [r7, #1]
 8009234:	429a      	cmp	r2, r3
 8009236:	d002      	beq.n	800923e <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009238:	787b      	ldrb	r3, [r7, #1]
 800923a:	2bff      	cmp	r3, #255	; 0xff
 800923c:	d101      	bne.n	8009242 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800923e:	7dfb      	ldrb	r3, [r7, #23]
 8009240:	e006      	b.n	8009250 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009242:	7dfb      	ldrb	r3, [r7, #23]
 8009244:	3301      	adds	r3, #1
 8009246:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009248:	7dfb      	ldrb	r3, [r7, #23]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d9d6      	bls.n	80091fc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800924e:	23ff      	movs	r3, #255	; 0xff
}
 8009250:	4618      	mov	r0, r3
 8009252:	371c      	adds	r7, #28
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f001 fa8b 	bl	800a780 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800926a:	2101      	movs	r1, #1
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f001 fba2 	bl	800a9b6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b088      	sub	sp, #32
 8009280:	af04      	add	r7, sp, #16
 8009282:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009284:	2302      	movs	r3, #2
 8009286:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009288:	2300      	movs	r3, #0
 800928a:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 faec 	bl	800986a <USBH_IsPortEnabled>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d10c      	bne.n	80092b2 <USBH_Process+0x36>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	b2db      	uxtb	r3, r3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d007      	beq.n	80092b2 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	2b03      	cmp	r3, #3
 80092aa:	d002      	beq.n	80092b2 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2203      	movs	r2, #3
 80092b0:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	2b0b      	cmp	r3, #11
 80092ba:	f200 814c 	bhi.w	8009556 <USBH_Process+0x2da>
 80092be:	a201      	add	r2, pc, #4	; (adr r2, 80092c4 <USBH_Process+0x48>)
 80092c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c4:	080092f5 	.word	0x080092f5
 80092c8:	08009317 	.word	0x08009317
 80092cc:	0800932b 	.word	0x0800932b
 80092d0:	08009531 	.word	0x08009531
 80092d4:	08009557 	.word	0x08009557
 80092d8:	080093b9 	.word	0x080093b9
 80092dc:	080094e7 	.word	0x080094e7
 80092e0:	080093e9 	.word	0x080093e9
 80092e4:	08009409 	.word	0x08009409
 80092e8:	08009429 	.word	0x08009429
 80092ec:	08009457 	.word	0x08009457
 80092f0:	08009519 	.word	0x08009519
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f000 812c 	beq.w	800955a <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2201      	movs	r2, #1
 8009306:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8009308:	20c8      	movs	r0, #200	; 0xc8
 800930a:	f001 fb9e 	bl	800aa4a <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f001 fa91 	bl	800a836 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009314:	e121      	b.n	800955a <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800931c:	2b01      	cmp	r3, #1
 800931e:	f040 811e 	bne.w	800955e <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2202      	movs	r2, #2
 8009326:	701a      	strb	r2, [r3, #0]
    }
    break;
 8009328:	e119      	b.n	800955e <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800932a:	2064      	movs	r0, #100	; 0x64
 800932c:	f001 fb8d 	bl	800aa4a <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f001 fa5b 	bl	800a7ec <USBH_LL_GetSpeed>
 8009336:	4603      	mov	r3, r0
 8009338:	461a      	mov	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2205      	movs	r2, #5
 8009344:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8009346:	2100      	movs	r1, #0
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f001 f868 	bl	800a41e <USBH_AllocPipe>
 800934e:	4603      	mov	r3, r0
 8009350:	461a      	mov	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8009356:	2180      	movs	r1, #128	; 0x80
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f001 f860 	bl	800a41e <USBH_AllocPipe>
 800935e:	4603      	mov	r3, r0
 8009360:	461a      	mov	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	7919      	ldrb	r1, [r3, #4]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800937a:	b292      	uxth	r2, r2
 800937c:	9202      	str	r2, [sp, #8]
 800937e:	2200      	movs	r2, #0
 8009380:	9201      	str	r2, [sp, #4]
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	4603      	mov	r3, r0
 8009386:	2280      	movs	r2, #128	; 0x80
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f001 f819 	bl	800a3c0 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	7959      	ldrb	r1, [r3, #5]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80093a2:	b292      	uxth	r2, r2
 80093a4:	9202      	str	r2, [sp, #8]
 80093a6:	2200      	movs	r2, #0
 80093a8:	9201      	str	r2, [sp, #4]
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	4603      	mov	r3, r0
 80093ae:	2200      	movs	r2, #0
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f001 f805 	bl	800a3c0 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80093b6:	e0e3      	b.n	8009580 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 f8e7 	bl	800958c <USBH_HandleEnum>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f040 80ce 	bne.w	8009562 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d103      	bne.n	80093e0 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2208      	movs	r2, #8
 80093dc:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 80093de:	e0c0      	b.n	8009562 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2207      	movs	r2, #7
 80093e4:	701a      	strb	r2, [r3, #0]
    break;
 80093e6:	e0bc      	b.n	8009562 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f000 80b9 	beq.w	8009566 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80093fa:	2101      	movs	r1, #1
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2208      	movs	r2, #8
 8009404:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009406:	e0ae      	b.n	8009566 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800940e:	b29b      	uxth	r3, r3
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 fb59 	bl	8009aca <USBH_SetCfg>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	f040 80a5 	bne.w	800956a <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2209      	movs	r2, #9
 8009424:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8009426:	e0a0      	b.n	800956a <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800942e:	f003 0320 	and.w	r3, r3, #32
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00b      	beq.n	800944e <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009436:	2101      	movs	r1, #1
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fb69 	bl	8009b10 <USBH_SetFeature>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	f040 8094 	bne.w	800956e <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	220a      	movs	r2, #10
 800944a:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800944c:	e08f      	b.n	800956e <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	220a      	movs	r2, #10
 8009452:	701a      	strb	r2, [r3, #0]
    break;
 8009454:	e08b      	b.n	800956e <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800945c:	2b00      	cmp	r3, #0
 800945e:	f000 8088 	beq.w	8009572 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800946a:	2300      	movs	r3, #0
 800946c:	73fb      	strb	r3, [r7, #15]
 800946e:	e017      	b.n	80094a0 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009470:	7bfb      	ldrb	r3, [r7, #15]
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	33dc      	adds	r3, #220	; 0xdc
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4413      	add	r3, r2
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	791a      	ldrb	r2, [r3, #4]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8009484:	429a      	cmp	r2, r3
 8009486:	d108      	bne.n	800949a <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8009488:	7bfb      	ldrb	r3, [r7, #15]
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	33dc      	adds	r3, #220	; 0xdc
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	4413      	add	r3, r2
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800949a:	7bfb      	ldrb	r3, [r7, #15]
 800949c:	3301      	adds	r3, #1
 800949e:	73fb      	strb	r3, [r7, #15]
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d0e4      	beq.n	8009470 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d016      	beq.n	80094de <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	4798      	blx	r3
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d109      	bne.n	80094d6 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2206      	movs	r2, #6
 80094c6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80094ce:	2103      	movs	r1, #3
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80094d4:	e04d      	b.n	8009572 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	220d      	movs	r2, #13
 80094da:	701a      	strb	r2, [r3, #0]
    break;
 80094dc:	e049      	b.n	8009572 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	220d      	movs	r2, #13
 80094e2:	701a      	strb	r2, [r3, #0]
    break;
 80094e4:	e045      	b.n	8009572 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00f      	beq.n	8009510 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	4798      	blx	r3
 80094fc:	4603      	mov	r3, r0
 80094fe:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8009500:	7bbb      	ldrb	r3, [r7, #14]
 8009502:	b2db      	uxtb	r3, r3
 8009504:	2b00      	cmp	r3, #0
 8009506:	d136      	bne.n	8009576 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	220b      	movs	r2, #11
 800950c:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800950e:	e032      	b.n	8009576 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	220d      	movs	r2, #13
 8009514:	701a      	strb	r2, [r3, #0]
    break;
 8009516:	e02e      	b.n	8009576 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800951e:	2b00      	cmp	r3, #0
 8009520:	d02b      	beq.n	800957a <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009528:	695b      	ldr	r3, [r3, #20]
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	4798      	blx	r3
    }
    break;
 800952e:	e024      	b.n	800957a <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f7ff fdbd 	bl	80090b0 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800953c:	2b00      	cmp	r3, #0
 800953e:	d01e      	beq.n	800957e <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8009554:	e013      	b.n	800957e <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8009556:	bf00      	nop
 8009558:	e012      	b.n	8009580 <USBH_Process+0x304>
    break;
 800955a:	bf00      	nop
 800955c:	e010      	b.n	8009580 <USBH_Process+0x304>
    break;
 800955e:	bf00      	nop
 8009560:	e00e      	b.n	8009580 <USBH_Process+0x304>
    break;
 8009562:	bf00      	nop
 8009564:	e00c      	b.n	8009580 <USBH_Process+0x304>
    break;
 8009566:	bf00      	nop
 8009568:	e00a      	b.n	8009580 <USBH_Process+0x304>
    break;
 800956a:	bf00      	nop
 800956c:	e008      	b.n	8009580 <USBH_Process+0x304>
    break;
 800956e:	bf00      	nop
 8009570:	e006      	b.n	8009580 <USBH_Process+0x304>
    break;
 8009572:	bf00      	nop
 8009574:	e004      	b.n	8009580 <USBH_Process+0x304>
    break;
 8009576:	bf00      	nop
 8009578:	e002      	b.n	8009580 <USBH_Process+0x304>
    break;
 800957a:	bf00      	nop
 800957c:	e000      	b.n	8009580 <USBH_Process+0x304>
    break;
 800957e:	bf00      	nop
  }
 return USBH_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop

0800958c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b088      	sub	sp, #32
 8009590:	af04      	add	r7, sp, #16
 8009592:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009594:	2301      	movs	r3, #1
 8009596:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	785b      	ldrb	r3, [r3, #1]
 800959c:	2b07      	cmp	r3, #7
 800959e:	f200 80f8 	bhi.w	8009792 <USBH_HandleEnum+0x206>
 80095a2:	a201      	add	r2, pc, #4	; (adr r2, 80095a8 <USBH_HandleEnum+0x1c>)
 80095a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a8:	080095c9 	.word	0x080095c9
 80095ac:	0800963b 	.word	0x0800963b
 80095b0:	08009653 	.word	0x08009653
 80095b4:	080096c9 	.word	0x080096c9
 80095b8:	080096df 	.word	0x080096df
 80095bc:	080096fb 	.word	0x080096fb
 80095c0:	0800972f 	.word	0x0800972f
 80095c4:	08009763 	.word	0x08009763
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80095c8:	2108      	movs	r1, #8
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f9ad 	bl	800992a <USBH_Get_DevDesc>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f040 80df 	bne.w	8009796 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2201      	movs	r2, #1
 80095e6:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	7919      	ldrb	r1, [r3, #4]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80095fc:	b292      	uxth	r2, r2
 80095fe:	9202      	str	r2, [sp, #8]
 8009600:	2200      	movs	r2, #0
 8009602:	9201      	str	r2, [sp, #4]
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	4603      	mov	r3, r0
 8009608:	2280      	movs	r2, #128	; 0x80
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fed8 	bl	800a3c0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	7959      	ldrb	r1, [r3, #5]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009624:	b292      	uxth	r2, r2
 8009626:	9202      	str	r2, [sp, #8]
 8009628:	2200      	movs	r2, #0
 800962a:	9201      	str	r2, [sp, #4]
 800962c:	9300      	str	r3, [sp, #0]
 800962e:	4603      	mov	r3, r0
 8009630:	2200      	movs	r2, #0
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 fec4 	bl	800a3c0 <USBH_OpenPipe>

    }
    break;
 8009638:	e0ad      	b.n	8009796 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800963a:	2112      	movs	r1, #18
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 f974 	bl	800992a <USBH_Get_DevDesc>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	f040 80a8 	bne.w	800979a <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2202      	movs	r2, #2
 800964e:	705a      	strb	r2, [r3, #1]

    }
    break;
 8009650:	e0a3      	b.n	800979a <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8009652:	2101      	movs	r1, #1
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fa14 	bl	8009a82 <USBH_SetAddress>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	f040 809e 	bne.w	800979e <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8009662:	2002      	movs	r0, #2
 8009664:	f001 f9f1 	bl	800aa4a <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2203      	movs	r2, #3
 8009674:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	7919      	ldrb	r1, [r3, #4]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800968a:	b292      	uxth	r2, r2
 800968c:	9202      	str	r2, [sp, #8]
 800968e:	2200      	movs	r2, #0
 8009690:	9201      	str	r2, [sp, #4]
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	4603      	mov	r3, r0
 8009696:	2280      	movs	r2, #128	; 0x80
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 fe91 	bl	800a3c0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	7959      	ldrb	r1, [r3, #5]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80096b2:	b292      	uxth	r2, r2
 80096b4:	9202      	str	r2, [sp, #8]
 80096b6:	2200      	movs	r2, #0
 80096b8:	9201      	str	r2, [sp, #4]
 80096ba:	9300      	str	r3, [sp, #0]
 80096bc:	4603      	mov	r3, r0
 80096be:	2200      	movs	r2, #0
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 fe7d 	bl	800a3c0 <USBH_OpenPipe>
    }
    break;
 80096c6:	e06a      	b.n	800979e <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80096c8:	2109      	movs	r1, #9
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 f955 	bl	800997a <USBH_Get_CfgDesc>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d165      	bne.n	80097a2 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2204      	movs	r2, #4
 80096da:	705a      	strb	r2, [r3, #1]
    }
    break;
 80096dc:	e061      	b.n	80097a2 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 80096e4:	4619      	mov	r1, r3
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f947 	bl	800997a <USBH_Get_CfgDesc>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d159      	bne.n	80097a6 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2205      	movs	r2, #5
 80096f6:	705a      	strb	r2, [r3, #1]
    }
    break;
 80096f8:	e055      	b.n	80097a6 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8009700:	2b00      	cmp	r3, #0
 8009702:	d010      	beq.n	8009726 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009710:	23ff      	movs	r3, #255	; 0xff
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f955 	bl	80099c2 <USBH_Get_StringDesc>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d145      	bne.n	80097aa <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2206      	movs	r2, #6
 8009722:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009724:	e041      	b.n	80097aa <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2206      	movs	r2, #6
 800972a:	705a      	strb	r2, [r3, #1]
    break;
 800972c:	e03d      	b.n	80097aa <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8009734:	2b00      	cmp	r3, #0
 8009736:	d010      	beq.n	800975a <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009744:	23ff      	movs	r3, #255	; 0xff
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f93b 	bl	80099c2 <USBH_Get_StringDesc>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d12d      	bne.n	80097ae <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2207      	movs	r2, #7
 8009756:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009758:	e029      	b.n	80097ae <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2207      	movs	r2, #7
 800975e:	705a      	strb	r2, [r3, #1]
    break;
 8009760:	e025      	b.n	80097ae <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00f      	beq.n	800978c <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009778:	23ff      	movs	r3, #255	; 0xff
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f921 	bl	80099c2 <USBH_Get_StringDesc>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d115      	bne.n	80097b2 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8009786:	2300      	movs	r3, #0
 8009788:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800978a:	e012      	b.n	80097b2 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 800978c:	2300      	movs	r3, #0
 800978e:	73fb      	strb	r3, [r7, #15]
    break;
 8009790:	e00f      	b.n	80097b2 <USBH_HandleEnum+0x226>

  default:
    break;
 8009792:	bf00      	nop
 8009794:	e00e      	b.n	80097b4 <USBH_HandleEnum+0x228>
    break;
 8009796:	bf00      	nop
 8009798:	e00c      	b.n	80097b4 <USBH_HandleEnum+0x228>
    break;
 800979a:	bf00      	nop
 800979c:	e00a      	b.n	80097b4 <USBH_HandleEnum+0x228>
    break;
 800979e:	bf00      	nop
 80097a0:	e008      	b.n	80097b4 <USBH_HandleEnum+0x228>
    break;
 80097a2:	bf00      	nop
 80097a4:	e006      	b.n	80097b4 <USBH_HandleEnum+0x228>
    break;
 80097a6:	bf00      	nop
 80097a8:	e004      	b.n	80097b4 <USBH_HandleEnum+0x228>
    break;
 80097aa:	bf00      	nop
 80097ac:	e002      	b.n	80097b4 <USBH_HandleEnum+0x228>
    break;
 80097ae:	bf00      	nop
 80097b0:	e000      	b.n	80097b4 <USBH_HandleEnum+0x228>
    break;
 80097b2:	bf00      	nop
  }
  return Status;
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop

080097c0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80097d2:	bf00      	nop
 80097d4:	370c      	adds	r7, #12
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr

080097de <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b082      	sub	sp, #8
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80097ec:	1c5a      	adds	r2, r3, #1
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 f804 	bl	8009802 <USBH_HandleSof>
}
 80097fa:	bf00      	nop
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b082      	sub	sp, #8
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	b2db      	uxtb	r3, r3
 8009810:	2b0b      	cmp	r3, #11
 8009812:	d10a      	bne.n	800982a <USBH_HandleSof+0x28>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800981a:	2b00      	cmp	r3, #0
 800981c:	d005      	beq.n	800982a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009824:	699b      	ldr	r3, [r3, #24]
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	4798      	blx	r3
  }
}
 800982a:	bf00      	nop
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8009832:	b480      	push	{r7}
 8009834:	b083      	sub	sp, #12
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8009842:	bf00      	nop
}
 8009844:	370c      	adds	r7, #12
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800984e:	b480      	push	{r7}
 8009850:	b083      	sub	sp, #12
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800985e:	bf00      	nop
}
 8009860:	370c      	adds	r7, #12
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr

0800986a <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800986a:	b480      	push	{r7}
 800986c:	b083      	sub	sp, #12
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8009878:	4618      	mov	r0, r3
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	b2db      	uxtb	r3, r3
 8009892:	2b00      	cmp	r3, #0
 8009894:	d10f      	bne.n	80098b6 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2201      	movs	r2, #1
 800989a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00e      	beq.n	80098c6 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80098ae:	2104      	movs	r1, #4
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	4798      	blx	r3
 80098b4:	e007      	b.n	80098c6 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d102      	bne.n	80098c6 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2202      	movs	r2, #2
 80098c4:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 ff6c 	bl	800a7b6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	791b      	ldrb	r3, [r3, #4]
 80098e2:	4619      	mov	r1, r3
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 fdb8 	bl	800a45a <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	795b      	ldrb	r3, [r3, #5]
 80098ee:	4619      	mov	r1, r3
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 fdb2 	bl	800a45a <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009904:	2b00      	cmp	r3, #0
 8009906:	d005      	beq.n	8009914 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800990e:	2105      	movs	r1, #5
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 ff33 	bl	800a780 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2203      	movs	r2, #3
 800991e:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3708      	adds	r7, #8
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b086      	sub	sp, #24
 800992e:	af02      	add	r7, sp, #8
 8009930:	6078      	str	r0, [r7, #4]
 8009932:	460b      	mov	r3, r1
 8009934:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800993c:	78fb      	ldrb	r3, [r7, #3]
 800993e:	b29b      	uxth	r3, r3
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	4613      	mov	r3, r2
 8009944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009948:	2100      	movs	r1, #0
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f864 	bl	8009a18 <USBH_GetDescriptor>
 8009950:	4603      	mov	r3, r0
 8009952:	73fb      	strb	r3, [r7, #15]
 8009954:	7bfb      	ldrb	r3, [r7, #15]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10a      	bne.n	8009970 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f203 3022 	addw	r0, r3, #802	; 0x322
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009966:	78fa      	ldrb	r2, [r7, #3]
 8009968:	b292      	uxth	r2, r2
 800996a:	4619      	mov	r1, r3
 800996c:	f000 f918 	bl	8009ba0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8009970:	7bfb      	ldrb	r3, [r7, #15]
}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800997a:	b580      	push	{r7, lr}
 800997c:	b086      	sub	sp, #24
 800997e:	af02      	add	r7, sp, #8
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	460b      	mov	r3, r1
 8009984:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	331c      	adds	r3, #28
 800998a:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800998c:	887b      	ldrh	r3, [r7, #2]
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009996:	2100      	movs	r1, #0
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 f83d 	bl	8009a18 <USBH_GetDescriptor>
 800999e:	4603      	mov	r3, r0
 80099a0:	72fb      	strb	r3, [r7, #11]
 80099a2:	7afb      	ldrb	r3, [r7, #11]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d107      	bne.n	80099b8 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80099ae:	887a      	ldrh	r2, [r7, #2]
 80099b0:	68f9      	ldr	r1, [r7, #12]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f000 f964 	bl	8009c80 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 80099b8:	7afb      	ldrb	r3, [r7, #11]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b088      	sub	sp, #32
 80099c6:	af02      	add	r7, sp, #8
 80099c8:	60f8      	str	r0, [r7, #12]
 80099ca:	607a      	str	r2, [r7, #4]
 80099cc:	461a      	mov	r2, r3
 80099ce:	460b      	mov	r3, r1
 80099d0:	72fb      	strb	r3, [r7, #11]
 80099d2:	4613      	mov	r3, r2
 80099d4:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80099d6:	7afb      	ldrb	r3, [r7, #11]
 80099d8:	b29b      	uxth	r3, r3
 80099da:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80099de:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80099e6:	893b      	ldrh	r3, [r7, #8]
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	460b      	mov	r3, r1
 80099ec:	2100      	movs	r1, #0
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f000 f812 	bl	8009a18 <USBH_GetDescriptor>
 80099f4:	4603      	mov	r3, r0
 80099f6:	75fb      	strb	r3, [r7, #23]
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d107      	bne.n	8009a0e <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009a04:	893a      	ldrh	r2, [r7, #8]
 8009a06:	6879      	ldr	r1, [r7, #4]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f000 fa37 	bl	8009e7c <USBH_ParseStringDesc>
  }
  return status;
 8009a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3718      	adds	r7, #24
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	607b      	str	r3, [r7, #4]
 8009a22:	460b      	mov	r3, r1
 8009a24:	72fb      	strb	r3, [r7, #11]
 8009a26:	4613      	mov	r3, r2
 8009a28:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	789b      	ldrb	r3, [r3, #2]
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d11c      	bne.n	8009a6c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009a32:	7afb      	ldrb	r3, [r7, #11]
 8009a34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009a38:	b2da      	uxtb	r2, r3
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2206      	movs	r2, #6
 8009a42:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	893a      	ldrh	r2, [r7, #8]
 8009a48:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009a4a:	893b      	ldrh	r3, [r7, #8]
 8009a4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009a50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a54:	d104      	bne.n	8009a60 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f240 4209 	movw	r2, #1033	; 0x409
 8009a5c:	829a      	strh	r2, [r3, #20]
 8009a5e:	e002      	b.n	8009a66 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2200      	movs	r2, #0
 8009a64:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	8b3a      	ldrh	r2, [r7, #24]
 8009a6a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8009a6c:	8b3b      	ldrh	r3, [r7, #24]
 8009a6e:	461a      	mov	r2, r3
 8009a70:	6879      	ldr	r1, [r7, #4]
 8009a72:	68f8      	ldr	r0, [r7, #12]
 8009a74:	f000 fa50 	bl	8009f18 <USBH_CtlReq>
 8009a78:	4603      	mov	r3, r0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b082      	sub	sp, #8
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	789b      	ldrb	r3, [r3, #2]
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d10f      	bne.n	8009ab6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2205      	movs	r2, #5
 8009aa0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009aa2:	78fb      	ldrb	r3, [r7, #3]
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	2100      	movs	r1, #0
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 fa2c 	bl	8009f18 <USBH_CtlReq>
 8009ac0:	4603      	mov	r3, r0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b082      	sub	sp, #8
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	789b      	ldrb	r3, [r3, #2]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d10e      	bne.n	8009afc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2209      	movs	r2, #9
 8009ae8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	887a      	ldrh	r2, [r7, #2]
 8009aee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8009afc:	2200      	movs	r2, #0
 8009afe:	2100      	movs	r1, #0
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fa09 	bl	8009f18 <USBH_CtlReq>
 8009b06:	4603      	mov	r3, r0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	789b      	ldrb	r3, [r3, #2]
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d10f      	bne.n	8009b44 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2203      	movs	r2, #3
 8009b2e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009b30:	78fb      	ldrb	r3, [r7, #3]
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009b44:	2200      	movs	r2, #0
 8009b46:	2100      	movs	r1, #0
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 f9e5 	bl	8009f18 <USBH_CtlReq>
 8009b4e:	4603      	mov	r3, r0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	460b      	mov	r3, r1
 8009b62:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	789b      	ldrb	r3, [r3, #2]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d10f      	bne.n	8009b8c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2202      	movs	r2, #2
 8009b70:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2201      	movs	r2, #1
 8009b76:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009b7e:	78fb      	ldrb	r3, [r7, #3]
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	2100      	movs	r1, #0
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f9c1 	bl	8009f18 <USBH_CtlReq>
 8009b96:	4603      	mov	r3, r0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3708      	adds	r7, #8
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	4613      	mov	r3, r2
 8009bac:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	781a      	ldrb	r2, [r3, #0]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	785a      	ldrb	r2, [r3, #1]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	3302      	adds	r3, #2
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	3303      	adds	r3, #3
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	021b      	lsls	r3, r3, #8
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	791a      	ldrb	r2, [r3, #4]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	795a      	ldrb	r2, [r3, #5]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	799a      	ldrb	r2, [r3, #6]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	79da      	ldrb	r2, [r3, #7]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009bfa:	88fb      	ldrh	r3, [r7, #6]
 8009bfc:	2b08      	cmp	r3, #8
 8009bfe:	d939      	bls.n	8009c74 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	3308      	adds	r3, #8
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	b29a      	uxth	r2, r3
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	3309      	adds	r3, #9
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	021b      	lsls	r3, r3, #8
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	4313      	orrs	r3, r2
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	330a      	adds	r3, #10
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	330b      	adds	r3, #11
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	021b      	lsls	r3, r3, #8
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	4313      	orrs	r3, r2
 8009c32:	b29a      	uxth	r2, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	330c      	adds	r3, #12
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	330d      	adds	r3, #13
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	021b      	lsls	r3, r3, #8
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	b29a      	uxth	r2, r3
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	7b9a      	ldrb	r2, [r3, #14]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	7bda      	ldrb	r2, [r3, #15]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	7c1a      	ldrb	r2, [r3, #16]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	7c5a      	ldrb	r2, [r3, #17]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	745a      	strb	r2, [r3, #17]
  }
}
 8009c74:	bf00      	nop
 8009c76:	3714      	adds	r7, #20
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b08a      	sub	sp, #40	; 0x28
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009c92:	2300      	movs	r3, #0
 8009c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	781a      	ldrb	r2, [r3, #0]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	785a      	ldrb	r2, [r3, #1]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	3302      	adds	r3, #2
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	b29a      	uxth	r2, r3
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	3303      	adds	r3, #3
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	021b      	lsls	r3, r3, #8
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	791a      	ldrb	r2, [r3, #4]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	795a      	ldrb	r2, [r3, #5]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	799a      	ldrb	r2, [r3, #6]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	79da      	ldrb	r2, [r3, #7]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	7a1a      	ldrb	r2, [r3, #8]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009cf6:	88fb      	ldrh	r3, [r7, #6]
 8009cf8:	2b09      	cmp	r3, #9
 8009cfa:	d95f      	bls.n	8009dbc <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009cfc:	2309      	movs	r3, #9
 8009cfe:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009d00:	2300      	movs	r3, #0
 8009d02:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009d04:	e051      	b.n	8009daa <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009d06:	f107 0316 	add.w	r3, r7, #22
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d0e:	f000 f8e8 	bl	8009ee2 <USBH_GetNextDesc>
 8009d12:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	785b      	ldrb	r3, [r3, #1]
 8009d18:	2b04      	cmp	r3, #4
 8009d1a:	d146      	bne.n	8009daa <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009d1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d20:	221a      	movs	r2, #26
 8009d22:	fb02 f303 	mul.w	r3, r2, r3
 8009d26:	3308      	adds	r3, #8
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	3302      	adds	r3, #2
 8009d2e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8009d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d32:	69f8      	ldr	r0, [r7, #28]
 8009d34:	f000 f846 	bl	8009dc4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009d42:	e022      	b.n	8009d8a <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8009d44:	f107 0316 	add.w	r3, r7, #22
 8009d48:	4619      	mov	r1, r3
 8009d4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d4c:	f000 f8c9 	bl	8009ee2 <USBH_GetNextDesc>
 8009d50:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d54:	785b      	ldrb	r3, [r3, #1]
 8009d56:	2b05      	cmp	r3, #5
 8009d58:	d117      	bne.n	8009d8a <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009d5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d5e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009d62:	3201      	adds	r2, #1
 8009d64:	00d2      	lsls	r2, r2, #3
 8009d66:	211a      	movs	r1, #26
 8009d68:	fb01 f303 	mul.w	r3, r1, r3
 8009d6c:	4413      	add	r3, r2
 8009d6e:	3308      	adds	r3, #8
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	4413      	add	r3, r2
 8009d74:	3304      	adds	r3, #4
 8009d76:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8009d78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d7a:	69b8      	ldr	r0, [r7, #24]
 8009d7c:	f000 f851 	bl	8009e22 <USBH_ParseEPDesc>
            ep_ix++;
 8009d80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009d84:	3301      	adds	r3, #1
 8009d86:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	791b      	ldrb	r3, [r3, #4]
 8009d8e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d204      	bcs.n	8009da0 <USBH_ParseCfgDesc+0x120>
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	885a      	ldrh	r2, [r3, #2]
 8009d9a:	8afb      	ldrh	r3, [r7, #22]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d8d1      	bhi.n	8009d44 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009da0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009da4:	3301      	adds	r3, #1
 8009da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009daa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d804      	bhi.n	8009dbc <USBH_ParseCfgDesc+0x13c>
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	885a      	ldrh	r2, [r3, #2]
 8009db6:	8afb      	ldrh	r3, [r7, #22]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d8a4      	bhi.n	8009d06 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009dbc:	bf00      	nop
 8009dbe:	3728      	adds	r7, #40	; 0x28
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	781a      	ldrb	r2, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	785a      	ldrb	r2, [r3, #1]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	789a      	ldrb	r2, [r3, #2]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	78da      	ldrb	r2, [r3, #3]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	791a      	ldrb	r2, [r3, #4]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	795a      	ldrb	r2, [r3, #5]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	799a      	ldrb	r2, [r3, #6]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	79da      	ldrb	r2, [r3, #7]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	7a1a      	ldrb	r2, [r3, #8]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	721a      	strb	r2, [r3, #8]
}
 8009e16:	bf00      	nop
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8009e22:	b480      	push	{r7}
 8009e24:	b083      	sub	sp, #12
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	781a      	ldrb	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	785a      	ldrb	r2, [r3, #1]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	789a      	ldrb	r2, [r3, #2]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	78da      	ldrb	r2, [r3, #3]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	3304      	adds	r3, #4
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	b29a      	uxth	r2, r3
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	3305      	adds	r3, #5
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	021b      	lsls	r3, r3, #8
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	4313      	orrs	r3, r2
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	799a      	ldrb	r2, [r3, #6]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	719a      	strb	r2, [r3, #6]
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b087      	sub	sp, #28
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	4613      	mov	r3, r2
 8009e88:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	2b03      	cmp	r3, #3
 8009e92:	d120      	bne.n	8009ed6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	1e9a      	subs	r2, r3, #2
 8009e9a:	88fb      	ldrh	r3, [r7, #6]
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	bf28      	it	cs
 8009ea0:	4613      	movcs	r3, r2
 8009ea2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	3302      	adds	r3, #2
 8009ea8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009eaa:	2300      	movs	r3, #0
 8009eac:	82fb      	strh	r3, [r7, #22]
 8009eae:	e00b      	b.n	8009ec8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009eb0:	8afb      	ldrh	r3, [r7, #22]
 8009eb2:	68fa      	ldr	r2, [r7, #12]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	781a      	ldrb	r2, [r3, #0]
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009ec2:	8afb      	ldrh	r3, [r7, #22]
 8009ec4:	3302      	adds	r3, #2
 8009ec6:	82fb      	strh	r3, [r7, #22]
 8009ec8:	8afa      	ldrh	r2, [r7, #22]
 8009eca:	8abb      	ldrh	r3, [r7, #20]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d3ef      	bcc.n	8009eb0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	701a      	strb	r2, [r3, #0]
  }
}
 8009ed6:	bf00      	nop
 8009ed8:	371c      	adds	r7, #28
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr

08009ee2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8009ee2:	b480      	push	{r7}
 8009ee4:	b085      	sub	sp, #20
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
 8009eea:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	881a      	ldrh	r2, [r3, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	4413      	add	r3, r2
 8009ef8:	b29a      	uxth	r2, r3
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4413      	add	r3, r2
 8009f08:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	4613      	mov	r3, r2
 8009f24:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009f26:	2301      	movs	r3, #1
 8009f28:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	789b      	ldrb	r3, [r3, #2]
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d002      	beq.n	8009f38 <USBH_CtlReq+0x20>
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d00f      	beq.n	8009f56 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8009f36:	e034      	b.n	8009fa2 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	88fa      	ldrh	r2, [r7, #6]
 8009f42:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2201      	movs	r2, #1
 8009f48:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2202      	movs	r2, #2
 8009f4e:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8009f50:	2301      	movs	r3, #1
 8009f52:	75fb      	strb	r3, [r7, #23]
    break;
 8009f54:	e025      	b.n	8009fa2 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f000 f828 	bl	8009fac <USBH_HandleControl>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8009f60:	7dfb      	ldrb	r3, [r7, #23]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d108      	bne.n	8009f78 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2201      	movs	r2, #1
 8009f6a:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8009f72:	2300      	movs	r3, #0
 8009f74:	75fb      	strb	r3, [r7, #23]
    break;
 8009f76:	e013      	b.n	8009fa0 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8009f78:	7dfb      	ldrb	r3, [r7, #23]
 8009f7a:	2b03      	cmp	r3, #3
 8009f7c:	d108      	bne.n	8009f90 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2201      	movs	r2, #1
 8009f82:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2200      	movs	r2, #0
 8009f88:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8009f8a:	2303      	movs	r3, #3
 8009f8c:	75fb      	strb	r3, [r7, #23]
    break;
 8009f8e:	e007      	b.n	8009fa0 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8009f90:	7dfb      	ldrb	r3, [r7, #23]
 8009f92:	2b02      	cmp	r3, #2
 8009f94:	d104      	bne.n	8009fa0 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	75fb      	strb	r3, [r7, #23]
    break;
 8009fa0:	bf00      	nop
  }
  return status;
 8009fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3718      	adds	r7, #24
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b086      	sub	sp, #24
 8009fb0:	af02      	add	r7, sp, #8
 8009fb2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	7e1b      	ldrb	r3, [r3, #24]
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	2b0a      	cmp	r3, #10
 8009fc4:	f200 814c 	bhi.w	800a260 <USBH_HandleControl+0x2b4>
 8009fc8:	a201      	add	r2, pc, #4	; (adr r2, 8009fd0 <USBH_HandleControl+0x24>)
 8009fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fce:	bf00      	nop
 8009fd0:	08009ffd 	.word	0x08009ffd
 8009fd4:	0800a017 	.word	0x0800a017
 8009fd8:	0800a081 	.word	0x0800a081
 8009fdc:	0800a0a7 	.word	0x0800a0a7
 8009fe0:	0800a0df 	.word	0x0800a0df
 8009fe4:	0800a10b 	.word	0x0800a10b
 8009fe8:	0800a15d 	.word	0x0800a15d
 8009fec:	0800a17f 	.word	0x0800a17f
 8009ff0:	0800a1bb 	.word	0x0800a1bb
 8009ff4:	0800a1e3 	.word	0x0800a1e3
 8009ff8:	0800a221 	.word	0x0800a221
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f103 0110 	add.w	r1, r3, #16
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	795b      	ldrb	r3, [r3, #5]
 800a006:	461a      	mov	r2, r3
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 f939 	bl	800a280 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2202      	movs	r2, #2
 800a012:	761a      	strb	r2, [r3, #24]
    break;
 800a014:	e12f      	b.n	800a276 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	795b      	ldrb	r3, [r3, #5]
 800a01a:	4619      	mov	r1, r3
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 fcb7 	bl	800a990 <USBH_LL_GetURBState>
 800a022:	4603      	mov	r3, r0
 800a024:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800a026:	7bbb      	ldrb	r3, [r7, #14]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d11e      	bne.n	800a06a <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	7c1b      	ldrb	r3, [r3, #16]
 800a030:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a034:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	8adb      	ldrh	r3, [r3, #22]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00a      	beq.n	800a054 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800a03e:	7b7b      	ldrb	r3, [r7, #13]
 800a040:	2b80      	cmp	r3, #128	; 0x80
 800a042:	d103      	bne.n	800a04c <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2203      	movs	r2, #3
 800a048:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a04a:	e10b      	b.n	800a264 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2205      	movs	r2, #5
 800a050:	761a      	strb	r2, [r3, #24]
    break;
 800a052:	e107      	b.n	800a264 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 800a054:	7b7b      	ldrb	r3, [r7, #13]
 800a056:	2b80      	cmp	r3, #128	; 0x80
 800a058:	d103      	bne.n	800a062 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2209      	movs	r2, #9
 800a05e:	761a      	strb	r2, [r3, #24]
    break;
 800a060:	e100      	b.n	800a264 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2207      	movs	r2, #7
 800a066:	761a      	strb	r2, [r3, #24]
    break;
 800a068:	e0fc      	b.n	800a264 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a06a:	7bbb      	ldrb	r3, [r7, #14]
 800a06c:	2b04      	cmp	r3, #4
 800a06e:	d003      	beq.n	800a078 <USBH_HandleControl+0xcc>
 800a070:	7bbb      	ldrb	r3, [r7, #14]
 800a072:	2b02      	cmp	r3, #2
 800a074:	f040 80f6 	bne.w	800a264 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	220b      	movs	r2, #11
 800a07c:	761a      	strb	r2, [r3, #24]
    break;
 800a07e:	e0f1      	b.n	800a264 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a086:	b29a      	uxth	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6899      	ldr	r1, [r3, #8]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	899a      	ldrh	r2, [r3, #12]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	791b      	ldrb	r3, [r3, #4]
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 f930 	bl	800a2fe <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2204      	movs	r2, #4
 800a0a2:	761a      	strb	r2, [r3, #24]
    break;
 800a0a4:	e0e7      	b.n	800a276 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	791b      	ldrb	r3, [r3, #4]
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 fc6f 	bl	800a990 <USBH_LL_GetURBState>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800a0b6:	7bbb      	ldrb	r3, [r7, #14]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d102      	bne.n	800a0c2 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2209      	movs	r2, #9
 800a0c0:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800a0c2:	7bbb      	ldrb	r3, [r7, #14]
 800a0c4:	2b05      	cmp	r3, #5
 800a0c6:	d102      	bne.n	800a0ce <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a0cc:	e0cc      	b.n	800a268 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 800a0ce:	7bbb      	ldrb	r3, [r7, #14]
 800a0d0:	2b04      	cmp	r3, #4
 800a0d2:	f040 80c9 	bne.w	800a268 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	220b      	movs	r2, #11
 800a0da:	761a      	strb	r2, [r3, #24]
    break;
 800a0dc:	e0c4      	b.n	800a268 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6899      	ldr	r1, [r3, #8]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	899a      	ldrh	r2, [r3, #12]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	7958      	ldrb	r0, [r3, #5]
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	9300      	str	r3, [sp, #0]
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 f8df 	bl	800a2b4 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a0fc:	b29a      	uxth	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2206      	movs	r2, #6
 800a106:	761a      	strb	r2, [r3, #24]
    break;
 800a108:	e0b5      	b.n	800a276 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	795b      	ldrb	r3, [r3, #5]
 800a10e:	4619      	mov	r1, r3
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fc3d 	bl	800a990 <USBH_LL_GetURBState>
 800a116:	4603      	mov	r3, r0
 800a118:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800a11a:	7bbb      	ldrb	r3, [r7, #14]
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d103      	bne.n	800a128 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2207      	movs	r2, #7
 800a124:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a126:	e0a1      	b.n	800a26c <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 800a128:	7bbb      	ldrb	r3, [r7, #14]
 800a12a:	2b05      	cmp	r3, #5
 800a12c:	d105      	bne.n	800a13a <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	220c      	movs	r2, #12
 800a132:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800a134:	2303      	movs	r3, #3
 800a136:	73fb      	strb	r3, [r7, #15]
    break;
 800a138:	e098      	b.n	800a26c <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800a13a:	7bbb      	ldrb	r3, [r7, #14]
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d103      	bne.n	800a148 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2205      	movs	r2, #5
 800a144:	761a      	strb	r2, [r3, #24]
    break;
 800a146:	e091      	b.n	800a26c <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 800a148:	7bbb      	ldrb	r3, [r7, #14]
 800a14a:	2b04      	cmp	r3, #4
 800a14c:	f040 808e 	bne.w	800a26c <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	220b      	movs	r2, #11
 800a154:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800a156:	2302      	movs	r3, #2
 800a158:	73fb      	strb	r3, [r7, #15]
    break;
 800a15a:	e087      	b.n	800a26c <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	791b      	ldrb	r3, [r3, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	2100      	movs	r1, #0
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 f8ca 	bl	800a2fe <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a170:	b29a      	uxth	r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2208      	movs	r2, #8
 800a17a:	761a      	strb	r2, [r3, #24]

    break;
 800a17c:	e07b      	b.n	800a276 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	791b      	ldrb	r3, [r3, #4]
 800a182:	4619      	mov	r1, r3
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 fc03 	bl	800a990 <USBH_LL_GetURBState>
 800a18a:	4603      	mov	r3, r0
 800a18c:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800a18e:	7bbb      	ldrb	r3, [r7, #14]
 800a190:	2b01      	cmp	r3, #1
 800a192:	d105      	bne.n	800a1a0 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	220d      	movs	r2, #13
 800a198:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800a19a:	2300      	movs	r3, #0
 800a19c:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a19e:	e067      	b.n	800a270 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 800a1a0:	7bbb      	ldrb	r3, [r7, #14]
 800a1a2:	2b04      	cmp	r3, #4
 800a1a4:	d103      	bne.n	800a1ae <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	220b      	movs	r2, #11
 800a1aa:	761a      	strb	r2, [r3, #24]
    break;
 800a1ac:	e060      	b.n	800a270 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 800a1ae:	7bbb      	ldrb	r3, [r7, #14]
 800a1b0:	2b05      	cmp	r3, #5
 800a1b2:	d15d      	bne.n	800a270 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a1b8:	e05a      	b.n	800a270 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	795a      	ldrb	r2, [r3, #5]
 800a1be:	2301      	movs	r3, #1
 800a1c0:	9300      	str	r3, [sp, #0]
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 f873 	bl	800a2b4 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a1d4:	b29a      	uxth	r2, r3
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	220a      	movs	r2, #10
 800a1de:	761a      	strb	r2, [r3, #24]
    break;
 800a1e0:	e049      	b.n	800a276 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	795b      	ldrb	r3, [r3, #5]
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 fbd1 	bl	800a990 <USBH_LL_GetURBState>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800a1f2:	7bbb      	ldrb	r3, [r7, #14]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d105      	bne.n	800a204 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	220d      	movs	r2, #13
 800a200:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800a202:	e037      	b.n	800a274 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800a204:	7bbb      	ldrb	r3, [r7, #14]
 800a206:	2b02      	cmp	r3, #2
 800a208:	d103      	bne.n	800a212 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2209      	movs	r2, #9
 800a20e:	761a      	strb	r2, [r3, #24]
    break;
 800a210:	e030      	b.n	800a274 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800a212:	7bbb      	ldrb	r3, [r7, #14]
 800a214:	2b04      	cmp	r3, #4
 800a216:	d12d      	bne.n	800a274 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	220b      	movs	r2, #11
 800a21c:	761a      	strb	r2, [r3, #24]
    break;
 800a21e:	e029      	b.n	800a274 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	7e5b      	ldrb	r3, [r3, #25]
 800a224:	3301      	adds	r3, #1
 800a226:	b2da      	uxtb	r2, r3
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	765a      	strb	r2, [r3, #25]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	7e5b      	ldrb	r3, [r3, #25]
 800a230:	2b02      	cmp	r3, #2
 800a232:	d809      	bhi.n	800a248 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 fabe 	bl	800a7b6 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2201      	movs	r2, #1
 800a23e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800a246:	e016      	b.n	800a276 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a24e:	2106      	movs	r1, #6
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800a25a:	2302      	movs	r3, #2
 800a25c:	73fb      	strb	r3, [r7, #15]
    break;
 800a25e:	e00a      	b.n	800a276 <USBH_HandleControl+0x2ca>

  default:
    break;
 800a260:	bf00      	nop
 800a262:	e008      	b.n	800a276 <USBH_HandleControl+0x2ca>
    break;
 800a264:	bf00      	nop
 800a266:	e006      	b.n	800a276 <USBH_HandleControl+0x2ca>
    break;
 800a268:	bf00      	nop
 800a26a:	e004      	b.n	800a276 <USBH_HandleControl+0x2ca>
    break;
 800a26c:	bf00      	nop
 800a26e:	e002      	b.n	800a276 <USBH_HandleControl+0x2ca>
    break;
 800a270:	bf00      	nop
 800a272:	e000      	b.n	800a276 <USBH_HandleControl+0x2ca>
    break;
 800a274:	bf00      	nop
  }
  return status;
 800a276:	7bfb      	ldrb	r3, [r7, #15]
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3710      	adds	r7, #16
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <USBH_CtlSendSetup>:
 800a280:	b580      	push	{r7, lr}
 800a282:	b088      	sub	sp, #32
 800a284:	af04      	add	r7, sp, #16
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	4613      	mov	r3, r2
 800a28c:	71fb      	strb	r3, [r7, #7]
 800a28e:	79f9      	ldrb	r1, [r7, #7]
 800a290:	2300      	movs	r3, #0
 800a292:	9303      	str	r3, [sp, #12]
 800a294:	2308      	movs	r3, #8
 800a296:	9302      	str	r3, [sp, #8]
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	9301      	str	r3, [sp, #4]
 800a29c:	2300      	movs	r3, #0
 800a29e:	9300      	str	r3, [sp, #0]
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f000 fb42 	bl	800a92e <USBH_LL_SubmitURB>
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <USBH_CtlSendData>:
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b088      	sub	sp, #32
 800a2b8:	af04      	add	r7, sp, #16
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	4611      	mov	r1, r2
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	80fb      	strh	r3, [r7, #6]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	717b      	strb	r3, [r7, #5]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d001      	beq.n	800a2d8 <USBH_CtlSendData+0x24>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	763b      	strb	r3, [r7, #24]
 800a2d8:	7979      	ldrb	r1, [r7, #5]
 800a2da:	7e3b      	ldrb	r3, [r7, #24]
 800a2dc:	9303      	str	r3, [sp, #12]
 800a2de:	88fb      	ldrh	r3, [r7, #6]
 800a2e0:	9302      	str	r3, [sp, #8]
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	9301      	str	r3, [sp, #4]
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	9300      	str	r3, [sp, #0]
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f000 fb1d 	bl	800a92e <USBH_LL_SubmitURB>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <USBH_CtlReceiveData>:
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b088      	sub	sp, #32
 800a302:	af04      	add	r7, sp, #16
 800a304:	60f8      	str	r0, [r7, #12]
 800a306:	60b9      	str	r1, [r7, #8]
 800a308:	4611      	mov	r1, r2
 800a30a:	461a      	mov	r2, r3
 800a30c:	460b      	mov	r3, r1
 800a30e:	80fb      	strh	r3, [r7, #6]
 800a310:	4613      	mov	r3, r2
 800a312:	717b      	strb	r3, [r7, #5]
 800a314:	7979      	ldrb	r1, [r7, #5]
 800a316:	2300      	movs	r3, #0
 800a318:	9303      	str	r3, [sp, #12]
 800a31a:	88fb      	ldrh	r3, [r7, #6]
 800a31c:	9302      	str	r3, [sp, #8]
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	9301      	str	r3, [sp, #4]
 800a322:	2301      	movs	r3, #1
 800a324:	9300      	str	r3, [sp, #0]
 800a326:	2300      	movs	r3, #0
 800a328:	2201      	movs	r2, #1
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f000 faff 	bl	800a92e <USBH_LL_SubmitURB>
 800a330:	2300      	movs	r3, #0
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <USBH_BulkSendData>:
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b088      	sub	sp, #32
 800a33e:	af04      	add	r7, sp, #16
 800a340:	60f8      	str	r0, [r7, #12]
 800a342:	60b9      	str	r1, [r7, #8]
 800a344:	4611      	mov	r1, r2
 800a346:	461a      	mov	r2, r3
 800a348:	460b      	mov	r3, r1
 800a34a:	80fb      	strh	r3, [r7, #6]
 800a34c:	4613      	mov	r3, r2
 800a34e:	717b      	strb	r3, [r7, #5]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a356:	2b00      	cmp	r3, #0
 800a358:	d001      	beq.n	800a35e <USBH_BulkSendData+0x24>
 800a35a:	2300      	movs	r3, #0
 800a35c:	763b      	strb	r3, [r7, #24]
 800a35e:	7979      	ldrb	r1, [r7, #5]
 800a360:	7e3b      	ldrb	r3, [r7, #24]
 800a362:	9303      	str	r3, [sp, #12]
 800a364:	88fb      	ldrh	r3, [r7, #6]
 800a366:	9302      	str	r3, [sp, #8]
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	9301      	str	r3, [sp, #4]
 800a36c:	2301      	movs	r3, #1
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	2302      	movs	r3, #2
 800a372:	2200      	movs	r2, #0
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f000 fada 	bl	800a92e <USBH_LL_SubmitURB>
 800a37a:	2300      	movs	r3, #0
 800a37c:	4618      	mov	r0, r3
 800a37e:	3710      	adds	r7, #16
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <USBH_BulkReceiveData>:
 800a384:	b580      	push	{r7, lr}
 800a386:	b088      	sub	sp, #32
 800a388:	af04      	add	r7, sp, #16
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	60b9      	str	r1, [r7, #8]
 800a38e:	4611      	mov	r1, r2
 800a390:	461a      	mov	r2, r3
 800a392:	460b      	mov	r3, r1
 800a394:	80fb      	strh	r3, [r7, #6]
 800a396:	4613      	mov	r3, r2
 800a398:	717b      	strb	r3, [r7, #5]
 800a39a:	7979      	ldrb	r1, [r7, #5]
 800a39c:	2300      	movs	r3, #0
 800a39e:	9303      	str	r3, [sp, #12]
 800a3a0:	88fb      	ldrh	r3, [r7, #6]
 800a3a2:	9302      	str	r3, [sp, #8]
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	9301      	str	r3, [sp, #4]
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	9300      	str	r3, [sp, #0]
 800a3ac:	2302      	movs	r3, #2
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	68f8      	ldr	r0, [r7, #12]
 800a3b2:	f000 fabc 	bl	800a92e <USBH_LL_SubmitURB>
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3710      	adds	r7, #16
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <USBH_OpenPipe>:
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b086      	sub	sp, #24
 800a3c4:	af04      	add	r7, sp, #16
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	4608      	mov	r0, r1
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	70fb      	strb	r3, [r7, #3]
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	70bb      	strb	r3, [r7, #2]
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	707b      	strb	r3, [r7, #1]
 800a3da:	7878      	ldrb	r0, [r7, #1]
 800a3dc:	78ba      	ldrb	r2, [r7, #2]
 800a3de:	78f9      	ldrb	r1, [r7, #3]
 800a3e0:	8b3b      	ldrh	r3, [r7, #24]
 800a3e2:	9302      	str	r3, [sp, #8]
 800a3e4:	7d3b      	ldrb	r3, [r7, #20]
 800a3e6:	9301      	str	r3, [sp, #4]
 800a3e8:	7c3b      	ldrb	r3, [r7, #16]
 800a3ea:	9300      	str	r3, [sp, #0]
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 fa4f 	bl	800a892 <USBH_LL_OpenPipe>
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3708      	adds	r7, #8
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <USBH_ClosePipe>:
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b082      	sub	sp, #8
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
 800a406:	460b      	mov	r3, r1
 800a408:	70fb      	strb	r3, [r7, #3]
 800a40a:	78fb      	ldrb	r3, [r7, #3]
 800a40c:	4619      	mov	r1, r3
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 fa6e 	bl	800a8f0 <USBH_LL_ClosePipe>
 800a414:	2300      	movs	r3, #0
 800a416:	4618      	mov	r0, r3
 800a418:	3708      	adds	r7, #8
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <USBH_AllocPipe>:
 800a41e:	b580      	push	{r7, lr}
 800a420:	b084      	sub	sp, #16
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
 800a426:	460b      	mov	r3, r1
 800a428:	70fb      	strb	r3, [r7, #3]
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f831 	bl	800a492 <USBH_GetFreePipe>
 800a430:	4603      	mov	r3, r0
 800a432:	81fb      	strh	r3, [r7, #14]
 800a434:	89fb      	ldrh	r3, [r7, #14]
 800a436:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d007      	beq.n	800a44e <USBH_AllocPipe+0x30>
 800a43e:	78fb      	ldrb	r3, [r7, #3]
 800a440:	89fa      	ldrh	r2, [r7, #14]
 800a442:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	32e0      	adds	r2, #224	; 0xe0
 800a44a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a44e:	89fb      	ldrh	r3, [r7, #14]
 800a450:	b2db      	uxtb	r3, r3
 800a452:	4618      	mov	r0, r3
 800a454:	3710      	adds	r7, #16
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}

0800a45a <USBH_FreePipe>:
 800a45a:	b480      	push	{r7}
 800a45c:	b083      	sub	sp, #12
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
 800a462:	460b      	mov	r3, r1
 800a464:	70fb      	strb	r3, [r7, #3]
 800a466:	78fb      	ldrb	r3, [r7, #3]
 800a468:	2b0a      	cmp	r3, #10
 800a46a:	d80b      	bhi.n	800a484 <USBH_FreePipe+0x2a>
 800a46c:	78fa      	ldrb	r2, [r7, #3]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	32e0      	adds	r2, #224	; 0xe0
 800a472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a476:	78fa      	ldrb	r2, [r7, #3]
 800a478:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	32e0      	adds	r2, #224	; 0xe0
 800a480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a484:	2300      	movs	r3, #0
 800a486:	4618      	mov	r0, r3
 800a488:	370c      	adds	r7, #12
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr

0800a492 <USBH_GetFreePipe>:
 800a492:	b480      	push	{r7}
 800a494:	b085      	sub	sp, #20
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
 800a49a:	2300      	movs	r3, #0
 800a49c:	73fb      	strb	r3, [r7, #15]
 800a49e:	2300      	movs	r3, #0
 800a4a0:	73fb      	strb	r3, [r7, #15]
 800a4a2:	e00e      	b.n	800a4c2 <USBH_GetFreePipe+0x30>
 800a4a4:	7bfa      	ldrb	r2, [r7, #15]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	32e0      	adds	r2, #224	; 0xe0
 800a4aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d102      	bne.n	800a4bc <USBH_GetFreePipe+0x2a>
 800a4b6:	7bfb      	ldrb	r3, [r7, #15]
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	e007      	b.n	800a4cc <USBH_GetFreePipe+0x3a>
 800a4bc:	7bfb      	ldrb	r3, [r7, #15]
 800a4be:	3301      	adds	r3, #1
 800a4c0:	73fb      	strb	r3, [r7, #15]
 800a4c2:	7bfb      	ldrb	r3, [r7, #15]
 800a4c4:	2b0a      	cmp	r3, #10
 800a4c6:	d9ed      	bls.n	800a4a4 <USBH_GetFreePipe+0x12>
 800a4c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3714      	adds	r7, #20
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <MX_USB_HOST_Init>:
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	2201      	movs	r2, #1
 800a4de:	490e      	ldr	r1, [pc, #56]	; (800a518 <MX_USB_HOST_Init+0x40>)
 800a4e0:	480e      	ldr	r0, [pc, #56]	; (800a51c <MX_USB_HOST_Init+0x44>)
 800a4e2:	f7fe fdbb 	bl	800905c <USBH_Init>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d001      	beq.n	800a4f0 <MX_USB_HOST_Init+0x18>
 800a4ec:	f7f6 fe28 	bl	8001140 <Error_Handler>
 800a4f0:	490b      	ldr	r1, [pc, #44]	; (800a520 <MX_USB_HOST_Init+0x48>)
 800a4f2:	480a      	ldr	r0, [pc, #40]	; (800a51c <MX_USB_HOST_Init+0x44>)
 800a4f4:	f7fe fe25 	bl	8009142 <USBH_RegisterClass>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d001      	beq.n	800a502 <MX_USB_HOST_Init+0x2a>
 800a4fe:	f7f6 fe1f 	bl	8001140 <Error_Handler>
 800a502:	4806      	ldr	r0, [pc, #24]	; (800a51c <MX_USB_HOST_Init+0x44>)
 800a504:	f7fe feaa 	bl	800925c <USBH_Start>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <MX_USB_HOST_Init+0x3a>
 800a50e:	f7f6 fe17 	bl	8001140 <Error_Handler>
 800a512:	bf00      	nop
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	0800a539 	.word	0x0800a539
 800a51c:	20000814 	.word	0x20000814
 800a520:	20000028 	.word	0x20000028

0800a524 <MX_USB_HOST_Process>:
 800a524:	b580      	push	{r7, lr}
 800a526:	af00      	add	r7, sp, #0
 800a528:	4802      	ldr	r0, [pc, #8]	; (800a534 <MX_USB_HOST_Process+0x10>)
 800a52a:	f7fe fea7 	bl	800927c <USBH_Process>
 800a52e:	bf00      	nop
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	20000814 	.word	0x20000814

0800a538 <USBH_UserProcess>:
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	460b      	mov	r3, r1
 800a542:	70fb      	strb	r3, [r7, #3]
 800a544:	78fb      	ldrb	r3, [r7, #3]
 800a546:	3b01      	subs	r3, #1
 800a548:	2b04      	cmp	r3, #4
 800a54a:	d819      	bhi.n	800a580 <USBH_UserProcess+0x48>
 800a54c:	a201      	add	r2, pc, #4	; (adr r2, 800a554 <USBH_UserProcess+0x1c>)
 800a54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a552:	bf00      	nop
 800a554:	0800a581 	.word	0x0800a581
 800a558:	0800a571 	.word	0x0800a571
 800a55c:	0800a581 	.word	0x0800a581
 800a560:	0800a579 	.word	0x0800a579
 800a564:	0800a569 	.word	0x0800a569
 800a568:	4b09      	ldr	r3, [pc, #36]	; (800a590 <USBH_UserProcess+0x58>)
 800a56a:	2203      	movs	r2, #3
 800a56c:	701a      	strb	r2, [r3, #0]
 800a56e:	e008      	b.n	800a582 <USBH_UserProcess+0x4a>
 800a570:	4b07      	ldr	r3, [pc, #28]	; (800a590 <USBH_UserProcess+0x58>)
 800a572:	2202      	movs	r2, #2
 800a574:	701a      	strb	r2, [r3, #0]
 800a576:	e004      	b.n	800a582 <USBH_UserProcess+0x4a>
 800a578:	4b05      	ldr	r3, [pc, #20]	; (800a590 <USBH_UserProcess+0x58>)
 800a57a:	2201      	movs	r2, #1
 800a57c:	701a      	strb	r2, [r3, #0]
 800a57e:	e000      	b.n	800a582 <USBH_UserProcess+0x4a>
 800a580:	bf00      	nop
 800a582:	bf00      	nop
 800a584:	370c      	adds	r7, #12
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	200004dc 	.word	0x200004dc

0800a594 <HAL_HCD_MspInit>:
 800a594:	b580      	push	{r7, lr}
 800a596:	b08a      	sub	sp, #40	; 0x28
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	f107 0314 	add.w	r3, r7, #20
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	601a      	str	r2, [r3, #0]
 800a5a4:	605a      	str	r2, [r3, #4]
 800a5a6:	609a      	str	r2, [r3, #8]
 800a5a8:	60da      	str	r2, [r3, #12]
 800a5aa:	611a      	str	r2, [r3, #16]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5b4:	d14e      	bne.n	800a654 <HAL_HCD_MspInit+0xc0>
 800a5b6:	4b29      	ldr	r3, [pc, #164]	; (800a65c <HAL_HCD_MspInit+0xc8>)
 800a5b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ba:	4a28      	ldr	r2, [pc, #160]	; (800a65c <HAL_HCD_MspInit+0xc8>)
 800a5bc:	f043 0301 	orr.w	r3, r3, #1
 800a5c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a5c2:	4b26      	ldr	r3, [pc, #152]	; (800a65c <HAL_HCD_MspInit+0xc8>)
 800a5c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5c6:	f003 0301 	and.w	r3, r3, #1
 800a5ca:	613b      	str	r3, [r7, #16]
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a5d2:	617b      	str	r3, [r7, #20]
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	61bb      	str	r3, [r7, #24]
 800a5d8:	2300      	movs	r3, #0
 800a5da:	61fb      	str	r3, [r7, #28]
 800a5dc:	2303      	movs	r3, #3
 800a5de:	623b      	str	r3, [r7, #32]
 800a5e0:	230a      	movs	r3, #10
 800a5e2:	627b      	str	r3, [r7, #36]	; 0x24
 800a5e4:	f107 0314 	add.w	r3, r7, #20
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a5ee:	f7f7 fe15 	bl	800221c <HAL_GPIO_Init>
 800a5f2:	4b1a      	ldr	r3, [pc, #104]	; (800a65c <HAL_HCD_MspInit+0xc8>)
 800a5f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5f6:	4a19      	ldr	r2, [pc, #100]	; (800a65c <HAL_HCD_MspInit+0xc8>)
 800a5f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a5fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a5fe:	4b17      	ldr	r3, [pc, #92]	; (800a65c <HAL_HCD_MspInit+0xc8>)
 800a600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a602:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a606:	60fb      	str	r3, [r7, #12]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	4b14      	ldr	r3, [pc, #80]	; (800a65c <HAL_HCD_MspInit+0xc8>)
 800a60c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a60e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a612:	2b00      	cmp	r3, #0
 800a614:	d114      	bne.n	800a640 <HAL_HCD_MspInit+0xac>
 800a616:	4b11      	ldr	r3, [pc, #68]	; (800a65c <HAL_HCD_MspInit+0xc8>)
 800a618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a61a:	4a10      	ldr	r2, [pc, #64]	; (800a65c <HAL_HCD_MspInit+0xc8>)
 800a61c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a620:	6593      	str	r3, [r2, #88]	; 0x58
 800a622:	4b0e      	ldr	r3, [pc, #56]	; (800a65c <HAL_HCD_MspInit+0xc8>)
 800a624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a62a:	60bb      	str	r3, [r7, #8]
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	f7fa f947 	bl	80048c0 <HAL_PWREx_EnableVddUSB>
 800a632:	4b0a      	ldr	r3, [pc, #40]	; (800a65c <HAL_HCD_MspInit+0xc8>)
 800a634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a636:	4a09      	ldr	r2, [pc, #36]	; (800a65c <HAL_HCD_MspInit+0xc8>)
 800a638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a63c:	6593      	str	r3, [r2, #88]	; 0x58
 800a63e:	e001      	b.n	800a644 <HAL_HCD_MspInit+0xb0>
 800a640:	f7fa f93e 	bl	80048c0 <HAL_PWREx_EnableVddUSB>
 800a644:	2200      	movs	r2, #0
 800a646:	2100      	movs	r1, #0
 800a648:	2043      	movs	r0, #67	; 0x43
 800a64a:	f7f7 fdb0 	bl	80021ae <HAL_NVIC_SetPriority>
 800a64e:	2043      	movs	r0, #67	; 0x43
 800a650:	f7f7 fdc9 	bl	80021e6 <HAL_NVIC_EnableIRQ>
 800a654:	bf00      	nop
 800a656:	3728      	adds	r7, #40	; 0x28
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	40021000 	.word	0x40021000

0800a660 <HAL_HCD_SOF_Callback>:
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a66e:	4618      	mov	r0, r3
 800a670:	f7ff f8b5 	bl	80097de <USBH_LL_IncTimer>
 800a674:	bf00      	nop
 800a676:	3708      	adds	r7, #8
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <HAL_HCD_Connect_Callback>:
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7ff f8fa 	bl	8009884 <USBH_LL_Connect>
 800a690:	bf00      	nop
 800a692:	3708      	adds	r7, #8
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <HAL_HCD_Disconnect_Callback>:
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7ff f912 	bl	80098d0 <USBH_LL_Disconnect>
 800a6ac:	bf00      	nop
 800a6ae:	3708      	adds	r7, #8
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <HAL_HCD_HC_NotifyURBChange_Callback>:
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	460b      	mov	r3, r1
 800a6be:	70fb      	strb	r3, [r7, #3]
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	70bb      	strb	r3, [r7, #2]
 800a6c4:	bf00      	nop
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <HAL_HCD_PortEnabled_Callback>:
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7ff f8a7 	bl	8009832 <USBH_LL_PortEnabled>
 800a6e4:	bf00      	nop
 800a6e6:	3708      	adds	r7, #8
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <HAL_HCD_PortDisabled_Callback>:
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7ff f8a7 	bl	800984e <USBH_LL_PortDisabled>
 800a700:	bf00      	nop
 800a702:	3708      	adds	r7, #8
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <USBH_LL_Init>:
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800a716:	2b01      	cmp	r3, #1
 800a718:	d12a      	bne.n	800a770 <USBH_LL_Init+0x68>
 800a71a:	4a18      	ldr	r2, [pc, #96]	; (800a77c <USBH_LL_Init+0x74>)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4a15      	ldr	r2, [pc, #84]	; (800a77c <USBH_LL_Init+0x74>)
 800a726:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
 800a72a:	4b14      	ldr	r3, [pc, #80]	; (800a77c <USBH_LL_Init+0x74>)
 800a72c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a730:	601a      	str	r2, [r3, #0]
 800a732:	4b12      	ldr	r3, [pc, #72]	; (800a77c <USBH_LL_Init+0x74>)
 800a734:	2208      	movs	r2, #8
 800a736:	609a      	str	r2, [r3, #8]
 800a738:	4b10      	ldr	r3, [pc, #64]	; (800a77c <USBH_LL_Init+0x74>)
 800a73a:	2201      	movs	r2, #1
 800a73c:	60da      	str	r2, [r3, #12]
 800a73e:	4b0f      	ldr	r3, [pc, #60]	; (800a77c <USBH_LL_Init+0x74>)
 800a740:	2200      	movs	r2, #0
 800a742:	611a      	str	r2, [r3, #16]
 800a744:	4b0d      	ldr	r3, [pc, #52]	; (800a77c <USBH_LL_Init+0x74>)
 800a746:	2202      	movs	r2, #2
 800a748:	619a      	str	r2, [r3, #24]
 800a74a:	4b0c      	ldr	r3, [pc, #48]	; (800a77c <USBH_LL_Init+0x74>)
 800a74c:	2200      	movs	r2, #0
 800a74e:	61da      	str	r2, [r3, #28]
 800a750:	480a      	ldr	r0, [pc, #40]	; (800a77c <USBH_LL_Init+0x74>)
 800a752:	f7f7 ff3b 	bl	80025cc <HAL_HCD_Init>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d001      	beq.n	800a760 <USBH_LL_Init+0x58>
 800a75c:	f7f6 fcf0 	bl	8001140 <Error_Handler>
 800a760:	4806      	ldr	r0, [pc, #24]	; (800a77c <USBH_LL_Init+0x74>)
 800a762:	f7f8 fb33 	bl	8002dcc <HAL_HCD_GetCurrentFrame>
 800a766:	4603      	mov	r3, r0
 800a768:	4619      	mov	r1, r3
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f7ff f828 	bl	80097c0 <USBH_LL_SetTimer>
 800a770:	2300      	movs	r3, #0
 800a772:	4618      	mov	r0, r3
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	20000be0 	.word	0x20000be0

0800a780 <USBH_LL_Start>:
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	2300      	movs	r3, #0
 800a78a:	73fb      	strb	r3, [r7, #15]
 800a78c:	2300      	movs	r3, #0
 800a78e:	73bb      	strb	r3, [r7, #14]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a796:	4618      	mov	r0, r3
 800a798:	f7f8 faa0 	bl	8002cdc <HAL_HCD_Start>
 800a79c:	4603      	mov	r3, r0
 800a79e:	73fb      	strb	r3, [r7, #15]
 800a7a0:	7bfb      	ldrb	r3, [r7, #15]
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f000 f95c 	bl	800aa60 <USBH_Get_USB_Status>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	73bb      	strb	r3, [r7, #14]
 800a7ac:	7bbb      	ldrb	r3, [r7, #14]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3710      	adds	r7, #16
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <USBH_LL_Stop>:
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b084      	sub	sp, #16
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
 800a7be:	2300      	movs	r3, #0
 800a7c0:	73fb      	strb	r3, [r7, #15]
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	73bb      	strb	r3, [r7, #14]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7f8 faa8 	bl	8002d22 <HAL_HCD_Stop>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	73fb      	strb	r3, [r7, #15]
 800a7d6:	7bfb      	ldrb	r3, [r7, #15]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f000 f941 	bl	800aa60 <USBH_Get_USB_Status>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	73bb      	strb	r3, [r7, #14]
 800a7e2:	7bbb      	ldrb	r3, [r7, #14]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <USBH_LL_GetSpeed>:
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	73fb      	strb	r3, [r7, #15]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7f8 faf2 	bl	8002de8 <HAL_HCD_GetCurrentSpeed>
 800a804:	4603      	mov	r3, r0
 800a806:	2b01      	cmp	r3, #1
 800a808:	d007      	beq.n	800a81a <USBH_LL_GetSpeed+0x2e>
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d302      	bcc.n	800a814 <USBH_LL_GetSpeed+0x28>
 800a80e:	2b02      	cmp	r3, #2
 800a810:	d006      	beq.n	800a820 <USBH_LL_GetSpeed+0x34>
 800a812:	e008      	b.n	800a826 <USBH_LL_GetSpeed+0x3a>
 800a814:	2300      	movs	r3, #0
 800a816:	73fb      	strb	r3, [r7, #15]
 800a818:	e008      	b.n	800a82c <USBH_LL_GetSpeed+0x40>
 800a81a:	2301      	movs	r3, #1
 800a81c:	73fb      	strb	r3, [r7, #15]
 800a81e:	e005      	b.n	800a82c <USBH_LL_GetSpeed+0x40>
 800a820:	2302      	movs	r3, #2
 800a822:	73fb      	strb	r3, [r7, #15]
 800a824:	e002      	b.n	800a82c <USBH_LL_GetSpeed+0x40>
 800a826:	2301      	movs	r3, #1
 800a828:	73fb      	strb	r3, [r7, #15]
 800a82a:	bf00      	nop
 800a82c:	7bfb      	ldrb	r3, [r7, #15]
 800a82e:	4618      	mov	r0, r3
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <USBH_LL_ResetPort>:
 800a836:	b580      	push	{r7, lr}
 800a838:	b084      	sub	sp, #16
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
 800a83e:	2300      	movs	r3, #0
 800a840:	73fb      	strb	r3, [r7, #15]
 800a842:	2300      	movs	r3, #0
 800a844:	73bb      	strb	r3, [r7, #14]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7f8 fa85 	bl	8002d5c <HAL_HCD_ResetPort>
 800a852:	4603      	mov	r3, r0
 800a854:	73fb      	strb	r3, [r7, #15]
 800a856:	7bfb      	ldrb	r3, [r7, #15]
 800a858:	4618      	mov	r0, r3
 800a85a:	f000 f901 	bl	800aa60 <USBH_Get_USB_Status>
 800a85e:	4603      	mov	r3, r0
 800a860:	73bb      	strb	r3, [r7, #14]
 800a862:	7bbb      	ldrb	r3, [r7, #14]
 800a864:	4618      	mov	r0, r3
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <USBH_LL_GetLastXferSize>:
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	460b      	mov	r3, r1
 800a876:	70fb      	strb	r3, [r7, #3]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a87e:	78fa      	ldrb	r2, [r7, #3]
 800a880:	4611      	mov	r1, r2
 800a882:	4618      	mov	r0, r3
 800a884:	f7f8 fa8d 	bl	8002da2 <HAL_HCD_HC_GetXferCount>
 800a888:	4603      	mov	r3, r0
 800a88a:	4618      	mov	r0, r3
 800a88c:	3708      	adds	r7, #8
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}

0800a892 <USBH_LL_OpenPipe>:
 800a892:	b590      	push	{r4, r7, lr}
 800a894:	b089      	sub	sp, #36	; 0x24
 800a896:	af04      	add	r7, sp, #16
 800a898:	6078      	str	r0, [r7, #4]
 800a89a:	4608      	mov	r0, r1
 800a89c:	4611      	mov	r1, r2
 800a89e:	461a      	mov	r2, r3
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	70fb      	strb	r3, [r7, #3]
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	70bb      	strb	r3, [r7, #2]
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	707b      	strb	r3, [r7, #1]
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	73fb      	strb	r3, [r7, #15]
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	73bb      	strb	r3, [r7, #14]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800a8ba:	787c      	ldrb	r4, [r7, #1]
 800a8bc:	78ba      	ldrb	r2, [r7, #2]
 800a8be:	78f9      	ldrb	r1, [r7, #3]
 800a8c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a8c2:	9302      	str	r3, [sp, #8]
 800a8c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a8c8:	9301      	str	r3, [sp, #4]
 800a8ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	4623      	mov	r3, r4
 800a8d2:	f7f7 fedd 	bl	8002690 <HAL_HCD_HC_Init>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	73fb      	strb	r3, [r7, #15]
 800a8da:	7bfb      	ldrb	r3, [r7, #15]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f000 f8bf 	bl	800aa60 <USBH_Get_USB_Status>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	73bb      	strb	r3, [r7, #14]
 800a8e6:	7bbb      	ldrb	r3, [r7, #14]
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3714      	adds	r7, #20
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd90      	pop	{r4, r7, pc}

0800a8f0 <USBH_LL_ClosePipe>:
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	70fb      	strb	r3, [r7, #3]
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	73fb      	strb	r3, [r7, #15]
 800a900:	2300      	movs	r3, #0
 800a902:	73bb      	strb	r3, [r7, #14]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a90a:	78fa      	ldrb	r2, [r7, #3]
 800a90c:	4611      	mov	r1, r2
 800a90e:	4618      	mov	r0, r3
 800a910:	f7f7 ff56 	bl	80027c0 <HAL_HCD_HC_Halt>
 800a914:	4603      	mov	r3, r0
 800a916:	73fb      	strb	r3, [r7, #15]
 800a918:	7bfb      	ldrb	r3, [r7, #15]
 800a91a:	4618      	mov	r0, r3
 800a91c:	f000 f8a0 	bl	800aa60 <USBH_Get_USB_Status>
 800a920:	4603      	mov	r3, r0
 800a922:	73bb      	strb	r3, [r7, #14]
 800a924:	7bbb      	ldrb	r3, [r7, #14]
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <USBH_LL_SubmitURB>:
 800a92e:	b590      	push	{r4, r7, lr}
 800a930:	b089      	sub	sp, #36	; 0x24
 800a932:	af04      	add	r7, sp, #16
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	4608      	mov	r0, r1
 800a938:	4611      	mov	r1, r2
 800a93a:	461a      	mov	r2, r3
 800a93c:	4603      	mov	r3, r0
 800a93e:	70fb      	strb	r3, [r7, #3]
 800a940:	460b      	mov	r3, r1
 800a942:	70bb      	strb	r3, [r7, #2]
 800a944:	4613      	mov	r3, r2
 800a946:	707b      	strb	r3, [r7, #1]
 800a948:	2300      	movs	r3, #0
 800a94a:	73fb      	strb	r3, [r7, #15]
 800a94c:	2300      	movs	r3, #0
 800a94e:	73bb      	strb	r3, [r7, #14]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800a956:	787c      	ldrb	r4, [r7, #1]
 800a958:	78ba      	ldrb	r2, [r7, #2]
 800a95a:	78f9      	ldrb	r1, [r7, #3]
 800a95c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a960:	9303      	str	r3, [sp, #12]
 800a962:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a964:	9302      	str	r3, [sp, #8]
 800a966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a968:	9301      	str	r3, [sp, #4]
 800a96a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	4623      	mov	r3, r4
 800a972:	f7f7 ff49 	bl	8002808 <HAL_HCD_HC_SubmitRequest>
 800a976:	4603      	mov	r3, r0
 800a978:	73fb      	strb	r3, [r7, #15]
 800a97a:	7bfb      	ldrb	r3, [r7, #15]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f000 f86f 	bl	800aa60 <USBH_Get_USB_Status>
 800a982:	4603      	mov	r3, r0
 800a984:	73bb      	strb	r3, [r7, #14]
 800a986:	7bbb      	ldrb	r3, [r7, #14]
 800a988:	4618      	mov	r0, r3
 800a98a:	3714      	adds	r7, #20
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd90      	pop	{r4, r7, pc}

0800a990 <USBH_LL_GetURBState>:
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	460b      	mov	r3, r1
 800a99a:	70fb      	strb	r3, [r7, #3]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a9a2:	78fa      	ldrb	r2, [r7, #3]
 800a9a4:	4611      	mov	r1, r2
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7f8 f9e6 	bl	8002d78 <HAL_HCD_HC_GetURBState>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <USBH_LL_DriverVBUS>:
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b082      	sub	sp, #8
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
 800a9be:	460b      	mov	r3, r1
 800a9c0:	70fb      	strb	r3, [r7, #3]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d103      	bne.n	800a9d4 <USBH_LL_DriverVBUS+0x1e>
 800a9cc:	78fb      	ldrb	r3, [r7, #3]
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 f872 	bl	800aab8 <MX_DriverVbusFS>
 800a9d4:	20c8      	movs	r0, #200	; 0xc8
 800a9d6:	f7f7 faed 	bl	8001fb4 <HAL_Delay>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3708      	adds	r7, #8
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <USBH_LL_SetToggle>:
 800a9e4:	b480      	push	{r7}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	70fb      	strb	r3, [r7, #3]
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	70bb      	strb	r3, [r7, #2]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a9fa:	60fb      	str	r3, [r7, #12]
 800a9fc:	78fa      	ldrb	r2, [r7, #3]
 800a9fe:	68f9      	ldr	r1, [r7, #12]
 800aa00:	4613      	mov	r3, r2
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	4413      	add	r3, r2
 800aa06:	00db      	lsls	r3, r3, #3
 800aa08:	440b      	add	r3, r1
 800aa0a:	333b      	adds	r3, #59	; 0x3b
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00a      	beq.n	800aa28 <USBH_LL_SetToggle+0x44>
 800aa12:	78fa      	ldrb	r2, [r7, #3]
 800aa14:	68f9      	ldr	r1, [r7, #12]
 800aa16:	4613      	mov	r3, r2
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	4413      	add	r3, r2
 800aa1c:	00db      	lsls	r3, r3, #3
 800aa1e:	440b      	add	r3, r1
 800aa20:	3350      	adds	r3, #80	; 0x50
 800aa22:	78ba      	ldrb	r2, [r7, #2]
 800aa24:	701a      	strb	r2, [r3, #0]
 800aa26:	e009      	b.n	800aa3c <USBH_LL_SetToggle+0x58>
 800aa28:	78fa      	ldrb	r2, [r7, #3]
 800aa2a:	68f9      	ldr	r1, [r7, #12]
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	4413      	add	r3, r2
 800aa32:	00db      	lsls	r3, r3, #3
 800aa34:	440b      	add	r3, r1
 800aa36:	3351      	adds	r3, #81	; 0x51
 800aa38:	78ba      	ldrb	r2, [r7, #2]
 800aa3a:	701a      	strb	r2, [r3, #0]
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3714      	adds	r7, #20
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr

0800aa4a <USBH_Delay>:
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b082      	sub	sp, #8
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f7f7 faae 	bl	8001fb4 <HAL_Delay>
 800aa58:	bf00      	nop
 800aa5a:	3708      	adds	r7, #8
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <USBH_Get_USB_Status>:
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	4603      	mov	r3, r0
 800aa68:	71fb      	strb	r3, [r7, #7]
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	73fb      	strb	r3, [r7, #15]
 800aa6e:	79fb      	ldrb	r3, [r7, #7]
 800aa70:	2b03      	cmp	r3, #3
 800aa72:	d817      	bhi.n	800aaa4 <USBH_Get_USB_Status+0x44>
 800aa74:	a201      	add	r2, pc, #4	; (adr r2, 800aa7c <USBH_Get_USB_Status+0x1c>)
 800aa76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa7a:	bf00      	nop
 800aa7c:	0800aa8d 	.word	0x0800aa8d
 800aa80:	0800aa93 	.word	0x0800aa93
 800aa84:	0800aa99 	.word	0x0800aa99
 800aa88:	0800aa9f 	.word	0x0800aa9f
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	73fb      	strb	r3, [r7, #15]
 800aa90:	e00b      	b.n	800aaaa <USBH_Get_USB_Status+0x4a>
 800aa92:	2302      	movs	r3, #2
 800aa94:	73fb      	strb	r3, [r7, #15]
 800aa96:	e008      	b.n	800aaaa <USBH_Get_USB_Status+0x4a>
 800aa98:	2301      	movs	r3, #1
 800aa9a:	73fb      	strb	r3, [r7, #15]
 800aa9c:	e005      	b.n	800aaaa <USBH_Get_USB_Status+0x4a>
 800aa9e:	2302      	movs	r3, #2
 800aaa0:	73fb      	strb	r3, [r7, #15]
 800aaa2:	e002      	b.n	800aaaa <USBH_Get_USB_Status+0x4a>
 800aaa4:	2302      	movs	r3, #2
 800aaa6:	73fb      	strb	r3, [r7, #15]
 800aaa8:	bf00      	nop
 800aaaa:	7bfb      	ldrb	r3, [r7, #15]
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <MX_DriverVbusFS>:
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	4603      	mov	r3, r0
 800aac0:	71fb      	strb	r3, [r7, #7]
 800aac2:	79fb      	ldrb	r3, [r7, #7]
 800aac4:	73fb      	strb	r3, [r7, #15]
 800aac6:	79fb      	ldrb	r3, [r7, #7]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d102      	bne.n	800aad2 <MX_DriverVbusFS+0x1a>
 800aacc:	2301      	movs	r3, #1
 800aace:	73fb      	strb	r3, [r7, #15]
 800aad0:	e001      	b.n	800aad6 <MX_DriverVbusFS+0x1e>
 800aad2:	2300      	movs	r3, #0
 800aad4:	73fb      	strb	r3, [r7, #15]
 800aad6:	7bfb      	ldrb	r3, [r7, #15]
 800aad8:	461a      	mov	r2, r3
 800aada:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aade:	4803      	ldr	r0, [pc, #12]	; (800aaec <MX_DriverVbusFS+0x34>)
 800aae0:	f7f7 fd5c 	bl	800259c <HAL_GPIO_WritePin>
 800aae4:	bf00      	nop
 800aae6:	3710      	adds	r7, #16
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	48000800 	.word	0x48000800

0800aaf0 <__errno>:
 800aaf0:	4b01      	ldr	r3, [pc, #4]	; (800aaf8 <__errno+0x8>)
 800aaf2:	6818      	ldr	r0, [r3, #0]
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	20000048 	.word	0x20000048

0800aafc <__libc_init_array>:
 800aafc:	b570      	push	{r4, r5, r6, lr}
 800aafe:	4e0d      	ldr	r6, [pc, #52]	; (800ab34 <__libc_init_array+0x38>)
 800ab00:	4c0d      	ldr	r4, [pc, #52]	; (800ab38 <__libc_init_array+0x3c>)
 800ab02:	1ba4      	subs	r4, r4, r6
 800ab04:	10a4      	asrs	r4, r4, #2
 800ab06:	2500      	movs	r5, #0
 800ab08:	42a5      	cmp	r5, r4
 800ab0a:	d109      	bne.n	800ab20 <__libc_init_array+0x24>
 800ab0c:	4e0b      	ldr	r6, [pc, #44]	; (800ab3c <__libc_init_array+0x40>)
 800ab0e:	4c0c      	ldr	r4, [pc, #48]	; (800ab40 <__libc_init_array+0x44>)
 800ab10:	f000 f8ea 	bl	800ace8 <_init>
 800ab14:	1ba4      	subs	r4, r4, r6
 800ab16:	10a4      	asrs	r4, r4, #2
 800ab18:	2500      	movs	r5, #0
 800ab1a:	42a5      	cmp	r5, r4
 800ab1c:	d105      	bne.n	800ab2a <__libc_init_array+0x2e>
 800ab1e:	bd70      	pop	{r4, r5, r6, pc}
 800ab20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ab24:	4798      	blx	r3
 800ab26:	3501      	adds	r5, #1
 800ab28:	e7ee      	b.n	800ab08 <__libc_init_array+0xc>
 800ab2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ab2e:	4798      	blx	r3
 800ab30:	3501      	adds	r5, #1
 800ab32:	e7f2      	b.n	800ab1a <__libc_init_array+0x1e>
 800ab34:	0800b874 	.word	0x0800b874
 800ab38:	0800b874 	.word	0x0800b874
 800ab3c:	0800b874 	.word	0x0800b874
 800ab40:	0800b878 	.word	0x0800b878

0800ab44 <malloc>:
 800ab44:	4b02      	ldr	r3, [pc, #8]	; (800ab50 <malloc+0xc>)
 800ab46:	4601      	mov	r1, r0
 800ab48:	6818      	ldr	r0, [r3, #0]
 800ab4a:	f000 b861 	b.w	800ac10 <_malloc_r>
 800ab4e:	bf00      	nop
 800ab50:	20000048 	.word	0x20000048

0800ab54 <free>:
 800ab54:	4b02      	ldr	r3, [pc, #8]	; (800ab60 <free+0xc>)
 800ab56:	4601      	mov	r1, r0
 800ab58:	6818      	ldr	r0, [r3, #0]
 800ab5a:	f000 b80b 	b.w	800ab74 <_free_r>
 800ab5e:	bf00      	nop
 800ab60:	20000048 	.word	0x20000048

0800ab64 <memset>:
 800ab64:	4402      	add	r2, r0
 800ab66:	4603      	mov	r3, r0
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d100      	bne.n	800ab6e <memset+0xa>
 800ab6c:	4770      	bx	lr
 800ab6e:	f803 1b01 	strb.w	r1, [r3], #1
 800ab72:	e7f9      	b.n	800ab68 <memset+0x4>

0800ab74 <_free_r>:
 800ab74:	b538      	push	{r3, r4, r5, lr}
 800ab76:	4605      	mov	r5, r0
 800ab78:	2900      	cmp	r1, #0
 800ab7a:	d045      	beq.n	800ac08 <_free_r+0x94>
 800ab7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab80:	1f0c      	subs	r4, r1, #4
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	bfb8      	it	lt
 800ab86:	18e4      	addlt	r4, r4, r3
 800ab88:	f000 f8ac 	bl	800ace4 <__malloc_lock>
 800ab8c:	4a1f      	ldr	r2, [pc, #124]	; (800ac0c <_free_r+0x98>)
 800ab8e:	6813      	ldr	r3, [r2, #0]
 800ab90:	4610      	mov	r0, r2
 800ab92:	b933      	cbnz	r3, 800aba2 <_free_r+0x2e>
 800ab94:	6063      	str	r3, [r4, #4]
 800ab96:	6014      	str	r4, [r2, #0]
 800ab98:	4628      	mov	r0, r5
 800ab9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab9e:	f000 b8a2 	b.w	800ace6 <__malloc_unlock>
 800aba2:	42a3      	cmp	r3, r4
 800aba4:	d90c      	bls.n	800abc0 <_free_r+0x4c>
 800aba6:	6821      	ldr	r1, [r4, #0]
 800aba8:	1862      	adds	r2, r4, r1
 800abaa:	4293      	cmp	r3, r2
 800abac:	bf04      	itt	eq
 800abae:	681a      	ldreq	r2, [r3, #0]
 800abb0:	685b      	ldreq	r3, [r3, #4]
 800abb2:	6063      	str	r3, [r4, #4]
 800abb4:	bf04      	itt	eq
 800abb6:	1852      	addeq	r2, r2, r1
 800abb8:	6022      	streq	r2, [r4, #0]
 800abba:	6004      	str	r4, [r0, #0]
 800abbc:	e7ec      	b.n	800ab98 <_free_r+0x24>
 800abbe:	4613      	mov	r3, r2
 800abc0:	685a      	ldr	r2, [r3, #4]
 800abc2:	b10a      	cbz	r2, 800abc8 <_free_r+0x54>
 800abc4:	42a2      	cmp	r2, r4
 800abc6:	d9fa      	bls.n	800abbe <_free_r+0x4a>
 800abc8:	6819      	ldr	r1, [r3, #0]
 800abca:	1858      	adds	r0, r3, r1
 800abcc:	42a0      	cmp	r0, r4
 800abce:	d10b      	bne.n	800abe8 <_free_r+0x74>
 800abd0:	6820      	ldr	r0, [r4, #0]
 800abd2:	4401      	add	r1, r0
 800abd4:	1858      	adds	r0, r3, r1
 800abd6:	4282      	cmp	r2, r0
 800abd8:	6019      	str	r1, [r3, #0]
 800abda:	d1dd      	bne.n	800ab98 <_free_r+0x24>
 800abdc:	6810      	ldr	r0, [r2, #0]
 800abde:	6852      	ldr	r2, [r2, #4]
 800abe0:	605a      	str	r2, [r3, #4]
 800abe2:	4401      	add	r1, r0
 800abe4:	6019      	str	r1, [r3, #0]
 800abe6:	e7d7      	b.n	800ab98 <_free_r+0x24>
 800abe8:	d902      	bls.n	800abf0 <_free_r+0x7c>
 800abea:	230c      	movs	r3, #12
 800abec:	602b      	str	r3, [r5, #0]
 800abee:	e7d3      	b.n	800ab98 <_free_r+0x24>
 800abf0:	6820      	ldr	r0, [r4, #0]
 800abf2:	1821      	adds	r1, r4, r0
 800abf4:	428a      	cmp	r2, r1
 800abf6:	bf04      	itt	eq
 800abf8:	6811      	ldreq	r1, [r2, #0]
 800abfa:	6852      	ldreq	r2, [r2, #4]
 800abfc:	6062      	str	r2, [r4, #4]
 800abfe:	bf04      	itt	eq
 800ac00:	1809      	addeq	r1, r1, r0
 800ac02:	6021      	streq	r1, [r4, #0]
 800ac04:	605c      	str	r4, [r3, #4]
 800ac06:	e7c7      	b.n	800ab98 <_free_r+0x24>
 800ac08:	bd38      	pop	{r3, r4, r5, pc}
 800ac0a:	bf00      	nop
 800ac0c:	200004e0 	.word	0x200004e0

0800ac10 <_malloc_r>:
 800ac10:	b570      	push	{r4, r5, r6, lr}
 800ac12:	1ccd      	adds	r5, r1, #3
 800ac14:	f025 0503 	bic.w	r5, r5, #3
 800ac18:	3508      	adds	r5, #8
 800ac1a:	2d0c      	cmp	r5, #12
 800ac1c:	bf38      	it	cc
 800ac1e:	250c      	movcc	r5, #12
 800ac20:	2d00      	cmp	r5, #0
 800ac22:	4606      	mov	r6, r0
 800ac24:	db01      	blt.n	800ac2a <_malloc_r+0x1a>
 800ac26:	42a9      	cmp	r1, r5
 800ac28:	d903      	bls.n	800ac32 <_malloc_r+0x22>
 800ac2a:	230c      	movs	r3, #12
 800ac2c:	6033      	str	r3, [r6, #0]
 800ac2e:	2000      	movs	r0, #0
 800ac30:	bd70      	pop	{r4, r5, r6, pc}
 800ac32:	f000 f857 	bl	800ace4 <__malloc_lock>
 800ac36:	4a21      	ldr	r2, [pc, #132]	; (800acbc <_malloc_r+0xac>)
 800ac38:	6814      	ldr	r4, [r2, #0]
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	b991      	cbnz	r1, 800ac64 <_malloc_r+0x54>
 800ac3e:	4c20      	ldr	r4, [pc, #128]	; (800acc0 <_malloc_r+0xb0>)
 800ac40:	6823      	ldr	r3, [r4, #0]
 800ac42:	b91b      	cbnz	r3, 800ac4c <_malloc_r+0x3c>
 800ac44:	4630      	mov	r0, r6
 800ac46:	f000 f83d 	bl	800acc4 <_sbrk_r>
 800ac4a:	6020      	str	r0, [r4, #0]
 800ac4c:	4629      	mov	r1, r5
 800ac4e:	4630      	mov	r0, r6
 800ac50:	f000 f838 	bl	800acc4 <_sbrk_r>
 800ac54:	1c43      	adds	r3, r0, #1
 800ac56:	d124      	bne.n	800aca2 <_malloc_r+0x92>
 800ac58:	230c      	movs	r3, #12
 800ac5a:	6033      	str	r3, [r6, #0]
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	f000 f842 	bl	800ace6 <__malloc_unlock>
 800ac62:	e7e4      	b.n	800ac2e <_malloc_r+0x1e>
 800ac64:	680b      	ldr	r3, [r1, #0]
 800ac66:	1b5b      	subs	r3, r3, r5
 800ac68:	d418      	bmi.n	800ac9c <_malloc_r+0x8c>
 800ac6a:	2b0b      	cmp	r3, #11
 800ac6c:	d90f      	bls.n	800ac8e <_malloc_r+0x7e>
 800ac6e:	600b      	str	r3, [r1, #0]
 800ac70:	50cd      	str	r5, [r1, r3]
 800ac72:	18cc      	adds	r4, r1, r3
 800ac74:	4630      	mov	r0, r6
 800ac76:	f000 f836 	bl	800ace6 <__malloc_unlock>
 800ac7a:	f104 000b 	add.w	r0, r4, #11
 800ac7e:	1d23      	adds	r3, r4, #4
 800ac80:	f020 0007 	bic.w	r0, r0, #7
 800ac84:	1ac3      	subs	r3, r0, r3
 800ac86:	d0d3      	beq.n	800ac30 <_malloc_r+0x20>
 800ac88:	425a      	negs	r2, r3
 800ac8a:	50e2      	str	r2, [r4, r3]
 800ac8c:	e7d0      	b.n	800ac30 <_malloc_r+0x20>
 800ac8e:	428c      	cmp	r4, r1
 800ac90:	684b      	ldr	r3, [r1, #4]
 800ac92:	bf16      	itet	ne
 800ac94:	6063      	strne	r3, [r4, #4]
 800ac96:	6013      	streq	r3, [r2, #0]
 800ac98:	460c      	movne	r4, r1
 800ac9a:	e7eb      	b.n	800ac74 <_malloc_r+0x64>
 800ac9c:	460c      	mov	r4, r1
 800ac9e:	6849      	ldr	r1, [r1, #4]
 800aca0:	e7cc      	b.n	800ac3c <_malloc_r+0x2c>
 800aca2:	1cc4      	adds	r4, r0, #3
 800aca4:	f024 0403 	bic.w	r4, r4, #3
 800aca8:	42a0      	cmp	r0, r4
 800acaa:	d005      	beq.n	800acb8 <_malloc_r+0xa8>
 800acac:	1a21      	subs	r1, r4, r0
 800acae:	4630      	mov	r0, r6
 800acb0:	f000 f808 	bl	800acc4 <_sbrk_r>
 800acb4:	3001      	adds	r0, #1
 800acb6:	d0cf      	beq.n	800ac58 <_malloc_r+0x48>
 800acb8:	6025      	str	r5, [r4, #0]
 800acba:	e7db      	b.n	800ac74 <_malloc_r+0x64>
 800acbc:	200004e0 	.word	0x200004e0
 800acc0:	200004e4 	.word	0x200004e4

0800acc4 <_sbrk_r>:
 800acc4:	b538      	push	{r3, r4, r5, lr}
 800acc6:	4c06      	ldr	r4, [pc, #24]	; (800ace0 <_sbrk_r+0x1c>)
 800acc8:	2300      	movs	r3, #0
 800acca:	4605      	mov	r5, r0
 800accc:	4608      	mov	r0, r1
 800acce:	6023      	str	r3, [r4, #0]
 800acd0:	f7f6 fffa 	bl	8001cc8 <_sbrk>
 800acd4:	1c43      	adds	r3, r0, #1
 800acd6:	d102      	bne.n	800acde <_sbrk_r+0x1a>
 800acd8:	6823      	ldr	r3, [r4, #0]
 800acda:	b103      	cbz	r3, 800acde <_sbrk_r+0x1a>
 800acdc:	602b      	str	r3, [r5, #0]
 800acde:	bd38      	pop	{r3, r4, r5, pc}
 800ace0:	20000ea4 	.word	0x20000ea4

0800ace4 <__malloc_lock>:
 800ace4:	4770      	bx	lr

0800ace6 <__malloc_unlock>:
 800ace6:	4770      	bx	lr

0800ace8 <_init>:
 800ace8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acea:	bf00      	nop
 800acec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acee:	bc08      	pop	{r3}
 800acf0:	469e      	mov	lr, r3
 800acf2:	4770      	bx	lr

0800acf4 <_fini>:
 800acf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf6:	bf00      	nop
 800acf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acfa:	bc08      	pop	{r3}
 800acfc:	469e      	mov	lr, r3
 800acfe:	4770      	bx	lr
